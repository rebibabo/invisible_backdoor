<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10863.c" pos:tabs="8"><function pos:start="1:1" pos:end="537:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">vqa_decode_chunk</name><parameter_list pos:start="1:29" pos:end="1:43">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:39">VqaContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="537:1">{<block_content pos:start="5:5" pos:end="535:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:27">chunk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">byte_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:22">index</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:19">r</name></decl>, <decl pos:start="15:22" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:22" pos:end="15:22">g</name></decl>, <decl pos:start="15:25" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:25" pos:end="15:25">b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">index_shift</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">cbf0_chunk</name> <init pos:start="21:20" pos:end="21:23">= <expr pos:start="21:22" pos:end="21:23"><operator pos:start="21:22" pos:end="21:22">-</operator><literal type="number" pos:start="21:23" pos:end="21:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">cbfz_chunk</name> <init pos:start="23:20" pos:end="23:23">= <expr pos:start="23:22" pos:end="23:23"><operator pos:start="23:22" pos:end="23:22">-</operator><literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">cbp0_chunk</name> <init pos:start="25:20" pos:end="25:23">= <expr pos:start="25:22" pos:end="25:23"><operator pos:start="25:22" pos:end="25:22">-</operator><literal type="number" pos:start="25:23" pos:end="25:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">cbpz_chunk</name> <init pos:start="27:20" pos:end="27:23">= <expr pos:start="27:22" pos:end="27:23"><operator pos:start="27:22" pos:end="27:22">-</operator><literal type="number" pos:start="27:23" pos:end="27:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">cpl0_chunk</name> <init pos:start="29:20" pos:end="29:23">= <expr pos:start="29:22" pos:end="29:23"><operator pos:start="29:22" pos:end="29:22">-</operator><literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">cplz_chunk</name> <init pos:start="31:20" pos:end="31:23">= <expr pos:start="31:22" pos:end="31:23"><operator pos:start="31:22" pos:end="31:22">-</operator><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:24"><decl pos:start="33:5" pos:end="33:23"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:18">vptz_chunk</name> <init pos:start="33:20" pos:end="33:23">= <expr pos:start="33:22" pos:end="33:23"><operator pos:start="33:22" pos:end="33:22">-</operator><literal type="number" pos:start="33:23" pos:end="33:23">1</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="37:5" pos:end="37:13"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">x</name></decl>, <decl pos:start="37:12" pos:end="37:12"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:18"><decl pos:start="39:5" pos:end="39:17"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:13">lines</name> <init pos:start="39:15" pos:end="39:17">= <expr pos:start="39:17" pos:end="39:17"><literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:18"><decl pos:start="41:5" pos:end="41:17"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:25"><decl pos:start="43:5" pos:end="43:24"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:20">vector_index</name> <init pos:start="43:22" pos:end="43:24">= <expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:19"><decl pos:start="45:5" pos:end="45:18"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:14">lobyte</name> <init pos:start="45:16" pos:end="45:18">= <expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:19"><decl pos:start="47:5" pos:end="47:18"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:14">hibyte</name> <init pos:start="47:16" pos:end="47:18">= <expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:20"><decl pos:start="49:5" pos:end="49:19"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:15">lobytes</name> <init pos:start="49:17" pos:end="49:19">= <expr pos:start="49:19" pos:end="49:19"><literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:44"><decl pos:start="51:5" pos:end="51:43"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:15">hibytes</name> <init pos:start="51:17" pos:end="51:43">= <expr pos:start="51:19" pos:end="51:43"><name pos:start="51:19" pos:end="51:39"><name pos:start="51:19" pos:end="51:19">s</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:39">decode_buffer_size</name></name> <operator pos:start="51:41" pos:end="51:41">/</operator> <literal type="number" pos:start="51:43" pos:end="51:43">2</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:66">/* first, traverse through the frame and find the subchunks */</comment>

    <while pos:start="57:5" pos:end="151:5">while <condition pos:start="57:11" pos:end="57:27">(<expr pos:start="57:12" pos:end="57:26"><name pos:start="57:12" pos:end="57:16">index</name> <operator pos:start="57:18" pos:end="57:18">&lt;</operator> <name pos:start="57:20" pos:end="57:26"><name pos:start="57:20" pos:end="57:20">s</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:26">size</name></name></expr>)</condition> <block pos:start="57:29" pos:end="151:5">{<block_content pos:start="61:9" pos:end="149:64">



        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:18">chunk_type</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:44"><name pos:start="61:22" pos:end="61:28">AV_RB32</name><argument_list pos:start="61:29" pos:end="61:44">(<argument pos:start="61:30" pos:end="61:43"><expr pos:start="61:30" pos:end="61:43"><operator pos:start="61:30" pos:end="61:30">&amp;</operator><name pos:start="61:31" pos:end="61:43"><name pos:start="61:31" pos:end="61:31">s</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:36">buf</name><index pos:start="61:37" pos:end="61:43">[<expr pos:start="61:38" pos:end="61:42"><name pos:start="61:38" pos:end="61:42">index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:49"><expr pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:18">chunk_size</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:48"><name pos:start="63:22" pos:end="63:28">AV_RB32</name><argument_list pos:start="63:29" pos:end="63:48">(<argument pos:start="63:30" pos:end="63:47"><expr pos:start="63:30" pos:end="63:47"><operator pos:start="63:30" pos:end="63:30">&amp;</operator><name pos:start="63:31" pos:end="63:47"><name pos:start="63:31" pos:end="63:31">s</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:36">buf</name><index pos:start="63:37" pos:end="63:47">[<expr pos:start="63:38" pos:end="63:46"><name pos:start="63:38" pos:end="63:42">index</name> <operator pos:start="63:44" pos:end="63:44">+</operator> <literal type="number" pos:start="63:46" pos:end="63:46">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="67:9" pos:end="143:9">switch <condition pos:start="67:16" pos:end="67:27">(<expr pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:26">chunk_type</name></expr>)</condition> <block pos:start="67:29" pos:end="143:9">{<block_content pos:start="71:9" pos:end="141:18">



        <case pos:start="71:9" pos:end="71:22">case <expr pos:start="71:14" pos:end="71:21"><name pos:start="71:14" pos:end="71:21">CBF0_TAG</name></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:31"><expr pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:22">cbf0_chunk</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:30">index</name></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>



        <case pos:start="79:9" pos:end="79:22">case <expr pos:start="79:14" pos:end="79:21"><name pos:start="79:14" pos:end="79:21">CBFZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:22">cbfz_chunk</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:30">index</name></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>



        <case pos:start="87:9" pos:end="87:22">case <expr pos:start="87:14" pos:end="87:21"><name pos:start="87:14" pos:end="87:21">CBP0_TAG</name></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:22">cbp0_chunk</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <name pos:start="89:26" pos:end="89:30">index</name></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>



        <case pos:start="95:9" pos:end="95:22">case <expr pos:start="95:14" pos:end="95:21"><name pos:start="95:14" pos:end="95:21">CBPZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:31"><expr pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:22">cbpz_chunk</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:30">index</name></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>



        <case pos:start="103:9" pos:end="103:22">case <expr pos:start="103:14" pos:end="103:21"><name pos:start="103:14" pos:end="103:21">CPL0_TAG</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:31"><expr pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:22">cpl0_chunk</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:30">index</name></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>



        <case pos:start="111:9" pos:end="111:22">case <expr pos:start="111:14" pos:end="111:21"><name pos:start="111:14" pos:end="111:21">CPLZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:31"><expr pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:22">cplz_chunk</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:30">index</name></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>



        <case pos:start="119:9" pos:end="119:22">case <expr pos:start="119:14" pos:end="119:21"><name pos:start="119:14" pos:end="119:21">VPTZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:31"><expr pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:22">vptz_chunk</name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:30">index</name></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>



        <default pos:start="127:9" pos:end="127:16">default:</default>

            <expr_stmt pos:start="129:13" pos:end="139:24"><expr pos:start="129:13" pos:end="139:23"><call pos:start="129:13" pos:end="139:23"><name pos:start="129:13" pos:end="129:18">av_log</name><argument_list pos:start="129:19" pos:end="139:23">(<argument pos:start="129:20" pos:end="129:27"><expr pos:start="129:20" pos:end="129:27"><name pos:start="129:20" pos:end="129:27"><name pos:start="129:20" pos:end="129:20">s</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:27">avctx</name></name></expr></argument>, <argument pos:start="129:30" pos:end="129:41"><expr pos:start="129:30" pos:end="129:41"><name pos:start="129:30" pos:end="129:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:44" pos:end="129:101"><expr pos:start="129:44" pos:end="129:101"><literal type="string" pos:start="129:44" pos:end="129:101">"  VQA video: Found unknown chunk type: %c%c%c%c (%08X)\n"</literal></expr></argument>,

            <argument pos:start="131:13" pos:end="131:37"><expr pos:start="131:13" pos:end="131:37"><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:23">chunk_type</name> <operator pos:start="131:25" pos:end="131:26">&gt;&gt;</operator> <literal type="number" pos:start="131:28" pos:end="131:29">24</literal><operator pos:start="131:30" pos:end="131:30">)</operator> <operator pos:start="131:32" pos:end="131:32">&amp;</operator> <literal type="number" pos:start="131:34" pos:end="131:37">0xFF</literal></expr></argument>,

            <argument pos:start="133:13" pos:end="133:37"><expr pos:start="133:13" pos:end="133:37"><operator pos:start="133:13" pos:end="133:13">(</operator><name pos:start="133:14" pos:end="133:23">chunk_type</name> <operator pos:start="133:25" pos:end="133:26">&gt;&gt;</operator> <literal type="number" pos:start="133:28" pos:end="133:29">16</literal><operator pos:start="133:30" pos:end="133:30">)</operator> <operator pos:start="133:32" pos:end="133:32">&amp;</operator> <literal type="number" pos:start="133:34" pos:end="133:37">0xFF</literal></expr></argument>,

            <argument pos:start="135:13" pos:end="135:37"><expr pos:start="135:13" pos:end="135:37"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:23">chunk_type</name> <operator pos:start="135:25" pos:end="135:26">&gt;&gt;</operator>  <literal type="number" pos:start="135:29" pos:end="135:29">8</literal><operator pos:start="135:30" pos:end="135:30">)</operator> <operator pos:start="135:32" pos:end="135:32">&amp;</operator> <literal type="number" pos:start="135:34" pos:end="135:37">0xFF</literal></expr></argument>,

            <argument pos:start="137:13" pos:end="137:37"><expr pos:start="137:13" pos:end="137:37"><operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:23">chunk_type</name> <operator pos:start="137:25" pos:end="137:26">&gt;&gt;</operator>  <literal type="number" pos:start="137:29" pos:end="137:29">0</literal><operator pos:start="137:30" pos:end="137:30">)</operator> <operator pos:start="137:32" pos:end="137:32">&amp;</operator> <literal type="number" pos:start="137:34" pos:end="137:37">0xFF</literal></expr></argument>,

            <argument pos:start="139:13" pos:end="139:22"><expr pos:start="139:13" pos:end="139:22"><name pos:start="139:13" pos:end="139:22">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="147:9" pos:end="147:38"><expr pos:start="147:9" pos:end="147:37"><name pos:start="147:9" pos:end="147:17">byte_skip</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <name pos:start="147:21" pos:end="147:30">chunk_size</name> <operator pos:start="147:32" pos:end="147:32">&amp;</operator> <literal type="number" pos:start="147:34" pos:end="147:37">0x01</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:64"><expr pos:start="149:9" pos:end="149:63"><name pos:start="149:9" pos:end="149:13">index</name> <operator pos:start="149:15" pos:end="149:16">+=</operator> <operator pos:start="149:18" pos:end="149:18">(</operator><name pos:start="149:19" pos:end="149:37">CHUNK_PREAMBLE_SIZE</name> <operator pos:start="149:39" pos:end="149:39">+</operator> <name pos:start="149:41" pos:end="149:50">chunk_size</name> <operator pos:start="149:52" pos:end="149:52">+</operator> <name pos:start="149:54" pos:end="149:62">byte_skip</name><operator pos:start="149:63" pos:end="149:63">)</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="155:5" pos:end="155:37">/* next, deal with the palette */</comment>

    <if_stmt pos:start="157:5" pos:end="167:5"><if pos:start="157:5" pos:end="167:5">if <condition pos:start="157:8" pos:end="157:49">(<expr pos:start="157:9" pos:end="157:48"><operator pos:start="157:9" pos:end="157:9">(</operator><name pos:start="157:10" pos:end="157:19">cpl0_chunk</name> <operator pos:start="157:21" pos:end="157:22">!=</operator> <operator pos:start="157:24" pos:end="157:24">-</operator><literal type="number" pos:start="157:25" pos:end="157:25">1</literal><operator pos:start="157:26" pos:end="157:26">)</operator> <operator pos:start="157:28" pos:end="157:29">&amp;&amp;</operator> <operator pos:start="157:31" pos:end="157:31">(</operator><name pos:start="157:32" pos:end="157:41">cplz_chunk</name> <operator pos:start="157:43" pos:end="157:44">!=</operator> <operator pos:start="157:46" pos:end="157:46">-</operator><literal type="number" pos:start="157:47" pos:end="157:47">1</literal><operator pos:start="157:48" pos:end="157:48">)</operator></expr>)</condition> <block pos:start="157:51" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:15">



        <comment type="block" pos:start="161:9" pos:end="161:54">/* a chunk should not have both chunk types */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:98"><expr pos:start="163:9" pos:end="163:97"><call pos:start="163:9" pos:end="163:97"><name pos:start="163:9" pos:end="163:14">av_log</name><argument_list pos:start="163:15" pos:end="163:97">(<argument pos:start="163:16" pos:end="163:23"><expr pos:start="163:16" pos:end="163:23"><name pos:start="163:16" pos:end="163:23"><name pos:start="163:16" pos:end="163:16">s</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:23">avctx</name></name></expr></argument>, <argument pos:start="163:26" pos:end="163:37"><expr pos:start="163:26" pos:end="163:37"><name pos:start="163:26" pos:end="163:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:40" pos:end="163:96"><expr pos:start="163:40" pos:end="163:96"><literal type="string" pos:start="163:40" pos:end="163:96">"  VQA video: problem: found both CPL0 and CPLZ chunks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="165:9" pos:end="165:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:38">/* decompress the palette chunk */</comment>

    <if_stmt pos:start="173:5" pos:end="181:5"><if pos:start="173:5" pos:end="181:5">if <condition pos:start="173:8" pos:end="173:25">(<expr pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:18">cplz_chunk</name> <operator pos:start="173:20" pos:end="173:21">!=</operator> <operator pos:start="173:23" pos:end="173:23">-</operator><literal type="number" pos:start="173:24" pos:end="173:24">1</literal></expr>)</condition> <block pos:start="173:27" pos:end="181:5">{<block_content>



<comment type="block" pos:start="177:1" pos:end="177:23">/* yet to be handled */</comment>



    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:66">/* convert the RGB palette into the machine's endian format */</comment>

    <if_stmt pos:start="187:5" pos:end="221:5"><if pos:start="187:5" pos:end="221:5">if <condition pos:start="187:8" pos:end="187:25">(<expr pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:18">cpl0_chunk</name> <operator pos:start="187:20" pos:end="187:21">!=</operator> <operator pos:start="187:23" pos:end="187:23">-</operator><literal type="number" pos:start="187:24" pos:end="187:24">1</literal></expr>)</condition> <block pos:start="187:27" pos:end="221:5">{<block_content pos:start="191:9" pos:end="219:9">



        <expr_stmt pos:start="191:9" pos:end="191:54"><expr pos:start="191:9" pos:end="191:53"><name pos:start="191:9" pos:end="191:18">chunk_size</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <call pos:start="191:22" pos:end="191:53"><name pos:start="191:22" pos:end="191:28">AV_RB32</name><argument_list pos:start="191:29" pos:end="191:53">(<argument pos:start="191:30" pos:end="191:52"><expr pos:start="191:30" pos:end="191:52"><operator pos:start="191:30" pos:end="191:30">&amp;</operator><name pos:start="191:31" pos:end="191:52"><name pos:start="191:31" pos:end="191:31">s</name><operator pos:start="191:32" pos:end="191:33">-&gt;</operator><name pos:start="191:34" pos:end="191:36">buf</name><index pos:start="191:37" pos:end="191:52">[<expr pos:start="191:38" pos:end="191:51"><name pos:start="191:38" pos:end="191:47">cpl0_chunk</name> <operator pos:start="191:49" pos:end="191:49">+</operator> <literal type="number" pos:start="191:51" pos:end="191:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:43">/* sanity check the palette size */</comment>

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="203:9">if <condition pos:start="195:12" pos:end="195:33">(<expr pos:start="195:13" pos:end="195:32"><name pos:start="195:13" pos:end="195:22">chunk_size</name> <operator pos:start="195:24" pos:end="195:24">/</operator> <literal type="number" pos:start="195:26" pos:end="195:26">3</literal> <operator pos:start="195:28" pos:end="195:28">&gt;</operator> <literal type="number" pos:start="195:30" pos:end="195:32">256</literal></expr>)</condition> <block pos:start="195:35" pos:end="203:9">{<block_content pos:start="197:13" pos:end="201:19">

            <expr_stmt pos:start="197:13" pos:end="199:32"><expr pos:start="197:13" pos:end="199:31"><call pos:start="197:13" pos:end="199:31"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="199:31">(<argument pos:start="197:20" pos:end="197:27"><expr pos:start="197:20" pos:end="197:27"><name pos:start="197:20" pos:end="197:27"><name pos:start="197:20" pos:end="197:20">s</name><operator pos:start="197:21" pos:end="197:22">-&gt;</operator><name pos:start="197:23" pos:end="197:27">avctx</name></name></expr></argument>, <argument pos:start="197:30" pos:end="197:41"><expr pos:start="197:30" pos:end="197:41"><name pos:start="197:30" pos:end="197:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:44" pos:end="197:105"><expr pos:start="197:44" pos:end="197:105"><literal type="string" pos:start="197:44" pos:end="197:105">"  VQA video: problem: found a palette chunk with %d colors\n"</literal></expr></argument>,

                <argument pos:start="199:17" pos:end="199:30"><expr pos:start="199:17" pos:end="199:30"><name pos:start="199:17" pos:end="199:26">chunk_size</name> <operator pos:start="199:28" pos:end="199:28">/</operator> <literal type="number" pos:start="199:30" pos:end="199:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="201:13" pos:end="201:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:42"><expr pos:start="205:9" pos:end="205:41"><name pos:start="205:9" pos:end="205:18">cpl0_chunk</name> <operator pos:start="205:20" pos:end="205:21">+=</operator> <name pos:start="205:23" pos:end="205:41">CHUNK_PREAMBLE_SIZE</name></expr>;</expr_stmt>

        <for pos:start="207:9" pos:end="219:9">for <control pos:start="207:13" pos:end="207:44">(<init pos:start="207:14" pos:end="207:19"><expr pos:start="207:14" pos:end="207:18"><name pos:start="207:14" pos:end="207:14">i</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <literal type="number" pos:start="207:18" pos:end="207:18">0</literal></expr>;</init> <condition pos:start="207:21" pos:end="207:39"><expr pos:start="207:21" pos:end="207:38"><name pos:start="207:21" pos:end="207:21">i</name> <operator pos:start="207:23" pos:end="207:23">&lt;</operator> <name pos:start="207:25" pos:end="207:34">chunk_size</name> <operator pos:start="207:36" pos:end="207:36">/</operator> <literal type="number" pos:start="207:38" pos:end="207:38">3</literal></expr>;</condition> <incr pos:start="207:41" pos:end="207:43"><expr pos:start="207:41" pos:end="207:43"><name pos:start="207:41" pos:end="207:41">i</name><operator pos:start="207:42" pos:end="207:43">++</operator></expr></incr>)</control> <block pos:start="207:46" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:55">

            <comment type="block" pos:start="209:13" pos:end="209:64">/* scale by 4 to transform 6-bit palette -&gt; 8-bit */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:41"><expr pos:start="211:13" pos:end="211:40"><name pos:start="211:13" pos:end="211:13">r</name> <operator pos:start="211:15" pos:end="211:15">=</operator> <name pos:start="211:17" pos:end="211:36"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:22">buf</name><index pos:start="211:23" pos:end="211:36">[<expr pos:start="211:24" pos:end="211:35"><name pos:start="211:24" pos:end="211:33">cpl0_chunk</name><operator pos:start="211:34" pos:end="211:35">++</operator></expr>]</index></name> <operator pos:start="211:38" pos:end="211:38">*</operator> <literal type="number" pos:start="211:40" pos:end="211:40">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:41"><expr pos:start="213:13" pos:end="213:40"><name pos:start="213:13" pos:end="213:13">g</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <name pos:start="213:17" pos:end="213:36"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:22">buf</name><index pos:start="213:23" pos:end="213:36">[<expr pos:start="213:24" pos:end="213:35"><name pos:start="213:24" pos:end="213:33">cpl0_chunk</name><operator pos:start="213:34" pos:end="213:35">++</operator></expr>]</index></name> <operator pos:start="213:38" pos:end="213:38">*</operator> <literal type="number" pos:start="213:40" pos:end="213:40">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:41"><expr pos:start="215:13" pos:end="215:40"><name pos:start="215:13" pos:end="215:13">b</name> <operator pos:start="215:15" pos:end="215:15">=</operator> <name pos:start="215:17" pos:end="215:36"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:22">buf</name><index pos:start="215:23" pos:end="215:36">[<expr pos:start="215:24" pos:end="215:35"><name pos:start="215:24" pos:end="215:33">cpl0_chunk</name><operator pos:start="215:34" pos:end="215:35">++</operator></expr>]</index></name> <operator pos:start="215:38" pos:end="215:38">*</operator> <literal type="number" pos:start="215:40" pos:end="215:40">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:55"><expr pos:start="217:13" pos:end="217:54"><name pos:start="217:13" pos:end="217:25"><name pos:start="217:13" pos:end="217:13">s</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:22">palette</name><index pos:start="217:23" pos:end="217:25">[<expr pos:start="217:24" pos:end="217:24"><name pos:start="217:24" pos:end="217:24">i</name></expr>]</index></name> <operator pos:start="217:27" pos:end="217:27">=</operator> <operator pos:start="217:29" pos:end="217:29">(</operator><name pos:start="217:30" pos:end="217:30">r</name> <operator pos:start="217:32" pos:end="217:33">&lt;&lt;</operator> <literal type="number" pos:start="217:35" pos:end="217:36">16</literal><operator pos:start="217:37" pos:end="217:37">)</operator> <operator pos:start="217:39" pos:end="217:39">|</operator> <operator pos:start="217:41" pos:end="217:41">(</operator><name pos:start="217:42" pos:end="217:42">g</name> <operator pos:start="217:44" pos:end="217:45">&lt;&lt;</operator> <literal type="number" pos:start="217:47" pos:end="217:47">8</literal><operator pos:start="217:48" pos:end="217:48">)</operator> <operator pos:start="217:50" pos:end="217:50">|</operator> <operator pos:start="217:52" pos:end="217:52">(</operator><name pos:start="217:53" pos:end="217:53">b</name><operator pos:start="217:54" pos:end="217:54">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:40">/* next, look for a full codebook */</comment>

    <if_stmt pos:start="227:5" pos:end="237:5"><if pos:start="227:5" pos:end="237:5">if <condition pos:start="227:8" pos:end="227:49">(<expr pos:start="227:9" pos:end="227:48"><operator pos:start="227:9" pos:end="227:9">(</operator><name pos:start="227:10" pos:end="227:19">cbf0_chunk</name> <operator pos:start="227:21" pos:end="227:22">!=</operator> <operator pos:start="227:24" pos:end="227:24">-</operator><literal type="number" pos:start="227:25" pos:end="227:25">1</literal><operator pos:start="227:26" pos:end="227:26">)</operator> <operator pos:start="227:28" pos:end="227:29">&amp;&amp;</operator> <operator pos:start="227:31" pos:end="227:31">(</operator><name pos:start="227:32" pos:end="227:41">cbfz_chunk</name> <operator pos:start="227:43" pos:end="227:44">!=</operator> <operator pos:start="227:46" pos:end="227:46">-</operator><literal type="number" pos:start="227:47" pos:end="227:47">1</literal><operator pos:start="227:48" pos:end="227:48">)</operator></expr>)</condition> <block pos:start="227:51" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:15">



        <comment type="block" pos:start="231:9" pos:end="231:54">/* a chunk should not have both chunk types */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:98"><expr pos:start="233:9" pos:end="233:97"><call pos:start="233:9" pos:end="233:97"><name pos:start="233:9" pos:end="233:14">av_log</name><argument_list pos:start="233:15" pos:end="233:97">(<argument pos:start="233:16" pos:end="233:23"><expr pos:start="233:16" pos:end="233:23"><name pos:start="233:16" pos:end="233:23"><name pos:start="233:16" pos:end="233:16">s</name><operator pos:start="233:17" pos:end="233:18">-&gt;</operator><name pos:start="233:19" pos:end="233:23">avctx</name></name></expr></argument>, <argument pos:start="233:26" pos:end="233:37"><expr pos:start="233:26" pos:end="233:37"><name pos:start="233:26" pos:end="233:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:40" pos:end="233:96"><expr pos:start="233:40" pos:end="233:96"><literal type="string" pos:start="233:40" pos:end="233:96">"  VQA video: problem: found both CBF0 and CBFZ chunks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="235:9" pos:end="235:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:44">/* decompress the full codebook chunk */</comment>

    <if_stmt pos:start="243:5" pos:end="255:5"><if pos:start="243:5" pos:end="255:5">if <condition pos:start="243:8" pos:end="243:25">(<expr pos:start="243:9" pos:end="243:24"><name pos:start="243:9" pos:end="243:18">cbfz_chunk</name> <operator pos:start="243:20" pos:end="243:21">!=</operator> <operator pos:start="243:23" pos:end="243:23">-</operator><literal type="number" pos:start="243:24" pos:end="243:24">1</literal></expr>)</condition> <block pos:start="243:27" pos:end="255:5">{<block_content pos:start="247:9" pos:end="253:46">



        <expr_stmt pos:start="247:9" pos:end="247:54"><expr pos:start="247:9" pos:end="247:53"><name pos:start="247:9" pos:end="247:18">chunk_size</name> <operator pos:start="247:20" pos:end="247:20">=</operator> <call pos:start="247:22" pos:end="247:53"><name pos:start="247:22" pos:end="247:28">AV_RB32</name><argument_list pos:start="247:29" pos:end="247:53">(<argument pos:start="247:30" pos:end="247:52"><expr pos:start="247:30" pos:end="247:52"><operator pos:start="247:30" pos:end="247:30">&amp;</operator><name pos:start="247:31" pos:end="247:52"><name pos:start="247:31" pos:end="247:31">s</name><operator pos:start="247:32" pos:end="247:33">-&gt;</operator><name pos:start="247:34" pos:end="247:36">buf</name><index pos:start="247:37" pos:end="247:52">[<expr pos:start="247:38" pos:end="247:51"><name pos:start="247:38" pos:end="247:47">cbfz_chunk</name> <operator pos:start="247:49" pos:end="247:49">+</operator> <literal type="number" pos:start="247:51" pos:end="247:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:42"><expr pos:start="249:9" pos:end="249:41"><name pos:start="249:9" pos:end="249:18">cbfz_chunk</name> <operator pos:start="249:20" pos:end="249:21">+=</operator> <name pos:start="249:23" pos:end="249:41">CHUNK_PREAMBLE_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="253:46"><expr pos:start="251:9" pos:end="253:45"><call pos:start="251:9" pos:end="253:45"><name pos:start="251:9" pos:end="251:23">decode_format80</name><argument_list pos:start="251:24" pos:end="253:45">(<argument pos:start="251:25" pos:end="251:43"><expr pos:start="251:25" pos:end="251:43"><operator pos:start="251:25" pos:end="251:25">&amp;</operator><name pos:start="251:26" pos:end="251:43"><name pos:start="251:26" pos:end="251:26">s</name><operator pos:start="251:27" pos:end="251:28">-&gt;</operator><name pos:start="251:29" pos:end="251:31">buf</name><index pos:start="251:32" pos:end="251:43">[<expr pos:start="251:33" pos:end="251:42"><name pos:start="251:33" pos:end="251:42">cbfz_chunk</name></expr>]</index></name></expr></argument>, <argument pos:start="251:46" pos:end="251:55"><expr pos:start="251:46" pos:end="251:55"><name pos:start="251:46" pos:end="251:55">chunk_size</name></expr></argument>,

            <argument pos:start="253:13" pos:end="253:23"><expr pos:start="253:13" pos:end="253:23"><name pos:start="253:13" pos:end="253:23"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:23">codebook</name></name></expr></argument>, <argument pos:start="253:26" pos:end="253:41"><expr pos:start="253:26" pos:end="253:41"><name pos:start="253:26" pos:end="253:41"><name pos:start="253:26" pos:end="253:26">s</name><operator pos:start="253:27" pos:end="253:28">-&gt;</operator><name pos:start="253:29" pos:end="253:41">codebook_size</name></name></expr></argument>, <argument pos:start="253:44" pos:end="253:44"><expr pos:start="253:44" pos:end="253:44"><literal type="number" pos:start="253:44" pos:end="253:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="259:5" pos:end="259:30">/* copy a full codebook */</comment>

    <if_stmt pos:start="261:5" pos:end="285:5"><if pos:start="261:5" pos:end="285:5">if <condition pos:start="261:8" pos:end="261:25">(<expr pos:start="261:9" pos:end="261:24"><name pos:start="261:9" pos:end="261:18">cbf0_chunk</name> <operator pos:start="261:20" pos:end="261:21">!=</operator> <operator pos:start="261:23" pos:end="261:23">-</operator><literal type="number" pos:start="261:24" pos:end="261:24">1</literal></expr>)</condition> <block pos:start="261:27" pos:end="285:5">{<block_content pos:start="265:9" pos:end="283:61">



        <expr_stmt pos:start="265:9" pos:end="265:54"><expr pos:start="265:9" pos:end="265:53"><name pos:start="265:9" pos:end="265:18">chunk_size</name> <operator pos:start="265:20" pos:end="265:20">=</operator> <call pos:start="265:22" pos:end="265:53"><name pos:start="265:22" pos:end="265:28">AV_RB32</name><argument_list pos:start="265:29" pos:end="265:53">(<argument pos:start="265:30" pos:end="265:52"><expr pos:start="265:30" pos:end="265:52"><operator pos:start="265:30" pos:end="265:30">&amp;</operator><name pos:start="265:31" pos:end="265:52"><name pos:start="265:31" pos:end="265:31">s</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:36">buf</name><index pos:start="265:37" pos:end="265:52">[<expr pos:start="265:38" pos:end="265:51"><name pos:start="265:38" pos:end="265:47">cbf0_chunk</name> <operator pos:start="265:49" pos:end="265:49">+</operator> <literal type="number" pos:start="265:51" pos:end="265:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="267:9" pos:end="267:49">/* sanity check the full codebook size */</comment>

        <if_stmt pos:start="269:9" pos:end="277:9"><if pos:start="269:9" pos:end="277:9">if <condition pos:start="269:12" pos:end="269:43">(<expr pos:start="269:13" pos:end="269:42"><name pos:start="269:13" pos:end="269:22">chunk_size</name> <operator pos:start="269:24" pos:end="269:24">&gt;</operator> <name pos:start="269:26" pos:end="269:42">MAX_CODEBOOK_SIZE</name></expr>)</condition> <block pos:start="269:45" pos:end="277:9">{<block_content pos:start="271:13" pos:end="275:19">

            <expr_stmt pos:start="271:13" pos:end="273:28"><expr pos:start="271:13" pos:end="273:27"><call pos:start="271:13" pos:end="273:27"><name pos:start="271:13" pos:end="271:18">av_log</name><argument_list pos:start="271:19" pos:end="273:27">(<argument pos:start="271:20" pos:end="271:27"><expr pos:start="271:20" pos:end="271:27"><name pos:start="271:20" pos:end="271:27"><name pos:start="271:20" pos:end="271:20">s</name><operator pos:start="271:21" pos:end="271:22">-&gt;</operator><name pos:start="271:23" pos:end="271:27">avctx</name></name></expr></argument>, <argument pos:start="271:30" pos:end="271:41"><expr pos:start="271:30" pos:end="271:41"><name pos:start="271:30" pos:end="271:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="271:44" pos:end="271:102"><expr pos:start="271:44" pos:end="271:102"><literal type="string" pos:start="271:44" pos:end="271:102">"  VQA video: problem: CBF0 chunk too large (0x%X bytes)\n"</literal></expr></argument>,

                <argument pos:start="273:17" pos:end="273:26"><expr pos:start="273:17" pos:end="273:26"><name pos:start="273:17" pos:end="273:26">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="275:13" pos:end="275:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:42"><expr pos:start="279:9" pos:end="279:41"><name pos:start="279:9" pos:end="279:18">cbf0_chunk</name> <operator pos:start="279:20" pos:end="279:21">+=</operator> <name pos:start="279:23" pos:end="279:41">CHUNK_PREAMBLE_SIZE</name></expr>;</expr_stmt>



        <expr_stmt pos:start="283:9" pos:end="283:61"><expr pos:start="283:9" pos:end="283:60"><call pos:start="283:9" pos:end="283:60"><name pos:start="283:9" pos:end="283:14">memcpy</name><argument_list pos:start="283:15" pos:end="283:60">(<argument pos:start="283:16" pos:end="283:26"><expr pos:start="283:16" pos:end="283:26"><name pos:start="283:16" pos:end="283:26"><name pos:start="283:16" pos:end="283:16">s</name><operator pos:start="283:17" pos:end="283:18">-&gt;</operator><name pos:start="283:19" pos:end="283:26">codebook</name></name></expr></argument>, <argument pos:start="283:29" pos:end="283:47"><expr pos:start="283:29" pos:end="283:47"><operator pos:start="283:29" pos:end="283:29">&amp;</operator><name pos:start="283:30" pos:end="283:47"><name pos:start="283:30" pos:end="283:30">s</name><operator pos:start="283:31" pos:end="283:32">-&gt;</operator><name pos:start="283:33" pos:end="283:35">buf</name><index pos:start="283:36" pos:end="283:47">[<expr pos:start="283:37" pos:end="283:46"><name pos:start="283:37" pos:end="283:46">cbf0_chunk</name></expr>]</index></name></expr></argument>, <argument pos:start="283:50" pos:end="283:59"><expr pos:start="283:50" pos:end="283:59"><name pos:start="283:50" pos:end="283:59">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="289:5" pos:end="289:26">/* decode the frame */</comment>

    <if_stmt pos:start="291:5" pos:end="301:5"><if pos:start="291:5" pos:end="301:5">if <condition pos:start="291:8" pos:end="291:25">(<expr pos:start="291:9" pos:end="291:24"><name pos:start="291:9" pos:end="291:18">vptz_chunk</name> <operator pos:start="291:20" pos:end="291:21">==</operator> <operator pos:start="291:23" pos:end="291:23">-</operator><literal type="number" pos:start="291:24" pos:end="291:24">1</literal></expr>)</condition> <block pos:start="291:27" pos:end="301:5">{<block_content pos:start="297:9" pos:end="299:15">



        <comment type="block" pos:start="295:9" pos:end="295:58">/* something is wrong if there is no VPTZ chunk */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:86"><expr pos:start="297:9" pos:end="297:85"><call pos:start="297:9" pos:end="297:85"><name pos:start="297:9" pos:end="297:14">av_log</name><argument_list pos:start="297:15" pos:end="297:85">(<argument pos:start="297:16" pos:end="297:23"><expr pos:start="297:16" pos:end="297:23"><name pos:start="297:16" pos:end="297:23"><name pos:start="297:16" pos:end="297:16">s</name><operator pos:start="297:17" pos:end="297:18">-&gt;</operator><name pos:start="297:19" pos:end="297:23">avctx</name></name></expr></argument>, <argument pos:start="297:26" pos:end="297:37"><expr pos:start="297:26" pos:end="297:37"><name pos:start="297:26" pos:end="297:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="297:40" pos:end="297:84"><expr pos:start="297:40" pos:end="297:84"><literal type="string" pos:start="297:40" pos:end="297:84">"  VQA video: problem: no VPTZ chunk found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="299:9" pos:end="299:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="305:5" pos:end="305:50"><expr pos:start="305:5" pos:end="305:49"><name pos:start="305:5" pos:end="305:14">chunk_size</name> <operator pos:start="305:16" pos:end="305:16">=</operator> <call pos:start="305:18" pos:end="305:49"><name pos:start="305:18" pos:end="305:24">AV_RB32</name><argument_list pos:start="305:25" pos:end="305:49">(<argument pos:start="305:26" pos:end="305:48"><expr pos:start="305:26" pos:end="305:48"><operator pos:start="305:26" pos:end="305:26">&amp;</operator><name pos:start="305:27" pos:end="305:48"><name pos:start="305:27" pos:end="305:27">s</name><operator pos:start="305:28" pos:end="305:29">-&gt;</operator><name pos:start="305:30" pos:end="305:32">buf</name><index pos:start="305:33" pos:end="305:48">[<expr pos:start="305:34" pos:end="305:47"><name pos:start="305:34" pos:end="305:43">vptz_chunk</name> <operator pos:start="305:45" pos:end="305:45">+</operator> <literal type="number" pos:start="305:47" pos:end="305:47">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:38"><expr pos:start="307:5" pos:end="307:37"><name pos:start="307:5" pos:end="307:14">vptz_chunk</name> <operator pos:start="307:16" pos:end="307:17">+=</operator> <name pos:start="307:19" pos:end="307:37">CHUNK_PREAMBLE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="311:52"><expr pos:start="309:5" pos:end="311:51"><call pos:start="309:5" pos:end="311:51"><name pos:start="309:5" pos:end="309:19">decode_format80</name><argument_list pos:start="309:20" pos:end="311:51">(<argument pos:start="309:21" pos:end="309:39"><expr pos:start="309:21" pos:end="309:39"><operator pos:start="309:21" pos:end="309:21">&amp;</operator><name pos:start="309:22" pos:end="309:39"><name pos:start="309:22" pos:end="309:22">s</name><operator pos:start="309:23" pos:end="309:24">-&gt;</operator><name pos:start="309:25" pos:end="309:27">buf</name><index pos:start="309:28" pos:end="309:39">[<expr pos:start="309:29" pos:end="309:38"><name pos:start="309:29" pos:end="309:38">vptz_chunk</name></expr>]</index></name></expr></argument>, <argument pos:start="309:42" pos:end="309:51"><expr pos:start="309:42" pos:end="309:51"><name pos:start="309:42" pos:end="309:51">chunk_size</name></expr></argument>,

        <argument pos:start="311:9" pos:end="311:24"><expr pos:start="311:9" pos:end="311:24"><name pos:start="311:9" pos:end="311:24"><name pos:start="311:9" pos:end="311:9">s</name><operator pos:start="311:10" pos:end="311:11">-&gt;</operator><name pos:start="311:12" pos:end="311:24">decode_buffer</name></name></expr></argument>, <argument pos:start="311:27" pos:end="311:47"><expr pos:start="311:27" pos:end="311:47"><name pos:start="311:27" pos:end="311:47"><name pos:start="311:27" pos:end="311:27">s</name><operator pos:start="311:28" pos:end="311:29">-&gt;</operator><name pos:start="311:30" pos:end="311:47">decode_buffer_size</name></name></expr></argument>, <argument pos:start="311:50" pos:end="311:50"><expr pos:start="311:50" pos:end="311:50"><literal type="number" pos:start="311:50" pos:end="311:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="315:5" pos:end="315:37">/* render the final PAL8 frame */</comment>

    <if_stmt pos:start="317:5" pos:end="323:24"><if pos:start="317:5" pos:end="319:24">if <condition pos:start="317:8" pos:end="317:30">(<expr pos:start="317:9" pos:end="317:29"><name pos:start="317:9" pos:end="317:24"><name pos:start="317:9" pos:end="317:9">s</name><operator pos:start="317:10" pos:end="317:11">-&gt;</operator><name pos:start="317:12" pos:end="317:24">vector_height</name></name> <operator pos:start="317:26" pos:end="317:27">==</operator> <literal type="number" pos:start="317:29" pos:end="317:29">4</literal></expr>)</condition><block type="pseudo" pos:start="319:9" pos:end="319:24"><block_content pos:start="319:9" pos:end="319:24">

        <expr_stmt pos:start="319:9" pos:end="319:24"><expr pos:start="319:9" pos:end="319:23"><name pos:start="319:9" pos:end="319:19">index_shift</name> <operator pos:start="319:21" pos:end="319:21">=</operator> <literal type="number" pos:start="319:23" pos:end="319:23">4</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="321:5" pos:end="323:24">else<block type="pseudo" pos:start="323:9" pos:end="323:24"><block_content pos:start="323:9" pos:end="323:24">

        <expr_stmt pos:start="323:9" pos:end="323:24"><expr pos:start="323:9" pos:end="323:23"><name pos:start="323:9" pos:end="323:19">index_shift</name> <operator pos:start="323:21" pos:end="323:21">=</operator> <literal type="number" pos:start="323:23" pos:end="323:23">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for pos:start="325:5" pos:end="427:5">for <control pos:start="325:9" pos:end="327:53">(<init pos:start="325:10" pos:end="325:15"><expr pos:start="325:10" pos:end="325:14"><name pos:start="325:10" pos:end="325:10">y</name> <operator pos:start="325:12" pos:end="325:12">=</operator> <literal type="number" pos:start="325:14" pos:end="325:14">0</literal></expr>;</init> <condition pos:start="325:17" pos:end="325:53"><expr pos:start="325:17" pos:end="325:52"><name pos:start="325:17" pos:end="325:17">y</name> <operator pos:start="325:19" pos:end="325:19">&lt;</operator> <name pos:start="325:21" pos:end="325:40"><name pos:start="325:21" pos:end="325:21">s</name><operator pos:start="325:22" pos:end="325:23">-&gt;</operator><name pos:start="325:24" pos:end="325:28">frame</name><operator pos:start="325:29" pos:end="325:29">.</operator><name pos:start="325:30" pos:end="325:37">linesize</name><index pos:start="325:38" pos:end="325:40">[<expr pos:start="325:39" pos:end="325:39"><literal type="number" pos:start="325:39" pos:end="325:39">0</literal></expr>]</index></name> <operator pos:start="325:42" pos:end="325:42">*</operator> <name pos:start="325:44" pos:end="325:52"><name pos:start="325:44" pos:end="325:44">s</name><operator pos:start="325:45" pos:end="325:46">-&gt;</operator><name pos:start="325:47" pos:end="325:52">height</name></name></expr>;</condition>

        <incr pos:start="327:9" pos:end="327:52"><expr pos:start="327:9" pos:end="327:52"><name pos:start="327:9" pos:end="327:9">y</name> <operator pos:start="327:11" pos:end="327:12">+=</operator> <name pos:start="327:14" pos:end="327:33"><name pos:start="327:14" pos:end="327:14">s</name><operator pos:start="327:15" pos:end="327:16">-&gt;</operator><name pos:start="327:17" pos:end="327:21">frame</name><operator pos:start="327:22" pos:end="327:22">.</operator><name pos:start="327:23" pos:end="327:30">linesize</name><index pos:start="327:31" pos:end="327:33">[<expr pos:start="327:32" pos:end="327:32"><literal type="number" pos:start="327:32" pos:end="327:32">0</literal></expr>]</index></name> <operator pos:start="327:35" pos:end="327:35">*</operator> <name pos:start="327:37" pos:end="327:52"><name pos:start="327:37" pos:end="327:37">s</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:52">vector_height</name></name></expr></incr>)</control> <block pos:start="327:55" pos:end="427:5">{<block_content pos:start="331:9" pos:end="425:9">



        <for pos:start="331:9" pos:end="425:9">for <control pos:start="331:13" pos:end="331:67">(<init pos:start="331:14" pos:end="331:19"><expr pos:start="331:14" pos:end="331:18"><name pos:start="331:14" pos:end="331:14">x</name> <operator pos:start="331:16" pos:end="331:16">=</operator> <name pos:start="331:18" pos:end="331:18">y</name></expr>;</init> <condition pos:start="331:21" pos:end="331:37"><expr pos:start="331:21" pos:end="331:36"><name pos:start="331:21" pos:end="331:21">x</name> <operator pos:start="331:23" pos:end="331:23">&lt;</operator> <name pos:start="331:25" pos:end="331:25">y</name> <operator pos:start="331:27" pos:end="331:27">+</operator> <name pos:start="331:29" pos:end="331:36"><name pos:start="331:29" pos:end="331:29">s</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:36">width</name></name></expr>;</condition> <incr pos:start="331:39" pos:end="331:66"><expr pos:start="331:39" pos:end="331:44"><name pos:start="331:39" pos:end="331:39">x</name> <operator pos:start="331:41" pos:end="331:42">+=</operator> <literal type="number" pos:start="331:44" pos:end="331:44">4</literal></expr><operator pos:start="331:45" pos:end="331:45">,</operator> <expr pos:start="331:47" pos:end="331:55"><name pos:start="331:47" pos:end="331:53">lobytes</name><operator pos:start="331:54" pos:end="331:55">++</operator></expr><operator pos:start="331:56" pos:end="331:56">,</operator> <expr pos:start="331:58" pos:end="331:66"><name pos:start="331:58" pos:end="331:64">hibytes</name><operator pos:start="331:65" pos:end="331:66">++</operator></expr></incr>)</control> <block pos:start="331:69" pos:end="425:9">{<block_content pos:start="333:13" pos:end="423:13">

            <expr_stmt pos:start="333:13" pos:end="333:26"><expr pos:start="333:13" pos:end="333:25"><name pos:start="333:13" pos:end="333:21">pixel_ptr</name> <operator pos:start="333:23" pos:end="333:23">=</operator> <name pos:start="333:25" pos:end="333:25">x</name></expr>;</expr_stmt>



            <comment type="block" pos:start="337:13" pos:end="339:34">/* get the vector index, the method for which varies according to

             * VQA file version */</comment>

            <switch pos:start="341:13" pos:end="407:13">switch <condition pos:start="341:20" pos:end="341:35">(<expr pos:start="341:21" pos:end="341:34"><name pos:start="341:21" pos:end="341:34"><name pos:start="341:21" pos:end="341:21">s</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:34">vqa_version</name></name></expr>)</condition> <block pos:start="341:37" pos:end="407:13">{<block_content pos:start="345:13" pos:end="405:22">



            <case pos:start="345:13" pos:end="345:19">case <expr pos:start="345:18" pos:end="345:18"><literal type="number" pos:start="345:18" pos:end="345:18">1</literal></expr>:</case>

                <expr_stmt pos:start="347:17" pos:end="347:55"><expr pos:start="347:17" pos:end="347:54"><name pos:start="347:17" pos:end="347:22">lobyte</name> <operator pos:start="347:24" pos:end="347:24">=</operator> <name pos:start="347:26" pos:end="347:54"><name pos:start="347:26" pos:end="347:26">s</name><operator pos:start="347:27" pos:end="347:28">-&gt;</operator><name pos:start="347:29" pos:end="347:41">decode_buffer</name><index pos:start="347:42" pos:end="347:54">[<expr pos:start="347:43" pos:end="347:53"><name pos:start="347:43" pos:end="347:49">lobytes</name> <operator pos:start="347:51" pos:end="347:51">*</operator> <literal type="number" pos:start="347:53" pos:end="347:53">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:61"><expr pos:start="349:17" pos:end="349:60"><name pos:start="349:17" pos:end="349:22">hibyte</name> <operator pos:start="349:24" pos:end="349:24">=</operator> <name pos:start="349:26" pos:end="349:60"><name pos:start="349:26" pos:end="349:26">s</name><operator pos:start="349:27" pos:end="349:28">-&gt;</operator><name pos:start="349:29" pos:end="349:41">decode_buffer</name><index pos:start="349:42" pos:end="349:60">[<expr pos:start="349:43" pos:end="349:59"><operator pos:start="349:43" pos:end="349:43">(</operator><name pos:start="349:44" pos:end="349:50">lobytes</name> <operator pos:start="349:52" pos:end="349:52">*</operator> <literal type="number" pos:start="349:54" pos:end="349:54">2</literal><operator pos:start="349:55" pos:end="349:55">)</operator> <operator pos:start="349:57" pos:end="349:57">+</operator> <literal type="number" pos:start="349:59" pos:end="349:59">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:61"><expr pos:start="351:17" pos:end="351:60"><name pos:start="351:17" pos:end="351:28">vector_index</name> <operator pos:start="351:30" pos:end="351:30">=</operator> <operator pos:start="351:32" pos:end="351:32">(</operator><operator pos:start="351:33" pos:end="351:33">(</operator><name pos:start="351:34" pos:end="351:39">hibyte</name> <operator pos:start="351:41" pos:end="351:42">&lt;&lt;</operator> <literal type="number" pos:start="351:44" pos:end="351:44">8</literal><operator pos:start="351:45" pos:end="351:45">)</operator> <operator pos:start="351:47" pos:end="351:47">|</operator> <name pos:start="351:49" pos:end="351:54">lobyte</name><operator pos:start="351:55" pos:end="351:55">)</operator> <operator pos:start="351:57" pos:end="351:58">&gt;&gt;</operator> <literal type="number" pos:start="351:60" pos:end="351:60">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:45"><expr pos:start="353:17" pos:end="353:44"><name pos:start="353:17" pos:end="353:28">vector_index</name> <operator pos:start="353:30" pos:end="353:32">&lt;&lt;=</operator> <name pos:start="353:34" pos:end="353:44">index_shift</name></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:41"><expr pos:start="355:17" pos:end="355:40"><name pos:start="355:17" pos:end="355:21">lines</name> <operator pos:start="355:23" pos:end="355:23">=</operator> <name pos:start="355:25" pos:end="355:40"><name pos:start="355:25" pos:end="355:25">s</name><operator pos:start="355:26" pos:end="355:27">-&gt;</operator><name pos:start="355:28" pos:end="355:40">vector_height</name></name></expr>;</expr_stmt>

                <comment type="block" pos:start="357:17" pos:end="357:55">/* uniform color fill - a quick hack */</comment>

                <if_stmt pos:start="359:17" pos:end="377:17"><if pos:start="359:17" pos:end="377:17">if <condition pos:start="359:20" pos:end="359:35">(<expr pos:start="359:21" pos:end="359:34"><name pos:start="359:21" pos:end="359:26">hibyte</name> <operator pos:start="359:28" pos:end="359:29">==</operator> <literal type="number" pos:start="359:31" pos:end="359:34">0xFF</literal></expr>)</condition> <block pos:start="359:37" pos:end="377:17">{<block_content pos:start="361:21" pos:end="375:28">

                    <while pos:start="361:21" pos:end="373:21">while <condition pos:start="361:27" pos:end="361:35">(<expr pos:start="361:28" pos:end="361:34"><name pos:start="361:28" pos:end="361:32">lines</name><operator pos:start="361:33" pos:end="361:34">--</operator></expr>)</condition> <block pos:start="361:37" pos:end="373:21">{<block_content pos:start="363:25" pos:end="371:58">

                        <expr_stmt pos:start="363:25" pos:end="363:71"><expr pos:start="363:25" pos:end="363:70"><name pos:start="363:25" pos:end="363:55"><name pos:start="363:25" pos:end="363:25">s</name><operator pos:start="363:26" pos:end="363:27">-&gt;</operator><name pos:start="363:28" pos:end="363:32">frame</name><operator pos:start="363:33" pos:end="363:33">.</operator><name pos:start="363:34" pos:end="363:37">data</name><index pos:start="363:38" pos:end="363:40">[<expr pos:start="363:39" pos:end="363:39"><literal type="number" pos:start="363:39" pos:end="363:39">0</literal></expr>]</index><index pos:start="363:41" pos:end="363:55">[<expr pos:start="363:42" pos:end="363:54"><name pos:start="363:42" pos:end="363:50">pixel_ptr</name> <operator pos:start="363:52" pos:end="363:52">+</operator> <literal type="number" pos:start="363:54" pos:end="363:54">0</literal></expr>]</index></name> <operator pos:start="363:57" pos:end="363:57">=</operator> <literal type="number" pos:start="363:59" pos:end="363:63">255</literal> <operator pos:start="363:63" pos:end="363:63">-</operator> <name pos:start="363:65" pos:end="363:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="365:25" pos:end="365:71"><expr pos:start="365:25" pos:end="365:70"><name pos:start="365:25" pos:end="365:55"><name pos:start="365:25" pos:end="365:25">s</name><operator pos:start="365:26" pos:end="365:27">-&gt;</operator><name pos:start="365:28" pos:end="365:32">frame</name><operator pos:start="365:33" pos:end="365:33">.</operator><name pos:start="365:34" pos:end="365:37">data</name><index pos:start="365:38" pos:end="365:40">[<expr pos:start="365:39" pos:end="365:39"><literal type="number" pos:start="365:39" pos:end="365:39">0</literal></expr>]</index><index pos:start="365:41" pos:end="365:55">[<expr pos:start="365:42" pos:end="365:54"><name pos:start="365:42" pos:end="365:50">pixel_ptr</name> <operator pos:start="365:52" pos:end="365:52">+</operator> <literal type="number" pos:start="365:54" pos:end="365:54">1</literal></expr>]</index></name> <operator pos:start="365:57" pos:end="365:57">=</operator> <literal type="number" pos:start="365:59" pos:end="365:63">255</literal> <operator pos:start="365:63" pos:end="365:63">-</operator> <name pos:start="365:65" pos:end="365:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="367:25" pos:end="367:71"><expr pos:start="367:25" pos:end="367:70"><name pos:start="367:25" pos:end="367:55"><name pos:start="367:25" pos:end="367:25">s</name><operator pos:start="367:26" pos:end="367:27">-&gt;</operator><name pos:start="367:28" pos:end="367:32">frame</name><operator pos:start="367:33" pos:end="367:33">.</operator><name pos:start="367:34" pos:end="367:37">data</name><index pos:start="367:38" pos:end="367:40">[<expr pos:start="367:39" pos:end="367:39"><literal type="number" pos:start="367:39" pos:end="367:39">0</literal></expr>]</index><index pos:start="367:41" pos:end="367:55">[<expr pos:start="367:42" pos:end="367:54"><name pos:start="367:42" pos:end="367:50">pixel_ptr</name> <operator pos:start="367:52" pos:end="367:52">+</operator> <literal type="number" pos:start="367:54" pos:end="367:54">2</literal></expr>]</index></name> <operator pos:start="367:57" pos:end="367:57">=</operator> <literal type="number" pos:start="367:59" pos:end="367:63">255</literal> <operator pos:start="367:63" pos:end="367:63">-</operator> <name pos:start="367:65" pos:end="367:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="369:25" pos:end="369:71"><expr pos:start="369:25" pos:end="369:70"><name pos:start="369:25" pos:end="369:55"><name pos:start="369:25" pos:end="369:25">s</name><operator pos:start="369:26" pos:end="369:27">-&gt;</operator><name pos:start="369:28" pos:end="369:32">frame</name><operator pos:start="369:33" pos:end="369:33">.</operator><name pos:start="369:34" pos:end="369:37">data</name><index pos:start="369:38" pos:end="369:40">[<expr pos:start="369:39" pos:end="369:39"><literal type="number" pos:start="369:39" pos:end="369:39">0</literal></expr>]</index><index pos:start="369:41" pos:end="369:55">[<expr pos:start="369:42" pos:end="369:54"><name pos:start="369:42" pos:end="369:50">pixel_ptr</name> <operator pos:start="369:52" pos:end="369:52">+</operator> <literal type="number" pos:start="369:54" pos:end="369:54">3</literal></expr>]</index></name> <operator pos:start="369:57" pos:end="369:57">=</operator> <literal type="number" pos:start="369:59" pos:end="369:63">255</literal> <operator pos:start="369:63" pos:end="369:63">-</operator> <name pos:start="369:65" pos:end="369:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="371:25" pos:end="371:58"><expr pos:start="371:25" pos:end="371:57"><name pos:start="371:25" pos:end="371:33">pixel_ptr</name> <operator pos:start="371:35" pos:end="371:36">+=</operator> <name pos:start="371:38" pos:end="371:57"><name pos:start="371:38" pos:end="371:38">s</name><operator pos:start="371:39" pos:end="371:40">-&gt;</operator><name pos:start="371:41" pos:end="371:45">frame</name><operator pos:start="371:46" pos:end="371:46">.</operator><name pos:start="371:47" pos:end="371:54">linesize</name><index pos:start="371:55" pos:end="371:57">[<expr pos:start="371:56" pos:end="371:56"><literal type="number" pos:start="371:56" pos:end="371:56">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <expr_stmt pos:start="375:21" pos:end="375:28"><expr pos:start="375:21" pos:end="375:27"><name pos:start="375:21" pos:end="375:25">lines</name><operator pos:start="375:26" pos:end="375:26">=</operator><literal type="number" pos:start="375:27" pos:end="375:27">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="379:17" pos:end="379:22">break;</break>



            <case pos:start="383:13" pos:end="383:19">case <expr pos:start="383:18" pos:end="383:18"><literal type="number" pos:start="383:18" pos:end="383:18">2</literal></expr>:</case>

                <expr_stmt pos:start="385:17" pos:end="385:51"><expr pos:start="385:17" pos:end="385:50"><name pos:start="385:17" pos:end="385:22">lobyte</name> <operator pos:start="385:24" pos:end="385:24">=</operator> <name pos:start="385:26" pos:end="385:50"><name pos:start="385:26" pos:end="385:26">s</name><operator pos:start="385:27" pos:end="385:28">-&gt;</operator><name pos:start="385:29" pos:end="385:41">decode_buffer</name><index pos:start="385:42" pos:end="385:50">[<expr pos:start="385:43" pos:end="385:49"><name pos:start="385:43" pos:end="385:49">lobytes</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:51"><expr pos:start="387:17" pos:end="387:50"><name pos:start="387:17" pos:end="387:22">hibyte</name> <operator pos:start="387:24" pos:end="387:24">=</operator> <name pos:start="387:26" pos:end="387:50"><name pos:start="387:26" pos:end="387:26">s</name><operator pos:start="387:27" pos:end="387:28">-&gt;</operator><name pos:start="387:29" pos:end="387:41">decode_buffer</name><index pos:start="387:42" pos:end="387:50">[<expr pos:start="387:43" pos:end="387:49"><name pos:start="387:43" pos:end="387:49">hibytes</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:54"><expr pos:start="389:17" pos:end="389:53"><name pos:start="389:17" pos:end="389:28">vector_index</name> <operator pos:start="389:30" pos:end="389:30">=</operator> <operator pos:start="389:32" pos:end="389:32">(</operator><name pos:start="389:33" pos:end="389:38">hibyte</name> <operator pos:start="389:40" pos:end="389:41">&lt;&lt;</operator> <literal type="number" pos:start="389:43" pos:end="389:43">8</literal><operator pos:start="389:44" pos:end="389:44">)</operator> <operator pos:start="389:46" pos:end="389:46">|</operator> <name pos:start="389:48" pos:end="389:53">lobyte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:45"><expr pos:start="391:17" pos:end="391:44"><name pos:start="391:17" pos:end="391:28">vector_index</name> <operator pos:start="391:30" pos:end="391:32">&lt;&lt;=</operator> <name pos:start="391:34" pos:end="391:44">index_shift</name></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:41"><expr pos:start="393:17" pos:end="393:40"><name pos:start="393:17" pos:end="393:21">lines</name> <operator pos:start="393:23" pos:end="393:23">=</operator> <name pos:start="393:25" pos:end="393:40"><name pos:start="393:25" pos:end="393:25">s</name><operator pos:start="393:26" pos:end="393:27">-&gt;</operator><name pos:start="393:28" pos:end="393:40">vector_height</name></name></expr>;</expr_stmt>

                <break pos:start="395:17" pos:end="395:22">break;</break>



            <case pos:start="399:13" pos:end="399:19">case <expr pos:start="399:18" pos:end="399:18"><literal type="number" pos:start="399:18" pos:end="399:18">3</literal></expr>:</case>

<comment type="block" pos:start="401:1" pos:end="401:25">/* not implemented yet */</comment>

                <expr_stmt pos:start="403:17" pos:end="403:26"><expr pos:start="403:17" pos:end="403:25"><name pos:start="403:17" pos:end="403:21">lines</name> <operator pos:start="403:23" pos:end="403:23">=</operator> <literal type="number" pos:start="403:25" pos:end="403:25">0</literal></expr>;</expr_stmt>

                <break pos:start="405:17" pos:end="405:22">break;</break>

            </block_content>}</block></switch>



            <while pos:start="411:13" pos:end="423:13">while <condition pos:start="411:19" pos:end="411:27">(<expr pos:start="411:20" pos:end="411:26"><name pos:start="411:20" pos:end="411:24">lines</name><operator pos:start="411:25" pos:end="411:26">--</operator></expr>)</condition> <block pos:start="411:29" pos:end="423:13">{<block_content pos:start="413:17" pos:end="421:50">

                <expr_stmt pos:start="413:17" pos:end="413:78"><expr pos:start="413:17" pos:end="413:77"><name pos:start="413:17" pos:end="413:47"><name pos:start="413:17" pos:end="413:17">s</name><operator pos:start="413:18" pos:end="413:19">-&gt;</operator><name pos:start="413:20" pos:end="413:24">frame</name><operator pos:start="413:25" pos:end="413:25">.</operator><name pos:start="413:26" pos:end="413:29">data</name><index pos:start="413:30" pos:end="413:32">[<expr pos:start="413:31" pos:end="413:31"><literal type="number" pos:start="413:31" pos:end="413:31">0</literal></expr>]</index><index pos:start="413:33" pos:end="413:47">[<expr pos:start="413:34" pos:end="413:46"><name pos:start="413:34" pos:end="413:42">pixel_ptr</name> <operator pos:start="413:44" pos:end="413:44">+</operator> <literal type="number" pos:start="413:46" pos:end="413:46">0</literal></expr>]</index></name> <operator pos:start="413:49" pos:end="413:49">=</operator> <name pos:start="413:51" pos:end="413:77"><name pos:start="413:51" pos:end="413:51">s</name><operator pos:start="413:52" pos:end="413:53">-&gt;</operator><name pos:start="413:54" pos:end="413:61">codebook</name><index pos:start="413:62" pos:end="413:77">[<expr pos:start="413:63" pos:end="413:76"><name pos:start="413:63" pos:end="413:74">vector_index</name><operator pos:start="413:75" pos:end="413:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="415:17" pos:end="415:78"><expr pos:start="415:17" pos:end="415:77"><name pos:start="415:17" pos:end="415:47"><name pos:start="415:17" pos:end="415:17">s</name><operator pos:start="415:18" pos:end="415:19">-&gt;</operator><name pos:start="415:20" pos:end="415:24">frame</name><operator pos:start="415:25" pos:end="415:25">.</operator><name pos:start="415:26" pos:end="415:29">data</name><index pos:start="415:30" pos:end="415:32">[<expr pos:start="415:31" pos:end="415:31"><literal type="number" pos:start="415:31" pos:end="415:31">0</literal></expr>]</index><index pos:start="415:33" pos:end="415:47">[<expr pos:start="415:34" pos:end="415:46"><name pos:start="415:34" pos:end="415:42">pixel_ptr</name> <operator pos:start="415:44" pos:end="415:44">+</operator> <literal type="number" pos:start="415:46" pos:end="415:46">1</literal></expr>]</index></name> <operator pos:start="415:49" pos:end="415:49">=</operator> <name pos:start="415:51" pos:end="415:77"><name pos:start="415:51" pos:end="415:51">s</name><operator pos:start="415:52" pos:end="415:53">-&gt;</operator><name pos:start="415:54" pos:end="415:61">codebook</name><index pos:start="415:62" pos:end="415:77">[<expr pos:start="415:63" pos:end="415:76"><name pos:start="415:63" pos:end="415:74">vector_index</name><operator pos:start="415:75" pos:end="415:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="417:17" pos:end="417:78"><expr pos:start="417:17" pos:end="417:77"><name pos:start="417:17" pos:end="417:47"><name pos:start="417:17" pos:end="417:17">s</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:24">frame</name><operator pos:start="417:25" pos:end="417:25">.</operator><name pos:start="417:26" pos:end="417:29">data</name><index pos:start="417:30" pos:end="417:32">[<expr pos:start="417:31" pos:end="417:31"><literal type="number" pos:start="417:31" pos:end="417:31">0</literal></expr>]</index><index pos:start="417:33" pos:end="417:47">[<expr pos:start="417:34" pos:end="417:46"><name pos:start="417:34" pos:end="417:42">pixel_ptr</name> <operator pos:start="417:44" pos:end="417:44">+</operator> <literal type="number" pos:start="417:46" pos:end="417:46">2</literal></expr>]</index></name> <operator pos:start="417:49" pos:end="417:49">=</operator> <name pos:start="417:51" pos:end="417:77"><name pos:start="417:51" pos:end="417:51">s</name><operator pos:start="417:52" pos:end="417:53">-&gt;</operator><name pos:start="417:54" pos:end="417:61">codebook</name><index pos:start="417:62" pos:end="417:77">[<expr pos:start="417:63" pos:end="417:76"><name pos:start="417:63" pos:end="417:74">vector_index</name><operator pos:start="417:75" pos:end="417:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:78"><expr pos:start="419:17" pos:end="419:77"><name pos:start="419:17" pos:end="419:47"><name pos:start="419:17" pos:end="419:17">s</name><operator pos:start="419:18" pos:end="419:19">-&gt;</operator><name pos:start="419:20" pos:end="419:24">frame</name><operator pos:start="419:25" pos:end="419:25">.</operator><name pos:start="419:26" pos:end="419:29">data</name><index pos:start="419:30" pos:end="419:32">[<expr pos:start="419:31" pos:end="419:31"><literal type="number" pos:start="419:31" pos:end="419:31">0</literal></expr>]</index><index pos:start="419:33" pos:end="419:47">[<expr pos:start="419:34" pos:end="419:46"><name pos:start="419:34" pos:end="419:42">pixel_ptr</name> <operator pos:start="419:44" pos:end="419:44">+</operator> <literal type="number" pos:start="419:46" pos:end="419:46">3</literal></expr>]</index></name> <operator pos:start="419:49" pos:end="419:49">=</operator> <name pos:start="419:51" pos:end="419:77"><name pos:start="419:51" pos:end="419:51">s</name><operator pos:start="419:52" pos:end="419:53">-&gt;</operator><name pos:start="419:54" pos:end="419:61">codebook</name><index pos:start="419:62" pos:end="419:77">[<expr pos:start="419:63" pos:end="419:76"><name pos:start="419:63" pos:end="419:74">vector_index</name><operator pos:start="419:75" pos:end="419:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:50"><expr pos:start="421:17" pos:end="421:49"><name pos:start="421:17" pos:end="421:25">pixel_ptr</name> <operator pos:start="421:27" pos:end="421:28">+=</operator> <name pos:start="421:30" pos:end="421:49"><name pos:start="421:30" pos:end="421:30">s</name><operator pos:start="421:31" pos:end="421:32">-&gt;</operator><name pos:start="421:33" pos:end="421:37">frame</name><operator pos:start="421:38" pos:end="421:38">.</operator><name pos:start="421:39" pos:end="421:46">linesize</name><index pos:start="421:47" pos:end="421:49">[<expr pos:start="421:48" pos:end="421:48"><literal type="number" pos:start="421:48" pos:end="421:48">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="431:5" pos:end="431:33">/* handle partial codebook */</comment>

    <if_stmt pos:start="433:5" pos:end="441:5"><if pos:start="433:5" pos:end="441:5">if <condition pos:start="433:8" pos:end="433:49">(<expr pos:start="433:9" pos:end="433:48"><operator pos:start="433:9" pos:end="433:9">(</operator><name pos:start="433:10" pos:end="433:19">cbp0_chunk</name> <operator pos:start="433:21" pos:end="433:22">!=</operator> <operator pos:start="433:24" pos:end="433:24">-</operator><literal type="number" pos:start="433:25" pos:end="433:25">1</literal><operator pos:start="433:26" pos:end="433:26">)</operator> <operator pos:start="433:28" pos:end="433:29">&amp;&amp;</operator> <operator pos:start="433:31" pos:end="433:31">(</operator><name pos:start="433:32" pos:end="433:41">cbpz_chunk</name> <operator pos:start="433:43" pos:end="433:44">!=</operator> <operator pos:start="433:46" pos:end="433:46">-</operator><literal type="number" pos:start="433:47" pos:end="433:47">1</literal><operator pos:start="433:48" pos:end="433:48">)</operator></expr>)</condition> <block pos:start="433:51" pos:end="441:5">{<block_content pos:start="437:9" pos:end="439:15">

        <comment type="block" pos:start="435:9" pos:end="435:54">/* a chunk should not have both chunk types */</comment>

        <expr_stmt pos:start="437:9" pos:end="437:98"><expr pos:start="437:9" pos:end="437:97"><call pos:start="437:9" pos:end="437:97"><name pos:start="437:9" pos:end="437:14">av_log</name><argument_list pos:start="437:15" pos:end="437:97">(<argument pos:start="437:16" pos:end="437:23"><expr pos:start="437:16" pos:end="437:23"><name pos:start="437:16" pos:end="437:23"><name pos:start="437:16" pos:end="437:16">s</name><operator pos:start="437:17" pos:end="437:18">-&gt;</operator><name pos:start="437:19" pos:end="437:23">avctx</name></name></expr></argument>, <argument pos:start="437:26" pos:end="437:37"><expr pos:start="437:26" pos:end="437:37"><name pos:start="437:26" pos:end="437:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="437:40" pos:end="437:96"><expr pos:start="437:40" pos:end="437:96"><literal type="string" pos:start="437:40" pos:end="437:96">"  VQA video: problem: found both CBP0 and CBPZ chunks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="439:9" pos:end="439:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="445:5" pos:end="487:5"><if pos:start="445:5" pos:end="487:5">if <condition pos:start="445:8" pos:end="445:25">(<expr pos:start="445:9" pos:end="445:24"><name pos:start="445:9" pos:end="445:18">cbp0_chunk</name> <operator pos:start="445:20" pos:end="445:21">!=</operator> <operator pos:start="445:23" pos:end="445:23">-</operator><literal type="number" pos:start="445:24" pos:end="445:24">1</literal></expr>)</condition> <block pos:start="445:27" pos:end="487:5">{<block_content pos:start="449:9" pos:end="485:9">



        <expr_stmt pos:start="449:9" pos:end="449:54"><expr pos:start="449:9" pos:end="449:53"><name pos:start="449:9" pos:end="449:18">chunk_size</name> <operator pos:start="449:20" pos:end="449:20">=</operator> <call pos:start="449:22" pos:end="449:53"><name pos:start="449:22" pos:end="449:28">AV_RB32</name><argument_list pos:start="449:29" pos:end="449:53">(<argument pos:start="449:30" pos:end="449:52"><expr pos:start="449:30" pos:end="449:52"><operator pos:start="449:30" pos:end="449:30">&amp;</operator><name pos:start="449:31" pos:end="449:52"><name pos:start="449:31" pos:end="449:31">s</name><operator pos:start="449:32" pos:end="449:33">-&gt;</operator><name pos:start="449:34" pos:end="449:36">buf</name><index pos:start="449:37" pos:end="449:52">[<expr pos:start="449:38" pos:end="449:51"><name pos:start="449:38" pos:end="449:47">cbp0_chunk</name> <operator pos:start="449:49" pos:end="449:49">+</operator> <literal type="number" pos:start="449:51" pos:end="449:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="451:9" pos:end="451:42"><expr pos:start="451:9" pos:end="451:41"><name pos:start="451:9" pos:end="451:18">cbp0_chunk</name> <operator pos:start="451:20" pos:end="451:21">+=</operator> <name pos:start="451:23" pos:end="451:41">CHUNK_PREAMBLE_SIZE</name></expr>;</expr_stmt>



        <comment type="block" pos:start="455:9" pos:end="455:41">/* accumulate partial codebook */</comment>

        <expr_stmt pos:start="457:9" pos:end="459:45"><expr pos:start="457:9" pos:end="459:44"><call pos:start="457:9" pos:end="459:44"><name pos:start="457:9" pos:end="457:14">memcpy</name><argument_list pos:start="457:15" pos:end="459:44">(<argument pos:start="457:16" pos:end="457:70"><expr pos:start="457:16" pos:end="457:70"><operator pos:start="457:16" pos:end="457:16">&amp;</operator><name pos:start="457:17" pos:end="457:70"><name pos:start="457:17" pos:end="457:17">s</name><operator pos:start="457:18" pos:end="457:19">-&gt;</operator><name pos:start="457:20" pos:end="457:39">next_codebook_buffer</name><index pos:start="457:40" pos:end="457:70">[<expr pos:start="457:41" pos:end="457:69"><name pos:start="457:41" pos:end="457:69"><name pos:start="457:41" pos:end="457:41">s</name><operator pos:start="457:42" pos:end="457:43">-&gt;</operator><name pos:start="457:44" pos:end="457:69">next_codebook_buffer_index</name></name></expr>]</index></name></expr></argument>,

            <argument pos:start="459:13" pos:end="459:31"><expr pos:start="459:13" pos:end="459:31"><operator pos:start="459:13" pos:end="459:13">&amp;</operator><name pos:start="459:14" pos:end="459:31"><name pos:start="459:14" pos:end="459:14">s</name><operator pos:start="459:15" pos:end="459:16">-&gt;</operator><name pos:start="459:17" pos:end="459:19">buf</name><index pos:start="459:20" pos:end="459:31">[<expr pos:start="459:21" pos:end="459:30"><name pos:start="459:21" pos:end="459:30">cbp0_chunk</name></expr>]</index></name></expr></argument>, <argument pos:start="459:34" pos:end="459:43"><expr pos:start="459:34" pos:end="459:43"><name pos:start="459:34" pos:end="459:43">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:52"><expr pos:start="461:9" pos:end="461:51"><name pos:start="461:9" pos:end="461:37"><name pos:start="461:9" pos:end="461:9">s</name><operator pos:start="461:10" pos:end="461:11">-&gt;</operator><name pos:start="461:12" pos:end="461:37">next_codebook_buffer_index</name></name> <operator pos:start="461:39" pos:end="461:40">+=</operator> <name pos:start="461:42" pos:end="461:51">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="465:9" pos:end="465:31"><expr pos:start="465:9" pos:end="465:30"><name pos:start="465:9" pos:end="465:28"><name pos:start="465:9" pos:end="465:9">s</name><operator pos:start="465:10" pos:end="465:11">-&gt;</operator><name pos:start="465:12" pos:end="465:28">partial_countdown</name></name><operator pos:start="465:29" pos:end="465:30">--</operator></expr>;</expr_stmt>

        <if_stmt pos:start="467:9" pos:end="485:9"><if pos:start="467:9" pos:end="485:9">if <condition pos:start="467:12" pos:end="467:38">(<expr pos:start="467:13" pos:end="467:37"><name pos:start="467:13" pos:end="467:32"><name pos:start="467:13" pos:end="467:13">s</name><operator pos:start="467:14" pos:end="467:15">-&gt;</operator><name pos:start="467:16" pos:end="467:32">partial_countdown</name></name> <operator pos:start="467:34" pos:end="467:35">==</operator> <literal type="number" pos:start="467:37" pos:end="467:37">0</literal></expr>)</condition> <block pos:start="467:40" pos:end="485:9">{<block_content pos:start="473:13" pos:end="483:52">



            <comment type="block" pos:start="471:13" pos:end="471:42">/* time to replace codebook */</comment>

            <expr_stmt pos:start="473:13" pos:end="475:47"><expr pos:start="473:13" pos:end="475:46"><call pos:start="473:13" pos:end="475:46"><name pos:start="473:13" pos:end="473:18">memcpy</name><argument_list pos:start="473:19" pos:end="475:46">(<argument pos:start="473:20" pos:end="473:30"><expr pos:start="473:20" pos:end="473:30"><name pos:start="473:20" pos:end="473:30"><name pos:start="473:20" pos:end="473:20">s</name><operator pos:start="473:21" pos:end="473:22">-&gt;</operator><name pos:start="473:23" pos:end="473:30">codebook</name></name></expr></argument>, <argument pos:start="473:33" pos:end="473:55"><expr pos:start="473:33" pos:end="473:55"><name pos:start="473:33" pos:end="473:55"><name pos:start="473:33" pos:end="473:33">s</name><operator pos:start="473:34" pos:end="473:35">-&gt;</operator><name pos:start="473:36" pos:end="473:55">next_codebook_buffer</name></name></expr></argument>,

                <argument pos:start="475:17" pos:end="475:45"><expr pos:start="475:17" pos:end="475:45"><name pos:start="475:17" pos:end="475:45"><name pos:start="475:17" pos:end="475:17">s</name><operator pos:start="475:18" pos:end="475:19">-&gt;</operator><name pos:start="475:20" pos:end="475:45">next_codebook_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="479:13" pos:end="479:34">/* reset accounting */</comment>

            <expr_stmt pos:start="481:13" pos:end="481:46"><expr pos:start="481:13" pos:end="481:45"><name pos:start="481:13" pos:end="481:41"><name pos:start="481:13" pos:end="481:13">s</name><operator pos:start="481:14" pos:end="481:15">-&gt;</operator><name pos:start="481:16" pos:end="481:41">next_codebook_buffer_index</name></name> <operator pos:start="481:43" pos:end="481:43">=</operator> <literal type="number" pos:start="481:45" pos:end="481:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:52"><expr pos:start="483:13" pos:end="483:51"><name pos:start="483:13" pos:end="483:32"><name pos:start="483:13" pos:end="483:13">s</name><operator pos:start="483:14" pos:end="483:15">-&gt;</operator><name pos:start="483:16" pos:end="483:32">partial_countdown</name></name> <operator pos:start="483:34" pos:end="483:34">=</operator> <name pos:start="483:36" pos:end="483:51"><name pos:start="483:36" pos:end="483:36">s</name><operator pos:start="483:37" pos:end="483:38">-&gt;</operator><name pos:start="483:39" pos:end="483:51">partial_count</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="491:5" pos:end="535:5"><if pos:start="491:5" pos:end="535:5">if <condition pos:start="491:8" pos:end="491:25">(<expr pos:start="491:9" pos:end="491:24"><name pos:start="491:9" pos:end="491:18">cbpz_chunk</name> <operator pos:start="491:20" pos:end="491:21">!=</operator> <operator pos:start="491:23" pos:end="491:23">-</operator><literal type="number" pos:start="491:24" pos:end="491:24">1</literal></expr>)</condition> <block pos:start="491:27" pos:end="535:5">{<block_content pos:start="495:9" pos:end="533:9">



        <expr_stmt pos:start="495:9" pos:end="495:54"><expr pos:start="495:9" pos:end="495:53"><name pos:start="495:9" pos:end="495:18">chunk_size</name> <operator pos:start="495:20" pos:end="495:20">=</operator> <call pos:start="495:22" pos:end="495:53"><name pos:start="495:22" pos:end="495:28">AV_RB32</name><argument_list pos:start="495:29" pos:end="495:53">(<argument pos:start="495:30" pos:end="495:52"><expr pos:start="495:30" pos:end="495:52"><operator pos:start="495:30" pos:end="495:30">&amp;</operator><name pos:start="495:31" pos:end="495:52"><name pos:start="495:31" pos:end="495:31">s</name><operator pos:start="495:32" pos:end="495:33">-&gt;</operator><name pos:start="495:34" pos:end="495:36">buf</name><index pos:start="495:37" pos:end="495:52">[<expr pos:start="495:38" pos:end="495:51"><name pos:start="495:38" pos:end="495:47">cbpz_chunk</name> <operator pos:start="495:49" pos:end="495:49">+</operator> <literal type="number" pos:start="495:51" pos:end="495:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="497:9" pos:end="497:42"><expr pos:start="497:9" pos:end="497:41"><name pos:start="497:9" pos:end="497:18">cbpz_chunk</name> <operator pos:start="497:20" pos:end="497:21">+=</operator> <name pos:start="497:23" pos:end="497:41">CHUNK_PREAMBLE_SIZE</name></expr>;</expr_stmt>



        <comment type="block" pos:start="501:9" pos:end="501:41">/* accumulate partial codebook */</comment>

        <expr_stmt pos:start="503:9" pos:end="505:45"><expr pos:start="503:9" pos:end="505:44"><call pos:start="503:9" pos:end="505:44"><name pos:start="503:9" pos:end="503:14">memcpy</name><argument_list pos:start="503:15" pos:end="505:44">(<argument pos:start="503:16" pos:end="503:70"><expr pos:start="503:16" pos:end="503:70"><operator pos:start="503:16" pos:end="503:16">&amp;</operator><name pos:start="503:17" pos:end="503:70"><name pos:start="503:17" pos:end="503:17">s</name><operator pos:start="503:18" pos:end="503:19">-&gt;</operator><name pos:start="503:20" pos:end="503:39">next_codebook_buffer</name><index pos:start="503:40" pos:end="503:70">[<expr pos:start="503:41" pos:end="503:69"><name pos:start="503:41" pos:end="503:69"><name pos:start="503:41" pos:end="503:41">s</name><operator pos:start="503:42" pos:end="503:43">-&gt;</operator><name pos:start="503:44" pos:end="503:69">next_codebook_buffer_index</name></name></expr>]</index></name></expr></argument>,

            <argument pos:start="505:13" pos:end="505:31"><expr pos:start="505:13" pos:end="505:31"><operator pos:start="505:13" pos:end="505:13">&amp;</operator><name pos:start="505:14" pos:end="505:31"><name pos:start="505:14" pos:end="505:14">s</name><operator pos:start="505:15" pos:end="505:16">-&gt;</operator><name pos:start="505:17" pos:end="505:19">buf</name><index pos:start="505:20" pos:end="505:31">[<expr pos:start="505:21" pos:end="505:30"><name pos:start="505:21" pos:end="505:30">cbpz_chunk</name></expr>]</index></name></expr></argument>, <argument pos:start="505:34" pos:end="505:43"><expr pos:start="505:34" pos:end="505:43"><name pos:start="505:34" pos:end="505:43">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="507:9" pos:end="507:52"><expr pos:start="507:9" pos:end="507:51"><name pos:start="507:9" pos:end="507:37"><name pos:start="507:9" pos:end="507:9">s</name><operator pos:start="507:10" pos:end="507:11">-&gt;</operator><name pos:start="507:12" pos:end="507:37">next_codebook_buffer_index</name></name> <operator pos:start="507:39" pos:end="507:40">+=</operator> <name pos:start="507:42" pos:end="507:51">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="511:9" pos:end="511:31"><expr pos:start="511:9" pos:end="511:30"><name pos:start="511:9" pos:end="511:28"><name pos:start="511:9" pos:end="511:9">s</name><operator pos:start="511:10" pos:end="511:11">-&gt;</operator><name pos:start="511:12" pos:end="511:28">partial_countdown</name></name><operator pos:start="511:29" pos:end="511:30">--</operator></expr>;</expr_stmt>

        <if_stmt pos:start="513:9" pos:end="533:9"><if pos:start="513:9" pos:end="533:9">if <condition pos:start="513:12" pos:end="513:38">(<expr pos:start="513:13" pos:end="513:37"><name pos:start="513:13" pos:end="513:32"><name pos:start="513:13" pos:end="513:13">s</name><operator pos:start="513:14" pos:end="513:15">-&gt;</operator><name pos:start="513:16" pos:end="513:32">partial_countdown</name></name> <operator pos:start="513:34" pos:end="513:35">==</operator> <literal type="number" pos:start="513:37" pos:end="513:37">0</literal></expr>)</condition> <block pos:start="513:40" pos:end="533:9">{<block_content pos:start="519:13" pos:end="531:52">



            <comment type="block" pos:start="517:13" pos:end="517:37">/* decompress codebook */</comment>

            <expr_stmt pos:start="519:13" pos:end="523:50"><expr pos:start="519:13" pos:end="523:49"><call pos:start="519:13" pos:end="523:49"><name pos:start="519:13" pos:end="519:27">decode_format80</name><argument_list pos:start="519:28" pos:end="523:49">(<argument pos:start="519:29" pos:end="519:51"><expr pos:start="519:29" pos:end="519:51"><name pos:start="519:29" pos:end="519:51"><name pos:start="519:29" pos:end="519:29">s</name><operator pos:start="519:30" pos:end="519:31">-&gt;</operator><name pos:start="519:32" pos:end="519:51">next_codebook_buffer</name></name></expr></argument>,

                <argument pos:start="521:17" pos:end="521:45"><expr pos:start="521:17" pos:end="521:45"><name pos:start="521:17" pos:end="521:45"><name pos:start="521:17" pos:end="521:17">s</name><operator pos:start="521:18" pos:end="521:19">-&gt;</operator><name pos:start="521:20" pos:end="521:45">next_codebook_buffer_index</name></name></expr></argument>,

                <argument pos:start="523:17" pos:end="523:27"><expr pos:start="523:17" pos:end="523:27"><name pos:start="523:17" pos:end="523:27"><name pos:start="523:17" pos:end="523:17">s</name><operator pos:start="523:18" pos:end="523:19">-&gt;</operator><name pos:start="523:20" pos:end="523:27">codebook</name></name></expr></argument>, <argument pos:start="523:30" pos:end="523:45"><expr pos:start="523:30" pos:end="523:45"><name pos:start="523:30" pos:end="523:45"><name pos:start="523:30" pos:end="523:30">s</name><operator pos:start="523:31" pos:end="523:32">-&gt;</operator><name pos:start="523:33" pos:end="523:45">codebook_size</name></name></expr></argument>, <argument pos:start="523:48" pos:end="523:48"><expr pos:start="523:48" pos:end="523:48"><literal type="number" pos:start="523:48" pos:end="523:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="527:13" pos:end="527:34">/* reset accounting */</comment>

            <expr_stmt pos:start="529:13" pos:end="529:46"><expr pos:start="529:13" pos:end="529:45"><name pos:start="529:13" pos:end="529:41"><name pos:start="529:13" pos:end="529:13">s</name><operator pos:start="529:14" pos:end="529:15">-&gt;</operator><name pos:start="529:16" pos:end="529:41">next_codebook_buffer_index</name></name> <operator pos:start="529:43" pos:end="529:43">=</operator> <literal type="number" pos:start="529:45" pos:end="529:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:52"><expr pos:start="531:13" pos:end="531:51"><name pos:start="531:13" pos:end="531:32"><name pos:start="531:13" pos:end="531:13">s</name><operator pos:start="531:14" pos:end="531:15">-&gt;</operator><name pos:start="531:16" pos:end="531:32">partial_countdown</name></name> <operator pos:start="531:34" pos:end="531:34">=</operator> <name pos:start="531:36" pos:end="531:51"><name pos:start="531:36" pos:end="531:36">s</name><operator pos:start="531:37" pos:end="531:38">-&gt;</operator><name pos:start="531:39" pos:end="531:51">partial_count</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
