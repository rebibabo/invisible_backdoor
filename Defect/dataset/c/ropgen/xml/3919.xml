<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3919.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:37">tcg_gen_code_common</name><parameter_list pos:start="1:38" pos:end="5:53">(<parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:48">TCGContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:65"><decl pos:start="3:39" pos:end="3:65"><type pos:start="3:39" pos:end="3:65"><name pos:start="3:39" pos:end="3:51">tcg_insn_unit</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:65">gen_code_buf</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:52"><decl pos:start="5:39" pos:end="5:52"><type pos:start="5:39" pos:end="5:52"><name pos:start="5:39" pos:end="5:42">long</name></type> <name pos:start="5:44" pos:end="5:52">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="211:1">{<block_content pos:start="9:5" pos:end="209:14">

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">oi</name></decl>, <decl pos:start="9:13" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:19">oi_next</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="13:1" pos:end="13:18">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="15:5" pos:end="30:0"><if pos:start="15:5" pos:end="30:0">if <condition pos:start="15:8" pos:end="15:52">(<expr pos:start="15:9" pos:end="15:51"><call pos:start="15:9" pos:end="15:51"><name pos:start="15:9" pos:end="15:16">unlikely</name><argument_list pos:start="15:17" pos:end="15:51">(<argument pos:start="15:18" pos:end="15:50"><expr pos:start="15:18" pos:end="15:50"><call pos:start="15:18" pos:end="15:50"><name pos:start="15:18" pos:end="15:35">qemu_loglevel_mask</name><argument_list pos:start="15:36" pos:end="15:50">(<argument pos:start="15:37" pos:end="15:49"><expr pos:start="15:37" pos:end="15:49"><name pos:start="15:37" pos:end="15:49">CPU_LOG_TB_OP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:54" pos:end="30:0">{<block_content pos:start="17:9" pos:end="21:23">

        <expr_stmt pos:start="17:9" pos:end="17:26"><expr pos:start="17:9" pos:end="17:25"><call pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:16">qemu_log</name><argument_list pos:start="17:17" pos:end="17:25">(<argument pos:start="17:18" pos:end="17:24"><expr pos:start="17:18" pos:end="17:24"><literal type="string" pos:start="17:18" pos:end="17:24">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:24"><expr pos:start="19:9" pos:end="19:23"><call pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:20">tcg_dump_ops</name><argument_list pos:start="19:21" pos:end="19:23">(<argument pos:start="19:22" pos:end="19:22"><expr pos:start="19:22" pos:end="19:22"><name pos:start="19:22" pos:end="19:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><call pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:16">qemu_log</name><argument_list pos:start="21:17" pos:end="21:22">(<argument pos:start="21:18" pos:end="21:21"><expr pos:start="21:18" pos:end="21:21"><literal type="string" pos:start="21:18" pos:end="21:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="29:1" pos:end="29:22">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="31:5" pos:end="38:0"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:15">opt_time</name></name> <operator pos:start="31:17" pos:end="31:18">-=</operator> <call pos:start="31:20" pos:end="31:37"><name pos:start="31:20" pos:end="31:35">profile_getclock</name><argument_list pos:start="31:36" pos:end="31:37">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="37:1" pos:end="37:28">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:28">USE_TCG_OPTIMIZATIONS</name></cpp:ifdef>

    <expr_stmt pos:start="39:5" pos:end="46:0"><expr pos:start="39:5" pos:end="39:19"><call pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:16">tcg_optimize</name><argument_list pos:start="39:17" pos:end="39:19">(<argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><name pos:start="39:18" pos:end="39:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="45:1" pos:end="45:22">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:15">opt_time</name></name> <operator pos:start="47:17" pos:end="47:18">+=</operator> <call pos:start="47:20" pos:end="47:37"><name pos:start="47:20" pos:end="47:35">profile_getclock</name><argument_list pos:start="47:36" pos:end="47:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:36"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:14">la_time</name></name> <operator pos:start="49:16" pos:end="49:17">-=</operator> <call pos:start="49:19" pos:end="49:36"><name pos:start="49:19" pos:end="49:34">profile_getclock</name><argument_list pos:start="49:35" pos:end="49:36">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="55:5" pos:end="60:0"><expr pos:start="55:5" pos:end="55:28"><call pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:25">tcg_liveness_analysis</name><argument_list pos:start="55:26" pos:end="55:28">(<argument pos:start="55:27" pos:end="55:27"><expr pos:start="55:27" pos:end="55:27"><name pos:start="55:27" pos:end="55:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="59:1" pos:end="59:22">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="61:5" pos:end="68:0"><expr pos:start="61:5" pos:end="61:36"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:14">la_time</name></name> <operator pos:start="61:16" pos:end="61:17">+=</operator> <call pos:start="61:19" pos:end="61:36"><name pos:start="61:19" pos:end="61:34">profile_getclock</name><argument_list pos:start="61:35" pos:end="61:36">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="67:1" pos:end="67:18">#<cpp:directive pos:start="67:2" pos:end="67:6">ifdef</cpp:directive> <name pos:start="67:8" pos:end="67:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="69:5" pos:end="80:0"><if pos:start="69:5" pos:end="80:0">if <condition pos:start="69:8" pos:end="69:56">(<expr pos:start="69:9" pos:end="69:55"><call pos:start="69:9" pos:end="69:55"><name pos:start="69:9" pos:end="69:16">unlikely</name><argument_list pos:start="69:17" pos:end="69:55">(<argument pos:start="69:18" pos:end="69:54"><expr pos:start="69:18" pos:end="69:54"><call pos:start="69:18" pos:end="69:54"><name pos:start="69:18" pos:end="69:35">qemu_loglevel_mask</name><argument_list pos:start="69:36" pos:end="69:54">(<argument pos:start="69:37" pos:end="69:53"><expr pos:start="69:37" pos:end="69:53"><name pos:start="69:37" pos:end="69:53">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:58" pos:end="80:0">{<block_content pos:start="71:9" pos:end="75:23">

        <expr_stmt pos:start="71:9" pos:end="71:67"><expr pos:start="71:9" pos:end="71:66"><call pos:start="71:9" pos:end="71:66"><name pos:start="71:9" pos:end="71:16">qemu_log</name><argument_list pos:start="71:17" pos:end="71:66">(<argument pos:start="71:18" pos:end="71:65"><expr pos:start="71:18" pos:end="71:65"><literal type="string" pos:start="71:18" pos:end="71:65">"OP after optimization and liveness analysis:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><call pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:20">tcg_dump_ops</name><argument_list pos:start="73:21" pos:end="73:23">(<argument pos:start="73:22" pos:end="73:22"><expr pos:start="73:22" pos:end="73:22"><name pos:start="73:22" pos:end="73:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:23"><expr pos:start="75:9" pos:end="75:22"><call pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:16">qemu_log</name><argument_list pos:start="75:17" pos:end="75:22">(<argument pos:start="75:18" pos:end="75:21"><expr pos:start="75:18" pos:end="75:21"><literal type="string" pos:start="75:18" pos:end="75:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><call pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:23">tcg_reg_alloc_start</name><argument_list pos:start="83:24" pos:end="83:26">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:31"><expr pos:start="87:5" pos:end="87:30"><name pos:start="87:5" pos:end="87:15"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:15">code_buf</name></name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:30">gen_code_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:31"><expr pos:start="89:5" pos:end="89:30"><name pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:15">code_ptr</name></name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:30">gen_code_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:23"><expr pos:start="93:5" pos:end="93:22"><call pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:19">tcg_out_tb_init</name><argument_list pos:start="93:20" pos:end="93:22">(<argument pos:start="93:21" pos:end="93:21"><expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="97:5" pos:end="201:5">for <control pos:start="97:9" pos:end="97:57">(<init pos:start="97:10" pos:end="97:34"><expr pos:start="97:10" pos:end="97:33"><name pos:start="97:10" pos:end="97:11">oi</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:33"><name pos:start="97:15" pos:end="97:15">s</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:33">gen_first_op_idx</name></name></expr>;</init> <condition pos:start="97:36" pos:end="97:43"><expr pos:start="97:36" pos:end="97:42"><name pos:start="97:36" pos:end="97:37">oi</name> <operator pos:start="97:39" pos:end="97:40">&gt;=</operator> <literal type="number" pos:start="97:42" pos:end="97:42">0</literal></expr>;</condition> <incr pos:start="97:45" pos:end="97:56"><expr pos:start="97:45" pos:end="97:56"><name pos:start="97:45" pos:end="97:46">oi</name> <operator pos:start="97:48" pos:end="97:48">=</operator> <name pos:start="97:50" pos:end="97:56">oi_next</name></expr></incr>)</control> <block pos:start="97:59" pos:end="201:5">{<block_content pos:start="99:9" pos:end="200:0">

        <decl_stmt pos:start="99:9" pos:end="99:46"><decl pos:start="99:9" pos:end="99:45"><type pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:13">TCGOp</name> <modifier pos:start="99:15" pos:end="99:15">*</modifier> <specifier pos:start="99:17" pos:end="99:21">const</specifier></type> <name pos:start="99:23" pos:end="99:24">op</name> <init pos:start="99:26" pos:end="99:45">= <expr pos:start="99:28" pos:end="99:45"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:45"><name pos:start="99:29" pos:end="99:29">s</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:41">gen_op_buf</name><index pos:start="99:42" pos:end="99:45">[<expr pos:start="99:43" pos:end="99:44"><name pos:start="99:43" pos:end="99:44">oi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:60"><decl pos:start="101:9" pos:end="101:59"><type pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:14">TCGArg</name> <modifier pos:start="101:16" pos:end="101:16">*</modifier> <specifier pos:start="101:18" pos:end="101:22">const</specifier></type> <name pos:start="101:24" pos:end="101:27">args</name> <init pos:start="101:29" pos:end="101:59">= <expr pos:start="101:31" pos:end="101:59"><operator pos:start="101:31" pos:end="101:31">&amp;</operator><name pos:start="101:32" pos:end="101:59"><name pos:start="101:32" pos:end="101:32">s</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:49">gen_opparam_buf</name><index pos:start="101:50" pos:end="101:59">[<expr pos:start="101:51" pos:end="101:58"><name pos:start="101:51" pos:end="101:58"><name pos:start="101:51" pos:end="101:52">op</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:58">args</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:32"><decl pos:start="103:9" pos:end="103:31"><type pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:17">TCGOpcode</name></type> <name pos:start="103:19" pos:end="103:21">opc</name> <init pos:start="103:23" pos:end="103:31">= <expr pos:start="103:25" pos:end="103:31"><name pos:start="103:25" pos:end="103:31"><name pos:start="103:25" pos:end="103:26">op</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:31">opc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:48"><decl pos:start="105:9" pos:end="105:47"><type pos:start="105:9" pos:end="105:24"><specifier pos:start="105:9" pos:end="105:13">const</specifier> <name pos:start="105:15" pos:end="105:22">TCGOpDef</name> <modifier pos:start="105:24" pos:end="105:24">*</modifier></type><name pos:start="105:25" pos:end="105:27">def</name> <init pos:start="105:29" pos:end="105:47">= <expr pos:start="105:31" pos:end="105:47"><operator pos:start="105:31" pos:end="105:31">&amp;</operator><name pos:start="105:32" pos:end="105:47"><name pos:start="105:32" pos:end="105:42">tcg_op_defs</name><index pos:start="105:43" pos:end="105:47">[<expr pos:start="105:44" pos:end="105:46"><name pos:start="105:44" pos:end="105:46">opc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:49"><decl pos:start="107:9" pos:end="107:48"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">uint16_t</name></type> <name pos:start="107:18" pos:end="107:26">dead_args</name> <init pos:start="107:28" pos:end="107:48">= <expr pos:start="107:30" pos:end="107:48"><name pos:start="107:30" pos:end="107:48"><name pos:start="107:30" pos:end="107:30">s</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:44">op_dead_args</name><index pos:start="107:45" pos:end="107:48">[<expr pos:start="107:46" pos:end="107:47"><name pos:start="107:46" pos:end="107:47">oi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:48"><decl pos:start="109:9" pos:end="109:47"><type pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:15">uint8_t</name></type> <name pos:start="109:17" pos:end="109:25">sync_args</name> <init pos:start="109:27" pos:end="109:47">= <expr pos:start="109:29" pos:end="109:47"><name pos:start="109:29" pos:end="109:47"><name pos:start="109:29" pos:end="109:29">s</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:43">op_sync_args</name><index pos:start="109:44" pos:end="109:47">[<expr pos:start="109:45" pos:end="109:46"><name pos:start="109:45" pos:end="109:46">oi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="113:9" pos:end="116:0"><expr pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:15">oi_next</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:26"><name pos:start="113:19" pos:end="113:20">op</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:26">next</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="115:1" pos:end="115:22">#<cpp:directive pos:start="115:2" pos:end="115:6">ifdef</cpp:directive> <name pos:start="115:8" pos:end="115:22">CONFIG_PROFILER</name></cpp:ifdef>

        <expr_stmt pos:start="117:9" pos:end="120:0"><expr pos:start="117:9" pos:end="117:33"><name pos:start="117:9" pos:end="117:31"><name pos:start="117:9" pos:end="117:26">tcg_table_op_count</name><index pos:start="117:27" pos:end="117:31">[<expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:30">opc</name></expr>]</index></name><operator pos:start="117:32" pos:end="117:33">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>



        <switch pos:start="123:9" pos:end="187:9">switch <condition pos:start="123:16" pos:end="123:20">(<expr pos:start="123:17" pos:end="123:19"><name pos:start="123:17" pos:end="123:19">opc</name></expr>)</condition> <block pos:start="123:22" pos:end="187:9">{<block_content pos:start="125:9" pos:end="185:18">

        <case pos:start="125:9" pos:end="125:30">case <expr pos:start="125:14" pos:end="125:29"><name pos:start="125:14" pos:end="125:29">INDEX_op_mov_i32</name></expr>:</case>

        <case pos:start="127:9" pos:end="127:30">case <expr pos:start="127:14" pos:end="127:29"><name pos:start="127:14" pos:end="127:29">INDEX_op_mov_i64</name></expr>:</case>

            <expr_stmt pos:start="129:13" pos:end="129:66"><expr pos:start="129:13" pos:end="129:65"><call pos:start="129:13" pos:end="129:65"><name pos:start="129:13" pos:end="129:29">tcg_reg_alloc_mov</name><argument_list pos:start="129:30" pos:end="129:65">(<argument pos:start="129:31" pos:end="129:31"><expr pos:start="129:31" pos:end="129:31"><name pos:start="129:31" pos:end="129:31">s</name></expr></argument>, <argument pos:start="129:34" pos:end="129:36"><expr pos:start="129:34" pos:end="129:36"><name pos:start="129:34" pos:end="129:36">def</name></expr></argument>, <argument pos:start="129:39" pos:end="129:42"><expr pos:start="129:39" pos:end="129:42"><name pos:start="129:39" pos:end="129:42">args</name></expr></argument>, <argument pos:start="129:45" pos:end="129:53"><expr pos:start="129:45" pos:end="129:53"><name pos:start="129:45" pos:end="129:53">dead_args</name></expr></argument>, <argument pos:start="129:56" pos:end="129:64"><expr pos:start="129:56" pos:end="129:64"><name pos:start="129:56" pos:end="129:64">sync_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        <case pos:start="133:9" pos:end="133:31">case <expr pos:start="133:14" pos:end="133:30"><name pos:start="133:14" pos:end="133:30">INDEX_op_movi_i32</name></expr>:</case>

        <case pos:start="135:9" pos:end="135:31">case <expr pos:start="135:14" pos:end="135:30"><name pos:start="135:14" pos:end="135:30">INDEX_op_movi_i64</name></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:62"><expr pos:start="137:13" pos:end="137:61"><call pos:start="137:13" pos:end="137:61"><name pos:start="137:13" pos:end="137:30">tcg_reg_alloc_movi</name><argument_list pos:start="137:31" pos:end="137:61">(<argument pos:start="137:32" pos:end="137:32"><expr pos:start="137:32" pos:end="137:32"><name pos:start="137:32" pos:end="137:32">s</name></expr></argument>, <argument pos:start="137:35" pos:end="137:38"><expr pos:start="137:35" pos:end="137:38"><name pos:start="137:35" pos:end="137:38">args</name></expr></argument>, <argument pos:start="137:41" pos:end="137:49"><expr pos:start="137:41" pos:end="137:49"><name pos:start="137:41" pos:end="137:49">dead_args</name></expr></argument>, <argument pos:start="137:52" pos:end="137:60"><expr pos:start="137:52" pos:end="137:60"><name pos:start="137:52" pos:end="137:60">sync_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <case pos:start="141:9" pos:end="141:39">case <expr pos:start="141:14" pos:end="141:38"><name pos:start="141:14" pos:end="141:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:30">case <expr pos:start="145:14" pos:end="145:29"><name pos:start="145:14" pos:end="145:29">INDEX_op_discard</name></expr>:</case>

            <expr_stmt pos:start="147:13" pos:end="147:34"><expr pos:start="147:13" pos:end="147:33"><call pos:start="147:13" pos:end="147:33"><name pos:start="147:13" pos:end="147:21">temp_dead</name><argument_list pos:start="147:22" pos:end="147:33">(<argument pos:start="147:23" pos:end="147:23"><expr pos:start="147:23" pos:end="147:23"><name pos:start="147:23" pos:end="147:23">s</name></expr></argument>, <argument pos:start="147:26" pos:end="147:32"><expr pos:start="147:26" pos:end="147:32"><name pos:start="147:26" pos:end="147:32"><name pos:start="147:26" pos:end="147:29">args</name><index pos:start="147:30" pos:end="147:32">[<expr pos:start="147:31" pos:end="147:31"><literal type="number" pos:start="147:31" pos:end="147:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:32">case <expr pos:start="151:14" pos:end="151:31"><name pos:start="151:14" pos:end="151:31">INDEX_op_set_label</name></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:54"><expr pos:start="153:13" pos:end="153:53"><call pos:start="153:13" pos:end="153:53"><name pos:start="153:13" pos:end="153:32">tcg_reg_alloc_bb_end</name><argument_list pos:start="153:33" pos:end="153:53">(<argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><name pos:start="153:34" pos:end="153:34">s</name></expr></argument>, <argument pos:start="153:37" pos:end="153:52"><expr pos:start="153:37" pos:end="153:52"><name pos:start="153:37" pos:end="153:52"><name pos:start="153:37" pos:end="153:37">s</name><operator pos:start="153:38" pos:end="153:39">-&gt;</operator><name pos:start="153:40" pos:end="153:52">reserved_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:51"><expr pos:start="155:13" pos:end="155:50"><call pos:start="155:13" pos:end="155:50"><name pos:start="155:13" pos:end="155:25">tcg_out_label</name><argument_list pos:start="155:26" pos:end="155:50">(<argument pos:start="155:27" pos:end="155:27"><expr pos:start="155:27" pos:end="155:27"><name pos:start="155:27" pos:end="155:27">s</name></expr></argument>, <argument pos:start="155:30" pos:end="155:36"><expr pos:start="155:30" pos:end="155:36"><name pos:start="155:30" pos:end="155:36"><name pos:start="155:30" pos:end="155:33">args</name><index pos:start="155:34" pos:end="155:36">[<expr pos:start="155:35" pos:end="155:35"><literal type="number" pos:start="155:35" pos:end="155:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:39" pos:end="155:49"><expr pos:start="155:39" pos:end="155:49"><name pos:start="155:39" pos:end="155:49"><name pos:start="155:39" pos:end="155:39">s</name><operator pos:start="155:40" pos:end="155:41">-&gt;</operator><name pos:start="155:42" pos:end="155:49">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:27">case <expr pos:start="159:14" pos:end="159:26"><name pos:start="159:14" pos:end="159:26">INDEX_op_call</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="163:53"><expr pos:start="161:13" pos:end="163:52"><call pos:start="161:13" pos:end="163:52"><name pos:start="161:13" pos:end="161:30">tcg_reg_alloc_call</name><argument_list pos:start="161:31" pos:end="163:52">(<argument pos:start="161:32" pos:end="161:32"><expr pos:start="161:32" pos:end="161:32"><name pos:start="161:32" pos:end="161:32">s</name></expr></argument>, <argument pos:start="161:35" pos:end="161:43"><expr pos:start="161:35" pos:end="161:43"><name pos:start="161:35" pos:end="161:43"><name pos:start="161:35" pos:end="161:36">op</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:43">callo</name></name></expr></argument>, <argument pos:start="161:46" pos:end="161:54"><expr pos:start="161:46" pos:end="161:54"><name pos:start="161:46" pos:end="161:54"><name pos:start="161:46" pos:end="161:47">op</name><operator pos:start="161:48" pos:end="161:49">-&gt;</operator><name pos:start="161:50" pos:end="161:54">calli</name></name></expr></argument>, <argument pos:start="161:57" pos:end="161:60"><expr pos:start="161:57" pos:end="161:60"><name pos:start="161:57" pos:end="161:60">args</name></expr></argument>,

                               <argument pos:start="163:32" pos:end="163:40"><expr pos:start="163:32" pos:end="163:40"><name pos:start="163:32" pos:end="163:40">dead_args</name></expr></argument>, <argument pos:start="163:43" pos:end="163:51"><expr pos:start="163:43" pos:end="163:51"><name pos:start="163:43" pos:end="163:51">sync_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <default pos:start="167:9" pos:end="167:16">default:</default>

            <comment type="block" pos:start="169:13" pos:end="169:79">/* Sanity check that we've not introduced any unhandled opcodes. */</comment>

            <if_stmt pos:start="171:13" pos:end="175:13"><if pos:start="171:13" pos:end="175:13">if <condition pos:start="171:16" pos:end="171:49">(<expr pos:start="171:17" pos:end="171:48"><name pos:start="171:17" pos:end="171:26"><name pos:start="171:17" pos:end="171:19">def</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:26">flags</name></name> <operator pos:start="171:28" pos:end="171:28">&amp;</operator> <name pos:start="171:30" pos:end="171:48">TCG_OPF_NOT_PRESENT</name></expr>)</condition> <block pos:start="171:51" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:28">

                <expr_stmt pos:start="173:17" pos:end="173:28"><expr pos:start="173:17" pos:end="173:27"><call pos:start="173:17" pos:end="173:27"><name pos:start="173:17" pos:end="173:25">tcg_abort</name><argument_list pos:start="173:26" pos:end="173:27">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="177:13" pos:end="181:47">/* Note: in order to speed up the code, it would be much

               faster to have specialized register allocator functions for

               some common argument patterns */</comment>

            <expr_stmt pos:start="183:13" pos:end="183:70"><expr pos:start="183:13" pos:end="183:69"><call pos:start="183:13" pos:end="183:69"><name pos:start="183:13" pos:end="183:28">tcg_reg_alloc_op</name><argument_list pos:start="183:29" pos:end="183:69">(<argument pos:start="183:30" pos:end="183:30"><expr pos:start="183:30" pos:end="183:30"><name pos:start="183:30" pos:end="183:30">s</name></expr></argument>, <argument pos:start="183:33" pos:end="183:35"><expr pos:start="183:33" pos:end="183:35"><name pos:start="183:33" pos:end="183:35">def</name></expr></argument>, <argument pos:start="183:38" pos:end="183:40"><expr pos:start="183:38" pos:end="183:40"><name pos:start="183:38" pos:end="183:40">opc</name></expr></argument>, <argument pos:start="183:43" pos:end="183:46"><expr pos:start="183:43" pos:end="183:46"><name pos:start="183:43" pos:end="183:46">args</name></expr></argument>, <argument pos:start="183:49" pos:end="183:57"><expr pos:start="183:49" pos:end="183:57"><name pos:start="183:49" pos:end="183:57">dead_args</name></expr></argument>, <argument pos:start="183:60" pos:end="183:68"><expr pos:start="183:60" pos:end="183:68"><name pos:start="183:60" pos:end="183:68">sync_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="189:9" pos:end="196:0"><if pos:start="189:9" pos:end="196:0">if <condition pos:start="189:12" pos:end="189:67">(<expr pos:start="189:13" pos:end="189:66"><name pos:start="189:13" pos:end="189:21">search_pc</name> <operator pos:start="189:23" pos:end="189:24">&gt;=</operator> <literal type="number" pos:start="189:26" pos:end="189:26">0</literal> <operator pos:start="189:28" pos:end="189:29">&amp;&amp;</operator> <name pos:start="189:31" pos:end="189:39">search_pc</name> <operator pos:start="189:41" pos:end="189:41">&lt;</operator> <call pos:start="189:43" pos:end="189:66"><name pos:start="189:43" pos:end="189:63">tcg_current_code_size</name><argument_list pos:start="189:64" pos:end="189:66">(<argument pos:start="189:65" pos:end="189:65"><expr pos:start="189:65" pos:end="189:65"><name pos:start="189:65" pos:end="189:65">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:69" pos:end="196:0">{<block_content pos:start="191:13" pos:end="191:22">

            <return pos:start="191:13" pos:end="191:22">return <expr pos:start="191:20" pos:end="191:21"><name pos:start="191:20" pos:end="191:21">oi</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="195:1" pos:end="195:14">#<cpp:directive pos:start="195:2" pos:end="195:7">ifndef</cpp:directive> <name pos:start="195:9" pos:end="195:14">NDEBUG</name></cpp:ifndef>

        <expr_stmt pos:start="197:9" pos:end="200:0"><expr pos:start="197:9" pos:end="197:21"><call pos:start="197:9" pos:end="197:21"><name pos:start="197:9" pos:end="197:18">check_regs</name><argument_list pos:start="197:19" pos:end="197:21">(<argument pos:start="197:20" pos:end="197:20"><expr pos:start="197:20" pos:end="197:20"><name pos:start="197:20" pos:end="197:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="199:1" pos:end="199:6">#<cpp:directive pos:start="199:2" pos:end="199:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>



    <comment type="block" pos:start="205:5" pos:end="205:54">/* Generate TB finalization at the end of block */</comment>

    <expr_stmt pos:start="207:5" pos:end="207:27"><expr pos:start="207:5" pos:end="207:26"><call pos:start="207:5" pos:end="207:26"><name pos:start="207:5" pos:end="207:23">tcg_out_tb_finalize</name><argument_list pos:start="207:24" pos:end="207:26">(<argument pos:start="207:25" pos:end="207:25"><expr pos:start="207:25" pos:end="207:25"><name pos:start="207:25" pos:end="207:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="209:5" pos:end="209:14">return <expr pos:start="209:12" pos:end="209:13"><operator pos:start="209:12" pos:end="209:12">-</operator><literal type="number" pos:start="209:13" pos:end="209:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
