<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2899.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">intel_hda_set_st_ctl</name><parameter_list pos:start="1:33" pos:end="1:88">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:46">IntelHDAState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">d</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:73"><decl pos:start="1:52" pos:end="1:73"><type pos:start="1:52" pos:end="1:73"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:68">IntelHDAReg</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">reg</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:87"><decl pos:start="1:76" pos:end="1:87"><type pos:start="1:76" pos:end="1:87"><name pos:start="1:76" pos:end="1:83">uint32_t</name></type> <name pos:start="1:85" pos:end="1:87">old</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:28">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:15">output</name> <init pos:start="5:17" pos:end="5:34">= <expr pos:start="5:19" pos:end="5:34"><name pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:21">reg</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:29">stream</name></name> <operator pos:start="5:31" pos:end="5:32">&gt;=</operator> <literal type="number" pos:start="5:34" pos:end="5:34">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">IntelHDAStream</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">st</name> <init pos:start="7:24" pos:end="7:44">= <expr pos:start="7:26" pos:end="7:44"><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">d</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">st</name></name> <operator pos:start="7:32" pos:end="7:32">+</operator> <name pos:start="7:34" pos:end="7:44"><name pos:start="7:34" pos:end="7:36">reg</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:44">stream</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:23">(<expr pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:10">st</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:15">ctl</name></name> <operator pos:start="11:17" pos:end="11:17">&amp;</operator> <literal type="number" pos:start="11:19" pos:end="11:22">0x01</literal></expr>)</condition> <block pos:start="11:25" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:20">

        <comment type="block" pos:start="13:9" pos:end="13:19">/* reset */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:53"><expr pos:start="15:9" pos:end="15:52"><call pos:start="15:9" pos:end="15:52"><name pos:start="15:9" pos:end="15:14">dprint</name><argument_list pos:start="15:15" pos:end="15:52">(<argument pos:start="15:16" pos:end="15:16"><expr pos:start="15:16" pos:end="15:16"><name pos:start="15:16" pos:end="15:16">d</name></expr></argument>, <argument pos:start="15:19" pos:end="15:19"><expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">1</literal></expr></argument>, <argument pos:start="15:22" pos:end="15:38"><expr pos:start="15:22" pos:end="15:38"><literal type="string" pos:start="15:22" pos:end="15:38">"st #%d: reset\n"</literal></expr></argument>, <argument pos:start="15:41" pos:end="15:51"><expr pos:start="15:41" pos:end="15:51"><name pos:start="15:41" pos:end="15:51"><name pos:start="15:41" pos:end="15:43">reg</name><operator pos:start="15:44" pos:end="15:45">-&gt;</operator><name pos:start="15:46" pos:end="15:51">stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:20"><expr pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:10">st</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:15">ctl</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="49:5"><if pos:start="21:5" pos:end="49:5">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:11">st</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:16">ctl</name></name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <literal type="number" pos:start="21:20" pos:end="21:23">0x02</literal><operator pos:start="21:24" pos:end="21:24">)</operator> <operator pos:start="21:26" pos:end="21:27">!=</operator> <operator pos:start="21:29" pos:end="21:29">(</operator><name pos:start="21:30" pos:end="21:32">old</name> <operator pos:start="21:34" pos:end="21:34">&amp;</operator> <literal type="number" pos:start="21:36" pos:end="21:39">0x02</literal><operator pos:start="21:40" pos:end="21:40">)</operator></expr>)</condition> <block pos:start="21:43" pos:end="49:5">{<block_content pos:start="23:9" pos:end="47:9">

        <decl_stmt pos:start="23:9" pos:end="23:47"><decl pos:start="23:9" pos:end="23:46"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint32_t</name></type> <name pos:start="23:18" pos:end="23:21">stnr</name> <init pos:start="23:23" pos:end="23:46">= <expr pos:start="23:25" pos:end="23:46"><operator pos:start="23:25" pos:end="23:25">(</operator><name pos:start="23:26" pos:end="23:32"><name pos:start="23:26" pos:end="23:27">st</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:32">ctl</name></name> <operator pos:start="23:34" pos:end="23:35">&gt;&gt;</operator> <literal type="number" pos:start="23:37" pos:end="23:38">20</literal><operator pos:start="23:39" pos:end="23:39">)</operator> <operator pos:start="23:41" pos:end="23:41">&amp;</operator> <literal type="number" pos:start="23:43" pos:end="23:46">0x0f</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:29">/* run bit flipped */</comment>

        <if_stmt pos:start="27:9" pos:end="47:9"><if pos:start="27:9" pos:end="39:9">if <condition pos:start="27:12" pos:end="27:27">(<expr pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:14">st</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:19">ctl</name></name> <operator pos:start="27:21" pos:end="27:21">&amp;</operator> <literal type="number" pos:start="27:23" pos:end="27:26">0x02</literal></expr>)</condition> <block pos:start="27:29" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:59">

            <comment type="block" pos:start="29:13" pos:end="29:23">/* start */</comment>

            <expr_stmt pos:start="31:13" pos:end="33:47"><expr pos:start="31:13" pos:end="33:46"><call pos:start="31:13" pos:end="33:46"><name pos:start="31:13" pos:end="31:18">dprint</name><argument_list pos:start="31:19" pos:end="33:46">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><name pos:start="31:20" pos:end="31:20">d</name></expr></argument>, <argument pos:start="31:23" pos:end="31:23"><expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr></argument>, <argument pos:start="31:26" pos:end="31:65"><expr pos:start="31:26" pos:end="31:65"><literal type="string" pos:start="31:26" pos:end="31:65">"st #%d: start %d (ring buf %d bytes)\n"</literal></expr></argument>,

                   <argument pos:start="33:20" pos:end="33:30"><expr pos:start="33:20" pos:end="33:30"><name pos:start="33:20" pos:end="33:30"><name pos:start="33:20" pos:end="33:22">reg</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:30">stream</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">stnr</name></expr></argument>, <argument pos:start="33:39" pos:end="33:45"><expr pos:start="33:39" pos:end="33:45"><name pos:start="33:39" pos:end="33:45"><name pos:start="33:39" pos:end="33:40">st</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:45">cbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><call pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:31">intel_hda_parse_bdl</name><argument_list pos:start="35:32" pos:end="35:38">(<argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">d</name></expr></argument>, <argument pos:start="35:36" pos:end="35:37"><expr pos:start="35:36" pos:end="35:37"><name pos:start="35:36" pos:end="35:37">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:59"><expr pos:start="37:13" pos:end="37:58"><call pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:35">intel_hda_notify_codecs</name><argument_list pos:start="37:36" pos:end="37:58">(<argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><name pos:start="37:37" pos:end="37:37">d</name></expr></argument>, <argument pos:start="37:40" pos:end="37:43"><expr pos:start="37:40" pos:end="37:43"><name pos:start="37:40" pos:end="37:43">stnr</name></expr></argument>, <argument pos:start="37:46" pos:end="37:49"><expr pos:start="37:46" pos:end="37:49"><name pos:start="37:46" pos:end="37:49">true</name></expr></argument>, <argument pos:start="37:52" pos:end="37:57"><expr pos:start="37:52" pos:end="37:57"><name pos:start="37:52" pos:end="37:57">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="47:9">else <block pos:start="39:16" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:60">

            <comment type="block" pos:start="41:13" pos:end="41:22">/* stop */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:65"><expr pos:start="43:13" pos:end="43:64"><call pos:start="43:13" pos:end="43:64"><name pos:start="43:13" pos:end="43:18">dprint</name><argument_list pos:start="43:19" pos:end="43:64">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">d</name></expr></argument>, <argument pos:start="43:23" pos:end="43:23"><expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">1</literal></expr></argument>, <argument pos:start="43:26" pos:end="43:44"><expr pos:start="43:26" pos:end="43:44"><literal type="string" pos:start="43:26" pos:end="43:44">"st #%d: stop %d\n"</literal></expr></argument>, <argument pos:start="43:47" pos:end="43:57"><expr pos:start="43:47" pos:end="43:57"><name pos:start="43:47" pos:end="43:57"><name pos:start="43:47" pos:end="43:49">reg</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:57">stream</name></name></expr></argument>, <argument pos:start="43:60" pos:end="43:63"><expr pos:start="43:60" pos:end="43:63"><name pos:start="43:60" pos:end="43:63">stnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:60"><expr pos:start="45:13" pos:end="45:59"><call pos:start="45:13" pos:end="45:59"><name pos:start="45:13" pos:end="45:35">intel_hda_notify_codecs</name><argument_list pos:start="45:36" pos:end="45:59">(<argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><name pos:start="45:37" pos:end="45:37">d</name></expr></argument>, <argument pos:start="45:40" pos:end="45:43"><expr pos:start="45:40" pos:end="45:43"><name pos:start="45:40" pos:end="45:43">stnr</name></expr></argument>, <argument pos:start="45:46" pos:end="45:50"><expr pos:start="45:46" pos:end="45:50"><name pos:start="45:46" pos:end="45:50">false</name></expr></argument>, <argument pos:start="45:53" pos:end="45:58"><expr pos:start="45:53" pos:end="45:58"><name pos:start="45:53" pos:end="45:58">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><call pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:24">intel_hda_update_irq</name><argument_list pos:start="51:25" pos:end="51:27">(<argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
