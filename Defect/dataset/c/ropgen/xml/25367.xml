<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25367.c" pos:tabs="8"><function pos:start="1:1" pos:end="417:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">ohci_service_td</name><parameter_list pos:start="1:27" pos:end="1:63">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:36">OHCIState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">ohci</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:50">struct</name> <name pos:start="1:52" pos:end="1:58">ohci_ed</name></name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">ed</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="417:1">{<block_content pos:start="5:5" pos:end="415:55">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">dir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:14">len</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>, <decl pos:start="7:21" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:21" pos:end="7:26">pktlen</name> <init pos:start="7:28" pos:end="7:30">= <expr pos:start="7:30" pos:end="7:30"><literal type="number" pos:start="7:30" pos:end="7:30">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="9:1" pos:end="9:19">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:19">DEBUG_PACKET</name></cpp:ifdef>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">str</name> <init pos:start="11:21" pos:end="11:26">= <expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">USBDevice</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:18">ohci_td</name></name></type> <name pos:start="23:20" pos:end="23:21">td</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:15"><decl pos:start="27:5" pos:end="27:14"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:14">flag_r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">completion</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:8">addr</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:19"><name pos:start="33:12" pos:end="33:13">ed</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">head</name></name> <operator pos:start="33:21" pos:end="33:21">&amp;</operator> <name pos:start="33:23" pos:end="33:36">OHCI_DPTR_MASK</name></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:67">/* See if this TD has already been submitted to the device.  */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:14">completion</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <operator pos:start="37:18" pos:end="37:18">(</operator><name pos:start="37:19" pos:end="37:22">addr</name> <operator pos:start="37:24" pos:end="37:25">==</operator> <name pos:start="37:27" pos:end="37:40"><name pos:start="37:27" pos:end="37:30">ohci</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:40">async_td</name></name><operator pos:start="37:41" pos:end="37:41">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:44">(<expr pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:18">completion</name> <operator pos:start="39:20" pos:end="39:21">&amp;&amp;</operator> <operator pos:start="39:23" pos:end="39:23">!</operator><name pos:start="39:24" pos:end="39:43"><name pos:start="39:24" pos:end="39:27">ohci</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:43">async_complete</name></name></expr>)</condition> <block pos:start="39:46" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:17">

<cpp:ifdef pos:start="41:1" pos:end="41:19">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:19">DEBUG_PACKET</name></cpp:ifdef>

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:38"><call pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:15">DPRINTF</name><argument_list pos:start="43:16" pos:end="43:38">(<argument pos:start="43:17" pos:end="43:37"><expr pos:start="43:17" pos:end="43:37"><literal type="string" pos:start="43:17" pos:end="43:37">"Skipping async TD\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:39">(<expr pos:start="51:9" pos:end="51:38"><operator pos:start="51:9" pos:end="51:9">!</operator><call pos:start="51:10" pos:end="51:38"><name pos:start="51:10" pos:end="51:21">ohci_read_td</name><argument_list pos:start="51:22" pos:end="51:38">(<argument pos:start="51:23" pos:end="51:26"><expr pos:start="51:23" pos:end="51:26"><name pos:start="51:23" pos:end="51:26">ohci</name></expr></argument>, <argument pos:start="51:29" pos:end="51:32"><expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">addr</name></expr></argument>, <argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><operator pos:start="51:35" pos:end="51:35">&amp;</operator><name pos:start="51:36" pos:end="51:37">td</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:41" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:17">

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><call pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:64">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:57"><expr pos:start="53:25" pos:end="53:57"><literal type="string" pos:start="53:25" pos:end="53:57">"usb-ohci: TD read error at %x\n"</literal></expr></argument>, <argument pos:start="53:60" pos:end="53:63"><expr pos:start="53:60" pos:end="53:63"><name pos:start="53:60" pos:end="53:63">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:7">dir</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:34"><name pos:start="61:11" pos:end="61:17">OHCI_BM</name><argument_list pos:start="61:18" pos:end="61:34">(<argument pos:start="61:19" pos:end="61:27"><expr pos:start="61:19" pos:end="61:27"><name pos:start="61:19" pos:end="61:27"><name pos:start="61:19" pos:end="61:20">ed</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:27">flags</name></name></expr></argument>, <argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">ED_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="63:5" pos:end="79:5">switch <condition pos:start="63:12" pos:end="63:16">(<expr pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">dir</name></expr>)</condition> <block pos:start="63:18" pos:end="79:5">{<block_content pos:start="65:5" pos:end="77:14">

    <case pos:start="65:5" pos:end="65:25">case <expr pos:start="65:10" pos:end="65:24"><name pos:start="65:10" pos:end="65:24">OHCI_TD_DIR_OUT</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:24">case <expr pos:start="67:10" pos:end="67:23"><name pos:start="67:10" pos:end="67:23">OHCI_TD_DIR_IN</name></expr>:</case>

        <comment type="block" pos:start="69:9" pos:end="69:26">/* Same value.  */</comment>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <default pos:start="73:5" pos:end="73:12">default:</default>

        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:11">dir</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:38"><name pos:start="75:15" pos:end="75:21">OHCI_BM</name><argument_list pos:start="75:22" pos:end="75:38">(<argument pos:start="75:23" pos:end="75:30"><expr pos:start="75:23" pos:end="75:30"><name pos:start="75:23" pos:end="75:30"><name pos:start="75:23" pos:end="75:24">td</name><operator pos:start="75:25" pos:end="75:25">.</operator><name pos:start="75:26" pos:end="75:30">flags</name></name></expr></argument>, <argument pos:start="75:33" pos:end="75:37"><expr pos:start="75:33" pos:end="75:37"><name pos:start="75:33" pos:end="75:37">TD_DP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>



    <switch pos:start="83:5" pos:end="127:5">switch <condition pos:start="83:12" pos:end="83:16">(<expr pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">dir</name></expr>)</condition> <block pos:start="83:18" pos:end="127:5">{<block_content pos:start="85:5" pos:end="125:17">

    <case pos:start="85:5" pos:end="88:0">case <expr pos:start="85:10" pos:end="85:23"><name pos:start="85:10" pos:end="85:23">OHCI_TD_DIR_IN</name></expr>:</case>

<cpp:ifdef pos:start="87:1" pos:end="87:19">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:19">DEBUG_PACKET</name></cpp:ifdef>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:11">str</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <literal type="string" pos:start="89:15" pos:end="89:18">"in"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:11">pid</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:26">USB_TOKEN_IN</name></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="100:0">case <expr pos:start="97:10" pos:end="97:24"><name pos:start="97:10" pos:end="97:24">OHCI_TD_DIR_OUT</name></expr>:</case>

<cpp:ifdef pos:start="99:1" pos:end="99:19">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:19">DEBUG_PACKET</name></cpp:ifdef>

        <expr_stmt pos:start="101:9" pos:end="104:0"><expr pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:11">str</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <literal type="string" pos:start="101:15" pos:end="101:19">"out"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:11">pid</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:27">USB_TOKEN_OUT</name></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="112:0">case <expr pos:start="109:10" pos:end="109:26"><name pos:start="109:10" pos:end="109:26">OHCI_TD_DIR_SETUP</name></expr>:</case>

<cpp:ifdef pos:start="111:1" pos:end="111:19">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:19">DEBUG_PACKET</name></cpp:ifdef>

        <expr_stmt pos:start="113:9" pos:end="116:0"><expr pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:11">str</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <literal type="string" pos:start="113:15" pos:end="113:21">"setup"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:11">pid</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <name pos:start="117:15" pos:end="117:29">USB_TOKEN_SETUP</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <default pos:start="121:5" pos:end="121:12">default:</default>

        <expr_stmt pos:start="123:9" pos:end="123:53"><expr pos:start="123:9" pos:end="123:52"><call pos:start="123:9" pos:end="123:52"><name pos:start="123:9" pos:end="123:15">fprintf</name><argument_list pos:start="123:16" pos:end="123:52">(<argument pos:start="123:17" pos:end="123:22"><expr pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">stderr</name></expr></argument>, <argument pos:start="123:25" pos:end="123:51"><expr pos:start="123:25" pos:end="123:51"><literal type="string" pos:start="123:25" pos:end="123:51">"usb-ohci: Bad direction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:17">return <expr pos:start="125:16" pos:end="125:16"><literal type="number" pos:start="125:16" pos:end="125:16">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <if_stmt pos:start="129:5" pos:end="165:5"><if pos:start="129:5" pos:end="165:5">if <condition pos:start="129:8" pos:end="129:24">(<expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:10">td</name><operator pos:start="129:11" pos:end="129:11">.</operator><name pos:start="129:12" pos:end="129:14">cbp</name></name> <operator pos:start="129:16" pos:end="129:17">&amp;&amp;</operator> <name pos:start="129:19" pos:end="129:23"><name pos:start="129:19" pos:end="129:20">td</name><operator pos:start="129:21" pos:end="129:21">.</operator><name pos:start="129:22" pos:end="129:23">be</name></name></expr>)</condition> <block pos:start="129:26" pos:end="165:5">{<block_content pos:start="131:9" pos:end="163:9">

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:58">(<expr pos:start="131:13" pos:end="131:57"><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:19"><name pos:start="131:14" pos:end="131:15">td</name><operator pos:start="131:16" pos:end="131:16">.</operator><name pos:start="131:17" pos:end="131:19">cbp</name></name> <operator pos:start="131:21" pos:end="131:21">&amp;</operator> <literal type="number" pos:start="131:23" pos:end="131:32">0xfffff000</literal><operator pos:start="131:33" pos:end="131:33">)</operator> <operator pos:start="131:35" pos:end="131:36">!=</operator> <operator pos:start="131:38" pos:end="131:38">(</operator><name pos:start="131:39" pos:end="131:43"><name pos:start="131:39" pos:end="131:40">td</name><operator pos:start="131:41" pos:end="131:41">.</operator><name pos:start="131:42" pos:end="131:43">be</name></name> <operator pos:start="131:45" pos:end="131:45">&amp;</operator> <literal type="number" pos:start="131:47" pos:end="131:56">0xfffff000</literal><operator pos:start="131:57" pos:end="131:57">)</operator></expr>)</condition> <block pos:start="131:60" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:62">

            <expr_stmt pos:start="133:13" pos:end="133:62"><expr pos:start="133:13" pos:end="133:61"><name pos:start="133:13" pos:end="133:15">len</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <operator pos:start="133:19" pos:end="133:19">(</operator><name pos:start="133:20" pos:end="133:24"><name pos:start="133:20" pos:end="133:21">td</name><operator pos:start="133:22" pos:end="133:22">.</operator><name pos:start="133:23" pos:end="133:24">be</name></name> <operator pos:start="133:26" pos:end="133:26">&amp;</operator> <literal type="number" pos:start="133:28" pos:end="133:32">0xfff</literal><operator pos:start="133:33" pos:end="133:33">)</operator> <operator pos:start="133:35" pos:end="133:35">+</operator> <literal type="number" pos:start="133:37" pos:end="133:44">0x1001</literal> <operator pos:start="133:44" pos:end="133:44">-</operator> <operator pos:start="133:46" pos:end="133:46">(</operator><name pos:start="133:47" pos:end="133:52"><name pos:start="133:47" pos:end="133:48">td</name><operator pos:start="133:49" pos:end="133:49">.</operator><name pos:start="133:50" pos:end="133:52">cbp</name></name> <operator pos:start="133:54" pos:end="133:54">&amp;</operator> <literal type="number" pos:start="133:56" pos:end="133:60">0xfff</literal><operator pos:start="133:61" pos:end="133:61">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:39">

            <expr_stmt pos:start="137:13" pos:end="137:39"><expr pos:start="137:13" pos:end="137:38"><name pos:start="137:13" pos:end="137:15">len</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <operator pos:start="137:19" pos:end="137:19">(</operator><name pos:start="137:20" pos:end="137:24"><name pos:start="137:20" pos:end="137:21">td</name><operator pos:start="137:22" pos:end="137:22">.</operator><name pos:start="137:23" pos:end="137:24">be</name></name> <operator pos:start="137:26" pos:end="137:26">-</operator> <name pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:29">td</name><operator pos:start="137:30" pos:end="137:30">.</operator><name pos:start="137:31" pos:end="137:33">cbp</name></name><operator pos:start="137:34" pos:end="137:34">)</operator> <operator pos:start="137:36" pos:end="137:36">+</operator> <literal type="number" pos:start="137:38" pos:end="137:38">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:21"><expr pos:start="143:9" pos:end="143:20"><name pos:start="143:9" pos:end="143:14">pktlen</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <name pos:start="143:18" pos:end="143:20">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="163:9"><if pos:start="145:9" pos:end="163:9">if <condition pos:start="145:12" pos:end="145:41">(<expr pos:start="145:13" pos:end="145:40"><name pos:start="145:13" pos:end="145:15">len</name> <operator pos:start="145:17" pos:end="145:18">&amp;&amp;</operator> <name pos:start="145:20" pos:end="145:22">dir</name> <operator pos:start="145:24" pos:end="145:25">!=</operator> <name pos:start="145:27" pos:end="145:40">OHCI_TD_DIR_IN</name></expr>)</condition> <block pos:start="145:43" pos:end="163:9">{<block_content pos:start="149:13" pos:end="161:13">

            <comment type="block" pos:start="147:13" pos:end="147:70">/* The endpoint may not allow us to transfer it all now */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:73"><expr pos:start="149:13" pos:end="149:72"><name pos:start="149:13" pos:end="149:18">pktlen</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <operator pos:start="149:22" pos:end="149:22">(</operator><name pos:start="149:23" pos:end="149:31"><name pos:start="149:23" pos:end="149:24">ed</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:31">flags</name></name> <operator pos:start="149:33" pos:end="149:33">&amp;</operator> <name pos:start="149:35" pos:end="149:50">OHCI_ED_MPS_MASK</name><operator pos:start="149:51" pos:end="149:51">)</operator> <operator pos:start="149:53" pos:end="149:54">&gt;&gt;</operator> <name pos:start="149:56" pos:end="149:72">OHCI_ED_MPS_SHIFT</name></expr>;</expr_stmt>

            <if_stmt pos:start="151:13" pos:end="155:13"><if pos:start="151:13" pos:end="155:13">if <condition pos:start="151:16" pos:end="151:29">(<expr pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:22">pktlen</name> <operator pos:start="151:24" pos:end="151:24">&gt;</operator> <name pos:start="151:26" pos:end="151:28">len</name></expr>)</condition> <block pos:start="151:31" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:29">

                <expr_stmt pos:start="153:17" pos:end="153:29"><expr pos:start="153:17" pos:end="153:28"><name pos:start="153:17" pos:end="153:22">pktlen</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:28">len</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="157:13" pos:end="161:13"><if pos:start="157:13" pos:end="161:13">if <condition pos:start="157:16" pos:end="157:28">(<expr pos:start="157:17" pos:end="157:27"><operator pos:start="157:17" pos:end="157:17">!</operator><name pos:start="157:18" pos:end="157:27">completion</name></expr>)</condition> <block pos:start="157:30" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:66">

                <expr_stmt pos:start="159:17" pos:end="159:66"><expr pos:start="159:17" pos:end="159:65"><call pos:start="159:17" pos:end="159:65"><name pos:start="159:17" pos:end="159:28">ohci_copy_td</name><argument_list pos:start="159:29" pos:end="159:65">(<argument pos:start="159:30" pos:end="159:33"><expr pos:start="159:30" pos:end="159:33"><name pos:start="159:30" pos:end="159:33">ohci</name></expr></argument>, <argument pos:start="159:36" pos:end="159:38"><expr pos:start="159:36" pos:end="159:38"><operator pos:start="159:36" pos:end="159:36">&amp;</operator><name pos:start="159:37" pos:end="159:38">td</name></expr></argument>, <argument pos:start="159:41" pos:end="159:53"><expr pos:start="159:41" pos:end="159:53"><name pos:start="159:41" pos:end="159:53"><name pos:start="159:41" pos:end="159:44">ohci</name><operator pos:start="159:45" pos:end="159:46">-&gt;</operator><name pos:start="159:47" pos:end="159:53">usb_buf</name></name></expr></argument>, <argument pos:start="159:56" pos:end="159:61"><expr pos:start="159:56" pos:end="159:61"><name pos:start="159:56" pos:end="159:61">pktlen</name></expr></argument>, <argument pos:start="159:64" pos:end="159:64"><expr pos:start="159:64" pos:end="159:64"><literal type="number" pos:start="159:64" pos:end="159:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="172:0"><expr pos:start="169:5" pos:end="169:40"><name pos:start="169:5" pos:end="169:10">flag_r</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <operator pos:start="169:14" pos:end="169:14">(</operator><name pos:start="169:15" pos:end="169:22"><name pos:start="169:15" pos:end="169:16">td</name><operator pos:start="169:17" pos:end="169:17">.</operator><name pos:start="169:18" pos:end="169:22">flags</name></name> <operator pos:start="169:24" pos:end="169:24">&amp;</operator> <name pos:start="169:26" pos:end="169:34">OHCI_TD_R</name><operator pos:start="169:35" pos:end="169:35">)</operator> <operator pos:start="169:37" pos:end="169:38">!=</operator> <literal type="number" pos:start="169:40" pos:end="169:40">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="171:1" pos:end="171:19">#<cpp:directive pos:start="171:2" pos:end="171:6">ifdef</cpp:directive> <name pos:start="171:8" pos:end="171:19">DEBUG_PACKET</name></cpp:ifdef>

    <expr_stmt pos:start="173:5" pos:end="177:77"><expr pos:start="173:5" pos:end="177:76"><call pos:start="173:5" pos:end="177:76"><name pos:start="173:5" pos:end="173:11">DPRINTF</name><argument_list pos:start="173:12" pos:end="177:76">(<argument pos:start="173:13" pos:end="175:51"><expr pos:start="173:13" pos:end="175:51"><literal type="string" pos:start="173:13" pos:end="173:28">" TD @ 0x%.8x %"</literal> <name pos:start="173:30" pos:end="173:35">PRId64</name> <literal type="string" pos:start="173:37" pos:end="173:43">" of %"</literal> <name pos:start="173:45" pos:end="173:50">PRId64</name>

            <literal type="string" pos:start="175:13" pos:end="175:51">" bytes %s r=%d cbp=0x%.8x be=0x%.8x\n"</literal></expr></argument>,

            <argument pos:start="177:13" pos:end="177:16"><expr pos:start="177:13" pos:end="177:16"><name pos:start="177:13" pos:end="177:16">addr</name></expr></argument>, <argument pos:start="177:19" pos:end="177:33"><expr pos:start="177:19" pos:end="177:33"><operator pos:start="177:19" pos:end="177:19">(</operator><name pos:start="177:20" pos:end="177:26">int64_t</name><operator pos:start="177:27" pos:end="177:27">)</operator><name pos:start="177:28" pos:end="177:33">pktlen</name></expr></argument>, <argument pos:start="177:36" pos:end="177:47"><expr pos:start="177:36" pos:end="177:47"><operator pos:start="177:36" pos:end="177:36">(</operator><name pos:start="177:37" pos:end="177:43">int64_t</name><operator pos:start="177:44" pos:end="177:44">)</operator><name pos:start="177:45" pos:end="177:47">len</name></expr></argument>, <argument pos:start="177:50" pos:end="177:52"><expr pos:start="177:50" pos:end="177:52"><name pos:start="177:50" pos:end="177:52">str</name></expr></argument>, <argument pos:start="177:55" pos:end="177:60"><expr pos:start="177:55" pos:end="177:60"><name pos:start="177:55" pos:end="177:60">flag_r</name></expr></argument>, <argument pos:start="177:63" pos:end="177:68"><expr pos:start="177:63" pos:end="177:68"><name pos:start="177:63" pos:end="177:68"><name pos:start="177:63" pos:end="177:64">td</name><operator pos:start="177:65" pos:end="177:65">.</operator><name pos:start="177:66" pos:end="177:68">cbp</name></name></expr></argument>, <argument pos:start="177:71" pos:end="177:75"><expr pos:start="177:71" pos:end="177:75"><name pos:start="177:71" pos:end="177:75"><name pos:start="177:71" pos:end="177:72">td</name><operator pos:start="177:73" pos:end="177:73">.</operator><name pos:start="177:74" pos:end="177:75">be</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="181:5" pos:end="196:0"><if pos:start="181:5" pos:end="196:0">if <condition pos:start="181:8" pos:end="181:44">(<expr pos:start="181:9" pos:end="181:43"><name pos:start="181:9" pos:end="181:14">pktlen</name> <operator pos:start="181:16" pos:end="181:16">&gt;</operator> <literal type="number" pos:start="181:18" pos:end="181:18">0</literal> <operator pos:start="181:20" pos:end="181:21">&amp;&amp;</operator> <name pos:start="181:23" pos:end="181:25">dir</name> <operator pos:start="181:27" pos:end="181:28">!=</operator> <name pos:start="181:30" pos:end="181:43">OHCI_TD_DIR_IN</name></expr>)</condition> <block pos:start="181:46" pos:end="196:0">{<block_content pos:start="183:9" pos:end="191:22">

        <expr_stmt pos:start="183:9" pos:end="183:27"><expr pos:start="183:9" pos:end="183:26"><call pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:15">DPRINTF</name><argument_list pos:start="183:16" pos:end="183:26">(<argument pos:start="183:17" pos:end="183:25"><expr pos:start="183:17" pos:end="183:25"><literal type="string" pos:start="183:17" pos:end="183:25">"  data:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="185:9" pos:end="189:9">for <control pos:start="185:13" pos:end="185:36">(<init pos:start="185:14" pos:end="185:19"><expr pos:start="185:14" pos:end="185:18"><name pos:start="185:14" pos:end="185:14">i</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <literal type="number" pos:start="185:18" pos:end="185:18">0</literal></expr>;</init> <condition pos:start="185:21" pos:end="185:31"><expr pos:start="185:21" pos:end="185:30"><name pos:start="185:21" pos:end="185:21">i</name> <operator pos:start="185:23" pos:end="185:23">&lt;</operator> <name pos:start="185:25" pos:end="185:30">pktlen</name></expr>;</condition> <incr pos:start="185:33" pos:end="185:35"><expr pos:start="185:33" pos:end="185:35"><name pos:start="185:33" pos:end="185:33">i</name><operator pos:start="185:34" pos:end="185:35">++</operator></expr></incr>)</control> <block pos:start="185:38" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:46">

            <expr_stmt pos:start="187:13" pos:end="187:46"><expr pos:start="187:13" pos:end="187:45"><call pos:start="187:13" pos:end="187:45"><name pos:start="187:13" pos:end="187:18">printf</name><argument_list pos:start="187:19" pos:end="187:45">(<argument pos:start="187:20" pos:end="187:26"><expr pos:start="187:20" pos:end="187:26"><literal type="string" pos:start="187:20" pos:end="187:26">" %.2x"</literal></expr></argument>, <argument pos:start="187:29" pos:end="187:44"><expr pos:start="187:29" pos:end="187:44"><name pos:start="187:29" pos:end="187:44"><name pos:start="187:29" pos:end="187:32">ohci</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:41">usb_buf</name><index pos:start="187:42" pos:end="187:44">[<expr pos:start="187:43" pos:end="187:43"><name pos:start="187:43" pos:end="187:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="191:9" pos:end="191:22"><expr pos:start="191:9" pos:end="191:21"><call pos:start="191:9" pos:end="191:21"><name pos:start="191:9" pos:end="191:15">DPRINTF</name><argument_list pos:start="191:16" pos:end="191:21">(<argument pos:start="191:17" pos:end="191:20"><expr pos:start="191:17" pos:end="191:20"><literal type="string" pos:start="191:17" pos:end="191:20">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="197:5" pos:end="255:5"><if pos:start="197:5" pos:end="205:5">if <condition pos:start="197:8" pos:end="197:19">(<expr pos:start="197:9" pos:end="197:18"><name pos:start="197:9" pos:end="197:18">completion</name></expr>)</condition> <block pos:start="197:21" pos:end="205:5">{<block_content pos:start="199:9" pos:end="203:33">

        <expr_stmt pos:start="199:9" pos:end="199:38"><expr pos:start="199:9" pos:end="199:37"><name pos:start="199:9" pos:end="199:11">ret</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <name pos:start="199:15" pos:end="199:37"><name pos:start="199:15" pos:end="199:18">ohci</name><operator pos:start="199:19" pos:end="199:20">-&gt;</operator><name pos:start="199:21" pos:end="199:30">usb_packet</name><operator pos:start="199:31" pos:end="199:31">.</operator><name pos:start="199:32" pos:end="199:37">result</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:27"><expr pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:22"><name pos:start="201:9" pos:end="201:12">ohci</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:22">async_td</name></name> <operator pos:start="201:24" pos:end="201:24">=</operator> <literal type="number" pos:start="201:26" pos:end="201:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:33"><expr pos:start="203:9" pos:end="203:32"><name pos:start="203:9" pos:end="203:28"><name pos:start="203:9" pos:end="203:12">ohci</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:28">async_complete</name></name> <operator pos:start="203:30" pos:end="203:30">=</operator> <literal type="number" pos:start="203:32" pos:end="203:32">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="205:7" pos:end="255:5">else <block pos:start="205:12" pos:end="255:5">{<block_content pos:start="207:9" pos:end="253:9">

        <if_stmt pos:start="207:9" pos:end="227:9"><if pos:start="207:9" pos:end="227:9">if <condition pos:start="207:12" pos:end="207:27">(<expr pos:start="207:13" pos:end="207:26"><name pos:start="207:13" pos:end="207:26"><name pos:start="207:13" pos:end="207:16">ohci</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:26">async_td</name></name></expr>)</condition> <block pos:start="207:29" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:21">

            <comment type="block" pos:start="209:13" pos:end="217:14">/* ??? The hardware should allow one active packet per

               endpoint.  We only allow one active packet per controller.

               This should be sufficient as long as devices respond in a

               timely manner.

            */</comment>

<cpp:ifdef pos:start="219:1" pos:end="219:19">#<cpp:directive pos:start="219:2" pos:end="219:6">ifdef</cpp:directive> <name pos:start="219:8" pos:end="219:19">DEBUG_PACKET</name></cpp:ifdef>

            <expr_stmt pos:start="221:13" pos:end="224:0"><expr pos:start="221:13" pos:end="221:49"><call pos:start="221:13" pos:end="221:49"><name pos:start="221:13" pos:end="221:19">DPRINTF</name><argument_list pos:start="221:20" pos:end="221:49">(<argument pos:start="221:21" pos:end="221:48"><expr pos:start="221:21" pos:end="221:48"><literal type="string" pos:start="221:21" pos:end="221:48">"Too many pending packets\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="223:1" pos:end="223:6">#<cpp:directive pos:start="223:2" pos:end="223:6">endif</cpp:directive></cpp:endif>

            <return pos:start="225:13" pos:end="225:21">return <expr pos:start="225:20" pos:end="225:20"><literal type="number" pos:start="225:20" pos:end="225:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="233:52"><expr pos:start="229:9" pos:end="233:51"><call pos:start="229:9" pos:end="233:51"><name pos:start="229:9" pos:end="229:24">usb_packet_setup</name><argument_list pos:start="229:25" pos:end="233:51">(<argument pos:start="229:26" pos:end="229:42"><expr pos:start="229:26" pos:end="229:42"><operator pos:start="229:26" pos:end="229:26">&amp;</operator><name pos:start="229:27" pos:end="229:42"><name pos:start="229:27" pos:end="229:30">ohci</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:42">usb_packet</name></name></expr></argument>, <argument pos:start="229:45" pos:end="229:47"><expr pos:start="229:45" pos:end="229:47"><name pos:start="229:45" pos:end="229:47">pid</name></expr></argument>,

                         <argument pos:start="231:26" pos:end="231:50"><expr pos:start="231:26" pos:end="231:50"><call pos:start="231:26" pos:end="231:50"><name pos:start="231:26" pos:end="231:32">OHCI_BM</name><argument_list pos:start="231:33" pos:end="231:50">(<argument pos:start="231:34" pos:end="231:42"><expr pos:start="231:34" pos:end="231:42"><name pos:start="231:34" pos:end="231:42"><name pos:start="231:34" pos:end="231:35">ed</name><operator pos:start="231:36" pos:end="231:37">-&gt;</operator><name pos:start="231:38" pos:end="231:42">flags</name></name></expr></argument>, <argument pos:start="231:45" pos:end="231:49"><expr pos:start="231:45" pos:end="231:49"><name pos:start="231:45" pos:end="231:49">ED_FA</name></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="233:26" pos:end="233:50"><expr pos:start="233:26" pos:end="233:50"><call pos:start="233:26" pos:end="233:50"><name pos:start="233:26" pos:end="233:32">OHCI_BM</name><argument_list pos:start="233:33" pos:end="233:50">(<argument pos:start="233:34" pos:end="233:42"><expr pos:start="233:34" pos:end="233:42"><name pos:start="233:34" pos:end="233:42"><name pos:start="233:34" pos:end="233:35">ed</name><operator pos:start="233:36" pos:end="233:37">-&gt;</operator><name pos:start="233:38" pos:end="233:42">flags</name></name></expr></argument>, <argument pos:start="233:45" pos:end="233:49"><expr pos:start="233:45" pos:end="233:49"><name pos:start="233:45" pos:end="233:49">ED_EN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:68"><expr pos:start="235:9" pos:end="235:67"><call pos:start="235:9" pos:end="235:67"><name pos:start="235:9" pos:end="235:25">usb_packet_addbuf</name><argument_list pos:start="235:26" pos:end="235:67">(<argument pos:start="235:27" pos:end="235:43"><expr pos:start="235:27" pos:end="235:43"><operator pos:start="235:27" pos:end="235:27">&amp;</operator><name pos:start="235:28" pos:end="235:43"><name pos:start="235:28" pos:end="235:31">ohci</name><operator pos:start="235:32" pos:end="235:33">-&gt;</operator><name pos:start="235:34" pos:end="235:43">usb_packet</name></name></expr></argument>, <argument pos:start="235:46" pos:end="235:58"><expr pos:start="235:46" pos:end="235:58"><name pos:start="235:46" pos:end="235:58"><name pos:start="235:46" pos:end="235:49">ohci</name><operator pos:start="235:50" pos:end="235:51">-&gt;</operator><name pos:start="235:52" pos:end="235:58">usb_buf</name></name></expr></argument>, <argument pos:start="235:61" pos:end="235:66"><expr pos:start="235:61" pos:end="235:66"><name pos:start="235:61" pos:end="235:66">pktlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:63"><expr pos:start="237:9" pos:end="237:62"><name pos:start="237:9" pos:end="237:11">dev</name> <operator pos:start="237:13" pos:end="237:13">=</operator> <call pos:start="237:15" pos:end="237:62"><name pos:start="237:15" pos:end="237:30">ohci_find_device</name><argument_list pos:start="237:31" pos:end="237:62">(<argument pos:start="237:32" pos:end="237:35"><expr pos:start="237:32" pos:end="237:35"><name pos:start="237:32" pos:end="237:35">ohci</name></expr></argument>, <argument pos:start="237:38" pos:end="237:61"><expr pos:start="237:38" pos:end="237:61"><name pos:start="237:38" pos:end="237:61"><name pos:start="237:38" pos:end="237:41">ohci</name><operator pos:start="237:42" pos:end="237:43">-&gt;</operator><name pos:start="237:44" pos:end="237:53">usb_packet</name><operator pos:start="237:54" pos:end="237:54">.</operator><name pos:start="237:55" pos:end="237:61">devaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="242:0"><expr pos:start="239:9" pos:end="239:55"><name pos:start="239:9" pos:end="239:11">ret</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <call pos:start="239:15" pos:end="239:55"><name pos:start="239:15" pos:end="239:31">usb_handle_packet</name><argument_list pos:start="239:32" pos:end="239:55">(<argument pos:start="239:33" pos:end="239:35"><expr pos:start="239:33" pos:end="239:35"><name pos:start="239:33" pos:end="239:35">dev</name></expr></argument>, <argument pos:start="239:38" pos:end="239:54"><expr pos:start="239:38" pos:end="239:54"><operator pos:start="239:38" pos:end="239:38">&amp;</operator><name pos:start="239:39" pos:end="239:54"><name pos:start="239:39" pos:end="239:42">ohci</name><operator pos:start="239:43" pos:end="239:44">-&gt;</operator><name pos:start="239:45" pos:end="239:54">usb_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="241:1" pos:end="241:19">#<cpp:directive pos:start="241:2" pos:end="241:6">ifdef</cpp:directive> <name pos:start="241:8" pos:end="241:19">DEBUG_PACKET</name></cpp:ifdef>

        <expr_stmt pos:start="243:9" pos:end="246:0"><expr pos:start="243:9" pos:end="243:32"><call pos:start="243:9" pos:end="243:32"><name pos:start="243:9" pos:end="243:15">DPRINTF</name><argument_list pos:start="243:16" pos:end="243:32">(<argument pos:start="243:17" pos:end="243:26"><expr pos:start="243:17" pos:end="243:26"><literal type="string" pos:start="243:17" pos:end="243:26">"ret=%d\n"</literal></expr></argument>, <argument pos:start="243:29" pos:end="243:31"><expr pos:start="243:29" pos:end="243:31"><name pos:start="243:29" pos:end="243:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="245:1" pos:end="245:6">#<cpp:directive pos:start="245:2" pos:end="245:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:33">(<expr pos:start="247:13" pos:end="247:32"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:18">==</operator> <name pos:start="247:20" pos:end="247:32">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="247:35" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:21">

            <expr_stmt pos:start="249:13" pos:end="249:34"><expr pos:start="249:13" pos:end="249:33"><name pos:start="249:13" pos:end="249:26"><name pos:start="249:13" pos:end="249:16">ohci</name><operator pos:start="249:17" pos:end="249:18">-&gt;</operator><name pos:start="249:19" pos:end="249:26">async_td</name></name> <operator pos:start="249:28" pos:end="249:28">=</operator> <name pos:start="249:30" pos:end="249:33">addr</name></expr>;</expr_stmt>

            <return pos:start="251:13" pos:end="251:21">return <expr pos:start="251:20" pos:end="251:20"><literal type="number" pos:start="251:20" pos:end="251:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="257:5" pos:end="281:5"><if pos:start="257:5" pos:end="281:5">if <condition pos:start="257:8" pos:end="257:17">(<expr pos:start="257:9" pos:end="257:16"><name pos:start="257:9" pos:end="257:11">ret</name> <operator pos:start="257:13" pos:end="257:14">&gt;=</operator> <literal type="number" pos:start="257:16" pos:end="257:16">0</literal></expr>)</condition> <block pos:start="257:19" pos:end="281:5">{<block_content pos:start="259:9" pos:end="279:9">

        <if_stmt pos:start="259:9" pos:end="279:9"><if pos:start="259:9" pos:end="275:9">if <condition pos:start="259:12" pos:end="259:34">(<expr pos:start="259:13" pos:end="259:33"><name pos:start="259:13" pos:end="259:15">dir</name> <operator pos:start="259:17" pos:end="259:18">==</operator> <name pos:start="259:20" pos:end="259:33">OHCI_TD_DIR_IN</name></expr>)</condition> <block pos:start="259:36" pos:end="275:9">{<block_content pos:start="261:13" pos:end="274:0">

            <expr_stmt pos:start="261:13" pos:end="264:0"><expr pos:start="261:13" pos:end="261:58"><call pos:start="261:13" pos:end="261:58"><name pos:start="261:13" pos:end="261:24">ohci_copy_td</name><argument_list pos:start="261:25" pos:end="261:58">(<argument pos:start="261:26" pos:end="261:29"><expr pos:start="261:26" pos:end="261:29"><name pos:start="261:26" pos:end="261:29">ohci</name></expr></argument>, <argument pos:start="261:32" pos:end="261:34"><expr pos:start="261:32" pos:end="261:34"><operator pos:start="261:32" pos:end="261:32">&amp;</operator><name pos:start="261:33" pos:end="261:34">td</name></expr></argument>, <argument pos:start="261:37" pos:end="261:49"><expr pos:start="261:37" pos:end="261:49"><name pos:start="261:37" pos:end="261:49"><name pos:start="261:37" pos:end="261:40">ohci</name><operator pos:start="261:41" pos:end="261:42">-&gt;</operator><name pos:start="261:43" pos:end="261:49">usb_buf</name></name></expr></argument>, <argument pos:start="261:52" pos:end="261:54"><expr pos:start="261:52" pos:end="261:54"><name pos:start="261:52" pos:end="261:54">ret</name></expr></argument>, <argument pos:start="261:57" pos:end="261:57"><expr pos:start="261:57" pos:end="261:57"><literal type="number" pos:start="261:57" pos:end="261:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="263:1" pos:end="263:19">#<cpp:directive pos:start="263:2" pos:end="263:6">ifdef</cpp:directive> <name pos:start="263:8" pos:end="263:19">DEBUG_PACKET</name></cpp:ifdef>

            <expr_stmt pos:start="265:13" pos:end="265:31"><expr pos:start="265:13" pos:end="265:30"><call pos:start="265:13" pos:end="265:30"><name pos:start="265:13" pos:end="265:19">DPRINTF</name><argument_list pos:start="265:20" pos:end="265:30">(<argument pos:start="265:21" pos:end="265:29"><expr pos:start="265:21" pos:end="265:29"><literal type="string" pos:start="265:21" pos:end="265:29">"  data:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="267:13" pos:end="269:50">for <control pos:start="267:17" pos:end="267:37">(<init pos:start="267:18" pos:end="267:23"><expr pos:start="267:18" pos:end="267:22"><name pos:start="267:18" pos:end="267:18">i</name> <operator pos:start="267:20" pos:end="267:20">=</operator> <literal type="number" pos:start="267:22" pos:end="267:22">0</literal></expr>;</init> <condition pos:start="267:25" pos:end="267:32"><expr pos:start="267:25" pos:end="267:31"><name pos:start="267:25" pos:end="267:25">i</name> <operator pos:start="267:27" pos:end="267:27">&lt;</operator> <name pos:start="267:29" pos:end="267:31">ret</name></expr>;</condition> <incr pos:start="267:34" pos:end="267:36"><expr pos:start="267:34" pos:end="267:36"><name pos:start="267:34" pos:end="267:34">i</name><operator pos:start="267:35" pos:end="267:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="269:17" pos:end="269:50"><block_content pos:start="269:17" pos:end="269:50">

                <expr_stmt pos:start="269:17" pos:end="269:50"><expr pos:start="269:17" pos:end="269:49"><call pos:start="269:17" pos:end="269:49"><name pos:start="269:17" pos:end="269:22">printf</name><argument_list pos:start="269:23" pos:end="269:49">(<argument pos:start="269:24" pos:end="269:30"><expr pos:start="269:24" pos:end="269:30"><literal type="string" pos:start="269:24" pos:end="269:30">" %.2x"</literal></expr></argument>, <argument pos:start="269:33" pos:end="269:48"><expr pos:start="269:33" pos:end="269:48"><name pos:start="269:33" pos:end="269:48"><name pos:start="269:33" pos:end="269:36">ohci</name><operator pos:start="269:37" pos:end="269:38">-&gt;</operator><name pos:start="269:39" pos:end="269:45">usb_buf</name><index pos:start="269:46" pos:end="269:48">[<expr pos:start="269:47" pos:end="269:47"><name pos:start="269:47" pos:end="269:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="271:13" pos:end="274:0"><expr pos:start="271:13" pos:end="271:25"><call pos:start="271:13" pos:end="271:25"><name pos:start="271:13" pos:end="271:19">DPRINTF</name><argument_list pos:start="271:20" pos:end="271:25">(<argument pos:start="271:21" pos:end="271:24"><expr pos:start="271:21" pos:end="271:24"><literal type="string" pos:start="271:21" pos:end="271:24">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="273:1" pos:end="273:6">#<cpp:directive pos:start="273:2" pos:end="273:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="275:11" pos:end="279:9">else <block pos:start="275:16" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:25">

            <expr_stmt pos:start="277:13" pos:end="277:25"><expr pos:start="277:13" pos:end="277:24"><name pos:start="277:13" pos:end="277:15">ret</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <name pos:start="277:19" pos:end="277:24">pktlen</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="285:5" pos:end="285:19">/* Writeback */</comment>

    <if_stmt pos:start="287:5" pos:end="391:5"><if pos:start="287:5" pos:end="337:5">if <condition pos:start="287:8" pos:end="287:71">(<expr pos:start="287:9" pos:end="287:70"><name pos:start="287:9" pos:end="287:11">ret</name> <operator pos:start="287:13" pos:end="287:14">==</operator> <name pos:start="287:16" pos:end="287:21">pktlen</name> <operator pos:start="287:23" pos:end="287:24">||</operator> <operator pos:start="287:26" pos:end="287:26">(</operator><name pos:start="287:27" pos:end="287:29">dir</name> <operator pos:start="287:31" pos:end="287:32">==</operator> <name pos:start="287:34" pos:end="287:47">OHCI_TD_DIR_IN</name> <operator pos:start="287:49" pos:end="287:50">&amp;&amp;</operator> <name pos:start="287:52" pos:end="287:54">ret</name> <operator pos:start="287:56" pos:end="287:57">&gt;=</operator> <literal type="number" pos:start="287:59" pos:end="287:59">0</literal> <operator pos:start="287:61" pos:end="287:62">&amp;&amp;</operator> <name pos:start="287:64" pos:end="287:69">flag_r</name><operator pos:start="287:70" pos:end="287:70">)</operator></expr>)</condition> <block pos:start="287:73" pos:end="337:5">{<block_content pos:start="291:9" pos:end="335:34">

        <comment type="block" pos:start="289:9" pos:end="289:38">/* Transmission succeeded.  */</comment>

        <if_stmt pos:start="291:9" pos:end="307:9"><if pos:start="291:9" pos:end="295:9">if <condition pos:start="291:12" pos:end="291:23">(<expr pos:start="291:13" pos:end="291:22"><name pos:start="291:13" pos:end="291:15">ret</name> <operator pos:start="291:17" pos:end="291:18">==</operator> <name pos:start="291:20" pos:end="291:22">len</name></expr>)</condition> <block pos:start="291:25" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:23">

            <expr_stmt pos:start="293:13" pos:end="293:23"><expr pos:start="293:13" pos:end="293:22"><name pos:start="293:13" pos:end="293:18"><name pos:start="293:13" pos:end="293:14">td</name><operator pos:start="293:15" pos:end="293:15">.</operator><name pos:start="293:16" pos:end="293:18">cbp</name></name> <operator pos:start="293:20" pos:end="293:20">=</operator> <literal type="number" pos:start="293:22" pos:end="293:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="295:11" pos:end="307:9">else <block pos:start="295:16" pos:end="307:9">{<block_content pos:start="297:13" pos:end="305:13">

            <if_stmt pos:start="297:13" pos:end="305:13"><if pos:start="297:13" pos:end="301:13">if <condition pos:start="297:16" pos:end="297:47">(<expr pos:start="297:17" pos:end="297:46"><operator pos:start="297:17" pos:end="297:17">(</operator><name pos:start="297:18" pos:end="297:23"><name pos:start="297:18" pos:end="297:19">td</name><operator pos:start="297:20" pos:end="297:20">.</operator><name pos:start="297:21" pos:end="297:23">cbp</name></name> <operator pos:start="297:25" pos:end="297:25">&amp;</operator> <literal type="number" pos:start="297:27" pos:end="297:31">0xfff</literal><operator pos:start="297:32" pos:end="297:32">)</operator> <operator pos:start="297:34" pos:end="297:34">+</operator> <name pos:start="297:36" pos:end="297:38">ret</name> <operator pos:start="297:40" pos:end="297:40">&gt;</operator> <literal type="number" pos:start="297:42" pos:end="297:46">0xfff</literal></expr>)</condition> <block pos:start="297:49" pos:end="301:13">{<block_content pos:start="299:17" pos:end="299:69">

                <expr_stmt pos:start="299:17" pos:end="299:69"><expr pos:start="299:17" pos:end="299:68"><name pos:start="299:17" pos:end="299:22"><name pos:start="299:17" pos:end="299:18">td</name><operator pos:start="299:19" pos:end="299:19">.</operator><name pos:start="299:20" pos:end="299:22">cbp</name></name> <operator pos:start="299:24" pos:end="299:24">=</operator> <operator pos:start="299:26" pos:end="299:26">(</operator><name pos:start="299:27" pos:end="299:31"><name pos:start="299:27" pos:end="299:28">td</name><operator pos:start="299:29" pos:end="299:29">.</operator><name pos:start="299:30" pos:end="299:31">be</name></name> <operator pos:start="299:33" pos:end="299:33">&amp;</operator> <operator pos:start="299:35" pos:end="299:35">~</operator><literal type="number" pos:start="299:36" pos:end="299:40">0xfff</literal><operator pos:start="299:41" pos:end="299:41">)</operator> <operator pos:start="299:43" pos:end="299:43">+</operator> <operator pos:start="299:45" pos:end="299:45">(</operator><operator pos:start="299:46" pos:end="299:46">(</operator><name pos:start="299:47" pos:end="299:52"><name pos:start="299:47" pos:end="299:48">td</name><operator pos:start="299:49" pos:end="299:49">.</operator><name pos:start="299:50" pos:end="299:52">cbp</name></name> <operator pos:start="299:54" pos:end="299:54">+</operator> <name pos:start="299:56" pos:end="299:58">ret</name><operator pos:start="299:59" pos:end="299:59">)</operator> <operator pos:start="299:61" pos:end="299:61">&amp;</operator> <literal type="number" pos:start="299:63" pos:end="299:67">0xfff</literal><operator pos:start="299:68" pos:end="299:68">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="301:15" pos:end="305:13">else <block pos:start="301:20" pos:end="305:13">{<block_content pos:start="303:17" pos:end="303:30">

                <expr_stmt pos:start="303:17" pos:end="303:30"><expr pos:start="303:17" pos:end="303:29"><name pos:start="303:17" pos:end="303:22"><name pos:start="303:17" pos:end="303:18">td</name><operator pos:start="303:19" pos:end="303:19">.</operator><name pos:start="303:20" pos:end="303:22">cbp</name></name> <operator pos:start="303:24" pos:end="303:25">+=</operator> <name pos:start="303:27" pos:end="303:29">ret</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:31"><expr pos:start="309:9" pos:end="309:30"><name pos:start="309:9" pos:end="309:16"><name pos:start="309:9" pos:end="309:10">td</name><operator pos:start="309:11" pos:end="309:11">.</operator><name pos:start="309:12" pos:end="309:16">flags</name></name> <operator pos:start="309:18" pos:end="309:19">|=</operator> <name pos:start="309:21" pos:end="309:30">OHCI_TD_T1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:31"><expr pos:start="311:9" pos:end="311:30"><name pos:start="311:9" pos:end="311:16"><name pos:start="311:9" pos:end="311:10">td</name><operator pos:start="311:11" pos:end="311:11">.</operator><name pos:start="311:12" pos:end="311:16">flags</name></name> <operator pos:start="311:18" pos:end="311:19">^=</operator> <name pos:start="311:21" pos:end="311:30">OHCI_TD_T0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:54"><expr pos:start="313:9" pos:end="313:53"><call pos:start="313:9" pos:end="313:53"><name pos:start="313:9" pos:end="313:19">OHCI_SET_BM</name><argument_list pos:start="313:20" pos:end="313:53">(<argument pos:start="313:21" pos:end="313:28"><expr pos:start="313:21" pos:end="313:28"><name pos:start="313:21" pos:end="313:28"><name pos:start="313:21" pos:end="313:22">td</name><operator pos:start="313:23" pos:end="313:23">.</operator><name pos:start="313:24" pos:end="313:28">flags</name></name></expr></argument>, <argument pos:start="313:31" pos:end="313:35"><expr pos:start="313:31" pos:end="313:35"><name pos:start="313:31" pos:end="313:35">TD_CC</name></expr></argument>, <argument pos:start="313:38" pos:end="313:52"><expr pos:start="313:38" pos:end="313:52"><name pos:start="313:38" pos:end="313:52">OHCI_CC_NOERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:40"><expr pos:start="315:9" pos:end="315:39"><call pos:start="315:9" pos:end="315:39"><name pos:start="315:9" pos:end="315:19">OHCI_SET_BM</name><argument_list pos:start="315:20" pos:end="315:39">(<argument pos:start="315:21" pos:end="315:28"><expr pos:start="315:21" pos:end="315:28"><name pos:start="315:21" pos:end="315:28"><name pos:start="315:21" pos:end="315:22">td</name><operator pos:start="315:23" pos:end="315:23">.</operator><name pos:start="315:24" pos:end="315:28">flags</name></name></expr></argument>, <argument pos:start="315:31" pos:end="315:35"><expr pos:start="315:31" pos:end="315:35"><name pos:start="315:31" pos:end="315:35">TD_EC</name></expr></argument>, <argument pos:start="315:38" pos:end="315:38"><expr pos:start="315:38" pos:end="315:38"><literal type="number" pos:start="315:38" pos:end="315:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="319:9" pos:end="325:9"><if pos:start="319:9" pos:end="325:9">if <condition pos:start="319:12" pos:end="319:52">(<expr pos:start="319:13" pos:end="319:51"><operator pos:start="319:13" pos:end="319:13">(</operator><name pos:start="319:14" pos:end="319:16">dir</name> <operator pos:start="319:18" pos:end="319:19">!=</operator> <name pos:start="319:21" pos:end="319:34">OHCI_TD_DIR_IN</name><operator pos:start="319:35" pos:end="319:35">)</operator> <operator pos:start="319:37" pos:end="319:38">&amp;&amp;</operator> <operator pos:start="319:40" pos:end="319:40">(</operator><name pos:start="319:41" pos:end="319:43">ret</name> <operator pos:start="319:45" pos:end="319:46">!=</operator> <name pos:start="319:48" pos:end="319:50">len</name><operator pos:start="319:51" pos:end="319:51">)</operator></expr>)</condition> <block pos:start="319:54" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:32">

            <comment type="block" pos:start="321:13" pos:end="321:69">/* Partial packet transfer: TD not ready to retire yet */</comment>

            <goto pos:start="323:13" pos:end="323:32">goto <name pos:start="323:18" pos:end="323:31">exit_no_retire</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="329:9" pos:end="329:63">/* Setting ED_C is part of the TD retirement process */</comment>

        <expr_stmt pos:start="331:9" pos:end="331:31"><expr pos:start="331:9" pos:end="331:30"><name pos:start="331:9" pos:end="331:16"><name pos:start="331:9" pos:end="331:10">ed</name><operator pos:start="331:11" pos:end="331:12">-&gt;</operator><name pos:start="331:13" pos:end="331:16">head</name></name> <operator pos:start="331:18" pos:end="331:19">&amp;=</operator> <operator pos:start="331:21" pos:end="331:21">~</operator><name pos:start="331:22" pos:end="331:30">OHCI_ED_C</name></expr>;</expr_stmt>

        <if_stmt pos:start="333:9" pos:end="335:34"><if pos:start="333:9" pos:end="335:34">if <condition pos:start="333:12" pos:end="333:34">(<expr pos:start="333:13" pos:end="333:33"><name pos:start="333:13" pos:end="333:20"><name pos:start="333:13" pos:end="333:14">td</name><operator pos:start="333:15" pos:end="333:15">.</operator><name pos:start="333:16" pos:end="333:20">flags</name></name> <operator pos:start="333:22" pos:end="333:22">&amp;</operator> <name pos:start="333:24" pos:end="333:33">OHCI_TD_T0</name></expr>)</condition><block type="pseudo" pos:start="335:13" pos:end="335:34"><block_content pos:start="335:13" pos:end="335:34">

            <expr_stmt pos:start="335:13" pos:end="335:34"><expr pos:start="335:13" pos:end="335:33"><name pos:start="335:13" pos:end="335:20"><name pos:start="335:13" pos:end="335:14">ed</name><operator pos:start="335:15" pos:end="335:16">-&gt;</operator><name pos:start="335:17" pos:end="335:20">head</name></name> <operator pos:start="335:22" pos:end="335:23">|=</operator> <name pos:start="335:25" pos:end="335:33">OHCI_ED_C</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="337:7" pos:end="391:5">else <block pos:start="337:12" pos:end="391:5">{<block_content pos:start="339:9" pos:end="389:30">

        <if_stmt pos:start="339:9" pos:end="387:9"><if pos:start="339:9" pos:end="345:9">if <condition pos:start="339:12" pos:end="339:21">(<expr pos:start="339:13" pos:end="339:20"><name pos:start="339:13" pos:end="339:15">ret</name> <operator pos:start="339:17" pos:end="339:18">&gt;=</operator> <literal type="number" pos:start="339:20" pos:end="339:20">0</literal></expr>)</condition> <block pos:start="339:23" pos:end="345:9">{<block_content pos:start="341:13" pos:end="343:63">

            <expr_stmt pos:start="341:13" pos:end="341:44"><expr pos:start="341:13" pos:end="341:43"><call pos:start="341:13" pos:end="341:43"><name pos:start="341:13" pos:end="341:19">DPRINTF</name><argument_list pos:start="341:20" pos:end="341:43">(<argument pos:start="341:21" pos:end="341:42"><expr pos:start="341:21" pos:end="341:42"><literal type="string" pos:start="341:21" pos:end="341:42">"usb-ohci: Underrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:63"><expr pos:start="343:13" pos:end="343:62"><call pos:start="343:13" pos:end="343:62"><name pos:start="343:13" pos:end="343:23">OHCI_SET_BM</name><argument_list pos:start="343:24" pos:end="343:62">(<argument pos:start="343:25" pos:end="343:32"><expr pos:start="343:25" pos:end="343:32"><name pos:start="343:25" pos:end="343:32"><name pos:start="343:25" pos:end="343:26">td</name><operator pos:start="343:27" pos:end="343:27">.</operator><name pos:start="343:28" pos:end="343:32">flags</name></name></expr></argument>, <argument pos:start="343:35" pos:end="343:39"><expr pos:start="343:35" pos:end="343:39"><name pos:start="343:35" pos:end="343:39">TD_CC</name></expr></argument>, <argument pos:start="343:42" pos:end="343:61"><expr pos:start="343:42" pos:end="343:61"><name pos:start="343:42" pos:end="343:61">OHCI_CC_DATAUNDERRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="345:11" pos:end="387:9">else <block pos:start="345:16" pos:end="387:9">{<block_content pos:start="347:13" pos:end="385:13">

            <switch pos:start="347:13" pos:end="385:13">switch <condition pos:start="347:20" pos:end="347:24">(<expr pos:start="347:21" pos:end="347:23"><name pos:start="347:21" pos:end="347:23">ret</name></expr>)</condition> <block pos:start="347:26" pos:end="385:13">{<block_content pos:start="349:13" pos:end="383:22">

            <case pos:start="349:13" pos:end="349:31">case <expr pos:start="349:18" pos:end="349:30"><name pos:start="349:18" pos:end="349:30">USB_RET_NODEV</name></expr>:</case>

                <expr_stmt pos:start="351:17" pos:end="351:74"><expr pos:start="351:17" pos:end="351:73"><call pos:start="351:17" pos:end="351:73"><name pos:start="351:17" pos:end="351:27">OHCI_SET_BM</name><argument_list pos:start="351:28" pos:end="351:73">(<argument pos:start="351:29" pos:end="351:36"><expr pos:start="351:29" pos:end="351:36"><name pos:start="351:29" pos:end="351:36"><name pos:start="351:29" pos:end="351:30">td</name><operator pos:start="351:31" pos:end="351:31">.</operator><name pos:start="351:32" pos:end="351:36">flags</name></name></expr></argument>, <argument pos:start="351:39" pos:end="351:43"><expr pos:start="351:39" pos:end="351:43"><name pos:start="351:39" pos:end="351:43">TD_CC</name></expr></argument>, <argument pos:start="351:46" pos:end="351:72"><expr pos:start="351:46" pos:end="351:72"><name pos:start="351:46" pos:end="351:72">OHCI_CC_DEVICENOTRESPONDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <case pos:start="353:13" pos:end="353:29">case <expr pos:start="353:18" pos:end="353:28"><name pos:start="353:18" pos:end="353:28">USB_RET_NAK</name></expr>:</case>

                <expr_stmt pos:start="355:17" pos:end="355:47"><expr pos:start="355:17" pos:end="355:46"><call pos:start="355:17" pos:end="355:46"><name pos:start="355:17" pos:end="355:23">DPRINTF</name><argument_list pos:start="355:24" pos:end="355:46">(<argument pos:start="355:25" pos:end="355:45"><expr pos:start="355:25" pos:end="355:45"><literal type="string" pos:start="355:25" pos:end="355:45">"usb-ohci: got NAK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="357:17" pos:end="357:25">return <expr pos:start="357:24" pos:end="357:24"><literal type="number" pos:start="357:24" pos:end="357:24">1</literal></expr>;</return>

            <case pos:start="359:13" pos:end="359:31">case <expr pos:start="359:18" pos:end="359:30"><name pos:start="359:18" pos:end="359:30">USB_RET_STALL</name></expr>:</case>

                <expr_stmt pos:start="361:17" pos:end="361:49"><expr pos:start="361:17" pos:end="361:48"><call pos:start="361:17" pos:end="361:48"><name pos:start="361:17" pos:end="361:23">DPRINTF</name><argument_list pos:start="361:24" pos:end="361:48">(<argument pos:start="361:25" pos:end="361:47"><expr pos:start="361:25" pos:end="361:47"><literal type="string" pos:start="361:25" pos:end="361:47">"usb-ohci: got STALL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:60"><expr pos:start="363:17" pos:end="363:59"><call pos:start="363:17" pos:end="363:59"><name pos:start="363:17" pos:end="363:27">OHCI_SET_BM</name><argument_list pos:start="363:28" pos:end="363:59">(<argument pos:start="363:29" pos:end="363:36"><expr pos:start="363:29" pos:end="363:36"><name pos:start="363:29" pos:end="363:36"><name pos:start="363:29" pos:end="363:30">td</name><operator pos:start="363:31" pos:end="363:31">.</operator><name pos:start="363:32" pos:end="363:36">flags</name></name></expr></argument>, <argument pos:start="363:39" pos:end="363:43"><expr pos:start="363:39" pos:end="363:43"><name pos:start="363:39" pos:end="363:43">TD_CC</name></expr></argument>, <argument pos:start="363:46" pos:end="363:58"><expr pos:start="363:46" pos:end="363:58"><name pos:start="363:46" pos:end="363:58">OHCI_CC_STALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="365:17" pos:end="365:22">break;</break>

            <case pos:start="367:13" pos:end="367:32">case <expr pos:start="367:18" pos:end="367:31"><name pos:start="367:18" pos:end="367:31">USB_RET_BABBLE</name></expr>:</case>

                <expr_stmt pos:start="369:17" pos:end="369:50"><expr pos:start="369:17" pos:end="369:49"><call pos:start="369:17" pos:end="369:49"><name pos:start="369:17" pos:end="369:23">DPRINTF</name><argument_list pos:start="369:24" pos:end="369:49">(<argument pos:start="369:25" pos:end="369:48"><expr pos:start="369:25" pos:end="369:48"><literal type="string" pos:start="369:25" pos:end="369:48">"usb-ohci: got BABBLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:66"><expr pos:start="371:17" pos:end="371:65"><call pos:start="371:17" pos:end="371:65"><name pos:start="371:17" pos:end="371:27">OHCI_SET_BM</name><argument_list pos:start="371:28" pos:end="371:65">(<argument pos:start="371:29" pos:end="371:36"><expr pos:start="371:29" pos:end="371:36"><name pos:start="371:29" pos:end="371:36"><name pos:start="371:29" pos:end="371:30">td</name><operator pos:start="371:31" pos:end="371:31">.</operator><name pos:start="371:32" pos:end="371:36">flags</name></name></expr></argument>, <argument pos:start="371:39" pos:end="371:43"><expr pos:start="371:39" pos:end="371:43"><name pos:start="371:39" pos:end="371:43">TD_CC</name></expr></argument>, <argument pos:start="371:46" pos:end="371:64"><expr pos:start="371:46" pos:end="371:64"><name pos:start="371:46" pos:end="371:64">OHCI_CC_DATAOVERRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="373:17" pos:end="373:22">break;</break>

            <default pos:start="375:13" pos:end="375:20">default:</default>

                <expr_stmt pos:start="377:17" pos:end="377:75"><expr pos:start="377:17" pos:end="377:74"><call pos:start="377:17" pos:end="377:74"><name pos:start="377:17" pos:end="377:23">fprintf</name><argument_list pos:start="377:24" pos:end="377:74">(<argument pos:start="377:25" pos:end="377:30"><expr pos:start="377:25" pos:end="377:30"><name pos:start="377:25" pos:end="377:30">stderr</name></expr></argument>, <argument pos:start="377:33" pos:end="377:68"><expr pos:start="377:33" pos:end="377:68"><literal type="string" pos:start="377:33" pos:end="377:68">"usb-ohci: Bad device response %d\n"</literal></expr></argument>, <argument pos:start="377:71" pos:end="377:73"><expr pos:start="377:71" pos:end="377:73"><name pos:start="377:71" pos:end="377:73">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:68"><expr pos:start="379:17" pos:end="379:67"><call pos:start="379:17" pos:end="379:67"><name pos:start="379:17" pos:end="379:27">OHCI_SET_BM</name><argument_list pos:start="379:28" pos:end="379:67">(<argument pos:start="379:29" pos:end="379:36"><expr pos:start="379:29" pos:end="379:36"><name pos:start="379:29" pos:end="379:36"><name pos:start="379:29" pos:end="379:30">td</name><operator pos:start="379:31" pos:end="379:31">.</operator><name pos:start="379:32" pos:end="379:36">flags</name></name></expr></argument>, <argument pos:start="379:39" pos:end="379:43"><expr pos:start="379:39" pos:end="379:43"><name pos:start="379:39" pos:end="379:43">TD_CC</name></expr></argument>, <argument pos:start="379:46" pos:end="379:66"><expr pos:start="379:46" pos:end="379:66"><name pos:start="379:46" pos:end="379:66">OHCI_CC_UNDEXPETEDPID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:48"><expr pos:start="381:17" pos:end="381:47"><call pos:start="381:17" pos:end="381:47"><name pos:start="381:17" pos:end="381:27">OHCI_SET_BM</name><argument_list pos:start="381:28" pos:end="381:47">(<argument pos:start="381:29" pos:end="381:36"><expr pos:start="381:29" pos:end="381:36"><name pos:start="381:29" pos:end="381:36"><name pos:start="381:29" pos:end="381:30">td</name><operator pos:start="381:31" pos:end="381:31">.</operator><name pos:start="381:32" pos:end="381:36">flags</name></name></expr></argument>, <argument pos:start="381:39" pos:end="381:43"><expr pos:start="381:39" pos:end="381:43"><name pos:start="381:39" pos:end="381:43">TD_EC</name></expr></argument>, <argument pos:start="381:46" pos:end="381:46"><expr pos:start="381:46" pos:end="381:46"><literal type="number" pos:start="381:46" pos:end="381:46">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="383:17" pos:end="383:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:30"><expr pos:start="389:9" pos:end="389:29"><name pos:start="389:9" pos:end="389:16"><name pos:start="389:9" pos:end="389:10">ed</name><operator pos:start="389:11" pos:end="389:12">-&gt;</operator><name pos:start="389:13" pos:end="389:16">head</name></name> <operator pos:start="389:18" pos:end="389:19">|=</operator> <name pos:start="389:21" pos:end="389:29">OHCI_ED_H</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="395:5" pos:end="395:24">/* Retire this TD */</comment>

    <expr_stmt pos:start="397:5" pos:end="397:32"><expr pos:start="397:5" pos:end="397:31"><name pos:start="397:5" pos:end="397:12"><name pos:start="397:5" pos:end="397:6">ed</name><operator pos:start="397:7" pos:end="397:8">-&gt;</operator><name pos:start="397:9" pos:end="397:12">head</name></name> <operator pos:start="397:14" pos:end="397:15">&amp;=</operator> <operator pos:start="397:17" pos:end="397:17">~</operator><name pos:start="397:18" pos:end="397:31">OHCI_DPTR_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:41"><expr pos:start="399:5" pos:end="399:40"><name pos:start="399:5" pos:end="399:12"><name pos:start="399:5" pos:end="399:6">ed</name><operator pos:start="399:7" pos:end="399:8">-&gt;</operator><name pos:start="399:9" pos:end="399:12">head</name></name> <operator pos:start="399:14" pos:end="399:15">|=</operator> <name pos:start="399:17" pos:end="399:23"><name pos:start="399:17" pos:end="399:18">td</name><operator pos:start="399:19" pos:end="399:19">.</operator><name pos:start="399:20" pos:end="399:23">next</name></name> <operator pos:start="399:25" pos:end="399:25">&amp;</operator> <name pos:start="399:27" pos:end="399:40">OHCI_DPTR_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:25"><expr pos:start="401:5" pos:end="401:24"><name pos:start="401:5" pos:end="401:11"><name pos:start="401:5" pos:end="401:6">td</name><operator pos:start="401:7" pos:end="401:7">.</operator><name pos:start="401:8" pos:end="401:11">next</name></name> <operator pos:start="401:13" pos:end="401:13">=</operator> <name pos:start="401:15" pos:end="401:24"><name pos:start="401:15" pos:end="401:18">ohci</name><operator pos:start="401:19" pos:end="401:20">-&gt;</operator><name pos:start="401:21" pos:end="401:24">done</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:22"><expr pos:start="403:5" pos:end="403:21"><name pos:start="403:5" pos:end="403:14"><name pos:start="403:5" pos:end="403:8">ohci</name><operator pos:start="403:9" pos:end="403:10">-&gt;</operator><name pos:start="403:11" pos:end="403:14">done</name></name> <operator pos:start="403:16" pos:end="403:16">=</operator> <name pos:start="403:18" pos:end="403:21">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:33"><expr pos:start="405:5" pos:end="405:32"><name pos:start="405:5" pos:end="405:5">i</name> <operator pos:start="405:7" pos:end="405:7">=</operator> <call pos:start="405:9" pos:end="405:32"><name pos:start="405:9" pos:end="405:15">OHCI_BM</name><argument_list pos:start="405:16" pos:end="405:32">(<argument pos:start="405:17" pos:end="405:24"><expr pos:start="405:17" pos:end="405:24"><name pos:start="405:17" pos:end="405:24"><name pos:start="405:17" pos:end="405:18">td</name><operator pos:start="405:19" pos:end="405:19">.</operator><name pos:start="405:20" pos:end="405:24">flags</name></name></expr></argument>, <argument pos:start="405:27" pos:end="405:31"><expr pos:start="405:27" pos:end="405:31"><name pos:start="405:27" pos:end="405:31">TD_DI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="407:5" pos:end="409:29"><if pos:start="407:5" pos:end="409:29">if <condition pos:start="407:8" pos:end="407:29">(<expr pos:start="407:9" pos:end="407:28"><name pos:start="407:9" pos:end="407:9">i</name> <operator pos:start="407:11" pos:end="407:11">&lt;</operator> <name pos:start="407:13" pos:end="407:28"><name pos:start="407:13" pos:end="407:16">ohci</name><operator pos:start="407:17" pos:end="407:18">-&gt;</operator><name pos:start="407:19" pos:end="407:28">done_count</name></name></expr>)</condition><block type="pseudo" pos:start="409:9" pos:end="409:29"><block_content pos:start="409:9" pos:end="409:29">

        <expr_stmt pos:start="409:9" pos:end="409:29"><expr pos:start="409:9" pos:end="409:28"><name pos:start="409:9" pos:end="409:24"><name pos:start="409:9" pos:end="409:12">ohci</name><operator pos:start="409:13" pos:end="409:14">-&gt;</operator><name pos:start="409:15" pos:end="409:24">done_count</name></name> <operator pos:start="409:26" pos:end="409:26">=</operator> <name pos:start="409:28" pos:end="409:28">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="411:1" pos:end="411:15"><name pos:start="411:1" pos:end="411:14">exit_no_retire</name>:</label>

    <expr_stmt pos:start="413:5" pos:end="413:33"><expr pos:start="413:5" pos:end="413:32"><call pos:start="413:5" pos:end="413:32"><name pos:start="413:5" pos:end="413:15">ohci_put_td</name><argument_list pos:start="413:16" pos:end="413:32">(<argument pos:start="413:17" pos:end="413:20"><expr pos:start="413:17" pos:end="413:20"><name pos:start="413:17" pos:end="413:20">ohci</name></expr></argument>, <argument pos:start="413:23" pos:end="413:26"><expr pos:start="413:23" pos:end="413:26"><name pos:start="413:23" pos:end="413:26">addr</name></expr></argument>, <argument pos:start="413:29" pos:end="413:31"><expr pos:start="413:29" pos:end="413:31"><operator pos:start="413:29" pos:end="413:29">&amp;</operator><name pos:start="413:30" pos:end="413:31">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="415:5" pos:end="415:55">return <expr pos:start="415:12" pos:end="415:54"><call pos:start="415:12" pos:end="415:35"><name pos:start="415:12" pos:end="415:18">OHCI_BM</name><argument_list pos:start="415:19" pos:end="415:35">(<argument pos:start="415:20" pos:end="415:27"><expr pos:start="415:20" pos:end="415:27"><name pos:start="415:20" pos:end="415:27"><name pos:start="415:20" pos:end="415:21">td</name><operator pos:start="415:22" pos:end="415:22">.</operator><name pos:start="415:23" pos:end="415:27">flags</name></name></expr></argument>, <argument pos:start="415:30" pos:end="415:34"><expr pos:start="415:30" pos:end="415:34"><name pos:start="415:30" pos:end="415:34">TD_CC</name></expr></argument>)</argument_list></call> <operator pos:start="415:37" pos:end="415:38">!=</operator> <name pos:start="415:40" pos:end="415:54">OHCI_CC_NOERROR</name></expr>;</return>

</block_content>}</block></function>
</unit>
