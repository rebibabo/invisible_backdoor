<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12064.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">spapr_finalize_fdt</name><parameter_list pos:start="1:31" pos:end="7:48">(<parameter pos:start="1:32" pos:end="1:55"><decl pos:start="1:32" pos:end="1:55"><type pos:start="1:32" pos:end="1:55"><name pos:start="1:32" pos:end="1:48">sPAPRMachineState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">spapr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:46"><decl pos:start="3:32" pos:end="3:46"><type pos:start="3:32" pos:end="3:46"><name pos:start="3:32" pos:end="3:37">hwaddr</name></type> <name pos:start="3:39" pos:end="3:46">fdt_addr</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:47"><decl pos:start="5:32" pos:end="5:47"><type pos:start="5:32" pos:end="5:47"><name pos:start="5:32" pos:end="5:37">hwaddr</name></type> <name pos:start="5:39" pos:end="5:47">rtas_addr</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:47"><decl pos:start="7:32" pos:end="7:47"><type pos:start="7:32" pos:end="7:47"><name pos:start="7:32" pos:end="7:37">hwaddr</name></type> <name pos:start="7:39" pos:end="7:47">rtas_size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="223:1">{<block_content pos:start="11:5" pos:end="221:16">

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MachineState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:25">machine</name> <init pos:start="11:27" pos:end="11:55">= <expr pos:start="11:29" pos:end="11:55"><call pos:start="11:29" pos:end="11:55"><name pos:start="11:29" pos:end="11:35">MACHINE</name><argument_list pos:start="11:36" pos:end="11:55">(<argument pos:start="11:37" pos:end="11:54"><expr pos:start="11:37" pos:end="11:54"><call pos:start="11:37" pos:end="11:54"><name pos:start="11:37" pos:end="11:52">qdev_get_machine</name><argument_list pos:start="11:53" pos:end="11:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:62"><decl pos:start="13:5" pos:end="13:61"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">sPAPRMachineClass</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">smc</name> <init pos:start="13:28" pos:end="13:61">= <expr pos:start="13:30" pos:end="13:61"><call pos:start="13:30" pos:end="13:61"><name pos:start="13:30" pos:end="13:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="13:53" pos:end="13:61">(<argument pos:start="13:54" pos:end="13:60"><expr pos:start="13:54" pos:end="13:60"><name pos:start="13:54" pos:end="13:60">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:49">= <expr pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:37">machine</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>, <decl pos:start="17:14" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:13">cb</name> <init pos:start="19:15" pos:end="19:17">= <expr pos:start="19:17" pos:end="19:17"><literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:18">bootlist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">sPAPRPHBState</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">phb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:7">fdt</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:32"><name pos:start="29:11" pos:end="29:18">g_malloc</name><argument_list pos:start="29:19" pos:end="29:32">(<argument pos:start="29:20" pos:end="29:31"><expr pos:start="29:20" pos:end="29:31"><name pos:start="29:20" pos:end="29:31">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:72">/* open out the base tree into a temp buffer for the final tweaks */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:62"><expr pos:start="35:5" pos:end="35:61"><call pos:start="35:5" pos:end="35:61"><name pos:start="35:5" pos:end="35:8">_FDT</name><argument_list pos:start="35:9" pos:end="35:61">(<argument pos:start="35:10" pos:end="35:60"><expr pos:start="35:10" pos:end="35:60"><operator pos:start="35:10" pos:end="35:10">(</operator><call pos:start="35:11" pos:end="35:59"><name pos:start="35:11" pos:end="35:23">fdt_open_into</name><argument_list pos:start="35:24" pos:end="35:59">(<argument pos:start="35:25" pos:end="35:39"><expr pos:start="35:25" pos:end="35:39"><name pos:start="35:25" pos:end="35:39"><name pos:start="35:25" pos:end="35:29">spapr</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:39">fdt_skel</name></name></expr></argument>, <argument pos:start="35:42" pos:end="35:44"><expr pos:start="35:42" pos:end="35:44"><name pos:start="35:42" pos:end="35:44">fdt</name></expr></argument>, <argument pos:start="35:47" pos:end="35:58"><expr pos:start="35:47" pos:end="35:58"><name pos:start="35:47" pos:end="35:58">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="35:60" pos:end="35:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:43"><name pos:start="39:11" pos:end="39:31">spapr_populate_memory</name><argument_list pos:start="39:32" pos:end="39:43">(<argument pos:start="39:33" pos:end="39:37"><expr pos:start="39:33" pos:end="39:37"><name pos:start="39:33" pos:end="39:37">spapr</name></expr></argument>, <argument pos:start="39:40" pos:end="39:42"><expr pos:start="39:40" pos:end="39:42"><name pos:start="39:40" pos:end="39:42">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:16">

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><call pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:63">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:62"><expr pos:start="43:25" pos:end="43:62"><literal type="string" pos:start="43:25" pos:end="43:62">"couldn't setup memory nodes in fdt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><call pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:12">exit</name><argument_list pos:start="45:13" pos:end="45:15">(<argument pos:start="45:14" pos:end="45:14"><expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:54"><expr pos:start="51:5" pos:end="51:53"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:53"><name pos:start="51:11" pos:end="51:32">spapr_populate_vdevice</name><argument_list pos:start="51:33" pos:end="51:53">(<argument pos:start="51:34" pos:end="51:47"><expr pos:start="51:34" pos:end="51:47"><name pos:start="51:34" pos:end="51:47"><name pos:start="51:34" pos:end="51:38">spapr</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:47">vio_bus</name></name></expr></argument>, <argument pos:start="51:50" pos:end="51:52"><expr pos:start="51:50" pos:end="51:52"><name pos:start="51:50" pos:end="51:52">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:63"><expr pos:start="55:9" pos:end="55:62"><call pos:start="55:9" pos:end="55:62"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:62">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:61"><expr pos:start="55:25" pos:end="55:61"><literal type="string" pos:start="55:25" pos:end="55:61">"couldn't setup vio devices in fdt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if <condition pos:start="63:8" pos:end="63:59">(<expr pos:start="63:9" pos:end="63:58"><call pos:start="63:9" pos:end="63:58"><name pos:start="63:9" pos:end="63:32">object_resolve_path_type</name><argument_list pos:start="63:33" pos:end="63:58">(<argument pos:start="63:34" pos:end="63:35"><expr pos:start="63:34" pos:end="63:35"><literal type="string" pos:start="63:34" pos:end="63:35">""</literal></expr></argument>, <argument pos:start="63:38" pos:end="63:51"><expr pos:start="63:38" pos:end="63:51"><name pos:start="63:38" pos:end="63:51">TYPE_SPAPR_RNG</name></expr></argument>, <argument pos:start="63:54" pos:end="63:57"><expr pos:start="63:54" pos:end="63:57"><name pos:start="63:54" pos:end="63:57">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:61" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:9">

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:40"><name pos:start="65:15" pos:end="65:35">spapr_rng_populate_dt</name><argument_list pos:start="65:36" pos:end="65:40">(<argument pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:39">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>)</condition> <block pos:start="67:22" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:20">

            <expr_stmt pos:start="69:13" pos:end="69:72"><expr pos:start="69:13" pos:end="69:71"><call pos:start="69:13" pos:end="69:71"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="69:71">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:70"><expr pos:start="69:29" pos:end="69:70"><literal type="string" pos:start="69:29" pos:end="69:70">"could not set up rng device in the fdt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:20"><expr pos:start="71:13" pos:end="71:19"><call pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:16">exit</name><argument_list pos:start="71:17" pos:end="71:19">(<argument pos:start="71:18" pos:end="71:18"><expr pos:start="71:18" pos:end="71:18"><literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="79:5" pos:end="79:42"><name pos:start="79:5" pos:end="79:17">QLIST_FOREACH</name><argument_list pos:start="79:18" pos:end="79:42">(<argument pos:start="79:19" pos:end="79:21">phb</argument>, <argument pos:start="79:24" pos:end="79:35">&amp;spapr-&gt;phbs</argument>, <argument pos:start="79:38" pos:end="79:41">list</argument>)</argument_list></macro> <block pos:start="79:44" pos:end="91:5">{<block_content pos:start="81:9" pos:end="89:9">

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:59"><name pos:start="81:15" pos:end="81:35">spapr_populate_pci_dt</name><argument_list pos:start="81:36" pos:end="81:59">(<argument pos:start="81:37" pos:end="81:39"><expr pos:start="81:37" pos:end="81:39"><name pos:start="81:37" pos:end="81:39">phb</name></expr></argument>, <argument pos:start="81:42" pos:end="81:53"><expr pos:start="81:42" pos:end="81:53"><name pos:start="81:42" pos:end="81:53">PHANDLE_XICP</name></expr></argument>, <argument pos:start="81:56" pos:end="81:58"><expr pos:start="81:56" pos:end="81:58"><name pos:start="81:56" pos:end="81:58">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:20">(<expr pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:17">&lt;</operator> <literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>)</condition> <block pos:start="83:22" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:20">

            <expr_stmt pos:start="85:13" pos:end="85:62"><expr pos:start="85:13" pos:end="85:61"><call pos:start="85:13" pos:end="85:61"><name pos:start="85:13" pos:end="85:24">error_report</name><argument_list pos:start="85:25" pos:end="85:61">(<argument pos:start="85:26" pos:end="85:60"><expr pos:start="85:26" pos:end="85:60"><literal type="string" pos:start="85:26" pos:end="85:60">"couldn't setup PCI devices in fdt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="95:5" pos:end="95:14">/* RTAS */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:66"><expr pos:start="97:5" pos:end="97:65"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:65"><name pos:start="97:11" pos:end="97:38">spapr_rtas_device_tree_setup</name><argument_list pos:start="97:39" pos:end="97:65">(<argument pos:start="97:40" pos:end="97:42"><expr pos:start="97:40" pos:end="97:42"><name pos:start="97:40" pos:end="97:42">fdt</name></expr></argument>, <argument pos:start="97:45" pos:end="97:53"><expr pos:start="97:45" pos:end="97:53"><name pos:start="97:45" pos:end="97:53">rtas_addr</name></expr></argument>, <argument pos:start="97:56" pos:end="97:64"><expr pos:start="97:56" pos:end="97:64"><name pos:start="97:56" pos:end="97:64">rtas_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:73">

        <expr_stmt pos:start="101:9" pos:end="101:73"><expr pos:start="101:9" pos:end="101:72"><call pos:start="101:9" pos:end="101:72"><name pos:start="101:9" pos:end="101:15">fprintf</name><argument_list pos:start="101:16" pos:end="101:72">(<argument pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:22">stderr</name></expr></argument>, <argument pos:start="101:25" pos:end="101:71"><expr pos:start="101:25" pos:end="101:71"><literal type="string" pos:start="101:25" pos:end="101:71">"Couldn't set up RTAS device tree properties\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:14">/* cpus */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:44"><expr pos:start="109:5" pos:end="109:43"><call pos:start="109:5" pos:end="109:43"><name pos:start="109:5" pos:end="109:31">spapr_populate_cpus_dt_node</name><argument_list pos:start="109:32" pos:end="109:43">(<argument pos:start="109:33" pos:end="109:35"><expr pos:start="109:33" pos:end="109:35"><name pos:start="109:33" pos:end="109:35">fdt</name></expr></argument>, <argument pos:start="109:38" pos:end="109:42"><expr pos:start="109:38" pos:end="109:42"><name pos:start="109:38" pos:end="109:42">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:48"><expr pos:start="113:5" pos:end="113:47"><name pos:start="113:5" pos:end="113:12">bootlist</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:47"><name pos:start="113:16" pos:end="113:36">get_boot_devices_list</name><argument_list pos:start="113:37" pos:end="113:47">(<argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><operator pos:start="113:38" pos:end="113:38">&amp;</operator><name pos:start="113:39" pos:end="113:40">cb</name></expr></argument>, <argument pos:start="113:43" pos:end="113:46"><expr pos:start="113:43" pos:end="113:46"><name pos:start="113:43" pos:end="113:46">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="139:5"><if pos:start="115:5" pos:end="139:5">if <condition pos:start="115:8" pos:end="115:23">(<expr pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:10">cb</name> <operator pos:start="115:12" pos:end="115:13">&amp;&amp;</operator> <name pos:start="115:15" pos:end="115:22">bootlist</name></expr>)</condition> <block pos:start="115:25" pos:end="139:5">{<block_content pos:start="117:9" pos:end="137:74">

        <decl_stmt pos:start="117:9" pos:end="117:53"><decl pos:start="117:9" pos:end="117:52"><type pos:start="117:9" pos:end="117:11"><name pos:start="117:9" pos:end="117:11">int</name></type> <name pos:start="117:13" pos:end="117:18">offset</name> <init pos:start="117:20" pos:end="117:52">= <expr pos:start="117:22" pos:end="117:52"><call pos:start="117:22" pos:end="117:52"><name pos:start="117:22" pos:end="117:36">fdt_path_offset</name><argument_list pos:start="117:37" pos:end="117:52">(<argument pos:start="117:38" pos:end="117:40"><expr pos:start="117:38" pos:end="117:40"><name pos:start="117:38" pos:end="117:40">fdt</name></expr></argument>, <argument pos:start="117:43" pos:end="117:51"><expr pos:start="117:43" pos:end="117:51"><literal type="string" pos:start="117:43" pos:end="117:51">"/chosen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:23">(<expr pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:18">offset</name> <operator pos:start="119:20" pos:end="119:20">&lt;</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>)</condition> <block pos:start="119:25" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:20">

            <expr_stmt pos:start="121:13" pos:end="121:20"><expr pos:start="121:13" pos:end="121:19"><call pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:16">exit</name><argument_list pos:start="121:17" pos:end="121:19">(<argument pos:start="121:18" pos:end="121:18"><expr pos:start="121:18" pos:end="121:18"><literal type="number" pos:start="121:18" pos:end="121:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="125:9" pos:end="135:9">for <control pos:start="125:13" pos:end="125:32">(<init pos:start="125:14" pos:end="125:19"><expr pos:start="125:14" pos:end="125:18"><name pos:start="125:14" pos:end="125:14">i</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>;</init> <condition pos:start="125:21" pos:end="125:27"><expr pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:21">i</name> <operator pos:start="125:23" pos:end="125:23">&lt;</operator> <name pos:start="125:25" pos:end="125:26">cb</name></expr>;</condition> <incr pos:start="125:29" pos:end="125:31"><expr pos:start="125:29" pos:end="125:31"><name pos:start="125:29" pos:end="125:29">i</name><operator pos:start="125:30" pos:end="125:31">++</operator></expr></incr>)</control> <block pos:start="125:34" pos:end="135:9">{<block_content pos:start="127:13" pos:end="131:13">

            <if_stmt pos:start="127:13" pos:end="131:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:36">(<expr pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:27"><name pos:start="127:17" pos:end="127:24">bootlist</name><index pos:start="127:25" pos:end="127:27">[<expr pos:start="127:26" pos:end="127:26"><name pos:start="127:26" pos:end="127:26">i</name></expr>]</index></name> <operator pos:start="127:29" pos:end="127:30">==</operator> <literal type="char" pos:start="127:32" pos:end="127:35">'\n'</literal></expr>)</condition> <block pos:start="127:38" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:34">

                <expr_stmt pos:start="129:17" pos:end="129:34"><expr pos:start="129:17" pos:end="129:33"><name pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:24">bootlist</name><index pos:start="129:25" pos:end="129:27">[<expr pos:start="129:26" pos:end="129:26"><name pos:start="129:26" pos:end="129:26">i</name></expr>]</index></name> <operator pos:start="129:29" pos:end="129:29">=</operator> <literal type="char" pos:start="129:31" pos:end="129:33">' '</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block></for>

        <expr_stmt pos:start="137:9" pos:end="137:74"><expr pos:start="137:9" pos:end="137:73"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="137:73"><name pos:start="137:15" pos:end="137:32">fdt_setprop_string</name><argument_list pos:start="137:33" pos:end="137:73">(<argument pos:start="137:34" pos:end="137:36"><expr pos:start="137:34" pos:end="137:36"><name pos:start="137:34" pos:end="137:36">fdt</name></expr></argument>, <argument pos:start="137:39" pos:end="137:44"><expr pos:start="137:39" pos:end="137:44"><name pos:start="137:39" pos:end="137:44">offset</name></expr></argument>, <argument pos:start="137:47" pos:end="137:62"><expr pos:start="137:47" pos:end="137:62"><literal type="string" pos:start="137:47" pos:end="137:62">"qemu,boot-list"</literal></expr></argument>, <argument pos:start="137:65" pos:end="137:72"><expr pos:start="137:65" pos:end="137:72"><name pos:start="137:65" pos:end="137:72">bootlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="157:5"><if pos:start="143:5" pos:end="157:5">if <condition pos:start="143:8" pos:end="143:43">(<expr pos:start="143:9" pos:end="143:42"><name pos:start="143:9" pos:end="143:19">boot_device</name> <operator pos:start="143:21" pos:end="143:22">&amp;&amp;</operator> <call pos:start="143:24" pos:end="143:42"><name pos:start="143:24" pos:end="143:29">strlen</name><argument_list pos:start="143:30" pos:end="143:42">(<argument pos:start="143:31" pos:end="143:41"><expr pos:start="143:31" pos:end="143:41"><name pos:start="143:31" pos:end="143:41">boot_device</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:45" pos:end="157:5">{<block_content pos:start="145:9" pos:end="155:73">

        <decl_stmt pos:start="145:9" pos:end="145:53"><decl pos:start="145:9" pos:end="145:52"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:18">offset</name> <init pos:start="145:20" pos:end="145:52">= <expr pos:start="145:22" pos:end="145:52"><call pos:start="145:22" pos:end="145:52"><name pos:start="145:22" pos:end="145:36">fdt_path_offset</name><argument_list pos:start="145:37" pos:end="145:52">(<argument pos:start="145:38" pos:end="145:40"><expr pos:start="145:38" pos:end="145:40"><name pos:start="145:38" pos:end="145:40">fdt</name></expr></argument>, <argument pos:start="145:43" pos:end="145:51"><expr pos:start="145:43" pos:end="145:51"><literal type="string" pos:start="145:43" pos:end="145:51">"/chosen"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:23">(<expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:18">offset</name> <operator pos:start="149:20" pos:end="149:20">&lt;</operator> <literal type="number" pos:start="149:22" pos:end="149:22">0</literal></expr>)</condition> <block pos:start="149:25" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:20">

            <expr_stmt pos:start="151:13" pos:end="151:20"><expr pos:start="151:13" pos:end="151:19"><call pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:16">exit</name><argument_list pos:start="151:17" pos:end="151:19">(<argument pos:start="151:18" pos:end="151:18"><expr pos:start="151:18" pos:end="151:18"><literal type="number" pos:start="151:18" pos:end="151:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:73"><expr pos:start="155:9" pos:end="155:72"><call pos:start="155:9" pos:end="155:72"><name pos:start="155:9" pos:end="155:26">fdt_setprop_string</name><argument_list pos:start="155:27" pos:end="155:72">(<argument pos:start="155:28" pos:end="155:30"><expr pos:start="155:28" pos:end="155:30"><name pos:start="155:28" pos:end="155:30">fdt</name></expr></argument>, <argument pos:start="155:33" pos:end="155:38"><expr pos:start="155:33" pos:end="155:38"><name pos:start="155:33" pos:end="155:38">offset</name></expr></argument>, <argument pos:start="155:41" pos:end="155:58"><expr pos:start="155:41" pos:end="155:58"><literal type="string" pos:start="155:41" pos:end="155:58">"qemu,boot-device"</literal></expr></argument>, <argument pos:start="155:61" pos:end="155:71"><expr pos:start="155:61" pos:end="155:71"><name pos:start="155:61" pos:end="155:71">boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:29">(<expr pos:start="161:9" pos:end="161:28"><operator pos:start="161:9" pos:end="161:9">!</operator><name pos:start="161:10" pos:end="161:28"><name pos:start="161:10" pos:end="161:14">spapr</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:28">has_graphics</name></name></expr>)</condition> <block pos:start="161:31" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:58">

        <expr_stmt pos:start="163:9" pos:end="163:58"><expr pos:start="163:9" pos:end="163:57"><call pos:start="163:9" pos:end="163:57"><name pos:start="163:9" pos:end="163:36">spapr_populate_chosen_stdout</name><argument_list pos:start="163:37" pos:end="163:57">(<argument pos:start="163:38" pos:end="163:40"><expr pos:start="163:38" pos:end="163:40"><name pos:start="163:38" pos:end="163:40">fdt</name></expr></argument>, <argument pos:start="163:43" pos:end="163:56"><expr pos:start="163:43" pos:end="163:56"><name pos:start="163:43" pos:end="163:56"><name pos:start="163:43" pos:end="163:47">spapr</name><operator pos:start="163:48" pos:end="163:49">-&gt;</operator><name pos:start="163:50" pos:end="163:56">vio_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="173:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:28">(<expr pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:11">smc</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:27">dr_lmb_enabled</name></name></expr>)</condition> <block pos:start="169:30" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:79">

        <expr_stmt pos:start="171:9" pos:end="171:79"><expr pos:start="171:9" pos:end="171:78"><call pos:start="171:9" pos:end="171:78"><name pos:start="171:9" pos:end="171:12">_FDT</name><argument_list pos:start="171:13" pos:end="171:78">(<argument pos:start="171:14" pos:end="171:77"><expr pos:start="171:14" pos:end="171:77"><call pos:start="171:14" pos:end="171:77"><name pos:start="171:14" pos:end="171:34">spapr_drc_populate_dt</name><argument_list pos:start="171:35" pos:end="171:77">(<argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">fdt</name></expr></argument>, <argument pos:start="171:41" pos:end="171:41"><expr pos:start="171:41" pos:end="171:41"><literal type="number" pos:start="171:41" pos:end="171:41">0</literal></expr></argument>, <argument pos:start="171:44" pos:end="171:47"><expr pos:start="171:44" pos:end="171:47"><name pos:start="171:44" pos:end="171:47">NULL</name></expr></argument>, <argument pos:start="171:50" pos:end="171:76"><expr pos:start="171:50" pos:end="171:76"><name pos:start="171:50" pos:end="171:76">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="193:5"><if pos:start="177:5" pos:end="193:5">if <condition pos:start="177:8" pos:end="177:28">(<expr pos:start="177:9" pos:end="177:27"><name pos:start="177:9" pos:end="177:27"><name pos:start="177:9" pos:end="177:11">smc</name><operator pos:start="177:12" pos:end="177:13">-&gt;</operator><name pos:start="177:14" pos:end="177:27">dr_cpu_enabled</name></name></expr>)</condition> <block pos:start="177:30" pos:end="193:5">{<block_content pos:start="179:9" pos:end="191:9">

        <decl_stmt pos:start="179:9" pos:end="179:51"><decl pos:start="179:9" pos:end="179:50"><type pos:start="179:9" pos:end="179:11"><name pos:start="179:9" pos:end="179:11">int</name></type> <name pos:start="179:13" pos:end="179:18">offset</name> <init pos:start="179:20" pos:end="179:50">= <expr pos:start="179:22" pos:end="179:50"><call pos:start="179:22" pos:end="179:50"><name pos:start="179:22" pos:end="179:36">fdt_path_offset</name><argument_list pos:start="179:37" pos:end="179:50">(<argument pos:start="179:38" pos:end="179:40"><expr pos:start="179:38" pos:end="179:40"><name pos:start="179:38" pos:end="179:40">fdt</name></expr></argument>, <argument pos:start="179:43" pos:end="179:49"><expr pos:start="179:43" pos:end="179:49"><literal type="string" pos:start="179:43" pos:end="179:49">"/cpus"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="181:9" pos:end="183:65"><expr pos:start="181:9" pos:end="183:64"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="183:64"><name pos:start="181:15" pos:end="181:35">spapr_drc_populate_dt</name><argument_list pos:start="181:36" pos:end="183:64">(<argument pos:start="181:37" pos:end="181:39"><expr pos:start="181:37" pos:end="181:39"><name pos:start="181:37" pos:end="181:39">fdt</name></expr></argument>, <argument pos:start="181:42" pos:end="181:47"><expr pos:start="181:42" pos:end="181:47"><name pos:start="181:42" pos:end="181:47">offset</name></expr></argument>, <argument pos:start="181:50" pos:end="181:53"><expr pos:start="181:50" pos:end="181:53"><name pos:start="181:50" pos:end="181:53">NULL</name></expr></argument>,

                                    <argument pos:start="183:37" pos:end="183:63"><expr pos:start="183:37" pos:end="183:63"><name pos:start="183:37" pos:end="183:63">SPAPR_DR_CONNECTOR_TYPE_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="191:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:20">(<expr pos:start="185:13" pos:end="185:19"><name pos:start="185:13" pos:end="185:15">ret</name> <operator pos:start="185:17" pos:end="185:17">&lt;</operator> <literal type="number" pos:start="185:19" pos:end="185:19">0</literal></expr>)</condition> <block pos:start="185:22" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:20">

            <expr_stmt pos:start="187:13" pos:end="187:74"><expr pos:start="187:13" pos:end="187:73"><call pos:start="187:13" pos:end="187:73"><name pos:start="187:13" pos:end="187:24">error_report</name><argument_list pos:start="187:25" pos:end="187:73">(<argument pos:start="187:26" pos:end="187:72"><expr pos:start="187:26" pos:end="187:72"><literal type="string" pos:start="187:26" pos:end="187:72">"Couldn't set up CPU DR device tree properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:20"><expr pos:start="189:13" pos:end="189:19"><call pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:16">exit</name><argument_list pos:start="189:17" pos:end="189:19">(<argument pos:start="189:18" pos:end="189:18"><expr pos:start="189:18" pos:end="189:18"><literal type="number" pos:start="189:18" pos:end="189:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:26"><expr pos:start="197:5" pos:end="197:25"><call pos:start="197:5" pos:end="197:25"><name pos:start="197:5" pos:end="197:8">_FDT</name><argument_list pos:start="197:9" pos:end="197:25">(<argument pos:start="197:10" pos:end="197:24"><expr pos:start="197:10" pos:end="197:24"><operator pos:start="197:10" pos:end="197:10">(</operator><call pos:start="197:11" pos:end="197:23"><name pos:start="197:11" pos:end="197:18">fdt_pack</name><argument_list pos:start="197:19" pos:end="197:23">(<argument pos:start="197:20" pos:end="197:22"><expr pos:start="197:20" pos:end="197:22"><name pos:start="197:20" pos:end="197:22">fdt</name></expr></argument>)</argument_list></call><operator pos:start="197:24" pos:end="197:24">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="209:5"><if pos:start="201:5" pos:end="209:5">if <condition pos:start="201:8" pos:end="201:42">(<expr pos:start="201:9" pos:end="201:41"><call pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:21">fdt_totalsize</name><argument_list pos:start="201:22" pos:end="201:26">(<argument pos:start="201:23" pos:end="201:25"><expr pos:start="201:23" pos:end="201:25"><name pos:start="201:23" pos:end="201:25">fdt</name></expr></argument>)</argument_list></call> <operator pos:start="201:28" pos:end="201:28">&gt;</operator> <name pos:start="201:30" pos:end="201:41">FDT_MAX_SIZE</name></expr>)</condition> <block pos:start="201:44" pos:end="209:5">{<block_content pos:start="203:9" pos:end="207:16">

        <expr_stmt pos:start="203:9" pos:end="205:55"><expr pos:start="203:9" pos:end="205:54"><call pos:start="203:9" pos:end="205:54"><name pos:start="203:9" pos:end="203:20">error_report</name><argument_list pos:start="203:21" pos:end="205:54">(<argument pos:start="203:22" pos:end="203:61"><expr pos:start="203:22" pos:end="203:61"><literal type="string" pos:start="203:22" pos:end="203:61">"FDT too big ! 0x%x bytes (max is 0x%x)"</literal></expr></argument>,

                     <argument pos:start="205:22" pos:end="205:39"><expr pos:start="205:22" pos:end="205:39"><call pos:start="205:22" pos:end="205:39"><name pos:start="205:22" pos:end="205:34">fdt_totalsize</name><argument_list pos:start="205:35" pos:end="205:39">(<argument pos:start="205:36" pos:end="205:38"><expr pos:start="205:36" pos:end="205:38"><name pos:start="205:36" pos:end="205:38">fdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:42" pos:end="205:53"><expr pos:start="205:42" pos:end="205:53"><name pos:start="205:42" pos:end="205:53">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:16"><expr pos:start="207:9" pos:end="207:15"><call pos:start="207:9" pos:end="207:15"><name pos:start="207:9" pos:end="207:12">exit</name><argument_list pos:start="207:13" pos:end="207:15">(<argument pos:start="207:14" pos:end="207:14"><expr pos:start="207:14" pos:end="207:14"><literal type="number" pos:start="207:14" pos:end="207:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:46"><expr pos:start="213:5" pos:end="213:45"><call pos:start="213:5" pos:end="213:45"><name pos:start="213:5" pos:end="213:20">qemu_fdt_dumpdtb</name><argument_list pos:start="213:21" pos:end="213:45">(<argument pos:start="213:22" pos:end="213:24"><expr pos:start="213:22" pos:end="213:24"><name pos:start="213:22" pos:end="213:24">fdt</name></expr></argument>, <argument pos:start="213:27" pos:end="213:44"><expr pos:start="213:27" pos:end="213:44"><call pos:start="213:27" pos:end="213:44"><name pos:start="213:27" pos:end="213:39">fdt_totalsize</name><argument_list pos:start="213:40" pos:end="213:44">(<argument pos:start="213:41" pos:end="213:43"><expr pos:start="213:41" pos:end="213:43"><name pos:start="213:41" pos:end="213:43">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:65"><expr pos:start="215:5" pos:end="215:64"><call pos:start="215:5" pos:end="215:64"><name pos:start="215:5" pos:end="215:29">cpu_physical_memory_write</name><argument_list pos:start="215:30" pos:end="215:64">(<argument pos:start="215:31" pos:end="215:38"><expr pos:start="215:31" pos:end="215:38"><name pos:start="215:31" pos:end="215:38">fdt_addr</name></expr></argument>, <argument pos:start="215:41" pos:end="215:43"><expr pos:start="215:41" pos:end="215:43"><name pos:start="215:41" pos:end="215:43">fdt</name></expr></argument>, <argument pos:start="215:46" pos:end="215:63"><expr pos:start="215:46" pos:end="215:63"><call pos:start="215:46" pos:end="215:63"><name pos:start="215:46" pos:end="215:58">fdt_totalsize</name><argument_list pos:start="215:59" pos:end="215:63">(<argument pos:start="215:60" pos:end="215:62"><expr pos:start="215:60" pos:end="215:62"><name pos:start="215:60" pos:end="215:62">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:21"><expr pos:start="219:5" pos:end="219:20"><call pos:start="219:5" pos:end="219:20"><name pos:start="219:5" pos:end="219:10">g_free</name><argument_list pos:start="219:11" pos:end="219:20">(<argument pos:start="219:12" pos:end="219:19"><expr pos:start="219:12" pos:end="219:19"><name pos:start="219:12" pos:end="219:19">bootlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:16"><expr pos:start="221:5" pos:end="221:15"><call pos:start="221:5" pos:end="221:15"><name pos:start="221:5" pos:end="221:10">g_free</name><argument_list pos:start="221:11" pos:end="221:15">(<argument pos:start="221:12" pos:end="221:14"><expr pos:start="221:12" pos:end="221:14"><name pos:start="221:12" pos:end="221:14">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
