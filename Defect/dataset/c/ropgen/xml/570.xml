<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/570.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">cpu_gdb_write_register</name><parameter_list pos:start="1:34" pos:end="1:73">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:42">CPUState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:65"><decl pos:start="1:50" pos:end="1:65"><type pos:start="1:50" pos:end="1:65"><name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">mem_buf</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:72"><decl pos:start="1:68" pos:end="1:72"><type pos:start="1:68" pos:end="1:72"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:72">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">tmp</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="129:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:24">(<expr pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:9">n</name> <operator pos:start="9:11" pos:end="9:11">&lt;</operator> <name pos:start="9:13" pos:end="9:23">CPU_NB_REGS</name></expr>)</condition> <block pos:start="9:26" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:36">

        <expr_stmt pos:start="11:9" pos:end="11:49"><expr pos:start="11:9" pos:end="11:48"><name pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:11">env</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:17">regs</name><index pos:start="11:18" pos:end="11:29">[<expr pos:start="11:19" pos:end="11:28"><name pos:start="11:19" pos:end="11:28"><name pos:start="11:19" pos:end="11:25">gpr_map</name><index pos:start="11:26" pos:end="11:28">[<expr pos:start="11:27" pos:end="11:27"><name pos:start="11:27" pos:end="11:27">n</name></expr>]</index></name></expr>]</index></name> <operator pos:start="11:31" pos:end="11:31">=</operator> <call pos:start="11:33" pos:end="11:48"><name pos:start="11:33" pos:end="11:39">ldtul_p</name><argument_list pos:start="11:40" pos:end="11:48">(<argument pos:start="11:41" pos:end="11:47"><expr pos:start="11:41" pos:end="11:47"><name pos:start="11:41" pos:end="11:47">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:36">return <expr pos:start="13:16" pos:end="13:35"><sizeof pos:start="13:16" pos:end="13:35">sizeof<argument_list pos:start="13:22" pos:end="13:35">(<argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">target_ulong</name></expr></argument>)</argument_list></sizeof></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="15:7" pos:end="27:5">else if <condition pos:start="15:15" pos:end="15:55">(<expr pos:start="15:16" pos:end="15:54"><name pos:start="15:16" pos:end="15:16">n</name> <operator pos:start="15:18" pos:end="15:19">&gt;=</operator> <name pos:start="15:21" pos:end="15:31">IDX_FP_REGS</name> <operator pos:start="15:33" pos:end="15:34">&amp;&amp;</operator> <name pos:start="15:36" pos:end="15:36">n</name> <operator pos:start="15:38" pos:end="15:38">&lt;</operator> <name pos:start="15:40" pos:end="15:50">IDX_FP_REGS</name> <operator pos:start="15:52" pos:end="15:52">+</operator> <literal type="number" pos:start="15:54" pos:end="15:54">8</literal></expr>)</condition> <block pos:start="15:57" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

<cpp:ifdef pos:start="17:1" pos:end="17:21">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:21">USE_X86LDOUBLE</name></cpp:ifdef>

        <comment type="block" pos:start="19:9" pos:end="19:72">/* FIXME: byteswap float values - after fixing fpregs layout. */</comment>

        <expr_stmt pos:start="21:9" pos:end="24:0"><expr pos:start="21:9" pos:end="21:58"><call pos:start="21:9" pos:end="21:58"><name pos:start="21:9" pos:end="21:14">memcpy</name><argument_list pos:start="21:15" pos:end="21:58">(<argument pos:start="21:16" pos:end="21:44"><expr pos:start="21:16" pos:end="21:44"><operator pos:start="21:16" pos:end="21:16">&amp;</operator><name pos:start="21:17" pos:end="21:44"><name pos:start="21:17" pos:end="21:19">env</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:27">fpregs</name><index pos:start="21:28" pos:end="21:44">[<expr pos:start="21:29" pos:end="21:43"><name pos:start="21:29" pos:end="21:29">n</name> <operator pos:start="21:31" pos:end="21:31">-</operator> <name pos:start="21:33" pos:end="21:43">IDX_FP_REGS</name></expr>]</index></name></expr></argument>, <argument pos:start="21:47" pos:end="21:53"><expr pos:start="21:47" pos:end="21:53"><name pos:start="21:47" pos:end="21:53">mem_buf</name></expr></argument>, <argument pos:start="21:56" pos:end="21:57"><expr pos:start="21:56" pos:end="21:57"><literal type="number" pos:start="21:56" pos:end="21:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><literal type="number" pos:start="25:16" pos:end="25:17">10</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="27:7" pos:end="37:5">else if <condition pos:start="27:15" pos:end="27:67">(<expr pos:start="27:16" pos:end="27:66"><name pos:start="27:16" pos:end="27:16">n</name> <operator pos:start="27:18" pos:end="27:19">&gt;=</operator> <name pos:start="27:21" pos:end="27:32">IDX_XMM_REGS</name> <operator pos:start="27:34" pos:end="27:35">&amp;&amp;</operator> <name pos:start="27:37" pos:end="27:37">n</name> <operator pos:start="27:39" pos:end="27:39">&lt;</operator> <name pos:start="27:41" pos:end="27:52">IDX_XMM_REGS</name> <operator pos:start="27:54" pos:end="27:54">+</operator> <name pos:start="27:56" pos:end="27:66">CPU_NB_REGS</name></expr>)</condition> <block pos:start="27:69" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:18">

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:9">n</name> <operator pos:start="29:11" pos:end="29:12">-=</operator> <name pos:start="29:14" pos:end="29:25">IDX_XMM_REGS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:11">env</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:21">xmm_regs</name><index pos:start="31:22" pos:end="31:24">[<expr pos:start="31:23" pos:end="31:23"><name pos:start="31:23" pos:end="31:23">n</name></expr>]</index></name><operator pos:start="31:25" pos:end="31:25">.</operator><call pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:30">XMM_Q</name><argument_list pos:start="31:31" pos:end="31:33">(<argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr></argument>)</argument_list></call> <operator pos:start="31:35" pos:end="31:35">=</operator> <call pos:start="31:37" pos:end="31:50"><name pos:start="31:37" pos:end="31:41">ldq_p</name><argument_list pos:start="31:42" pos:end="31:50">(<argument pos:start="31:43" pos:end="31:49"><expr pos:start="31:43" pos:end="31:49"><name pos:start="31:43" pos:end="31:49">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:55"><expr pos:start="33:9" pos:end="33:54"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:11">env</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:21">xmm_regs</name><index pos:start="33:22" pos:end="33:24">[<expr pos:start="33:23" pos:end="33:23"><name pos:start="33:23" pos:end="33:23">n</name></expr>]</index></name><operator pos:start="33:25" pos:end="33:25">.</operator><call pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:30">XMM_Q</name><argument_list pos:start="33:31" pos:end="33:33">(<argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="33:35" pos:end="33:35">=</operator> <call pos:start="33:37" pos:end="33:54"><name pos:start="33:37" pos:end="33:41">ldq_p</name><argument_list pos:start="33:42" pos:end="33:54">(<argument pos:start="33:43" pos:end="33:53"><expr pos:start="33:43" pos:end="33:53"><name pos:start="33:43" pos:end="33:49">mem_buf</name> <operator pos:start="33:51" pos:end="33:51">+</operator> <literal type="number" pos:start="33:53" pos:end="33:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><literal type="number" pos:start="35:16" pos:end="35:17">16</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="129:5">else <block pos:start="37:12" pos:end="129:5">{<block_content pos:start="39:9" pos:end="127:9">

        <switch pos:start="39:9" pos:end="127:9">switch <condition pos:start="39:16" pos:end="39:18">(<expr pos:start="39:17" pos:end="39:17"><name pos:start="39:17" pos:end="39:17">n</name></expr>)</condition> <block pos:start="39:20" pos:end="127:9">{<block_content pos:start="41:9" pos:end="125:21">

        <case pos:start="41:9" pos:end="41:24">case <expr pos:start="41:14" pos:end="41:23"><name pos:start="41:14" pos:end="41:23">IDX_IP_REG</name></expr>:</case>

            <expr_stmt pos:start="43:13" pos:end="43:40"><expr pos:start="43:13" pos:end="43:39"><name pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:15">env</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:20">eip</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:39"><name pos:start="43:24" pos:end="43:30">ldtul_p</name><argument_list pos:start="43:31" pos:end="43:39">(<argument pos:start="43:32" pos:end="43:38"><expr pos:start="43:32" pos:end="43:38"><name pos:start="43:32" pos:end="43:38">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:40">return <expr pos:start="45:20" pos:end="45:39"><sizeof pos:start="45:20" pos:end="45:39">sizeof<argument_list pos:start="45:26" pos:end="45:39">(<argument pos:start="45:27" pos:end="45:38"><expr pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:38">target_ulong</name></expr></argument>)</argument_list></sizeof></expr>;</return>

        <case pos:start="47:9" pos:end="47:27">case <expr pos:start="47:14" pos:end="47:26"><name pos:start="47:14" pos:end="47:26">IDX_FLAGS_REG</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:41"><expr pos:start="49:13" pos:end="49:40"><name pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:15">env</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:23">eflags</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <call pos:start="49:27" pos:end="49:40"><name pos:start="49:27" pos:end="49:31">ldl_p</name><argument_list pos:start="49:32" pos:end="49:40">(<argument pos:start="49:33" pos:end="49:39"><expr pos:start="49:33" pos:end="49:39"><name pos:start="49:33" pos:end="49:39">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="76:0">return <expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">4</literal></expr>;</return>



<cpp:if pos:start="55:1" pos:end="55:29">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:29"><call pos:start="55:5" pos:end="55:29"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:29">(<argument pos:start="55:13" pos:end="55:28"><expr pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define pos:start="57:1" pos:end="65:20">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:16">LOAD_SEG</name><parameter_list pos:start="57:17" pos:end="57:29">(<parameter pos:start="57:18" pos:end="57:22"><type pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:22">index</name></type></parameter>, <parameter pos:start="57:25" pos:end="57:28"><type pos:start="57:25" pos:end="57:28"><name pos:start="57:25" pos:end="57:28">sreg</name></type></parameter>)</parameter_list></cpp:macro>\

            <cpp:value pos:start="59:13" pos:end="65:20">tmp = ldl_p(mem_buf);\

            if (tmp != env-&gt;segs[sreg].selector)\

                cpu_x86_load_seg(env, sreg, tmp);\

            return 4</cpp:value></cpp:define>

<cpp:else pos:start="67:1" pos:end="67:5">#<cpp:directive pos:start="67:2" pos:end="67:5">else</cpp:directive></cpp:else>

<comment type="block" pos:start="69:1" pos:end="71:36">/* FIXME: Honor segment registers.  Needs to avoid raising an exception

   when the selector is invalid.  */</comment>

<cpp:define pos:start="73:1" pos:end="73:38">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:16">LOAD_SEG</name><parameter_list pos:start="73:17" pos:end="73:29">(<parameter pos:start="73:18" pos:end="73:22"><type pos:start="73:18" pos:end="73:22"><name pos:start="73:18" pos:end="73:22">index</name></type></parameter>, <parameter pos:start="73:25" pos:end="73:28"><type pos:start="73:25" pos:end="73:28"><name pos:start="73:25" pos:end="73:28">sreg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="73:31" pos:end="73:38">return 4</cpp:value></cpp:define>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

        <case pos:start="77:9" pos:end="77:26">case <expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:25">IDX_SEG_REGS</name></expr>:</case>     <expr_stmt pos:start="77:32" pos:end="77:50"><expr pos:start="77:32" pos:end="77:49"><call pos:start="77:32" pos:end="77:49"><name pos:start="77:32" pos:end="77:39">LOAD_SEG</name><argument_list pos:start="77:40" pos:end="77:49">(<argument pos:start="77:41" pos:end="77:42"><expr pos:start="77:41" pos:end="77:42"><literal type="number" pos:start="77:41" pos:end="77:42">10</literal></expr></argument>, <argument pos:start="77:45" pos:end="77:48"><expr pos:start="77:45" pos:end="77:48"><name pos:start="77:45" pos:end="77:48">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="79:9" pos:end="79:30">case <expr pos:start="79:14" pos:end="79:29"><name pos:start="79:14" pos:end="79:25">IDX_SEG_REGS</name> <operator pos:start="79:27" pos:end="79:27">+</operator> <literal type="number" pos:start="79:29" pos:end="79:29">1</literal></expr>:</case> <expr_stmt pos:start="79:32" pos:end="79:50"><expr pos:start="79:32" pos:end="79:49"><call pos:start="79:32" pos:end="79:49"><name pos:start="79:32" pos:end="79:39">LOAD_SEG</name><argument_list pos:start="79:40" pos:end="79:49">(<argument pos:start="79:41" pos:end="79:42"><expr pos:start="79:41" pos:end="79:42"><literal type="number" pos:start="79:41" pos:end="79:42">11</literal></expr></argument>, <argument pos:start="79:45" pos:end="79:48"><expr pos:start="79:45" pos:end="79:48"><name pos:start="79:45" pos:end="79:48">R_SS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="81:9" pos:end="81:30">case <expr pos:start="81:14" pos:end="81:29"><name pos:start="81:14" pos:end="81:25">IDX_SEG_REGS</name> <operator pos:start="81:27" pos:end="81:27">+</operator> <literal type="number" pos:start="81:29" pos:end="81:29">2</literal></expr>:</case> <expr_stmt pos:start="81:32" pos:end="81:50"><expr pos:start="81:32" pos:end="81:49"><call pos:start="81:32" pos:end="81:49"><name pos:start="81:32" pos:end="81:39">LOAD_SEG</name><argument_list pos:start="81:40" pos:end="81:49">(<argument pos:start="81:41" pos:end="81:42"><expr pos:start="81:41" pos:end="81:42"><literal type="number" pos:start="81:41" pos:end="81:42">12</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:48"><expr pos:start="81:45" pos:end="81:48"><name pos:start="81:45" pos:end="81:48">R_DS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="83:9" pos:end="83:30">case <expr pos:start="83:14" pos:end="83:29"><name pos:start="83:14" pos:end="83:25">IDX_SEG_REGS</name> <operator pos:start="83:27" pos:end="83:27">+</operator> <literal type="number" pos:start="83:29" pos:end="83:29">3</literal></expr>:</case> <expr_stmt pos:start="83:32" pos:end="83:50"><expr pos:start="83:32" pos:end="83:49"><call pos:start="83:32" pos:end="83:49"><name pos:start="83:32" pos:end="83:39">LOAD_SEG</name><argument_list pos:start="83:40" pos:end="83:49">(<argument pos:start="83:41" pos:end="83:42"><expr pos:start="83:41" pos:end="83:42"><literal type="number" pos:start="83:41" pos:end="83:42">13</literal></expr></argument>, <argument pos:start="83:45" pos:end="83:48"><expr pos:start="83:45" pos:end="83:48"><name pos:start="83:45" pos:end="83:48">R_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="85:9" pos:end="85:30">case <expr pos:start="85:14" pos:end="85:29"><name pos:start="85:14" pos:end="85:25">IDX_SEG_REGS</name> <operator pos:start="85:27" pos:end="85:27">+</operator> <literal type="number" pos:start="85:29" pos:end="85:29">4</literal></expr>:</case> <expr_stmt pos:start="85:32" pos:end="85:50"><expr pos:start="85:32" pos:end="85:49"><call pos:start="85:32" pos:end="85:49"><name pos:start="85:32" pos:end="85:39">LOAD_SEG</name><argument_list pos:start="85:40" pos:end="85:49">(<argument pos:start="85:41" pos:end="85:42"><expr pos:start="85:41" pos:end="85:42"><literal type="number" pos:start="85:41" pos:end="85:42">14</literal></expr></argument>, <argument pos:start="85:45" pos:end="85:48"><expr pos:start="85:45" pos:end="85:48"><name pos:start="85:45" pos:end="85:48">R_FS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="87:9" pos:end="87:30">case <expr pos:start="87:14" pos:end="87:29"><name pos:start="87:14" pos:end="87:25">IDX_SEG_REGS</name> <operator pos:start="87:27" pos:end="87:27">+</operator> <literal type="number" pos:start="87:29" pos:end="87:29">5</literal></expr>:</case> <expr_stmt pos:start="87:32" pos:end="87:50"><expr pos:start="87:32" pos:end="87:49"><call pos:start="87:32" pos:end="87:49"><name pos:start="87:32" pos:end="87:39">LOAD_SEG</name><argument_list pos:start="87:40" pos:end="87:49">(<argument pos:start="87:41" pos:end="87:42"><expr pos:start="87:41" pos:end="87:42"><literal type="number" pos:start="87:41" pos:end="87:42">15</literal></expr></argument>, <argument pos:start="87:45" pos:end="87:48"><expr pos:start="87:45" pos:end="87:48"><name pos:start="87:45" pos:end="87:48">R_GS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <case pos:start="91:9" pos:end="91:29">case <expr pos:start="91:14" pos:end="91:28"><name pos:start="91:14" pos:end="91:24">IDX_FP_REGS</name> <operator pos:start="91:26" pos:end="91:26">+</operator> <literal type="number" pos:start="91:28" pos:end="91:28">8</literal></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:39"><expr pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:21"><name pos:start="93:13" pos:end="93:15">env</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:21">fpuc</name></name> <operator pos:start="93:23" pos:end="93:23">=</operator> <call pos:start="93:25" pos:end="93:38"><name pos:start="93:25" pos:end="93:29">ldl_p</name><argument_list pos:start="93:30" pos:end="93:38">(<argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><name pos:start="93:31" pos:end="93:37">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:21">return <expr pos:start="95:20" pos:end="95:20"><literal type="number" pos:start="95:20" pos:end="95:20">4</literal></expr>;</return>

        <case pos:start="97:9" pos:end="97:29">case <expr pos:start="97:14" pos:end="97:28"><name pos:start="97:14" pos:end="97:24">IDX_FP_REGS</name> <operator pos:start="97:26" pos:end="97:26">+</operator> <literal type="number" pos:start="97:28" pos:end="97:28">9</literal></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:33"><expr pos:start="99:13" pos:end="99:32"><name pos:start="99:13" pos:end="99:15">tmp</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:32"><name pos:start="99:19" pos:end="99:23">ldl_p</name><argument_list pos:start="99:24" pos:end="99:32">(<argument pos:start="99:25" pos:end="99:31"><expr pos:start="99:25" pos:end="99:31"><name pos:start="99:25" pos:end="99:31">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:15">env</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:22">fpstt</name></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <operator pos:start="101:26" pos:end="101:26">(</operator><name pos:start="101:27" pos:end="101:29">tmp</name> <operator pos:start="101:31" pos:end="101:32">&gt;&gt;</operator> <literal type="number" pos:start="101:34" pos:end="101:35">11</literal><operator pos:start="101:36" pos:end="101:36">)</operator> <operator pos:start="101:38" pos:end="101:38">&amp;</operator> <literal type="number" pos:start="101:40" pos:end="101:40">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:38"><expr pos:start="103:13" pos:end="103:37"><name pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:15">env</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:21">fpus</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:27">tmp</name> <operator pos:start="103:29" pos:end="103:29">&amp;</operator> <operator pos:start="103:31" pos:end="103:31">~</operator><literal type="number" pos:start="103:32" pos:end="103:37">0x3800</literal></expr>;</expr_stmt>

            <return pos:start="105:13" pos:end="105:21">return <expr pos:start="105:20" pos:end="105:20"><literal type="number" pos:start="105:20" pos:end="105:20">4</literal></expr>;</return>

        <case pos:start="107:9" pos:end="107:30">case <expr pos:start="107:14" pos:end="107:29"><name pos:start="107:14" pos:end="107:24">IDX_FP_REGS</name> <operator pos:start="107:26" pos:end="107:26">+</operator> <literal type="number" pos:start="107:28" pos:end="107:29">10</literal></expr>:</case> <comment type="block" pos:start="107:32" pos:end="107:41">/* ftag */</comment>  <return pos:start="107:44" pos:end="107:52">return <expr pos:start="107:51" pos:end="107:51"><literal type="number" pos:start="107:51" pos:end="107:51">4</literal></expr>;</return>

        <case pos:start="109:9" pos:end="109:30">case <expr pos:start="109:14" pos:end="109:29"><name pos:start="109:14" pos:end="109:24">IDX_FP_REGS</name> <operator pos:start="109:26" pos:end="109:26">+</operator> <literal type="number" pos:start="109:28" pos:end="109:29">11</literal></expr>:</case> <comment type="block" pos:start="109:32" pos:end="109:42">/* fiseg */</comment> <return pos:start="109:44" pos:end="109:52">return <expr pos:start="109:51" pos:end="109:51"><literal type="number" pos:start="109:51" pos:end="109:51">4</literal></expr>;</return>

        <case pos:start="111:9" pos:end="111:30">case <expr pos:start="111:14" pos:end="111:29"><name pos:start="111:14" pos:end="111:24">IDX_FP_REGS</name> <operator pos:start="111:26" pos:end="111:26">+</operator> <literal type="number" pos:start="111:28" pos:end="111:29">12</literal></expr>:</case> <comment type="block" pos:start="111:32" pos:end="111:42">/* fioff */</comment> <return pos:start="111:44" pos:end="111:52">return <expr pos:start="111:51" pos:end="111:51"><literal type="number" pos:start="111:51" pos:end="111:51">4</literal></expr>;</return>

        <case pos:start="113:9" pos:end="113:30">case <expr pos:start="113:14" pos:end="113:29"><name pos:start="113:14" pos:end="113:24">IDX_FP_REGS</name> <operator pos:start="113:26" pos:end="113:26">+</operator> <literal type="number" pos:start="113:28" pos:end="113:29">13</literal></expr>:</case> <comment type="block" pos:start="113:32" pos:end="113:42">/* foseg */</comment> <return pos:start="113:44" pos:end="113:52">return <expr pos:start="113:51" pos:end="113:51"><literal type="number" pos:start="113:51" pos:end="113:51">4</literal></expr>;</return>

        <case pos:start="115:9" pos:end="115:30">case <expr pos:start="115:14" pos:end="115:29"><name pos:start="115:14" pos:end="115:24">IDX_FP_REGS</name> <operator pos:start="115:26" pos:end="115:26">+</operator> <literal type="number" pos:start="115:28" pos:end="115:29">14</literal></expr>:</case> <comment type="block" pos:start="115:32" pos:end="115:42">/* fooff */</comment> <return pos:start="115:44" pos:end="115:52">return <expr pos:start="115:51" pos:end="115:51"><literal type="number" pos:start="115:51" pos:end="115:51">4</literal></expr>;</return>

        <case pos:start="117:9" pos:end="117:30">case <expr pos:start="117:14" pos:end="117:29"><name pos:start="117:14" pos:end="117:24">IDX_FP_REGS</name> <operator pos:start="117:26" pos:end="117:26">+</operator> <literal type="number" pos:start="117:28" pos:end="117:29">15</literal></expr>:</case> <comment type="block" pos:start="117:32" pos:end="117:40">/* fop */</comment>   <return pos:start="117:44" pos:end="117:52">return <expr pos:start="117:51" pos:end="117:51"><literal type="number" pos:start="117:51" pos:end="117:51">4</literal></expr>;</return>



        <case pos:start="121:9" pos:end="121:27">case <expr pos:start="121:14" pos:end="121:26"><name pos:start="121:14" pos:end="121:26">IDX_MXCSR_REG</name></expr>:</case>

            <expr_stmt pos:start="123:13" pos:end="123:40"><expr pos:start="123:13" pos:end="123:39"><name pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:15">env</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:22">mxcsr</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:39"><name pos:start="123:26" pos:end="123:30">ldl_p</name><argument_list pos:start="123:31" pos:end="123:39">(<argument pos:start="123:32" pos:end="123:38"><expr pos:start="123:32" pos:end="123:38"><name pos:start="123:32" pos:end="123:38">mem_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:21">return <expr pos:start="125:20" pos:end="125:20"><literal type="number" pos:start="125:20" pos:end="125:20">4</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="131:5" pos:end="131:33">/* Unrecognised register.  */</comment>

    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
