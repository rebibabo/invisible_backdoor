<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25784.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vobsub_read_header</name><parameter_list pos:start="1:30" pos:end="1:49">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="315:1">{<block_content pos:start="5:5" pos:end="313:15">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>, <decl pos:start="5:21" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:33">header_parsed</name> <init pos:start="5:35" pos:end="5:37">= <expr pos:start="5:37" pos:end="5:37"><literal type="number" pos:start="5:37" pos:end="5:37">0</literal></expr></init></decl>, <decl pos:start="5:40" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:40" pos:end="5:46">langidx</name> <init pos:start="5:48" pos:end="5:50">= <expr pos:start="5:50" pos:end="5:50"><literal type="number" pos:start="5:50" pos:end="5:50">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MpegDemuxContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:28">vobsub</name> <init pos:start="7:30" pos:end="7:43">= <expr pos:start="7:32" pos:end="7:43"><name pos:start="7:32" pos:end="7:43"><name pos:start="7:32" pos:end="7:32">s</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">sub_name</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:20">fname_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">ext</name></decl>, <decl pos:start="13:16" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:26">header_str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">AVBPrint</name></type> <name pos:start="15:14" pos:end="15:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:17">delay</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">AVStream</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:16">st</name> <init pos:start="19:18" pos:end="19:23">= <expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:12">sub_name</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:37"><name pos:start="23:16" pos:end="23:24">av_strdup</name><argument_list pos:start="23:25" pos:end="23:37">(<argument pos:start="23:26" pos:end="23:36"><expr pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:26">s</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:36">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:13">fname_len</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:32"><name pos:start="25:17" pos:end="25:22">strlen</name><argument_list pos:start="25:23" pos:end="25:32">(<argument pos:start="25:24" pos:end="25:31"><expr pos:start="25:24" pos:end="25:31"><name pos:start="25:24" pos:end="25:31">sub_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:7">ext</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <name pos:start="27:11" pos:end="27:18">sub_name</name> <operator pos:start="27:20" pos:end="27:20">-</operator> <literal type="number" pos:start="27:22" pos:end="27:24">3</literal> <operator pos:start="27:24" pos:end="27:24">+</operator> <name pos:start="27:26" pos:end="27:34">fname_len</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:43">(<expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:17">fname_len</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <literal type="number" pos:start="29:21" pos:end="29:21">4</literal> <operator pos:start="29:23" pos:end="29:24">||</operator> <operator pos:start="29:26" pos:end="29:26">*</operator><operator pos:start="29:27" pos:end="29:27">(</operator><name pos:start="29:28" pos:end="29:30">ext</name> <operator pos:start="29:32" pos:end="29:32">-</operator> <literal type="number" pos:start="29:34" pos:end="29:34">1</literal><operator pos:start="29:35" pos:end="29:35">)</operator> <operator pos:start="29:37" pos:end="29:38">!=</operator> <literal type="char" pos:start="29:40" pos:end="29:42">'.'</literal></expr>)</condition> <block pos:start="29:45" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:17">

        <expr_stmt pos:start="31:9" pos:end="33:54"><expr pos:start="31:9" pos:end="33:53"><call pos:start="31:9" pos:end="33:53"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="33:53">(<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">s</name></expr></argument>, <argument pos:start="31:19" pos:end="31:30"><expr pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:33" pos:end="33:52"><expr pos:start="31:33" pos:end="33:52"><literal type="string" pos:start="31:33" pos:end="31:72">"The input index filename is too short "</literal>

               <literal type="string" pos:start="33:16" pos:end="33:52">"to guess the associated .SUB file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:60"><expr pos:start="41:5" pos:end="41:59"><call pos:start="41:5" pos:end="41:59"><name pos:start="41:5" pos:end="41:10">memcpy</name><argument_list pos:start="41:11" pos:end="41:59">(<argument pos:start="41:12" pos:end="41:14"><expr pos:start="41:12" pos:end="41:14"><name pos:start="41:12" pos:end="41:14">ext</name></expr></argument>, <argument pos:start="41:17" pos:end="41:55"><expr pos:start="41:17" pos:end="41:55"><ternary pos:start="41:17" pos:end="41:55"><condition pos:start="41:17" pos:end="41:41"><expr pos:start="41:17" pos:end="41:39"><operator pos:start="41:17" pos:end="41:17">!</operator><call pos:start="41:18" pos:end="41:39"><name pos:start="41:18" pos:end="41:24">strncmp</name><argument_list pos:start="41:25" pos:end="41:39">(<argument pos:start="41:26" pos:end="41:28"><expr pos:start="41:26" pos:end="41:28"><name pos:start="41:26" pos:end="41:28">ext</name></expr></argument>, <argument pos:start="41:31" pos:end="41:35"><expr pos:start="41:31" pos:end="41:35"><literal type="string" pos:start="41:31" pos:end="41:35">"IDX"</literal></expr></argument>, <argument pos:start="41:38" pos:end="41:38"><expr pos:start="41:38" pos:end="41:38"><literal type="number" pos:start="41:38" pos:end="41:38">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="41:43" pos:end="41:47"> <expr pos:start="41:43" pos:end="41:47"><literal type="string" pos:start="41:43" pos:end="41:47">"SUB"</literal></expr> </then><else pos:start="41:49" pos:end="41:55">: <expr pos:start="41:51" pos:end="41:55"><literal type="string" pos:start="41:51" pos:end="41:55">"sub"</literal></expr></else></ternary></expr></argument>, <argument pos:start="41:58" pos:end="41:58"><expr pos:start="41:58" pos:end="41:58"><literal type="number" pos:start="41:58" pos:end="41:58">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:76"><expr pos:start="43:5" pos:end="43:75"><call pos:start="43:5" pos:end="43:75"><name pos:start="43:5" pos:end="43:10">av_log</name><argument_list pos:start="43:11" pos:end="43:75">(<argument pos:start="43:12" pos:end="43:12"><expr pos:start="43:12" pos:end="43:12"><name pos:start="43:12" pos:end="43:12">s</name></expr></argument>, <argument pos:start="43:15" pos:end="43:28"><expr pos:start="43:15" pos:end="43:28"><name pos:start="43:15" pos:end="43:28">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="43:31" pos:end="43:51"><expr pos:start="43:31" pos:end="43:51"><literal type="string" pos:start="43:31" pos:end="43:51">"IDX/SUB: %s -&gt; %s\n"</literal></expr></argument>, <argument pos:start="43:54" pos:end="43:64"><expr pos:start="43:54" pos:end="43:64"><name pos:start="43:54" pos:end="43:64"><name pos:start="43:54" pos:end="43:54">s</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:64">filename</name></name></expr></argument>, <argument pos:start="43:67" pos:end="43:74"><expr pos:start="43:67" pos:end="43:74"><name pos:start="43:67" pos:end="43:74">sub_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:84"><expr pos:start="45:5" pos:end="45:83"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:83"><name pos:start="45:11" pos:end="45:29">avformat_open_input</name><argument_list pos:start="45:30" pos:end="45:83">(<argument pos:start="45:31" pos:end="45:46"><expr pos:start="45:31" pos:end="45:46"><operator pos:start="45:31" pos:end="45:31">&amp;</operator><name pos:start="45:32" pos:end="45:46"><name pos:start="45:32" pos:end="45:37">vobsub</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:46">sub_ctx</name></name></expr></argument>, <argument pos:start="45:49" pos:end="45:56"><expr pos:start="45:49" pos:end="45:56"><name pos:start="45:49" pos:end="45:56">sub_name</name></expr></argument>, <argument pos:start="45:59" pos:end="45:76"><expr pos:start="45:59" pos:end="45:76"><operator pos:start="45:59" pos:end="45:59">&amp;</operator><name pos:start="45:60" pos:end="45:76">ff_mpegps_demuxer</name></expr></argument>, <argument pos:start="45:79" pos:end="45:82"><expr pos:start="45:79" pos:end="45:82"><name pos:start="45:79" pos:end="45:82">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:83"><expr pos:start="49:9" pos:end="49:82"><call pos:start="49:9" pos:end="49:82"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:82">(<argument pos:start="49:16" pos:end="49:16"><expr pos:start="49:16" pos:end="49:16"><name pos:start="49:16" pos:end="49:16">s</name></expr></argument>, <argument pos:start="49:19" pos:end="49:30"><expr pos:start="49:19" pos:end="49:30"><name pos:start="49:19" pos:end="49:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:33" pos:end="49:71"><expr pos:start="49:33" pos:end="49:71"><literal type="string" pos:start="49:33" pos:end="49:71">"Unable to open %s as MPEG subtitles\n"</literal></expr></argument>, <argument pos:start="49:74" pos:end="49:81"><expr pos:start="49:74" pos:end="49:81"><name pos:start="49:74" pos:end="49:81">sub_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:57"><expr pos:start="57:5" pos:end="57:56"><call pos:start="57:5" pos:end="57:56"><name pos:start="57:5" pos:end="57:18">av_bprint_init</name><argument_list pos:start="57:19" pos:end="57:56">(<argument pos:start="57:20" pos:end="57:26"><expr pos:start="57:20" pos:end="57:26"><operator pos:start="57:20" pos:end="57:20">&amp;</operator><name pos:start="57:21" pos:end="57:26">header</name></expr></argument>, <argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr></argument>, <argument pos:start="57:32" pos:end="57:55"><expr pos:start="57:32" pos:end="57:55"><name pos:start="57:32" pos:end="57:55">AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="59:5" pos:end="263:5">while <condition pos:start="59:11" pos:end="59:28">(<expr pos:start="59:12" pos:end="59:27"><operator pos:start="59:12" pos:end="59:12">!</operator><call pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:20">url_feof</name><argument_list pos:start="59:21" pos:end="59:27">(<argument pos:start="59:22" pos:end="59:26"><expr pos:start="59:22" pos:end="59:26"><name pos:start="59:22" pos:end="59:26"><name pos:start="59:22" pos:end="59:22">s</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:26">pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:30" pos:end="263:5">{<block_content pos:start="61:9" pos:end="261:9">

        <decl_stmt pos:start="61:9" pos:end="61:24"><decl pos:start="61:9" pos:end="61:23"><type pos:start="61:9" pos:end="61:12"><name pos:start="61:9" pos:end="61:12">char</name></type> <name pos:start="61:14" pos:end="61:23"><name pos:start="61:14" pos:end="61:17">line</name><index pos:start="61:18" pos:end="61:23">[<expr pos:start="61:19" pos:end="61:22"><literal type="number" pos:start="61:19" pos:end="61:22">2048</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:57"><decl pos:start="63:9" pos:end="63:56"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:15">len</name> <init pos:start="63:17" pos:end="63:56">= <expr pos:start="63:19" pos:end="63:56"><call pos:start="63:19" pos:end="63:56"><name pos:start="63:19" pos:end="63:29">ff_get_line</name><argument_list pos:start="63:30" pos:end="63:56">(<argument pos:start="63:31" pos:end="63:35"><expr pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:31">s</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:35">pb</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><name pos:start="63:38" pos:end="63:41">line</name></expr></argument>, <argument pos:start="63:44" pos:end="63:55"><expr pos:start="63:44" pos:end="63:55"><sizeof pos:start="63:44" pos:end="63:55">sizeof<argument_list pos:start="63:50" pos:end="63:55">(<argument pos:start="63:51" pos:end="63:54"><expr pos:start="63:51" pos:end="63:54"><name pos:start="63:51" pos:end="63:54">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="67:9" pos:end="69:18"><if pos:start="67:9" pos:end="69:18">if <condition pos:start="67:12" pos:end="67:17">(<expr pos:start="67:13" pos:end="67:16"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:16">len</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:18"><block_content pos:start="69:13" pos:end="69:18">

            <break pos:start="69:13" pos:end="69:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:40"><expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:12">line</name><index pos:start="73:13" pos:end="73:35">[<expr pos:start="73:14" pos:end="73:34"><call pos:start="73:14" pos:end="73:34"><name pos:start="73:14" pos:end="73:20">strcspn</name><argument_list pos:start="73:21" pos:end="73:34">(<argument pos:start="73:22" pos:end="73:25"><expr pos:start="73:22" pos:end="73:25"><name pos:start="73:22" pos:end="73:25">line</name></expr></argument>, <argument pos:start="73:28" pos:end="73:33"><expr pos:start="73:28" pos:end="73:33"><literal type="string" pos:start="73:28" pos:end="73:33">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="73:37" pos:end="73:37">=</operator> <literal type="number" pos:start="73:39" pos:end="73:39">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="261:9"><if pos:start="77:9" pos:end="139:9">if <condition pos:start="77:12" pos:end="77:37">(<expr pos:start="77:13" pos:end="77:36"><operator pos:start="77:13" pos:end="77:13">!</operator><call pos:start="77:14" pos:end="77:36"><name pos:start="77:14" pos:end="77:20">strncmp</name><argument_list pos:start="77:21" pos:end="77:36">(<argument pos:start="77:22" pos:end="77:25"><expr pos:start="77:22" pos:end="77:25"><name pos:start="77:22" pos:end="77:25">line</name></expr></argument>, <argument pos:start="77:28" pos:end="77:32"><expr pos:start="77:28" pos:end="77:32"><literal type="string" pos:start="77:28" pos:end="77:32">"id:"</literal></expr></argument>, <argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:39" pos:end="139:9">{<block_content pos:start="79:13" pos:end="135:30">

            <decl_stmt pos:start="79:13" pos:end="79:33"><decl pos:start="79:13" pos:end="79:17"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:17">n</name></decl>, <decl pos:start="79:20" pos:end="79:32"><type ref="prev" pos:start="79:13" pos:end="79:15"/><name pos:start="79:20" pos:end="79:28">stream_id</name> <init pos:start="79:30" pos:end="79:32">= <expr pos:start="79:32" pos:end="79:32"><literal type="number" pos:start="79:32" pos:end="79:32">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:30"><decl pos:start="81:13" pos:end="81:29"><type pos:start="81:13" pos:end="81:16"><name pos:start="81:13" pos:end="81:16">char</name></type> <name pos:start="81:18" pos:end="81:23"><name pos:start="81:18" pos:end="81:19">id</name><index pos:start="81:20" pos:end="81:23">[<expr pos:start="81:21" pos:end="81:22"><literal type="number" pos:start="81:21" pos:end="81:22">64</literal></expr>]</index></name> <init pos:start="81:25" pos:end="81:29">= <expr pos:start="81:27" pos:end="81:29"><block pos:start="81:27" pos:end="81:29">{<expr pos:start="81:28" pos:end="81:28"><literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:71"><expr pos:start="85:13" pos:end="85:70"><name pos:start="85:13" pos:end="85:13">n</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:70"><name pos:start="85:17" pos:end="85:22">sscanf</name><argument_list pos:start="85:23" pos:end="85:70">(<argument pos:start="85:24" pos:end="85:27"><expr pos:start="85:24" pos:end="85:27"><name pos:start="85:24" pos:end="85:27">line</name></expr></argument>, <argument pos:start="85:30" pos:end="85:53"><expr pos:start="85:30" pos:end="85:53"><literal type="string" pos:start="85:30" pos:end="85:53">"id: %63[^,], index: %u"</literal></expr></argument>, <argument pos:start="85:56" pos:end="85:57"><expr pos:start="85:56" pos:end="85:57"><name pos:start="85:56" pos:end="85:57">id</name></expr></argument>, <argument pos:start="85:60" pos:end="85:69"><expr pos:start="85:60" pos:end="85:69"><operator pos:start="85:60" pos:end="85:60">&amp;</operator><name pos:start="85:61" pos:end="85:69">stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="97:13"><if pos:start="87:13" pos:end="97:13">if <condition pos:start="87:16" pos:end="87:23">(<expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:17">n</name> <operator pos:start="87:19" pos:end="87:20">!=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">2</literal></expr>)</condition> <block pos:start="87:25" pos:end="97:13">{<block_content pos:start="89:17" pos:end="95:30">

                <expr_stmt pos:start="89:17" pos:end="91:63"><expr pos:start="89:17" pos:end="91:62"><call pos:start="89:17" pos:end="91:62"><name pos:start="89:17" pos:end="89:22">av_log</name><argument_list pos:start="89:23" pos:end="91:62">(<argument pos:start="89:24" pos:end="89:24"><expr pos:start="89:24" pos:end="89:24"><name pos:start="89:24" pos:end="89:24">s</name></expr></argument>, <argument pos:start="89:27" pos:end="89:40"><expr pos:start="89:27" pos:end="89:40"><name pos:start="89:27" pos:end="89:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="89:43" pos:end="91:55"><expr pos:start="89:43" pos:end="91:55"><literal type="string" pos:start="89:43" pos:end="89:77">"Unable to parse index line '%s', "</literal>

                       <literal type="string" pos:start="91:24" pos:end="91:55">"assuming 'id: und, index: 0'\n"</literal></expr></argument>, <argument pos:start="91:58" pos:end="91:61"><expr pos:start="91:58" pos:end="91:61"><name pos:start="91:58" pos:end="91:61">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:34"><expr pos:start="93:17" pos:end="93:33"><call pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:22">strcpy</name><argument_list pos:start="93:23" pos:end="93:33">(<argument pos:start="93:24" pos:end="93:25"><expr pos:start="93:24" pos:end="93:25"><name pos:start="93:24" pos:end="93:25">id</name></expr></argument>, <argument pos:start="93:28" pos:end="93:32"><expr pos:start="93:28" pos:end="93:32"><literal type="string" pos:start="93:28" pos:end="93:32">"und"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:30"><expr pos:start="95:17" pos:end="95:29"><name pos:start="95:17" pos:end="95:25">stream_id</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="101:13" pos:end="109:13"><if pos:start="101:13" pos:end="109:13">if <condition pos:start="101:16" pos:end="101:55">(<expr pos:start="101:17" pos:end="101:54"><name pos:start="101:17" pos:end="101:25">stream_id</name> <operator pos:start="101:27" pos:end="101:28">&gt;=</operator> <call pos:start="101:30" pos:end="101:54"><name pos:start="101:30" pos:end="101:43">FF_ARRAY_ELEMS</name><argument_list pos:start="101:44" pos:end="101:54">(<argument pos:start="101:45" pos:end="101:53"><expr pos:start="101:45" pos:end="101:53"><name pos:start="101:45" pos:end="101:53"><name pos:start="101:45" pos:end="101:50">vobsub</name><operator pos:start="101:51" pos:end="101:52">-&gt;</operator><name pos:start="101:53" pos:end="101:53">q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:57" pos:end="109:13">{<block_content pos:start="103:17" pos:end="107:25">

                <expr_stmt pos:start="103:17" pos:end="103:89"><expr pos:start="103:17" pos:end="103:88"><call pos:start="103:17" pos:end="103:88"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:88">(<argument pos:start="103:24" pos:end="103:24"><expr pos:start="103:24" pos:end="103:24"><name pos:start="103:24" pos:end="103:24">s</name></expr></argument>, <argument pos:start="103:27" pos:end="103:38"><expr pos:start="103:27" pos:end="103:38"><name pos:start="103:27" pos:end="103:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:41" pos:end="103:87"><expr pos:start="103:41" pos:end="103:87"><literal type="string" pos:start="103:41" pos:end="103:87">"Maximum number of subtitles streams reached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:38"><expr pos:start="105:17" pos:end="105:37"><name pos:start="105:17" pos:end="105:19">ret</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="105:37"><name pos:start="105:23" pos:end="105:29">AVERROR</name><argument_list pos:start="105:30" pos:end="105:37">(<argument pos:start="105:31" pos:end="105:36"><expr pos:start="105:31" pos:end="105:36"><name pos:start="105:31" pos:end="105:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="107:17" pos:end="107:25">goto <name pos:start="107:22" pos:end="107:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="113:13" pos:end="113:46"><expr pos:start="113:13" pos:end="113:45"><name pos:start="113:13" pos:end="113:14">st</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <call pos:start="113:18" pos:end="113:45"><name pos:start="113:18" pos:end="113:36">avformat_new_stream</name><argument_list pos:start="113:37" pos:end="113:45">(<argument pos:start="113:38" pos:end="113:38"><expr pos:start="113:38" pos:end="113:38"><name pos:start="113:38" pos:end="113:38">s</name></expr></argument>, <argument pos:start="113:41" pos:end="113:44"><expr pos:start="113:41" pos:end="113:44"><name pos:start="113:41" pos:end="113:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:20">(<expr pos:start="115:17" pos:end="115:19"><operator pos:start="115:17" pos:end="115:17">!</operator><name pos:start="115:18" pos:end="115:19">st</name></expr>)</condition> <block pos:start="115:22" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:25">

                <expr_stmt pos:start="117:17" pos:end="117:38"><expr pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:19">ret</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:37"><name pos:start="117:23" pos:end="117:29">AVERROR</name><argument_list pos:start="117:30" pos:end="117:37">(<argument pos:start="117:31" pos:end="117:36"><expr pos:start="117:31" pos:end="117:36"><name pos:start="117:31" pos:end="117:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="119:17" pos:end="119:25">goto <name pos:start="119:22" pos:end="119:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:31"><expr pos:start="123:13" pos:end="123:30"><name pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:14">st</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:18">id</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:30">stream_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:58"><expr pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:14">st</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:21">codec</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:33">codec_type</name></name> <operator pos:start="125:35" pos:end="125:35">=</operator> <name pos:start="125:37" pos:end="125:57">AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:61"><expr pos:start="127:13" pos:end="127:60"><name pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:14">st</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:21">codec</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:31">codec_id</name></name>   <operator pos:start="127:35" pos:end="127:35">=</operator> <name pos:start="127:37" pos:end="127:60">AV_CODEC_ID_DVD_SUBTITLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:49"><expr pos:start="129:13" pos:end="129:48"><call pos:start="129:13" pos:end="129:48"><name pos:start="129:13" pos:end="129:31">avpriv_set_pts_info</name><argument_list pos:start="129:32" pos:end="129:48">(<argument pos:start="129:33" pos:end="129:34"><expr pos:start="129:33" pos:end="129:34"><name pos:start="129:33" pos:end="129:34">st</name></expr></argument>, <argument pos:start="129:37" pos:end="129:38"><expr pos:start="129:37" pos:end="129:38"><literal type="number" pos:start="129:37" pos:end="129:38">64</literal></expr></argument>, <argument pos:start="129:41" pos:end="129:41"><expr pos:start="129:41" pos:end="129:41"><literal type="number" pos:start="129:41" pos:end="129:41">1</literal></expr></argument>, <argument pos:start="129:44" pos:end="129:47"><expr pos:start="129:44" pos:end="129:47"><literal type="number" pos:start="129:44" pos:end="129:47">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:58"><expr pos:start="131:13" pos:end="131:57"><call pos:start="131:13" pos:end="131:57"><name pos:start="131:13" pos:end="131:23">av_dict_set</name><argument_list pos:start="131:24" pos:end="131:57">(<argument pos:start="131:25" pos:end="131:37"><expr pos:start="131:25" pos:end="131:37"><operator pos:start="131:25" pos:end="131:25">&amp;</operator><name pos:start="131:26" pos:end="131:37"><name pos:start="131:26" pos:end="131:27">st</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:37">metadata</name></name></expr></argument>, <argument pos:start="131:40" pos:end="131:49"><expr pos:start="131:40" pos:end="131:49"><literal type="string" pos:start="131:40" pos:end="131:49">"language"</literal></expr></argument>, <argument pos:start="131:52" pos:end="131:53"><expr pos:start="131:52" pos:end="131:53"><name pos:start="131:52" pos:end="131:53">id</name></expr></argument>, <argument pos:start="131:56" pos:end="131:56"><expr pos:start="131:56" pos:end="131:56"><literal type="number" pos:start="131:56" pos:end="131:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:77"><expr pos:start="133:13" pos:end="133:76"><call pos:start="133:13" pos:end="133:76"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="133:76">(<argument pos:start="133:20" pos:end="133:20"><expr pos:start="133:20" pos:end="133:20"><name pos:start="133:20" pos:end="133:20">s</name></expr></argument>, <argument pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:34"><name pos:start="133:23" pos:end="133:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="133:37" pos:end="133:60"><expr pos:start="133:37" pos:end="133:60"><literal type="string" pos:start="133:37" pos:end="133:60">"IDX stream[%d] id=%s\n"</literal></expr></argument>, <argument pos:start="133:63" pos:end="133:71"><expr pos:start="133:63" pos:end="133:71"><name pos:start="133:63" pos:end="133:71">stream_id</name></expr></argument>, <argument pos:start="133:74" pos:end="133:75"><expr pos:start="133:74" pos:end="133:75"><name pos:start="133:74" pos:end="133:75">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:30"><expr pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:25">header_parsed</name> <operator pos:start="135:27" pos:end="135:27">=</operator> <literal type="number" pos:start="135:29" pos:end="135:29">1</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="199:9">else if <condition pos:start="139:19" pos:end="139:58">(<expr pos:start="139:20" pos:end="139:57"><name pos:start="139:20" pos:end="139:21">st</name> <operator pos:start="139:23" pos:end="139:24">&amp;&amp;</operator> <operator pos:start="139:26" pos:end="139:26">!</operator><call pos:start="139:27" pos:end="139:57"><name pos:start="139:27" pos:end="139:33">strncmp</name><argument_list pos:start="139:34" pos:end="139:57">(<argument pos:start="139:35" pos:end="139:38"><expr pos:start="139:35" pos:end="139:38"><name pos:start="139:35" pos:end="139:38">line</name></expr></argument>, <argument pos:start="139:41" pos:end="139:52"><expr pos:start="139:41" pos:end="139:52"><literal type="string" pos:start="139:41" pos:end="139:52">"timestamp:"</literal></expr></argument>, <argument pos:start="139:55" pos:end="139:56"><expr pos:start="139:55" pos:end="139:56"><literal type="number" pos:start="139:55" pos:end="139:56">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:60" pos:end="199:9">{<block_content pos:start="141:13" pos:end="195:50">

            <decl_stmt pos:start="141:13" pos:end="141:26"><decl pos:start="141:13" pos:end="141:25"><type pos:start="141:13" pos:end="141:22"><name pos:start="141:13" pos:end="141:20">AVPacket</name> <modifier pos:start="141:22" pos:end="141:22">*</modifier></type><name pos:start="141:23" pos:end="141:25">sub</name></decl>;</decl_stmt>

            <decl_stmt pos:start="143:13" pos:end="143:31"><decl pos:start="143:13" pos:end="143:18"><type pos:start="143:13" pos:end="143:15"><name pos:start="143:13" pos:end="143:15">int</name></type> <name pos:start="143:17" pos:end="143:18">hh</name></decl>, <decl pos:start="143:21" pos:end="143:22"><type ref="prev" pos:start="143:13" pos:end="143:15"/><name pos:start="143:21" pos:end="143:22">mm</name></decl>, <decl pos:start="143:25" pos:end="143:26"><type ref="prev" pos:start="143:13" pos:end="143:15"/><name pos:start="143:25" pos:end="143:26">ss</name></decl>, <decl pos:start="143:29" pos:end="143:30"><type ref="prev" pos:start="143:13" pos:end="143:15"/><name pos:start="143:29" pos:end="143:30">ms</name></decl>;</decl_stmt>

            <decl_stmt pos:start="145:13" pos:end="145:35"><decl pos:start="145:13" pos:end="145:23"><type pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:19">int64_t</name></type> <name pos:start="145:21" pos:end="145:23">pos</name></decl>, <decl pos:start="145:26" pos:end="145:34"><type ref="prev" pos:start="145:13" pos:end="145:19"/><name pos:start="145:26" pos:end="145:34">timestamp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="147:13" pos:end="147:38"><decl pos:start="147:13" pos:end="147:37"><type pos:start="147:13" pos:end="147:24"><specifier pos:start="147:13" pos:end="147:17">const</specifier> <name pos:start="147:19" pos:end="147:22">char</name> <modifier pos:start="147:24" pos:end="147:24">*</modifier></type><name pos:start="147:25" pos:end="147:25">p</name> <init pos:start="147:27" pos:end="147:37">= <expr pos:start="147:29" pos:end="147:37"><name pos:start="147:29" pos:end="147:32">line</name> <operator pos:start="147:34" pos:end="147:34">+</operator> <literal type="number" pos:start="147:36" pos:end="147:37">10</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="151:13" pos:end="159:13"><if pos:start="151:13" pos:end="159:13">if <condition pos:start="151:16" pos:end="151:31">(<expr pos:start="151:17" pos:end="151:30"><operator pos:start="151:17" pos:end="151:17">!</operator><name pos:start="151:18" pos:end="151:30"><name pos:start="151:18" pos:end="151:18">s</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:30">nb_streams</name></name></expr>)</condition> <block pos:start="151:33" pos:end="159:13">{<block_content pos:start="153:17" pos:end="157:25">

                <expr_stmt pos:start="153:17" pos:end="153:82"><expr pos:start="153:17" pos:end="153:81"><call pos:start="153:17" pos:end="153:81"><name pos:start="153:17" pos:end="153:22">av_log</name><argument_list pos:start="153:23" pos:end="153:81">(<argument pos:start="153:24" pos:end="153:24"><expr pos:start="153:24" pos:end="153:24"><name pos:start="153:24" pos:end="153:24">s</name></expr></argument>, <argument pos:start="153:27" pos:end="153:38"><expr pos:start="153:27" pos:end="153:38"><name pos:start="153:27" pos:end="153:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:41" pos:end="153:80"><expr pos:start="153:41" pos:end="153:80"><literal type="string" pos:start="153:41" pos:end="153:80">"Timestamp declared before any stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:42"><expr pos:start="155:17" pos:end="155:41"><name pos:start="155:17" pos:end="155:19">ret</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <name pos:start="155:23" pos:end="155:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="157:17" pos:end="157:25">goto <name pos:start="157:22" pos:end="157:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="163:13" pos:end="173:13"><if pos:start="163:13" pos:end="173:13">if <condition pos:start="163:16" pos:end="165:54">(<expr pos:start="163:17" pos:end="165:53"><call pos:start="163:17" pos:end="165:48"><name pos:start="163:17" pos:end="163:22">sscanf</name><argument_list pos:start="163:23" pos:end="165:48">(<argument pos:start="163:24" pos:end="163:24"><expr pos:start="163:24" pos:end="163:24"><name pos:start="163:24" pos:end="163:24">p</name></expr></argument>, <argument pos:start="163:27" pos:end="163:65"><expr pos:start="163:27" pos:end="163:65"><literal type="string" pos:start="163:27" pos:end="163:59">"%02d:%02d:%02d:%03d, filepos: %"</literal><name pos:start="163:60" pos:end="163:65">SCNx64</name></expr></argument>,

                       <argument pos:start="165:24" pos:end="165:26"><expr pos:start="165:24" pos:end="165:26"><operator pos:start="165:24" pos:end="165:24">&amp;</operator><name pos:start="165:25" pos:end="165:26">hh</name></expr></argument>, <argument pos:start="165:29" pos:end="165:31"><expr pos:start="165:29" pos:end="165:31"><operator pos:start="165:29" pos:end="165:29">&amp;</operator><name pos:start="165:30" pos:end="165:31">mm</name></expr></argument>, <argument pos:start="165:34" pos:end="165:36"><expr pos:start="165:34" pos:end="165:36"><operator pos:start="165:34" pos:end="165:34">&amp;</operator><name pos:start="165:35" pos:end="165:36">ss</name></expr></argument>, <argument pos:start="165:39" pos:end="165:41"><expr pos:start="165:39" pos:end="165:41"><operator pos:start="165:39" pos:end="165:39">&amp;</operator><name pos:start="165:40" pos:end="165:41">ms</name></expr></argument>, <argument pos:start="165:44" pos:end="165:47"><expr pos:start="165:44" pos:end="165:47"><operator pos:start="165:44" pos:end="165:44">&amp;</operator><name pos:start="165:45" pos:end="165:47">pos</name></expr></argument>)</argument_list></call> <operator pos:start="165:50" pos:end="165:51">!=</operator> <literal type="number" pos:start="165:53" pos:end="165:53">5</literal></expr>)</condition> <block pos:start="165:56" pos:end="173:13">{<block_content pos:start="167:17" pos:end="171:22">

                <expr_stmt pos:start="167:17" pos:end="169:48"><expr pos:start="167:17" pos:end="169:47"><call pos:start="167:17" pos:end="169:47"><name pos:start="167:17" pos:end="167:22">av_log</name><argument_list pos:start="167:23" pos:end="169:47">(<argument pos:start="167:24" pos:end="167:24"><expr pos:start="167:24" pos:end="167:24"><name pos:start="167:24" pos:end="167:24">s</name></expr></argument>, <argument pos:start="167:27" pos:end="167:38"><expr pos:start="167:27" pos:end="167:38"><name pos:start="167:27" pos:end="167:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:41" pos:end="169:40"><expr pos:start="167:41" pos:end="169:40"><literal type="string" pos:start="167:41" pos:end="167:79">"Unable to parse timestamp line '%s', "</literal>

                       <literal type="string" pos:start="169:24" pos:end="169:40">"abort parsing\n"</literal></expr></argument>, <argument pos:start="169:43" pos:end="169:46"><expr pos:start="169:43" pos:end="169:46"><name pos:start="169:43" pos:end="169:46">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="171:17" pos:end="171:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:73"><expr pos:start="175:13" pos:end="175:72"><name pos:start="175:13" pos:end="175:21">timestamp</name> <operator pos:start="175:23" pos:end="175:23">=</operator> <operator pos:start="175:25" pos:end="175:25">(</operator><name pos:start="175:26" pos:end="175:27">hh</name><operator pos:start="175:28" pos:end="175:28">*</operator><literal type="number" pos:start="175:29" pos:end="175:36">3600LL</literal> <operator pos:start="175:36" pos:end="175:36">+</operator> <name pos:start="175:38" pos:end="175:39">mm</name><operator pos:start="175:40" pos:end="175:40">*</operator><literal type="number" pos:start="175:41" pos:end="175:46">60LL</literal> <operator pos:start="175:46" pos:end="175:46">+</operator> <name pos:start="175:48" pos:end="175:49">ss</name><operator pos:start="175:50" pos:end="175:50">)</operator> <operator pos:start="175:52" pos:end="175:52">*</operator> <literal type="number" pos:start="175:54" pos:end="175:61">1000LL</literal> <operator pos:start="175:61" pos:end="175:61">+</operator> <name pos:start="175:63" pos:end="175:64">ms</name> <operator pos:start="175:66" pos:end="175:66">+</operator> <name pos:start="175:68" pos:end="175:72">delay</name></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:83"><expr pos:start="177:13" pos:end="177:82"><name pos:start="177:13" pos:end="177:21">timestamp</name> <operator pos:start="177:23" pos:end="177:23">=</operator> <call pos:start="177:25" pos:end="177:82"><name pos:start="177:25" pos:end="177:36">av_rescale_q</name><argument_list pos:start="177:37" pos:end="177:82">(<argument pos:start="177:38" pos:end="177:46"><expr pos:start="177:38" pos:end="177:46"><name pos:start="177:38" pos:end="177:46">timestamp</name></expr></argument>, <argument pos:start="177:49" pos:end="177:66"><expr pos:start="177:49" pos:end="177:66"><call pos:start="177:49" pos:end="177:66"><name pos:start="177:49" pos:end="177:57">av_make_q</name><argument_list pos:start="177:58" pos:end="177:66">(<argument pos:start="177:59" pos:end="177:59"><expr pos:start="177:59" pos:end="177:59"><literal type="number" pos:start="177:59" pos:end="177:59">1</literal></expr></argument>, <argument pos:start="177:62" pos:end="177:65"><expr pos:start="177:62" pos:end="177:65"><literal type="number" pos:start="177:62" pos:end="177:65">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:69" pos:end="177:81"><expr pos:start="177:69" pos:end="177:81"><name pos:start="177:69" pos:end="177:81"><name pos:start="177:69" pos:end="177:70">st</name><operator pos:start="177:71" pos:end="177:72">-&gt;</operator><name pos:start="177:73" pos:end="177:81">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="181:13" pos:end="181:85"><expr pos:start="181:13" pos:end="181:84"><name pos:start="181:13" pos:end="181:15">sub</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:84"><name pos:start="181:19" pos:end="181:43">ff_subtitles_queue_insert</name><argument_list pos:start="181:44" pos:end="181:84">(<argument pos:start="181:45" pos:end="181:73"><expr pos:start="181:45" pos:end="181:73"><operator pos:start="181:45" pos:end="181:45">&amp;</operator><name pos:start="181:46" pos:end="181:73"><name pos:start="181:46" pos:end="181:51">vobsub</name><operator pos:start="181:52" pos:end="181:53">-&gt;</operator><name pos:start="181:54" pos:end="181:54">q</name><index pos:start="181:55" pos:end="181:73">[<expr pos:start="181:56" pos:end="181:72"><name pos:start="181:56" pos:end="181:68"><name pos:start="181:56" pos:end="181:56">s</name><operator pos:start="181:57" pos:end="181:58">-&gt;</operator><name pos:start="181:59" pos:end="181:68">nb_streams</name></name> <operator pos:start="181:70" pos:end="181:70">-</operator> <literal type="number" pos:start="181:72" pos:end="181:72">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:76" pos:end="181:77"><expr pos:start="181:76" pos:end="181:77"><literal type="string" pos:start="181:76" pos:end="181:77">""</literal></expr></argument>, <argument pos:start="181:80" pos:end="181:80"><expr pos:start="181:80" pos:end="181:80"><literal type="number" pos:start="181:80" pos:end="181:80">0</literal></expr></argument>, <argument pos:start="181:83" pos:end="181:83"><expr pos:start="181:83" pos:end="181:83"><literal type="number" pos:start="181:83" pos:end="181:83">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="183:13" pos:end="189:13"><if pos:start="183:13" pos:end="189:13">if <condition pos:start="183:16" pos:end="183:21">(<expr pos:start="183:17" pos:end="183:20"><operator pos:start="183:17" pos:end="183:17">!</operator><name pos:start="183:18" pos:end="183:20">sub</name></expr>)</condition> <block pos:start="183:23" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:25">

                <expr_stmt pos:start="185:17" pos:end="185:38"><expr pos:start="185:17" pos:end="185:37"><name pos:start="185:17" pos:end="185:19">ret</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <call pos:start="185:23" pos:end="185:37"><name pos:start="185:23" pos:end="185:29">AVERROR</name><argument_list pos:start="185:30" pos:end="185:37">(<argument pos:start="185:31" pos:end="185:36"><expr pos:start="185:31" pos:end="185:36"><name pos:start="185:31" pos:end="185:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="187:17" pos:end="187:25">goto <name pos:start="187:22" pos:end="187:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:27"><expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:20"><name pos:start="191:13" pos:end="191:15">sub</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:20">pos</name></name> <operator pos:start="191:22" pos:end="191:22">=</operator> <name pos:start="191:24" pos:end="191:26">pos</name></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:33"><expr pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:20"><name pos:start="193:13" pos:end="193:15">sub</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:20">pts</name></name> <operator pos:start="193:22" pos:end="193:22">=</operator> <name pos:start="193:24" pos:end="193:32">timestamp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:50"><expr pos:start="195:13" pos:end="195:49"><name pos:start="195:13" pos:end="195:29"><name pos:start="195:13" pos:end="195:15">sub</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:29">stream_index</name></name> <operator pos:start="195:31" pos:end="195:31">=</operator> <name pos:start="195:33" pos:end="195:45"><name pos:start="195:33" pos:end="195:33">s</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:45">nb_streams</name></name> <operator pos:start="195:47" pos:end="195:47">-</operator> <literal type="number" pos:start="195:49" pos:end="195:49">1</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="217:9">else if <condition pos:start="199:19" pos:end="199:51">(<expr pos:start="199:20" pos:end="199:50"><name pos:start="199:20" pos:end="199:21">st</name> <operator pos:start="199:23" pos:end="199:24">&amp;&amp;</operator> <operator pos:start="199:26" pos:end="199:26">!</operator><call pos:start="199:27" pos:end="199:50"><name pos:start="199:27" pos:end="199:33">strncmp</name><argument_list pos:start="199:34" pos:end="199:50">(<argument pos:start="199:35" pos:end="199:38"><expr pos:start="199:35" pos:end="199:38"><name pos:start="199:35" pos:end="199:38">line</name></expr></argument>, <argument pos:start="199:41" pos:end="199:46"><expr pos:start="199:41" pos:end="199:46"><literal type="string" pos:start="199:41" pos:end="199:46">"alt:"</literal></expr></argument>, <argument pos:start="199:49" pos:end="199:49"><expr pos:start="199:49" pos:end="199:49"><literal type="number" pos:start="199:49" pos:end="199:49">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:53" pos:end="217:9">{<block_content pos:start="201:13" pos:end="213:30">

            <decl_stmt pos:start="201:13" pos:end="201:37"><decl pos:start="201:13" pos:end="201:36"><type pos:start="201:13" pos:end="201:24"><specifier pos:start="201:13" pos:end="201:17">const</specifier> <name pos:start="201:19" pos:end="201:22">char</name> <modifier pos:start="201:24" pos:end="201:24">*</modifier></type><name pos:start="201:25" pos:end="201:25">p</name> <init pos:start="201:27" pos:end="201:36">= <expr pos:start="201:29" pos:end="201:36"><name pos:start="201:29" pos:end="201:32">line</name> <operator pos:start="201:34" pos:end="201:34">+</operator> <literal type="number" pos:start="201:36" pos:end="201:36">4</literal></expr></init></decl>;</decl_stmt>



            <while pos:start="205:13" pos:end="207:20">while <condition pos:start="205:19" pos:end="205:29">(<expr pos:start="205:20" pos:end="205:28"><operator pos:start="205:20" pos:end="205:20">*</operator><name pos:start="205:21" pos:end="205:21">p</name> <operator pos:start="205:23" pos:end="205:24">==</operator> <literal type="char" pos:start="205:26" pos:end="205:28">' '</literal></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:20"><block_content pos:start="207:17" pos:end="207:20">

                <expr_stmt pos:start="207:17" pos:end="207:20"><expr pos:start="207:17" pos:end="207:19"><name pos:start="207:17" pos:end="207:17">p</name><operator pos:start="207:18" pos:end="207:19">++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="209:13" pos:end="209:54"><expr pos:start="209:13" pos:end="209:53"><call pos:start="209:13" pos:end="209:53"><name pos:start="209:13" pos:end="209:23">av_dict_set</name><argument_list pos:start="209:24" pos:end="209:53">(<argument pos:start="209:25" pos:end="209:37"><expr pos:start="209:25" pos:end="209:37"><operator pos:start="209:25" pos:end="209:25">&amp;</operator><name pos:start="209:26" pos:end="209:37"><name pos:start="209:26" pos:end="209:27">st</name><operator pos:start="209:28" pos:end="209:29">-&gt;</operator><name pos:start="209:30" pos:end="209:37">metadata</name></name></expr></argument>, <argument pos:start="209:40" pos:end="209:46"><expr pos:start="209:40" pos:end="209:46"><literal type="string" pos:start="209:40" pos:end="209:46">"title"</literal></expr></argument>, <argument pos:start="209:49" pos:end="209:49"><expr pos:start="209:49" pos:end="209:49"><name pos:start="209:49" pos:end="209:49">p</name></expr></argument>, <argument pos:start="209:52" pos:end="209:52"><expr pos:start="209:52" pos:end="209:52"><literal type="number" pos:start="209:52" pos:end="209:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:75"><expr pos:start="211:13" pos:end="211:74"><call pos:start="211:13" pos:end="211:74"><name pos:start="211:13" pos:end="211:18">av_log</name><argument_list pos:start="211:19" pos:end="211:74">(<argument pos:start="211:20" pos:end="211:20"><expr pos:start="211:20" pos:end="211:20"><name pos:start="211:20" pos:end="211:20">s</name></expr></argument>, <argument pos:start="211:23" pos:end="211:34"><expr pos:start="211:23" pos:end="211:34"><name pos:start="211:23" pos:end="211:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="211:37" pos:end="211:62"><expr pos:start="211:37" pos:end="211:62"><literal type="string" pos:start="211:37" pos:end="211:62">"IDX stream[%d] name=%s\n"</literal></expr></argument>, <argument pos:start="211:65" pos:end="211:70"><expr pos:start="211:65" pos:end="211:70"><name pos:start="211:65" pos:end="211:70"><name pos:start="211:65" pos:end="211:66">st</name><operator pos:start="211:67" pos:end="211:68">-&gt;</operator><name pos:start="211:69" pos:end="211:70">id</name></name></expr></argument>, <argument pos:start="211:73" pos:end="211:73"><expr pos:start="211:73" pos:end="211:73"><name pos:start="211:73" pos:end="211:73">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:30"><expr pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:25">header_parsed</name> <operator pos:start="213:27" pos:end="213:27">=</operator> <literal type="number" pos:start="213:29" pos:end="213:29">1</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="217:11" pos:end="243:9">else if <condition pos:start="217:19" pos:end="217:47">(<expr pos:start="217:20" pos:end="217:46"><operator pos:start="217:20" pos:end="217:20">!</operator><call pos:start="217:21" pos:end="217:46"><name pos:start="217:21" pos:end="217:27">strncmp</name><argument_list pos:start="217:28" pos:end="217:46">(<argument pos:start="217:29" pos:end="217:32"><expr pos:start="217:29" pos:end="217:32"><name pos:start="217:29" pos:end="217:32">line</name></expr></argument>, <argument pos:start="217:35" pos:end="217:42"><expr pos:start="217:35" pos:end="217:42"><literal type="string" pos:start="217:35" pos:end="217:42">"delay:"</literal></expr></argument>, <argument pos:start="217:45" pos:end="217:45"><expr pos:start="217:45" pos:end="217:45"><literal type="number" pos:start="217:45" pos:end="217:45">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:49" pos:end="243:9">{<block_content pos:start="219:13" pos:end="239:70">

            <decl_stmt pos:start="219:13" pos:end="219:57"><decl pos:start="219:13" pos:end="219:24"><type pos:start="219:13" pos:end="219:15"><name pos:start="219:13" pos:end="219:15">int</name></type> <name pos:start="219:17" pos:end="219:20">sign</name> <init pos:start="219:22" pos:end="219:24">= <expr pos:start="219:24" pos:end="219:24"><literal type="number" pos:start="219:24" pos:end="219:24">1</literal></expr></init></decl>, <decl pos:start="219:27" pos:end="219:32"><type ref="prev" pos:start="219:13" pos:end="219:15"/><name pos:start="219:27" pos:end="219:28">hh</name> <init pos:start="219:30" pos:end="219:32">= <expr pos:start="219:32" pos:end="219:32"><literal type="number" pos:start="219:32" pos:end="219:32">0</literal></expr></init></decl>, <decl pos:start="219:35" pos:end="219:40"><type ref="prev" pos:start="219:13" pos:end="219:15"/><name pos:start="219:35" pos:end="219:36">mm</name> <init pos:start="219:38" pos:end="219:40">= <expr pos:start="219:40" pos:end="219:40"><literal type="number" pos:start="219:40" pos:end="219:40">0</literal></expr></init></decl>, <decl pos:start="219:43" pos:end="219:48"><type ref="prev" pos:start="219:13" pos:end="219:15"/><name pos:start="219:43" pos:end="219:44">ss</name> <init pos:start="219:46" pos:end="219:48">= <expr pos:start="219:48" pos:end="219:48"><literal type="number" pos:start="219:48" pos:end="219:48">0</literal></expr></init></decl>, <decl pos:start="219:51" pos:end="219:56"><type ref="prev" pos:start="219:13" pos:end="219:15"/><name pos:start="219:51" pos:end="219:52">ms</name> <init pos:start="219:54" pos:end="219:56">= <expr pos:start="219:56" pos:end="219:56"><literal type="number" pos:start="219:56" pos:end="219:56">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="221:13" pos:end="221:37"><decl pos:start="221:13" pos:end="221:36"><type pos:start="221:13" pos:end="221:24"><specifier pos:start="221:13" pos:end="221:17">const</specifier> <name pos:start="221:19" pos:end="221:22">char</name> <modifier pos:start="221:24" pos:end="221:24">*</modifier></type><name pos:start="221:25" pos:end="221:25">p</name> <init pos:start="221:27" pos:end="221:36">= <expr pos:start="221:29" pos:end="221:36"><name pos:start="221:29" pos:end="221:32">line</name> <operator pos:start="221:34" pos:end="221:34">+</operator> <literal type="number" pos:start="221:36" pos:end="221:36">6</literal></expr></init></decl>;</decl_stmt>



            <while pos:start="225:13" pos:end="227:20">while <condition pos:start="225:19" pos:end="225:29">(<expr pos:start="225:20" pos:end="225:28"><operator pos:start="225:20" pos:end="225:20">*</operator><name pos:start="225:21" pos:end="225:21">p</name> <operator pos:start="225:23" pos:end="225:24">==</operator> <literal type="char" pos:start="225:26" pos:end="225:28">' '</literal></expr>)</condition><block type="pseudo" pos:start="227:17" pos:end="227:20"><block_content pos:start="227:17" pos:end="227:20">

                <expr_stmt pos:start="227:17" pos:end="227:20"><expr pos:start="227:17" pos:end="227:19"><name pos:start="227:17" pos:end="227:17">p</name><operator pos:start="227:18" pos:end="227:19">++</operator></expr>;</expr_stmt></block_content></block></while>

            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:39">(<expr pos:start="229:17" pos:end="229:38"><operator pos:start="229:17" pos:end="229:17">*</operator><name pos:start="229:18" pos:end="229:18">p</name> <operator pos:start="229:20" pos:end="229:21">==</operator> <literal type="char" pos:start="229:23" pos:end="229:25">'-'</literal> <operator pos:start="229:27" pos:end="229:28">||</operator> <operator pos:start="229:30" pos:end="229:30">*</operator><name pos:start="229:31" pos:end="229:31">p</name> <operator pos:start="229:33" pos:end="229:34">==</operator> <literal type="char" pos:start="229:36" pos:end="229:38">'+'</literal></expr>)</condition> <block pos:start="229:41" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:20">

                <expr_stmt pos:start="231:17" pos:end="231:42"><expr pos:start="231:17" pos:end="231:41"><name pos:start="231:17" pos:end="231:20">sign</name> <operator pos:start="231:22" pos:end="231:22">=</operator> <ternary pos:start="231:24" pos:end="231:41"><condition pos:start="231:24" pos:end="231:34"><expr pos:start="231:24" pos:end="231:32"><operator pos:start="231:24" pos:end="231:24">*</operator><name pos:start="231:25" pos:end="231:25">p</name> <operator pos:start="231:27" pos:end="231:28">==</operator> <literal type="char" pos:start="231:30" pos:end="231:32">'-'</literal></expr> ?</condition><then pos:start="231:36" pos:end="231:37"> <expr pos:start="231:36" pos:end="231:37"><operator pos:start="231:36" pos:end="231:36">-</operator><literal type="number" pos:start="231:37" pos:end="231:37">1</literal></expr> </then><else pos:start="231:39" pos:end="231:41">: <expr pos:start="231:41" pos:end="231:41"><literal type="number" pos:start="231:41" pos:end="231:41">1</literal></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:20"><expr pos:start="233:17" pos:end="233:19"><name pos:start="233:17" pos:end="233:17">p</name><operator pos:start="233:18" pos:end="233:19">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:57"><expr pos:start="237:13" pos:end="237:56"><call pos:start="237:13" pos:end="237:56"><name pos:start="237:13" pos:end="237:18">sscanf</name><argument_list pos:start="237:19" pos:end="237:56">(<argument pos:start="237:20" pos:end="237:20"><expr pos:start="237:20" pos:end="237:20"><name pos:start="237:20" pos:end="237:20">p</name></expr></argument>, <argument pos:start="237:23" pos:end="237:35"><expr pos:start="237:23" pos:end="237:35"><literal type="string" pos:start="237:23" pos:end="237:35">"%d:%d:%d:%d"</literal></expr></argument>, <argument pos:start="237:38" pos:end="237:40"><expr pos:start="237:38" pos:end="237:40"><operator pos:start="237:38" pos:end="237:38">&amp;</operator><name pos:start="237:39" pos:end="237:40">hh</name></expr></argument>, <argument pos:start="237:43" pos:end="237:45"><expr pos:start="237:43" pos:end="237:45"><operator pos:start="237:43" pos:end="237:43">&amp;</operator><name pos:start="237:44" pos:end="237:45">mm</name></expr></argument>, <argument pos:start="237:48" pos:end="237:50"><expr pos:start="237:48" pos:end="237:50"><operator pos:start="237:48" pos:end="237:48">&amp;</operator><name pos:start="237:49" pos:end="237:50">ss</name></expr></argument>, <argument pos:start="237:53" pos:end="237:55"><expr pos:start="237:53" pos:end="237:55"><operator pos:start="237:53" pos:end="237:53">&amp;</operator><name pos:start="237:54" pos:end="237:55">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:70"><expr pos:start="239:13" pos:end="239:69"><name pos:start="239:13" pos:end="239:17">delay</name> <operator pos:start="239:19" pos:end="239:19">=</operator> <operator pos:start="239:21" pos:end="239:21">(</operator><operator pos:start="239:22" pos:end="239:22">(</operator><name pos:start="239:23" pos:end="239:24">hh</name><operator pos:start="239:25" pos:end="239:25">*</operator><literal type="number" pos:start="239:26" pos:end="239:33">3600LL</literal> <operator pos:start="239:33" pos:end="239:33">+</operator> <name pos:start="239:35" pos:end="239:36">mm</name><operator pos:start="239:37" pos:end="239:37">*</operator><literal type="number" pos:start="239:38" pos:end="239:43">60LL</literal> <operator pos:start="239:43" pos:end="239:43">+</operator> <name pos:start="239:45" pos:end="239:46">ss</name><operator pos:start="239:47" pos:end="239:47">)</operator> <operator pos:start="239:49" pos:end="239:49">*</operator> <literal type="number" pos:start="239:51" pos:end="239:58">1000LL</literal> <operator pos:start="239:58" pos:end="239:58">+</operator> <name pos:start="239:60" pos:end="239:61">ms</name><operator pos:start="239:62" pos:end="239:62">)</operator> <operator pos:start="239:64" pos:end="239:64">*</operator> <name pos:start="239:66" pos:end="239:69">sign</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="243:11" pos:end="255:9">else if <condition pos:start="243:19" pos:end="243:49">(<expr pos:start="243:20" pos:end="243:48"><operator pos:start="243:20" pos:end="243:20">!</operator><call pos:start="243:21" pos:end="243:48"><name pos:start="243:21" pos:end="243:27">strncmp</name><argument_list pos:start="243:28" pos:end="243:48">(<argument pos:start="243:29" pos:end="243:32"><expr pos:start="243:29" pos:end="243:32"><name pos:start="243:29" pos:end="243:32">line</name></expr></argument>, <argument pos:start="243:35" pos:end="243:44"><expr pos:start="243:35" pos:end="243:44"><literal type="string" pos:start="243:35" pos:end="243:44">"langidx:"</literal></expr></argument>, <argument pos:start="243:47" pos:end="243:47"><expr pos:start="243:47" pos:end="243:47"><literal type="number" pos:start="243:47" pos:end="243:47">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:51" pos:end="255:9">{<block_content pos:start="245:13" pos:end="251:71">

            <decl_stmt pos:start="245:13" pos:end="245:37"><decl pos:start="245:13" pos:end="245:36"><type pos:start="245:13" pos:end="245:24"><specifier pos:start="245:13" pos:end="245:17">const</specifier> <name pos:start="245:19" pos:end="245:22">char</name> <modifier pos:start="245:24" pos:end="245:24">*</modifier></type><name pos:start="245:25" pos:end="245:25">p</name> <init pos:start="245:27" pos:end="245:36">= <expr pos:start="245:29" pos:end="245:36"><name pos:start="245:29" pos:end="245:32">line</name> <operator pos:start="245:34" pos:end="245:34">+</operator> <literal type="number" pos:start="245:36" pos:end="245:36">8</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="249:13" pos:end="251:71"><if pos:start="249:13" pos:end="251:71">if <condition pos:start="249:16" pos:end="249:47">(<expr pos:start="249:17" pos:end="249:46"><call pos:start="249:17" pos:end="249:41"><name pos:start="249:17" pos:end="249:22">sscanf</name><argument_list pos:start="249:23" pos:end="249:41">(<argument pos:start="249:24" pos:end="249:24"><expr pos:start="249:24" pos:end="249:24"><name pos:start="249:24" pos:end="249:24">p</name></expr></argument>, <argument pos:start="249:27" pos:end="249:30"><expr pos:start="249:27" pos:end="249:30"><literal type="string" pos:start="249:27" pos:end="249:30">"%d"</literal></expr></argument>, <argument pos:start="249:33" pos:end="249:40"><expr pos:start="249:33" pos:end="249:40"><operator pos:start="249:33" pos:end="249:33">&amp;</operator><name pos:start="249:34" pos:end="249:40">langidx</name></expr></argument>)</argument_list></call> <operator pos:start="249:43" pos:end="249:44">!=</operator> <literal type="number" pos:start="249:46" pos:end="249:46">1</literal></expr>)</condition><block type="pseudo" pos:start="251:17" pos:end="251:71"><block_content pos:start="251:17" pos:end="251:71">

                <expr_stmt pos:start="251:17" pos:end="251:71"><expr pos:start="251:17" pos:end="251:70"><call pos:start="251:17" pos:end="251:70"><name pos:start="251:17" pos:end="251:22">av_log</name><argument_list pos:start="251:23" pos:end="251:70">(<argument pos:start="251:24" pos:end="251:24"><expr pos:start="251:24" pos:end="251:24"><name pos:start="251:24" pos:end="251:24">s</name></expr></argument>, <argument pos:start="251:27" pos:end="251:38"><expr pos:start="251:27" pos:end="251:38"><name pos:start="251:27" pos:end="251:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="251:41" pos:end="251:69"><expr pos:start="251:41" pos:end="251:69"><literal type="string" pos:start="251:41" pos:end="251:69">"Invalid langidx specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="255:11" pos:end="261:9">else if <condition pos:start="255:19" pos:end="255:34">(<expr pos:start="255:20" pos:end="255:33"><operator pos:start="255:20" pos:end="255:20">!</operator><name pos:start="255:21" pos:end="255:33">header_parsed</name></expr>)</condition> <block pos:start="255:36" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:50">

            <if_stmt pos:start="257:13" pos:end="259:50"><if pos:start="257:13" pos:end="259:50">if <condition pos:start="257:16" pos:end="257:42">(<expr pos:start="257:17" pos:end="257:41"><name pos:start="257:17" pos:end="257:23"><name pos:start="257:17" pos:end="257:20">line</name><index pos:start="257:21" pos:end="257:23">[<expr pos:start="257:22" pos:end="257:22"><literal type="number" pos:start="257:22" pos:end="257:22">0</literal></expr>]</index></name> <operator pos:start="257:25" pos:end="257:26">&amp;&amp;</operator> <name pos:start="257:28" pos:end="257:34"><name pos:start="257:28" pos:end="257:31">line</name><index pos:start="257:32" pos:end="257:34">[<expr pos:start="257:33" pos:end="257:33"><literal type="number" pos:start="257:33" pos:end="257:33">0</literal></expr>]</index></name> <operator pos:start="257:36" pos:end="257:37">!=</operator> <literal type="char" pos:start="257:39" pos:end="257:41">'#'</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:50"><block_content pos:start="259:17" pos:end="259:50">

                <expr_stmt pos:start="259:17" pos:end="259:50"><expr pos:start="259:17" pos:end="259:49"><call pos:start="259:17" pos:end="259:49"><name pos:start="259:17" pos:end="259:26">av_bprintf</name><argument_list pos:start="259:27" pos:end="259:49">(<argument pos:start="259:28" pos:end="259:34"><expr pos:start="259:28" pos:end="259:34"><operator pos:start="259:28" pos:end="259:28">&amp;</operator><name pos:start="259:29" pos:end="259:34">header</name></expr></argument>, <argument pos:start="259:37" pos:end="259:42"><expr pos:start="259:37" pos:end="259:42"><literal type="string" pos:start="259:37" pos:end="259:42">"%s\n"</literal></expr></argument>, <argument pos:start="259:45" pos:end="259:48"><expr pos:start="259:45" pos:end="259:48"><name pos:start="259:45" pos:end="259:48">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="267:5" pos:end="269:67"><if pos:start="267:5" pos:end="269:67">if <condition pos:start="267:8" pos:end="267:32">(<expr pos:start="267:9" pos:end="267:31"><name pos:start="267:9" pos:end="267:15">langidx</name> <operator pos:start="267:17" pos:end="267:17">&lt;</operator> <name pos:start="267:19" pos:end="267:31"><name pos:start="267:19" pos:end="267:19">s</name><operator pos:start="267:20" pos:end="267:21">-&gt;</operator><name pos:start="267:22" pos:end="267:31">nb_streams</name></name></expr>)</condition><block type="pseudo" pos:start="269:9" pos:end="269:67"><block_content pos:start="269:9" pos:end="269:67">

        <expr_stmt pos:start="269:9" pos:end="269:67"><expr pos:start="269:9" pos:end="269:66"><name pos:start="269:9" pos:end="269:27"><name pos:start="269:9" pos:end="269:9">s</name><operator pos:start="269:10" pos:end="269:11">-&gt;</operator><name pos:start="269:12" pos:end="269:18">streams</name><index pos:start="269:19" pos:end="269:27">[<expr pos:start="269:20" pos:end="269:26"><name pos:start="269:20" pos:end="269:26">langidx</name></expr>]</index></name><operator pos:start="269:28" pos:end="269:29">-&gt;</operator><name pos:start="269:30" pos:end="269:40">disposition</name> <operator pos:start="269:42" pos:end="269:43">|=</operator> <name pos:start="269:45" pos:end="269:66">AV_DISPOSITION_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="273:5" pos:end="279:5">for <control pos:start="273:9" pos:end="273:39">(<init pos:start="273:10" pos:end="273:15"><expr pos:start="273:10" pos:end="273:14"><name pos:start="273:10" pos:end="273:10">i</name> <operator pos:start="273:12" pos:end="273:12">=</operator> <literal type="number" pos:start="273:14" pos:end="273:14">0</literal></expr>;</init> <condition pos:start="273:17" pos:end="273:34"><expr pos:start="273:17" pos:end="273:33"><name pos:start="273:17" pos:end="273:17">i</name> <operator pos:start="273:19" pos:end="273:19">&lt;</operator> <name pos:start="273:21" pos:end="273:33"><name pos:start="273:21" pos:end="273:21">s</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:33">nb_streams</name></name></expr>;</condition> <incr pos:start="273:36" pos:end="273:38"><expr pos:start="273:36" pos:end="273:38"><name pos:start="273:36" pos:end="273:36">i</name><operator pos:start="273:37" pos:end="273:38">++</operator></expr></incr>)</control> <block pos:start="273:41" pos:end="279:5">{<block_content pos:start="275:9" pos:end="277:51">

        <expr_stmt pos:start="275:9" pos:end="275:44"><expr pos:start="275:9" pos:end="275:43"><name pos:start="275:9" pos:end="275:20"><name pos:start="275:9" pos:end="275:14">vobsub</name><operator pos:start="275:15" pos:end="275:16">-&gt;</operator><name pos:start="275:17" pos:end="275:17">q</name><index pos:start="275:18" pos:end="275:20">[<expr pos:start="275:19" pos:end="275:19"><name pos:start="275:19" pos:end="275:19">i</name></expr>]</index></name><operator pos:start="275:21" pos:end="275:21">.</operator><name pos:start="275:22" pos:end="275:25">sort</name> <operator pos:start="275:27" pos:end="275:27">=</operator> <name pos:start="275:29" pos:end="275:43">SUB_SORT_POS_TS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:51"><expr pos:start="277:9" pos:end="277:50"><call pos:start="277:9" pos:end="277:50"><name pos:start="277:9" pos:end="277:35">ff_subtitles_queue_finalize</name><argument_list pos:start="277:36" pos:end="277:50">(<argument pos:start="277:37" pos:end="277:49"><expr pos:start="277:37" pos:end="277:49"><operator pos:start="277:37" pos:end="277:37">&amp;</operator><name pos:start="277:38" pos:end="277:49"><name pos:start="277:38" pos:end="277:43">vobsub</name><operator pos:start="277:44" pos:end="277:45">-&gt;</operator><name pos:start="277:46" pos:end="277:46">q</name><index pos:start="277:47" pos:end="277:49">[<expr pos:start="277:48" pos:end="277:48"><name pos:start="277:48" pos:end="277:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="283:5" pos:end="291:5"><if pos:start="283:5" pos:end="291:5">if <condition pos:start="283:8" pos:end="283:40">(<expr pos:start="283:9" pos:end="283:39"><operator pos:start="283:9" pos:end="283:9">!</operator><call pos:start="283:10" pos:end="283:39"><name pos:start="283:10" pos:end="283:30">av_bprint_is_complete</name><argument_list pos:start="283:31" pos:end="283:39">(<argument pos:start="283:32" pos:end="283:38"><expr pos:start="283:32" pos:end="283:38"><operator pos:start="283:32" pos:end="283:32">&amp;</operator><name pos:start="283:33" pos:end="283:38">header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:42" pos:end="291:5">{<block_content pos:start="285:9" pos:end="289:17">

        <expr_stmt pos:start="285:9" pos:end="285:42"><expr pos:start="285:9" pos:end="285:41"><call pos:start="285:9" pos:end="285:41"><name pos:start="285:9" pos:end="285:26">av_bprint_finalize</name><argument_list pos:start="285:27" pos:end="285:41">(<argument pos:start="285:28" pos:end="285:34"><expr pos:start="285:28" pos:end="285:34"><operator pos:start="285:28" pos:end="285:28">&amp;</operator><name pos:start="285:29" pos:end="285:34">header</name></expr></argument>, <argument pos:start="285:37" pos:end="285:40"><expr pos:start="285:37" pos:end="285:40"><name pos:start="285:37" pos:end="285:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:30"><expr pos:start="287:9" pos:end="287:29"><name pos:start="287:9" pos:end="287:11">ret</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <call pos:start="287:15" pos:end="287:29"><name pos:start="287:15" pos:end="287:21">AVERROR</name><argument_list pos:start="287:22" pos:end="287:29">(<argument pos:start="287:23" pos:end="287:28"><expr pos:start="287:23" pos:end="287:28"><name pos:start="287:23" pos:end="287:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="289:9" pos:end="289:17">goto <name pos:start="289:14" pos:end="289:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:45"><expr pos:start="293:5" pos:end="293:44"><call pos:start="293:5" pos:end="293:44"><name pos:start="293:5" pos:end="293:22">av_bprint_finalize</name><argument_list pos:start="293:23" pos:end="293:44">(<argument pos:start="293:24" pos:end="293:30"><expr pos:start="293:24" pos:end="293:30"><operator pos:start="293:24" pos:end="293:24">&amp;</operator><name pos:start="293:25" pos:end="293:30">header</name></expr></argument>, <argument pos:start="293:33" pos:end="293:43"><expr pos:start="293:33" pos:end="293:43"><operator pos:start="293:33" pos:end="293:33">&amp;</operator><name pos:start="293:34" pos:end="293:43">header_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="295:5" pos:end="303:5">for <control pos:start="295:9" pos:end="295:39">(<init pos:start="295:10" pos:end="295:15"><expr pos:start="295:10" pos:end="295:14"><name pos:start="295:10" pos:end="295:10">i</name> <operator pos:start="295:12" pos:end="295:12">=</operator> <literal type="number" pos:start="295:14" pos:end="295:14">0</literal></expr>;</init> <condition pos:start="295:17" pos:end="295:34"><expr pos:start="295:17" pos:end="295:33"><name pos:start="295:17" pos:end="295:17">i</name> <operator pos:start="295:19" pos:end="295:19">&lt;</operator> <name pos:start="295:21" pos:end="295:33"><name pos:start="295:21" pos:end="295:21">s</name><operator pos:start="295:22" pos:end="295:23">-&gt;</operator><name pos:start="295:24" pos:end="295:33">nb_streams</name></name></expr>;</condition> <incr pos:start="295:36" pos:end="295:38"><expr pos:start="295:36" pos:end="295:38"><name pos:start="295:36" pos:end="295:36">i</name><operator pos:start="295:37" pos:end="295:38">++</operator></expr></incr>)</control> <block pos:start="295:41" pos:end="303:5">{<block_content pos:start="297:9" pos:end="301:51">

        <decl_stmt pos:start="297:9" pos:end="297:41"><decl pos:start="297:9" pos:end="297:40"><type pos:start="297:9" pos:end="297:18"><name pos:start="297:9" pos:end="297:16">AVStream</name> <modifier pos:start="297:18" pos:end="297:18">*</modifier></type><name pos:start="297:19" pos:end="297:24">sub_st</name> <init pos:start="297:26" pos:end="297:40">= <expr pos:start="297:28" pos:end="297:40"><name pos:start="297:28" pos:end="297:40"><name pos:start="297:28" pos:end="297:28">s</name><operator pos:start="297:29" pos:end="297:30">-&gt;</operator><name pos:start="297:31" pos:end="297:37">streams</name><index pos:start="297:38" pos:end="297:40">[<expr pos:start="297:39" pos:end="297:39"><name pos:start="297:39" pos:end="297:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:62"><expr pos:start="299:9" pos:end="299:61"><name pos:start="299:9" pos:end="299:32"><name pos:start="299:9" pos:end="299:14">sub_st</name><operator pos:start="299:15" pos:end="299:16">-&gt;</operator><name pos:start="299:17" pos:end="299:21">codec</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:32">extradata</name></name>      <operator pos:start="299:39" pos:end="299:39">=</operator> <call pos:start="299:41" pos:end="299:61"><name pos:start="299:41" pos:end="299:49">av_strdup</name><argument_list pos:start="299:50" pos:end="299:61">(<argument pos:start="299:51" pos:end="299:60"><expr pos:start="299:51" pos:end="299:60"><name pos:start="299:51" pos:end="299:60">header_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:51"><expr pos:start="301:9" pos:end="301:50"><name pos:start="301:9" pos:end="301:37"><name pos:start="301:9" pos:end="301:14">sub_st</name><operator pos:start="301:15" pos:end="301:16">-&gt;</operator><name pos:start="301:17" pos:end="301:21">codec</name><operator pos:start="301:22" pos:end="301:23">-&gt;</operator><name pos:start="301:24" pos:end="301:37">extradata_size</name></name> <operator pos:start="301:39" pos:end="301:39">=</operator> <name pos:start="301:41" pos:end="301:50"><name pos:start="301:41" pos:end="301:46">header</name><operator pos:start="301:47" pos:end="301:47">.</operator><name pos:start="301:48" pos:end="301:50">len</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="305:5" pos:end="305:24"><expr pos:start="305:5" pos:end="305:23"><call pos:start="305:5" pos:end="305:23"><name pos:start="305:5" pos:end="305:11">av_free</name><argument_list pos:start="305:12" pos:end="305:23">(<argument pos:start="305:13" pos:end="305:22"><expr pos:start="305:13" pos:end="305:22"><name pos:start="305:13" pos:end="305:22">header_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="309:1" pos:end="309:4"><name pos:start="309:1" pos:end="309:3">end</name>:</label>

    <expr_stmt pos:start="311:5" pos:end="311:22"><expr pos:start="311:5" pos:end="311:21"><call pos:start="311:5" pos:end="311:21"><name pos:start="311:5" pos:end="311:11">av_free</name><argument_list pos:start="311:12" pos:end="311:21">(<argument pos:start="311:13" pos:end="311:20"><expr pos:start="311:13" pos:end="311:20"><name pos:start="311:13" pos:end="311:20">sub_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="313:5" pos:end="313:15">return <expr pos:start="313:12" pos:end="313:14"><name pos:start="313:12" pos:end="313:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
