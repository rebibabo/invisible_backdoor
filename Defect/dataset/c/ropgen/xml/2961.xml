<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2961.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:14">GuestFileWrite</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:36">qmp_guest_file_write</name><parameter_list pos:start="1:37" pos:end="5:50">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:44">int64_t</name></type> <name pos:start="1:46" pos:end="1:51">handle</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">buf_b64</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:41">bool</name></type> <name pos:start="3:43" pos:end="3:51">has_count</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:66"><decl pos:start="3:54" pos:end="3:66"><type pos:start="3:54" pos:end="3:66"><name pos:start="3:54" pos:end="3:60">int64_t</name></type> <name pos:start="3:62" pos:end="3:66">count</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:49"><decl pos:start="5:38" pos:end="5:49"><type pos:start="5:38" pos:end="5:49"><name pos:start="5:38" pos:end="5:42">Error</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier><modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="81:1">{<block_content pos:start="9:5" pos:end="79:22">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">GuestFileWrite</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:30">write_data</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">guchar</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:15">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">gsize</name></type> <name pos:start="13:11" pos:end="13:17">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">write_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:64"><decl pos:start="17:5" pos:end="17:63"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:19">GuestFileHandle</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">gfh</name> <init pos:start="17:26" pos:end="17:63">= <expr pos:start="17:28" pos:end="17:63"><call pos:start="17:28" pos:end="17:63"><name pos:start="17:28" pos:end="17:49">guest_file_handle_find</name><argument_list pos:start="17:50" pos:end="17:63">(<argument pos:start="17:51" pos:end="17:56"><expr pos:start="17:51" pos:end="17:56"><name pos:start="17:51" pos:end="17:56">handle</name></expr></argument>, <argument pos:start="17:59" pos:end="17:62"><expr pos:start="17:59" pos:end="17:62"><name pos:start="17:59" pos:end="17:62">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">FILE</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:12">fh</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:13">(<expr pos:start="23:9" pos:end="23:12"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:12">gfh</name></expr>)</condition> <block pos:start="23:15" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:6">fh</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <name pos:start="31:10" pos:end="31:16"><name pos:start="31:10" pos:end="31:12">gfh</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:16">fh</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:45"><expr pos:start="33:5" pos:end="33:44"><name pos:start="33:5" pos:end="33:7">buf</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:44"><name pos:start="33:11" pos:end="33:25">g_base64_decode</name><argument_list pos:start="33:26" pos:end="33:44">(<argument pos:start="33:27" pos:end="33:33"><expr pos:start="33:27" pos:end="33:33"><name pos:start="33:27" pos:end="33:33">buf_b64</name></expr></argument>, <argument pos:start="33:36" pos:end="33:43"><expr pos:start="33:36" pos:end="33:43"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:43">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">has_count</name></expr>)</condition> <block pos:start="37:21" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:24">

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:13">count</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:23">buf_len</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="51:5">else if <condition pos:start="41:15" pos:end="41:44">(<expr pos:start="41:16" pos:end="41:43"><name pos:start="41:16" pos:end="41:35"><name pos:start="41:16" pos:end="41:20">count</name> <argument_list type="generic" pos:start="41:22" pos:end="41:35">&lt; <argument pos:start="41:24" pos:end="41:33"><expr pos:start="41:24" pos:end="41:33"><literal type="number" pos:start="41:24" pos:end="41:24">0</literal> <operator pos:start="41:26" pos:end="41:27">||</operator> <name pos:start="41:29" pos:end="41:33">count</name></expr></argument> &gt;</argument_list></name> <name pos:start="41:37" pos:end="41:43">buf_len</name></expr>)</condition> <block pos:start="41:46" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:20">

        <expr_stmt pos:start="43:9" pos:end="45:26"><expr pos:start="43:9" pos:end="45:25"><call pos:start="43:9" pos:end="45:25"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="45:25">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:76"><expr pos:start="43:26" pos:end="43:76"><literal type="string" pos:start="43:26" pos:end="43:35">"value '%"</literal> <name pos:start="43:37" pos:end="43:42">PRId64</name> <literal type="string" pos:start="43:44" pos:end="43:76">"' is invalid for argument count"</literal></expr></argument>,

                   <argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:20"><expr pos:start="47:9" pos:end="47:19"><call pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:14">g_free</name><argument_list pos:start="47:15" pos:end="47:19">(<argument pos:start="47:16" pos:end="47:18"><expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:20">return <expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:15">write_count</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:43"><name pos:start="55:19" pos:end="55:24">fwrite</name><argument_list pos:start="55:25" pos:end="55:43">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">buf</name></expr></argument>, <argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr></argument>, <argument pos:start="55:34" pos:end="55:38"><expr pos:start="55:34" pos:end="55:38"><name pos:start="55:34" pos:end="55:38">count</name></expr></argument>, <argument pos:start="55:41" pos:end="55:42"><expr pos:start="55:41" pos:end="55:42"><name pos:start="55:41" pos:end="55:42">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="71:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:19">(<expr pos:start="57:9" pos:end="57:18"><call pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:14">ferror</name><argument_list pos:start="57:15" pos:end="57:18">(<argument pos:start="57:16" pos:end="57:17"><expr pos:start="57:16" pos:end="57:17"><name pos:start="57:16" pos:end="57:17">fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:21" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:66">

        <expr_stmt pos:start="59:9" pos:end="59:65"><expr pos:start="59:9" pos:end="59:64"><call pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:24">error_setg_errno</name><argument_list pos:start="59:25" pos:end="59:64">(<argument pos:start="59:26" pos:end="59:29"><expr pos:start="59:26" pos:end="59:29"><name pos:start="59:26" pos:end="59:29">errp</name></expr></argument>, <argument pos:start="59:32" pos:end="59:36"><expr pos:start="59:32" pos:end="59:36"><name pos:start="59:32" pos:end="59:36">errno</name></expr></argument>, <argument pos:start="59:39" pos:end="59:63"><expr pos:start="59:39" pos:end="59:63"><literal type="string" pos:start="59:39" pos:end="59:63">"failed to write to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:66"><expr pos:start="61:9" pos:end="61:65"><call pos:start="61:9" pos:end="61:65"><name pos:start="61:9" pos:end="61:12">slog</name><argument_list pos:start="61:13" pos:end="61:65">(<argument pos:start="61:14" pos:end="61:56"><expr pos:start="61:14" pos:end="61:56"><literal type="string" pos:start="61:14" pos:end="61:49">"guest-file-write failed, handle: %"</literal> <name pos:start="61:51" pos:end="61:56">PRId64</name></expr></argument>, <argument pos:start="61:59" pos:end="61:64"><expr pos:start="61:59" pos:end="61:64"><name pos:start="61:59" pos:end="61:64">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="71:5">else <block pos:start="63:12" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:35">

        <expr_stmt pos:start="65:9" pos:end="65:55"><expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:18">write_data</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:54"><name pos:start="65:22" pos:end="65:30">g_malloc0</name><argument_list pos:start="65:31" pos:end="65:54">(<argument pos:start="65:32" pos:end="65:53"><expr pos:start="65:32" pos:end="65:53"><sizeof pos:start="65:32" pos:end="65:53">sizeof<argument_list pos:start="65:38" pos:end="65:53">(<argument pos:start="65:39" pos:end="65:52"><expr pos:start="65:39" pos:end="65:52"><name pos:start="65:39" pos:end="65:52">GuestFileWrite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:18">write_data</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:25">count</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <name pos:start="67:29" pos:end="67:39">write_count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:18">write_data</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:23">eof</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:34"><name pos:start="69:27" pos:end="69:30">feof</name><argument_list pos:start="69:31" pos:end="69:34">(<argument pos:start="69:32" pos:end="69:33"><expr pos:start="69:32" pos:end="69:33"><name pos:start="69:32" pos:end="69:33">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:16"><expr pos:start="73:5" pos:end="73:15"><call pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:15">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><call pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:12">clearerr</name><argument_list pos:start="75:13" pos:end="75:16">(<argument pos:start="75:14" pos:end="75:15"><expr pos:start="75:14" pos:end="75:15"><name pos:start="75:14" pos:end="75:15">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:22">return <expr pos:start="79:12" pos:end="79:21"><name pos:start="79:12" pos:end="79:21">write_data</name></expr>;</return>

</block_content>}</block></function>
</unit>
