<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8505.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:36">circular_buffer_task_tx</name><parameter_list pos:start="1:37" pos:end="1:56">( <parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:44"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:55">_URLContext</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">URLContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">h</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">_URLContext</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">UDPContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">h</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:23">old_cancelstate</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:69"><expr pos:start="13:5" pos:end="13:68"><call pos:start="13:5" pos:end="13:68"><name pos:start="13:5" pos:end="13:26">pthread_setcancelstate</name><argument_list pos:start="13:27" pos:end="13:68">(<argument pos:start="13:28" pos:end="13:49"><expr pos:start="13:28" pos:end="13:49"><name pos:start="13:28" pos:end="13:49">PTHREAD_CANCEL_DISABLE</name></expr></argument>, <argument pos:start="13:52" pos:end="13:67"><expr pos:start="13:52" pos:end="13:67"><operator pos:start="13:52" pos:end="13:52">&amp;</operator><name pos:start="13:53" pos:end="13:67">old_cancelstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="17:5" pos:end="85:5">for<control pos:start="17:8" pos:end="17:11">(<init pos:start="17:9" pos:end="17:9">;</init><condition pos:start="17:10" pos:end="17:10">;</condition><incr/>)</control> <block pos:start="17:13" pos:end="85:5">{<block_content pos:start="19:9" pos:end="83:40">

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:23"><decl pos:start="21:9" pos:end="21:22"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">uint8_t</name></type> <name pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:19">tmp</name><index pos:start="21:20" pos:end="21:22">[<expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:72"><expr pos:start="25:9" pos:end="25:71"><call pos:start="25:9" pos:end="25:71"><name pos:start="25:9" pos:end="25:30">pthread_setcancelstate</name><argument_list pos:start="25:31" pos:end="25:71">(<argument pos:start="25:32" pos:end="25:52"><expr pos:start="25:32" pos:end="25:52"><name pos:start="25:32" pos:end="25:52">PTHREAD_CANCEL_ENABLE</name></expr></argument>, <argument pos:start="25:55" pos:end="25:70"><expr pos:start="25:55" pos:end="25:70"><operator pos:start="25:55" pos:end="25:55">&amp;</operator><name pos:start="25:56" pos:end="25:70">old_cancelstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:17">av_usleep</name><argument_list pos:start="29:18" pos:end="29:32">(<argument pos:start="29:19" pos:end="29:31"><expr pos:start="29:19" pos:end="29:31"><name pos:start="29:19" pos:end="29:31"><name pos:start="29:19" pos:end="29:19">s</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:31">packet_gap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:73"><expr pos:start="33:9" pos:end="33:72"><call pos:start="33:9" pos:end="33:72"><name pos:start="33:9" pos:end="33:30">pthread_setcancelstate</name><argument_list pos:start="33:31" pos:end="33:72">(<argument pos:start="33:32" pos:end="33:53"><expr pos:start="33:32" pos:end="33:53"><name pos:start="33:32" pos:end="33:53">PTHREAD_CANCEL_DISABLE</name></expr></argument>, <argument pos:start="33:56" pos:end="33:71"><expr pos:start="33:56" pos:end="33:71"><operator pos:start="33:56" pos:end="33:56">&amp;</operator><name pos:start="33:57" pos:end="33:71">old_cancelstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><call pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:26">pthread_mutex_lock</name><argument_list pos:start="37:27" pos:end="37:37">(<argument pos:start="37:28" pos:end="37:36"><expr pos:start="37:28" pos:end="37:36"><operator pos:start="37:28" pos:end="37:28">&amp;</operator><name pos:start="37:29" pos:end="37:36"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:11">len</name><operator pos:start="41:12" pos:end="41:12">=</operator><call pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:24">av_fifo_size</name><argument_list pos:start="41:25" pos:end="41:33">(<argument pos:start="41:26" pos:end="41:32"><expr pos:start="41:26" pos:end="41:32"><name pos:start="41:26" pos:end="41:32"><name pos:start="41:26" pos:end="41:26">s</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:32">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="45:9" pos:end="55:9">while <condition pos:start="45:15" pos:end="45:21">(<expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:18">len</name><operator pos:start="45:19" pos:end="45:19">&lt;</operator><literal type="number" pos:start="45:20" pos:end="45:20">4</literal></expr>)</condition> <block pos:start="45:23" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:38">

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:59">(<expr pos:start="47:17" pos:end="47:58"><call pos:start="47:17" pos:end="47:54"><name pos:start="47:17" pos:end="47:33">pthread_cond_wait</name><argument_list pos:start="47:34" pos:end="47:54">(<argument pos:start="47:35" pos:end="47:42"><expr pos:start="47:35" pos:end="47:42"><operator pos:start="47:35" pos:end="47:35">&amp;</operator><name pos:start="47:36" pos:end="47:42"><name pos:start="47:36" pos:end="47:36">s</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:42">cond</name></name></expr></argument>, <argument pos:start="47:45" pos:end="47:53"><expr pos:start="47:45" pos:end="47:53"><operator pos:start="47:45" pos:end="47:45">&amp;</operator><name pos:start="47:46" pos:end="47:53"><name pos:start="47:46" pos:end="47:46">s</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:53">mutex</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:56" pos:end="47:56">&lt;</operator> <literal type="number" pos:start="47:58" pos:end="47:58">0</literal></expr>)</condition> <block pos:start="47:61" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:25">

                <goto pos:start="49:17" pos:end="49:25">goto <name pos:start="49:22" pos:end="49:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:15">len</name><operator pos:start="53:16" pos:end="53:16">=</operator><call pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:28">av_fifo_size</name><argument_list pos:start="53:29" pos:end="53:37">(<argument pos:start="53:30" pos:end="53:36"><expr pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:30">s</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:36">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>



        <expr_stmt pos:start="59:9" pos:end="59:52"><expr pos:start="59:9" pos:end="59:51"><call pos:start="59:9" pos:end="59:51"><name pos:start="59:9" pos:end="59:28">av_fifo_generic_peek</name><argument_list pos:start="59:29" pos:end="59:51">(<argument pos:start="59:30" pos:end="59:36"><expr pos:start="59:30" pos:end="59:36"><name pos:start="59:30" pos:end="59:36"><name pos:start="59:30" pos:end="59:30">s</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:36">fifo</name></name></expr></argument>, <argument pos:start="59:39" pos:end="59:41"><expr pos:start="59:39" pos:end="59:41"><name pos:start="59:39" pos:end="59:41">tmp</name></expr></argument>, <argument pos:start="59:44" pos:end="59:44"><expr pos:start="59:44" pos:end="59:44"><literal type="number" pos:start="59:44" pos:end="59:44">4</literal></expr></argument>, <argument pos:start="59:47" pos:end="59:50"><expr pos:start="59:47" pos:end="59:50"><name pos:start="59:47" pos:end="59:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:25"><expr pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:11">len</name><operator pos:start="61:12" pos:end="61:12">=</operator><call pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:19">AV_RL32</name><argument_list pos:start="61:20" pos:end="61:24">(<argument pos:start="61:21" pos:end="61:23"><expr pos:start="61:21" pos:end="61:23"><name pos:start="61:21" pos:end="61:23">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="79:9"><if pos:start="65:9" pos:end="79:9">if <condition pos:start="65:12" pos:end="65:50">(<expr pos:start="65:13" pos:end="65:49"><name pos:start="65:13" pos:end="65:15">len</name><operator pos:start="65:16" pos:end="65:16">&gt;</operator><literal type="number" pos:start="65:17" pos:end="65:17">0</literal> <operator pos:start="65:19" pos:end="65:20">&amp;&amp;</operator> <call pos:start="65:22" pos:end="65:42"><name pos:start="65:22" pos:end="65:33">av_fifo_size</name><argument_list pos:start="65:34" pos:end="65:42">(<argument pos:start="65:35" pos:end="65:41"><expr pos:start="65:35" pos:end="65:41"><name pos:start="65:35" pos:end="65:41"><name pos:start="65:35" pos:end="65:35">s</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:41">fifo</name></name></expr></argument>)</argument_list></call><operator pos:start="65:43" pos:end="65:44">&gt;=</operator><name pos:start="65:45" pos:end="65:47">len</name><operator pos:start="65:48" pos:end="65:48">+</operator><literal type="number" pos:start="65:49" pos:end="65:49">4</literal></expr>)</condition> <block pos:start="65:52" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:13">

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><call pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:25">av_fifo_drain</name><argument_list pos:start="67:26" pos:end="67:37">(<argument pos:start="67:27" pos:end="67:33"><expr pos:start="67:27" pos:end="67:33"><name pos:start="67:27" pos:end="67:33"><name pos:start="67:27" pos:end="67:27">s</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:33">fifo</name></name></expr></argument>, <argument pos:start="67:36" pos:end="67:36"><expr pos:start="67:36" pos:end="67:36"><literal type="number" pos:start="67:36" pos:end="67:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:40" pos:end="67:63">/* skip packet length */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:64"><expr pos:start="69:13" pos:end="69:63"><call pos:start="69:13" pos:end="69:63"><name pos:start="69:13" pos:end="69:32">av_fifo_generic_read</name><argument_list pos:start="69:33" pos:end="69:63">(<argument pos:start="69:34" pos:end="69:40"><expr pos:start="69:34" pos:end="69:40"><name pos:start="69:34" pos:end="69:40"><name pos:start="69:34" pos:end="69:34">s</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:40">fifo</name></name></expr></argument>, <argument pos:start="69:43" pos:end="69:43"><expr pos:start="69:43" pos:end="69:43"><name pos:start="69:43" pos:end="69:43">h</name></expr></argument>, <argument pos:start="69:46" pos:end="69:48"><expr pos:start="69:46" pos:end="69:48"><name pos:start="69:46" pos:end="69:48">len</name></expr></argument>, <argument pos:start="69:51" pos:end="69:62"><expr pos:start="69:51" pos:end="69:62"><name pos:start="69:51" pos:end="69:62">do_udp_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:66" pos:end="69:110">/* use function for write from fifo buffer */</comment>

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:48">(<expr pos:start="71:17" pos:end="71:47"><name pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:40">circular_buffer_error</name></name> <operator pos:start="71:42" pos:end="71:43">==</operator> <name pos:start="71:45" pos:end="71:47">len</name></expr>)</condition> <block pos:start="71:50" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:43">

                <comment type="block" pos:start="73:17" pos:end="73:42">/* all ok - reset error */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:43"><expr pos:start="75:17" pos:end="75:42"><name pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:40">circular_buffer_error</name></name><operator pos:start="75:41" pos:end="75:41">=</operator><literal type="number" pos:start="75:42" pos:end="75:42">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:40"><expr pos:start="83:9" pos:end="83:39"><call pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:28">pthread_mutex_unlock</name><argument_list pos:start="83:29" pos:end="83:39">(<argument pos:start="83:30" pos:end="83:38"><expr pos:start="83:30" pos:end="83:38"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:38"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="89:1" pos:end="89:4"><name pos:start="89:1" pos:end="89:3">end</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:36"><expr pos:start="91:5" pos:end="91:35"><call pos:start="91:5" pos:end="91:35"><name pos:start="91:5" pos:end="91:24">pthread_mutex_unlock</name><argument_list pos:start="91:25" pos:end="91:35">(<argument pos:start="91:26" pos:end="91:34"><expr pos:start="91:26" pos:end="91:34"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:34"><name pos:start="91:27" pos:end="91:27">s</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:34">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:16">return <expr pos:start="93:12" pos:end="93:15"><name pos:start="93:12" pos:end="93:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
