<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21388.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">cdg_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:72">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">got_frame</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:71"><decl pos:start="3:57" pos:end="3:71"><type pos:start="3:57" pos:end="3:71"><name pos:start="3:57" pos:end="3:64">AVPacket</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:71">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:19">command</name></decl>, <decl pos:start="13:22" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:22" pos:end="13:25">inst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:35"><name pos:start="15:13" pos:end="15:20">cdg_data</name><index pos:start="15:21" pos:end="15:35">[<expr pos:start="15:22" pos:end="15:34"><name pos:start="15:22" pos:end="15:34">CDG_DATA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:18">frame</name> <init pos:start="17:20" pos:end="17:25">= <expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:45"><decl pos:start="19:5" pos:end="19:44"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">CDGraphicsContext</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:25">cc</name> <init pos:start="19:27" pos:end="19:44">= <expr pos:start="19:29" pos:end="19:44"><name pos:start="19:29" pos:end="19:44"><name pos:start="19:29" pos:end="19:33">avctx</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:44">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:40">(<expr pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:16">buf_size</name> <operator pos:start="23:18" pos:end="23:18">&lt;</operator> <name pos:start="23:20" pos:end="23:39">CDG_MINIMUM_PKT_SIZE</name></expr>)</condition> <block pos:start="23:42" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:31">

        <expr_stmt pos:start="25:9" pos:end="25:70"><expr pos:start="25:9" pos:end="25:69"><call pos:start="25:9" pos:end="25:69"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:69">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:68"><expr pos:start="25:37" pos:end="25:68"><literal type="string" pos:start="25:37" pos:end="25:68">"buffer too small for decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:51">(<expr pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:18">&gt;</operator> <name pos:start="31:20" pos:end="31:34">CDG_HEADER_SIZE</name> <operator pos:start="31:36" pos:end="31:36">+</operator> <name pos:start="31:38" pos:end="31:50">CDG_DATA_SIZE</name></expr>)</condition> <block pos:start="31:53" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:31">

        <expr_stmt pos:start="33:9" pos:end="33:68"><expr pos:start="33:9" pos:end="33:67"><call pos:start="33:9" pos:end="33:67"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:67">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:37" pos:end="33:66"><expr pos:start="33:37" pos:end="33:66"><literal type="string" pos:start="33:37" pos:end="33:66">"buffer too big for decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="43:19"><if pos:start="41:5" pos:end="43:19">if <condition pos:start="41:8" pos:end="41:54">(<expr pos:start="41:9" pos:end="41:53"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:48"><name pos:start="41:16" pos:end="41:30">ff_reget_buffer</name><argument_list pos:start="41:31" pos:end="41:48">(<argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:36">avctx</name></expr></argument>, <argument pos:start="41:39" pos:end="41:47"><expr pos:start="41:39" pos:end="41:47"><name pos:start="41:39" pos:end="41:47"><name pos:start="41:39" pos:end="41:40">cc</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:47">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="41:49" pos:end="41:49">)</operator> <operator pos:start="41:51" pos:end="41:51">&lt;</operator> <literal type="number" pos:start="41:53" pos:end="41:53">0</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:19"><block_content pos:start="43:9" pos:end="43:19">

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:29">(<expr pos:start="45:9" pos:end="45:28"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:28"><name pos:start="45:10" pos:end="45:14">avctx</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:28">frame_number</name></name></expr>)</condition> <block pos:start="45:31" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:54">

        <expr_stmt pos:start="47:9" pos:end="47:78"><expr pos:start="47:9" pos:end="47:77"><call pos:start="47:9" pos:end="47:77"><name pos:start="47:9" pos:end="47:14">memset</name><argument_list pos:start="47:15" pos:end="47:77">(<argument pos:start="47:16" pos:end="47:33"><expr pos:start="47:16" pos:end="47:33"><name pos:start="47:16" pos:end="47:33"><name pos:start="47:16" pos:end="47:17">cc</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:24">frame</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:30">data</name><index pos:start="47:31" pos:end="47:33">[<expr pos:start="47:32" pos:end="47:32"><literal type="number" pos:start="47:32" pos:end="47:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><literal type="number" pos:start="47:36" pos:end="47:36">0</literal></expr></argument>, <argument pos:start="47:39" pos:end="47:76"><expr pos:start="47:39" pos:end="47:76"><name pos:start="47:39" pos:end="47:60"><name pos:start="47:39" pos:end="47:40">cc</name><operator pos:start="47:41" pos:end="47:42">-&gt;</operator><name pos:start="47:43" pos:end="47:47">frame</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:57">linesize</name><index pos:start="47:58" pos:end="47:60">[<expr pos:start="47:59" pos:end="47:59"><literal type="number" pos:start="47:59" pos:end="47:59">0</literal></expr>]</index></name> <operator pos:start="47:62" pos:end="47:62">*</operator> <name pos:start="47:64" pos:end="47:76"><name pos:start="47:64" pos:end="47:68">avctx</name><operator pos:start="47:69" pos:end="47:70">-&gt;</operator><name pos:start="47:71" pos:end="47:76">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:54"><expr pos:start="49:9" pos:end="49:53"><call pos:start="49:9" pos:end="49:53"><name pos:start="49:9" pos:end="49:14">memset</name><argument_list pos:start="49:15" pos:end="49:53">(<argument pos:start="49:16" pos:end="49:33"><expr pos:start="49:16" pos:end="49:33"><name pos:start="49:16" pos:end="49:33"><name pos:start="49:16" pos:end="49:17">cc</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:24">frame</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">data</name><index pos:start="49:31" pos:end="49:33">[<expr pos:start="49:32" pos:end="49:32"><literal type="number" pos:start="49:32" pos:end="49:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><literal type="number" pos:start="49:36" pos:end="49:36">0</literal></expr></argument>, <argument pos:start="49:39" pos:end="49:52"><expr pos:start="49:39" pos:end="49:52"><name pos:start="49:39" pos:end="49:52">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:11">command</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:39"><name pos:start="55:15" pos:end="55:33">bytestream_get_byte</name><argument_list pos:start="55:34" pos:end="55:39">(<argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><operator pos:start="55:35" pos:end="55:35">&amp;</operator><name pos:start="55:36" pos:end="55:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:8">inst</name>    <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:39"><name pos:start="57:15" pos:end="57:33">bytestream_get_byte</name><argument_list pos:start="57:34" pos:end="57:39">(<argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><operator pos:start="57:35" pos:end="57:35">&amp;</operator><name pos:start="57:36" pos:end="57:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:8">inst</name>    <operator pos:start="59:13" pos:end="59:14">&amp;=</operator> <name pos:start="59:16" pos:end="59:23">CDG_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:13"><expr pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:7">buf</name> <operator pos:start="61:9" pos:end="61:10">+=</operator> <literal type="number" pos:start="61:12" pos:end="61:12">2</literal></expr>;</expr_stmt>  <comment type="line" format="doxygen" pos:start="61:16" pos:end="61:44">/// skipping 2 unneeded bytes</comment>



    <if_stmt pos:start="65:5" pos:end="67:74"><if pos:start="65:5" pos:end="67:74">if <condition pos:start="65:8" pos:end="65:35">(<expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:16">buf_size</name> <operator pos:start="65:18" pos:end="65:18">&gt;</operator> <name pos:start="65:20" pos:end="65:34">CDG_HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:74"><block_content pos:start="67:9" pos:end="67:74">

        <expr_stmt pos:start="67:9" pos:end="67:74"><expr pos:start="67:9" pos:end="67:73"><call pos:start="67:9" pos:end="67:73"><name pos:start="67:9" pos:end="67:29">bytestream_get_buffer</name><argument_list pos:start="67:30" pos:end="67:73">(<argument pos:start="67:31" pos:end="67:34"><expr pos:start="67:31" pos:end="67:34"><operator pos:start="67:31" pos:end="67:31">&amp;</operator><name pos:start="67:32" pos:end="67:34">buf</name></expr></argument>, <argument pos:start="67:37" pos:end="67:44"><expr pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:44">cdg_data</name></expr></argument>, <argument pos:start="67:47" pos:end="67:72"><expr pos:start="67:47" pos:end="67:72"><name pos:start="67:47" pos:end="67:54">buf_size</name> <operator pos:start="67:56" pos:end="67:56">-</operator> <name pos:start="67:58" pos:end="67:72">CDG_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="193:5"><if pos:start="71:5" pos:end="187:5">if <condition pos:start="71:8" pos:end="71:44">(<expr pos:start="71:9" pos:end="71:43"><operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:16">command</name> <operator pos:start="71:18" pos:end="71:18">&amp;</operator> <name pos:start="71:20" pos:end="71:27">CDG_MASK</name><operator pos:start="71:28" pos:end="71:28">)</operator> <operator pos:start="71:30" pos:end="71:31">==</operator> <name pos:start="71:33" pos:end="71:43">CDG_COMMAND</name></expr>)</condition> <block pos:start="71:46" pos:end="187:5">{<block_content pos:start="73:9" pos:end="185:23">

        <switch pos:start="73:9" pos:end="171:9">switch <condition pos:start="73:16" pos:end="73:21">(<expr pos:start="73:17" pos:end="73:20"><name pos:start="73:17" pos:end="73:20">inst</name></expr>)</condition> <block pos:start="73:23" pos:end="171:9">{<block_content pos:start="75:9" pos:end="169:18">

        <case pos:start="75:9" pos:end="75:36">case <expr pos:start="75:14" pos:end="75:35"><name pos:start="75:14" pos:end="75:35">CDG_INST_MEMORY_PRESET</name></expr>:</case>

            <if_stmt pos:start="77:13" pos:end="81:65"><if pos:start="77:13" pos:end="81:65">if <condition pos:start="77:16" pos:end="77:38">(<expr pos:start="77:17" pos:end="77:37"><operator pos:start="77:17" pos:end="77:17">!</operator><operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:29"><name pos:start="77:19" pos:end="77:26">cdg_data</name><index pos:start="77:27" pos:end="77:29">[<expr pos:start="77:28" pos:end="77:28"><literal type="number" pos:start="77:28" pos:end="77:28">1</literal></expr>]</index></name> <operator pos:start="77:31" pos:end="77:31">&amp;</operator> <literal type="number" pos:start="77:33" pos:end="77:36">0x0F</literal><operator pos:start="77:37" pos:end="77:37">)</operator></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="81:65"><block_content pos:start="79:17" pos:end="81:65">

                <expr_stmt pos:start="79:17" pos:end="81:65"><expr pos:start="79:17" pos:end="81:64"><call pos:start="79:17" pos:end="81:64"><name pos:start="79:17" pos:end="79:22">memset</name><argument_list pos:start="79:23" pos:end="81:64">(<argument pos:start="79:24" pos:end="79:41"><expr pos:start="79:24" pos:end="79:41"><name pos:start="79:24" pos:end="79:41"><name pos:start="79:24" pos:end="79:25">cc</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:32">frame</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:38">data</name><index pos:start="79:39" pos:end="79:41">[<expr pos:start="79:40" pos:end="79:40"><literal type="number" pos:start="79:40" pos:end="79:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:44" pos:end="79:61"><expr pos:start="79:44" pos:end="79:61"><name pos:start="79:44" pos:end="79:54"><name pos:start="79:44" pos:end="79:51">cdg_data</name><index pos:start="79:52" pos:end="79:54">[<expr pos:start="79:53" pos:end="79:53"><literal type="number" pos:start="79:53" pos:end="79:53">0</literal></expr>]</index></name> <operator pos:start="79:56" pos:end="79:56">&amp;</operator> <literal type="number" pos:start="79:58" pos:end="79:61">0x0F</literal></expr></argument>,

                       <argument pos:start="81:24" pos:end="81:63"><expr pos:start="81:24" pos:end="81:63"><name pos:start="81:24" pos:end="81:45"><name pos:start="81:24" pos:end="81:25">cc</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:32">frame</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:42">linesize</name><index pos:start="81:43" pos:end="81:45">[<expr pos:start="81:44" pos:end="81:44"><literal type="number" pos:start="81:44" pos:end="81:44">0</literal></expr>]</index></name> <operator pos:start="81:47" pos:end="81:47">*</operator> <name pos:start="81:49" pos:end="81:63">CDG_FULL_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:34">case <expr pos:start="85:14" pos:end="85:33"><name pos:start="85:14" pos:end="85:33">CDG_INST_LOAD_PAL_LO</name></expr>:</case>

        <case pos:start="87:9" pos:end="87:36">case <expr pos:start="87:14" pos:end="87:35"><name pos:start="87:14" pos:end="87:35">CDG_INST_LOAD_PAL_HIGH</name></expr>:</case>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:59">(<expr pos:start="89:17" pos:end="89:58"><name pos:start="89:17" pos:end="89:24">buf_size</name> <operator pos:start="89:26" pos:end="89:26">-</operator> <name pos:start="89:28" pos:end="89:42">CDG_HEADER_SIZE</name> <operator pos:start="89:44" pos:end="89:44">&lt;</operator> <name pos:start="89:46" pos:end="89:58">CDG_DATA_SIZE</name></expr>)</condition> <block pos:start="89:61" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:39">

                <expr_stmt pos:start="91:17" pos:end="91:86"><expr pos:start="91:17" pos:end="91:85"><call pos:start="91:17" pos:end="91:85"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:85">(<argument pos:start="91:24" pos:end="91:28"><expr pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:28">avctx</name></expr></argument>, <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:45" pos:end="91:84"><expr pos:start="91:45" pos:end="91:84"><literal type="string" pos:start="91:45" pos:end="91:84">"buffer too small for loading palette\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:39">return <expr pos:start="93:24" pos:end="93:38"><call pos:start="93:24" pos:end="93:38"><name pos:start="93:24" pos:end="93:30">AVERROR</name><argument_list pos:start="93:31" pos:end="93:38">(<argument pos:start="93:32" pos:end="93:37"><expr pos:start="93:32" pos:end="93:37"><name pos:start="93:32" pos:end="93:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:73"><expr pos:start="99:13" pos:end="99:72"><call pos:start="99:13" pos:end="99:72"><name pos:start="99:13" pos:end="99:28">cdg_load_palette</name><argument_list pos:start="99:29" pos:end="99:72">(<argument pos:start="99:30" pos:end="99:31"><expr pos:start="99:30" pos:end="99:31"><name pos:start="99:30" pos:end="99:31">cc</name></expr></argument>, <argument pos:start="99:34" pos:end="99:41"><expr pos:start="99:34" pos:end="99:41"><name pos:start="99:34" pos:end="99:41">cdg_data</name></expr></argument>, <argument pos:start="99:44" pos:end="99:71"><expr pos:start="99:44" pos:end="99:71"><name pos:start="99:44" pos:end="99:47">inst</name> <operator pos:start="99:49" pos:end="99:50">==</operator> <name pos:start="99:52" pos:end="99:71">CDG_INST_LOAD_PAL_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:36">case <expr pos:start="103:14" pos:end="103:35"><name pos:start="103:14" pos:end="103:35">CDG_INST_BORDER_PRESET</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:44"><expr pos:start="105:13" pos:end="105:43"><call pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:29">cdg_border_preset</name><argument_list pos:start="105:30" pos:end="105:43">(<argument pos:start="105:31" pos:end="105:32"><expr pos:start="105:31" pos:end="105:32"><name pos:start="105:31" pos:end="105:32">cc</name></expr></argument>, <argument pos:start="105:35" pos:end="105:42"><expr pos:start="105:35" pos:end="105:42"><name pos:start="105:35" pos:end="105:42">cdg_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:37">case <expr pos:start="109:14" pos:end="109:36"><name pos:start="109:14" pos:end="109:36">CDG_INST_TILE_BLOCK_XOR</name></expr>:</case>

        <case pos:start="111:9" pos:end="111:33">case <expr pos:start="111:14" pos:end="111:32"><name pos:start="111:14" pos:end="111:32">CDG_INST_TILE_BLOCK</name></expr>:</case>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:59">(<expr pos:start="113:17" pos:end="113:58"><name pos:start="113:17" pos:end="113:24">buf_size</name> <operator pos:start="113:26" pos:end="113:26">-</operator> <name pos:start="113:28" pos:end="113:42">CDG_HEADER_SIZE</name> <operator pos:start="113:44" pos:end="113:44">&lt;</operator> <name pos:start="113:46" pos:end="113:58">CDG_DATA_SIZE</name></expr>)</condition> <block pos:start="113:61" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:39">

                <expr_stmt pos:start="115:17" pos:end="115:83"><expr pos:start="115:17" pos:end="115:82"><call pos:start="115:17" pos:end="115:82"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:82">(<argument pos:start="115:24" pos:end="115:28"><expr pos:start="115:24" pos:end="115:28"><name pos:start="115:24" pos:end="115:28">avctx</name></expr></argument>, <argument pos:start="115:31" pos:end="115:42"><expr pos:start="115:31" pos:end="115:42"><name pos:start="115:31" pos:end="115:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:45" pos:end="115:81"><expr pos:start="115:45" pos:end="115:81"><literal type="string" pos:start="115:45" pos:end="115:81">"buffer too small for drawing tile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:39">return <expr pos:start="117:24" pos:end="117:38"><call pos:start="117:24" pos:end="117:38"><name pos:start="117:24" pos:end="117:30">AVERROR</name><argument_list pos:start="117:31" pos:end="117:38">(<argument pos:start="117:32" pos:end="117:37"><expr pos:start="117:32" pos:end="117:37"><name pos:start="117:32" pos:end="117:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:80"><expr pos:start="123:13" pos:end="123:79"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:79"><name pos:start="123:19" pos:end="123:32">cdg_tile_block</name><argument_list pos:start="123:33" pos:end="123:79">(<argument pos:start="123:34" pos:end="123:35"><expr pos:start="123:34" pos:end="123:35"><name pos:start="123:34" pos:end="123:35">cc</name></expr></argument>, <argument pos:start="123:38" pos:end="123:45"><expr pos:start="123:38" pos:end="123:45"><name pos:start="123:38" pos:end="123:45">cdg_data</name></expr></argument>, <argument pos:start="123:48" pos:end="123:78"><expr pos:start="123:48" pos:end="123:78"><name pos:start="123:48" pos:end="123:51">inst</name> <operator pos:start="123:53" pos:end="123:54">==</operator> <name pos:start="123:56" pos:end="123:78">CDG_INST_TILE_BLOCK_XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:20">(<expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">ret</name></expr>)</condition> <block pos:start="125:22" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:27">

                <expr_stmt pos:start="127:17" pos:end="127:70"><expr pos:start="127:17" pos:end="127:69"><call pos:start="127:17" pos:end="127:69"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="127:69">(<argument pos:start="127:24" pos:end="127:28"><expr pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:28">avctx</name></expr></argument>, <argument pos:start="127:31" pos:end="127:42"><expr pos:start="127:31" pos:end="127:42"><name pos:start="127:31" pos:end="127:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:45" pos:end="127:68"><expr pos:start="127:45" pos:end="127:68"><literal type="string" pos:start="127:45" pos:end="127:68">"tile is out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="129:17" pos:end="129:27">return <expr pos:start="129:24" pos:end="129:26"><name pos:start="129:24" pos:end="129:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:36">case <expr pos:start="135:14" pos:end="135:35"><name pos:start="135:14" pos:end="135:35">CDG_INST_SCROLL_PRESET</name></expr>:</case>

        <case pos:start="137:9" pos:end="137:34">case <expr pos:start="137:14" pos:end="137:33"><name pos:start="137:14" pos:end="137:33">CDG_INST_SCROLL_COPY</name></expr>:</case>

            <if_stmt pos:start="139:13" pos:end="145:13"><if pos:start="139:13" pos:end="145:13">if <condition pos:start="139:16" pos:end="139:69">(<expr pos:start="139:17" pos:end="139:68"><name pos:start="139:17" pos:end="139:24">buf_size</name> <operator pos:start="139:26" pos:end="139:26">-</operator> <name pos:start="139:28" pos:end="139:42">CDG_HEADER_SIZE</name> <operator pos:start="139:44" pos:end="139:44">&lt;</operator> <name pos:start="139:46" pos:end="139:68">CDG_MINIMUM_SCROLL_SIZE</name></expr>)</condition> <block pos:start="139:71" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:39">

                <expr_stmt pos:start="141:17" pos:end="141:80"><expr pos:start="141:17" pos:end="141:79"><call pos:start="141:17" pos:end="141:79"><name pos:start="141:17" pos:end="141:22">av_log</name><argument_list pos:start="141:23" pos:end="141:79">(<argument pos:start="141:24" pos:end="141:28"><expr pos:start="141:24" pos:end="141:28"><name pos:start="141:24" pos:end="141:28">avctx</name></expr></argument>, <argument pos:start="141:31" pos:end="141:42"><expr pos:start="141:31" pos:end="141:42"><name pos:start="141:31" pos:end="141:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:45" pos:end="141:78"><expr pos:start="141:45" pos:end="141:78"><literal type="string" pos:start="141:45" pos:end="141:78">"buffer too small for scrolling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="143:17" pos:end="143:39">return <expr pos:start="143:24" pos:end="143:38"><call pos:start="143:24" pos:end="143:38"><name pos:start="143:24" pos:end="143:30">AVERROR</name><argument_list pos:start="143:31" pos:end="143:38">(<argument pos:start="143:32" pos:end="143:37"><expr pos:start="143:32" pos:end="143:37"><name pos:start="143:32" pos:end="143:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="149:13" pos:end="151:27"><if pos:start="149:13" pos:end="151:27">if <condition pos:start="149:16" pos:end="149:80">(<expr pos:start="149:17" pos:end="149:79"><operator pos:start="149:17" pos:end="149:17">(</operator><name pos:start="149:18" pos:end="149:20">ret</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <call pos:start="149:24" pos:end="149:74"><name pos:start="149:24" pos:end="149:36">ff_get_buffer</name><argument_list pos:start="149:37" pos:end="149:74">(<argument pos:start="149:38" pos:end="149:42"><expr pos:start="149:38" pos:end="149:42"><name pos:start="149:38" pos:end="149:42">avctx</name></expr></argument>, <argument pos:start="149:45" pos:end="149:49"><expr pos:start="149:45" pos:end="149:49"><name pos:start="149:45" pos:end="149:49">frame</name></expr></argument>, <argument pos:start="149:52" pos:end="149:73"><expr pos:start="149:52" pos:end="149:73"><name pos:start="149:52" pos:end="149:73">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="149:75" pos:end="149:75">)</operator> <operator pos:start="149:77" pos:end="149:77">&lt;</operator> <literal type="number" pos:start="149:79" pos:end="149:79">0</literal></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:27"><block_content pos:start="151:17" pos:end="151:27">

                <return pos:start="151:17" pos:end="151:27">return <expr pos:start="151:24" pos:end="151:26"><name pos:start="151:24" pos:end="151:26">ret</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:74"><expr pos:start="155:13" pos:end="155:73"><call pos:start="155:13" pos:end="155:73"><name pos:start="155:13" pos:end="155:22">cdg_scroll</name><argument_list pos:start="155:23" pos:end="155:73">(<argument pos:start="155:24" pos:end="155:25"><expr pos:start="155:24" pos:end="155:25"><name pos:start="155:24" pos:end="155:25">cc</name></expr></argument>, <argument pos:start="155:28" pos:end="155:35"><expr pos:start="155:28" pos:end="155:35"><name pos:start="155:28" pos:end="155:35">cdg_data</name></expr></argument>, <argument pos:start="155:38" pos:end="155:42"><expr pos:start="155:38" pos:end="155:42"><name pos:start="155:38" pos:end="155:42">frame</name></expr></argument>, <argument pos:start="155:45" pos:end="155:72"><expr pos:start="155:45" pos:end="155:72"><name pos:start="155:45" pos:end="155:48">inst</name> <operator pos:start="155:50" pos:end="155:51">==</operator> <name pos:start="155:53" pos:end="155:72">CDG_INST_SCROLL_COPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:38"><expr pos:start="157:13" pos:end="157:37"><call pos:start="157:13" pos:end="157:37"><name pos:start="157:13" pos:end="157:26">av_frame_unref</name><argument_list pos:start="157:27" pos:end="157:37">(<argument pos:start="157:28" pos:end="157:36"><expr pos:start="157:28" pos:end="157:36"><name pos:start="157:28" pos:end="157:36"><name pos:start="157:28" pos:end="157:29">cc</name><operator pos:start="157:30" pos:end="157:31">-&gt;</operator><name pos:start="157:32" pos:end="157:36">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:49"><expr pos:start="159:13" pos:end="159:48"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:48"><name pos:start="159:19" pos:end="159:30">av_frame_ref</name><argument_list pos:start="159:31" pos:end="159:48">(<argument pos:start="159:32" pos:end="159:40"><expr pos:start="159:32" pos:end="159:40"><name pos:start="159:32" pos:end="159:40"><name pos:start="159:32" pos:end="159:33">cc</name><operator pos:start="159:34" pos:end="159:35">-&gt;</operator><name pos:start="159:36" pos:end="159:40">frame</name></name></expr></argument>, <argument pos:start="159:43" pos:end="159:47"><expr pos:start="159:43" pos:end="159:47"><name pos:start="159:43" pos:end="159:47">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="163:27"><if pos:start="161:13" pos:end="163:27">if <condition pos:start="161:16" pos:end="161:24">(<expr pos:start="161:17" pos:end="161:23"><name pos:start="161:17" pos:end="161:19">ret</name> <operator pos:start="161:21" pos:end="161:21">&lt;</operator> <literal type="number" pos:start="161:23" pos:end="161:23">0</literal></expr>)</condition><block type="pseudo" pos:start="163:17" pos:end="163:27"><block_content pos:start="163:17" pos:end="163:27">

                <return pos:start="163:17" pos:end="163:27">return <expr pos:start="163:24" pos:end="163:26"><name pos:start="163:24" pos:end="163:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <default pos:start="167:9" pos:end="167:16">default:</default>

            <break pos:start="169:13" pos:end="169:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="175:9" pos:end="183:9"><if pos:start="175:9" pos:end="183:9">if <condition pos:start="175:12" pos:end="175:28">(<expr pos:start="175:13" pos:end="175:27"><operator pos:start="175:13" pos:end="175:13">!</operator><name pos:start="175:14" pos:end="175:27"><name pos:start="175:14" pos:end="175:18">frame</name><operator pos:start="175:19" pos:end="175:20">-&gt;</operator><name pos:start="175:21" pos:end="175:24">data</name><index pos:start="175:25" pos:end="175:27">[<expr pos:start="175:26" pos:end="175:26"><literal type="number" pos:start="175:26" pos:end="175:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="175:30" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:27">

            <expr_stmt pos:start="177:13" pos:end="177:49"><expr pos:start="177:13" pos:end="177:48"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:48"><name pos:start="177:19" pos:end="177:30">av_frame_ref</name><argument_list pos:start="177:31" pos:end="177:48">(<argument pos:start="177:32" pos:end="177:36"><expr pos:start="177:32" pos:end="177:36"><name pos:start="177:32" pos:end="177:36">frame</name></expr></argument>, <argument pos:start="177:39" pos:end="177:47"><expr pos:start="177:39" pos:end="177:47"><name pos:start="177:39" pos:end="177:47"><name pos:start="177:39" pos:end="177:40">cc</name><operator pos:start="177:41" pos:end="177:42">-&gt;</operator><name pos:start="177:43" pos:end="177:47">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="181:27"><if pos:start="179:13" pos:end="181:27">if <condition pos:start="179:16" pos:end="179:24">(<expr pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:19">ret</name> <operator pos:start="179:21" pos:end="179:21">&lt;</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:27"><block_content pos:start="181:17" pos:end="181:27">

                <return pos:start="181:17" pos:end="181:27">return <expr pos:start="181:24" pos:end="181:26"><name pos:start="181:24" pos:end="181:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:23"><expr pos:start="185:9" pos:end="185:22"><operator pos:start="185:9" pos:end="185:9">*</operator><name pos:start="185:10" pos:end="185:18">got_frame</name> <operator pos:start="185:20" pos:end="185:20">=</operator> <literal type="number" pos:start="185:22" pos:end="185:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="187:7" pos:end="193:5">else <block pos:start="187:12" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:23">

        <expr_stmt pos:start="189:9" pos:end="189:23"><expr pos:start="189:9" pos:end="189:22"><operator pos:start="189:9" pos:end="189:9">*</operator><name pos:start="189:10" pos:end="189:18">got_frame</name> <operator pos:start="189:20" pos:end="189:20">=</operator> <literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:23"><expr pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:16">buf_size</name>   <operator pos:start="191:20" pos:end="191:20">=</operator> <literal type="number" pos:start="191:22" pos:end="191:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="197:5" pos:end="197:20">return <expr pos:start="197:12" pos:end="197:19"><name pos:start="197:12" pos:end="197:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
