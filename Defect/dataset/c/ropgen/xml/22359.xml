<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22359.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">pl011_write</name><parameter_list pos:start="1:24" pos:end="3:54">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:44">hwaddr</name></type> <name pos:start="1:46" pos:end="1:51">offset</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:38">value</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:53"><decl pos:start="3:41" pos:end="3:53"><type pos:start="3:41" pos:end="3:53"><name pos:start="3:41" pos:end="3:48">unsigned</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:5">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PL011State</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:40">= <expr pos:start="7:21" pos:end="7:40"><operator pos:start="7:21" pos:end="7:21">(</operator><name pos:start="7:22" pos:end="7:31">PL011State</name> <operator pos:start="7:33" pos:end="7:33">*</operator><operator pos:start="7:34" pos:end="7:34">)</operator><name pos:start="7:35" pos:end="7:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:20">ch</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="129:5">switch <condition pos:start="13:12" pos:end="13:24">(<expr pos:start="13:13" pos:end="13:23"><name pos:start="13:13" pos:end="13:18">offset</name> <operator pos:start="13:20" pos:end="13:21">&gt;&gt;</operator> <literal type="number" pos:start="13:23" pos:end="13:23">2</literal></expr>)</condition> <block pos:start="13:26" pos:end="129:5">{<block_content pos:start="15:5" pos:end="127:67">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">0</literal></expr>:</case> <comment type="block" pos:start="15:13" pos:end="15:24">/* UARTDR */</comment>

        <comment type="block" pos:start="17:9" pos:end="17:51">/* ??? Check if transmitter is enabled.  */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:19"><expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:10">ch</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:18">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:46"><if pos:start="21:9" pos:end="23:46">if <condition pos:start="21:12" pos:end="21:19">(<expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:18">chr</name></name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:46"><block_content pos:start="23:13" pos:end="23:46">

            <expr_stmt pos:start="23:13" pos:end="23:46"><expr pos:start="23:13" pos:end="23:45"><call pos:start="23:13" pos:end="23:45"><name pos:start="23:13" pos:end="23:29">qemu_chr_fe_write</name><argument_list pos:start="23:30" pos:end="23:45">(<argument pos:start="23:31" pos:end="23:36"><expr pos:start="23:31" pos:end="23:36"><name pos:start="23:31" pos:end="23:36"><name pos:start="23:31" pos:end="23:31">s</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:36">chr</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:41"><expr pos:start="23:39" pos:end="23:41"><operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:41">ch</name></expr></argument>, <argument pos:start="23:44" pos:end="23:44"><expr pos:start="23:44" pos:end="23:44"><literal type="number" pos:start="23:44" pos:end="23:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:37"><expr pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:20">int_level</name></name> <operator pos:start="25:22" pos:end="25:23">|=</operator> <name pos:start="25:25" pos:end="25:36">PL011_INT_TX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:24"><expr pos:start="27:9" pos:end="27:23"><call pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:20">pl011_update</name><argument_list pos:start="27:21" pos:end="27:23">(<argument pos:start="27:22" pos:end="27:22"><expr pos:start="27:22" pos:end="27:22"><name pos:start="27:22" pos:end="27:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">1</literal></expr>:</case> <comment type="block" pos:start="31:13" pos:end="31:24">/* UARTCR */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:13">cr</name></name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:21">value</name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:11">case <expr pos:start="37:10" pos:end="37:10"><literal type="number" pos:start="37:10" pos:end="37:10">6</literal></expr>:</case> <comment type="block" pos:start="37:13" pos:end="37:24">/* UARTFR */</comment>

        <comment type="block" pos:start="39:9" pos:end="39:51">/* Writes to Flag register are ignored.  */</comment>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">8</literal></expr>:</case> <comment type="block" pos:start="43:13" pos:end="43:30">/* UARTUARTILPR */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:15">ilpr</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:23">value</name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:11">case <expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">9</literal></expr>:</case> <comment type="block" pos:start="49:13" pos:end="49:26">/* UARTIBRD */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:15">ibrd</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:23">value</name></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:12">case <expr pos:start="55:10" pos:end="55:11"><literal type="number" pos:start="55:10" pos:end="55:11">10</literal></expr>:</case> <comment type="block" pos:start="55:14" pos:end="55:27">/* UARTFBRD */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:15">fbrd</name></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:23">value</name></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:12">case <expr pos:start="61:10" pos:end="61:11"><literal type="number" pos:start="61:10" pos:end="61:11">11</literal></expr>:</case> <comment type="block" pos:start="61:14" pos:end="61:28">/* UARTLCR_H */</comment>

        <comment type="block" pos:start="63:9" pos:end="63:60">/* Reset the FIFO state on FIFO enable or disable */</comment>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:36">(<expr pos:start="65:13" pos:end="65:35"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:19"><name pos:start="65:14" pos:end="65:14">s</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:19">lcr</name></name> <operator pos:start="65:21" pos:end="65:21">^</operator> <name pos:start="65:23" pos:end="65:27">value</name><operator pos:start="65:28" pos:end="65:28">)</operator> <operator pos:start="65:30" pos:end="65:30">&amp;</operator> <literal type="number" pos:start="65:32" pos:end="65:35">0x10</literal></expr>)</condition> <block pos:start="65:38" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:28">

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:25">read_count</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <literal type="number" pos:start="67:29" pos:end="67:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:28"><expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">read_pos</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:14">lcr</name></name> <operator pos:start="73:16" pos:end="73:16">=</operator> <name pos:start="73:18" pos:end="73:22">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:34"><expr pos:start="75:9" pos:end="75:33"><call pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:30">pl011_set_read_trigger</name><argument_list pos:start="75:31" pos:end="75:33">(<argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:12">case <expr pos:start="79:10" pos:end="79:11"><literal type="number" pos:start="79:10" pos:end="79:11">12</literal></expr>:</case> <comment type="block" pos:start="79:14" pos:end="79:25">/* UARTCR */</comment>

        <comment type="block" pos:start="81:9" pos:end="81:66">/* ??? Need to implement the enable and loopback bits.  */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:13"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:13">cr</name></name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:21">value</name></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:12">case <expr pos:start="87:10" pos:end="87:11"><literal type="number" pos:start="87:10" pos:end="87:11">13</literal></expr>:</case> <comment type="block" pos:start="87:14" pos:end="87:26">/* UARTIFS */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:14">ifl</name></name> <operator pos:start="89:16" pos:end="89:16">=</operator> <name pos:start="89:18" pos:end="89:22">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:34"><expr pos:start="91:9" pos:end="91:33"><call pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:30">pl011_set_read_trigger</name><argument_list pos:start="91:31" pos:end="91:33">(<argument pos:start="91:32" pos:end="91:32"><expr pos:start="91:32" pos:end="91:32"><name pos:start="91:32" pos:end="91:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:12">case <expr pos:start="95:10" pos:end="95:11"><literal type="number" pos:start="95:10" pos:end="95:11">14</literal></expr>:</case> <comment type="block" pos:start="95:14" pos:end="95:27">/* UARTIMSC */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:22">int_enabled</name></name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:30">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><call pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:20">pl011_update</name><argument_list pos:start="99:21" pos:end="99:23">(<argument pos:start="99:22" pos:end="99:22"><expr pos:start="99:22" pos:end="99:22"><name pos:start="99:22" pos:end="99:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:12">case <expr pos:start="103:10" pos:end="103:11"><literal type="number" pos:start="103:10" pos:end="103:11">17</literal></expr>:</case> <comment type="block" pos:start="103:14" pos:end="103:26">/* UARTICR */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:31"><expr pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:20">int_level</name></name> <operator pos:start="105:22" pos:end="105:23">&amp;=</operator> <operator pos:start="105:25" pos:end="105:25">~</operator><name pos:start="105:26" pos:end="105:30">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:24"><expr pos:start="107:9" pos:end="107:23"><call pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:20">pl011_update</name><argument_list pos:start="107:21" pos:end="107:23">(<argument pos:start="107:22" pos:end="107:22"><expr pos:start="107:22" pos:end="107:22"><name pos:start="107:22" pos:end="107:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:12">case <expr pos:start="111:10" pos:end="111:11"><literal type="number" pos:start="111:10" pos:end="111:11">18</literal></expr>:</case> <comment type="block" pos:start="111:14" pos:end="111:28">/* UARTDMACR */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:25"><expr pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:16">dmacr</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:24">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:22">(<expr pos:start="115:13" pos:end="115:21"><name pos:start="115:13" pos:end="115:17">value</name> <operator pos:start="115:19" pos:end="115:19">&amp;</operator> <literal type="number" pos:start="115:21" pos:end="115:21">3</literal></expr>)</condition> <block pos:start="115:24" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:69">

            <expr_stmt pos:start="117:13" pos:end="117:69"><expr pos:start="117:13" pos:end="117:68"><call pos:start="117:13" pos:end="117:68"><name pos:start="117:13" pos:end="117:25">qemu_log_mask</name><argument_list pos:start="117:26" pos:end="117:68">(<argument pos:start="117:27" pos:end="117:35"><expr pos:start="117:27" pos:end="117:35"><name pos:start="117:27" pos:end="117:35">LOG_UNIMP</name></expr></argument>, <argument pos:start="117:38" pos:end="117:67"><expr pos:start="117:38" pos:end="117:67"><literal type="string" pos:start="117:38" pos:end="117:67">"pl011: DMA not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <default pos:start="123:5" pos:end="123:12">default:</default>

        <expr_stmt pos:start="125:9" pos:end="127:67"><expr pos:start="125:9" pos:end="127:66"><call pos:start="125:9" pos:end="127:66"><name pos:start="125:9" pos:end="125:21">qemu_log_mask</name><argument_list pos:start="125:22" pos:end="127:66">(<argument pos:start="125:23" pos:end="125:37"><expr pos:start="125:23" pos:end="125:37"><name pos:start="125:23" pos:end="125:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="127:23" pos:end="127:52"><expr pos:start="127:23" pos:end="127:52"><literal type="string" pos:start="127:23" pos:end="127:52">"pl011_write: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="127:55" pos:end="127:65"><expr pos:start="127:55" pos:end="127:65"><operator pos:start="127:55" pos:end="127:55">(</operator><name pos:start="127:56" pos:end="127:58">int</name><operator pos:start="127:59" pos:end="127:59">)</operator><name pos:start="127:60" pos:end="127:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
