<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2480.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">patch_instruction</name><parameter_list pos:start="1:30" pos:end="1:77">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:43">VAPICROMState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:54">X86CPU</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">cpu</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:73">target_ulong</name></type> <name pos:start="1:75" pos:end="1:76">ip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">VAPICHandlers</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:27">handlers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:18">opcode</name><index pos:start="11:19" pos:end="11:21">[<expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">imm32</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:27">current_pc</name> <init pos:start="15:29" pos:end="15:31">= <expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:32">current_cs_base</name> <init pos:start="17:34" pos:end="17:36">= <expr pos:start="17:36" pos:end="17:36"><literal type="number" pos:start="17:36" pos:end="17:36">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:26">current_flags</name> <init pos:start="19:28" pos:end="19:30">= <expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:16">smp_cpus</name> <operator pos:start="23:18" pos:end="23:19">==</operator> <literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>)</condition> <block pos:start="23:24" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:36">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:16">handlers</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:32">rom_state</name><operator pos:start="25:33" pos:end="25:33">.</operator><name pos:start="25:34" pos:end="25:35">up</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="31:5">else <block pos:start="27:12" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:36">

        <expr_stmt pos:start="29:9" pos:end="29:36"><expr pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:16">handlers</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:35"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:32">rom_state</name><operator pos:start="29:33" pos:end="29:33">.</operator><name pos:start="29:34" pos:end="29:35">mp</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:20">kvm_enabled</name><argument_list pos:start="35:21" pos:end="35:22">()</argument_list></call></expr>)</condition> <block pos:start="35:25" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:45">

        <expr_stmt pos:start="37:9" pos:end="39:45"><expr pos:start="37:9" pos:end="39:44"><call pos:start="37:9" pos:end="39:44"><name pos:start="37:9" pos:end="37:28">cpu_get_tb_cpu_state</name><argument_list pos:start="37:29" pos:end="39:44">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">env</name></expr></argument>, <argument pos:start="37:35" pos:end="37:45"><expr pos:start="37:35" pos:end="37:45"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:45">current_pc</name></expr></argument>, <argument pos:start="37:48" pos:end="37:63"><expr pos:start="37:48" pos:end="37:63"><operator pos:start="37:48" pos:end="37:48">&amp;</operator><name pos:start="37:49" pos:end="37:63">current_cs_base</name></expr></argument>,

                             <argument pos:start="39:30" pos:end="39:43"><expr pos:start="39:30" pos:end="39:43"><operator pos:start="39:30" pos:end="39:30">&amp;</operator><name pos:start="39:31" pos:end="39:43">current_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><call pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:19">pause_all_vcpus</name><argument_list pos:start="45:20" pos:end="45:21">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:59"><expr pos:start="49:5" pos:end="49:58"><call pos:start="49:5" pos:end="49:58"><name pos:start="49:5" pos:end="49:23">cpu_memory_rw_debug</name><argument_list pos:start="49:24" pos:end="49:58">(<argument pos:start="49:25" pos:end="49:26"><expr pos:start="49:25" pos:end="49:26"><name pos:start="49:25" pos:end="49:26">cs</name></expr></argument>, <argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">ip</name></expr></argument>, <argument pos:start="49:33" pos:end="49:38"><expr pos:start="49:33" pos:end="49:38"><name pos:start="49:33" pos:end="49:38">opcode</name></expr></argument>, <argument pos:start="49:41" pos:end="49:54"><expr pos:start="49:41" pos:end="49:54"><sizeof pos:start="49:41" pos:end="49:54">sizeof<argument_list pos:start="49:47" pos:end="49:54">(<argument pos:start="49:48" pos:end="49:53"><expr pos:start="49:48" pos:end="49:53"><name pos:start="49:48" pos:end="49:53">opcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:57" pos:end="49:57"><expr pos:start="49:57" pos:end="49:57"><literal type="number" pos:start="49:57" pos:end="49:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="53:5" pos:end="107:5">switch <condition pos:start="53:12" pos:end="53:22">(<expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:18">opcode</name><index pos:start="53:19" pos:end="53:21">[<expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="53:24" pos:end="107:5">{<block_content pos:start="55:5" pos:end="105:16">

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="number" pos:start="55:10" pos:end="55:13">0x89</literal></expr>:</case> <comment type="block" pos:start="55:16" pos:end="55:37">/* mov r32 to r/m32 */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:57"><expr pos:start="57:9" pos:end="57:56"><call pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:18">patch_byte</name><argument_list pos:start="57:19" pos:end="57:56">(<argument pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">cpu</name></expr></argument>, <argument pos:start="57:25" pos:end="57:26"><expr pos:start="57:25" pos:end="57:26"><name pos:start="57:25" pos:end="57:26">ip</name></expr></argument>, <argument pos:start="57:29" pos:end="57:55"><expr pos:start="57:29" pos:end="57:55"><literal type="number" pos:start="57:29" pos:end="57:34">0x50</literal> <operator pos:start="57:34" pos:end="57:34">+</operator> <call pos:start="57:36" pos:end="57:55"><name pos:start="57:36" pos:end="57:44">modrm_reg</name><argument_list pos:start="57:45" pos:end="57:55">(<argument pos:start="57:46" pos:end="57:54"><expr pos:start="57:46" pos:end="57:54"><name pos:start="57:46" pos:end="57:54"><name pos:start="57:46" pos:end="57:51">opcode</name><index pos:start="57:52" pos:end="57:54">[<expr pos:start="57:53" pos:end="57:53"><literal type="number" pos:start="57:53" pos:end="57:53">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="57:60" pos:end="57:73">/* push reg */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><call pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:18">patch_call</name><argument_list pos:start="59:19" pos:end="59:53">(<argument pos:start="59:20" pos:end="59:20"><expr pos:start="59:20" pos:end="59:20"><name pos:start="59:20" pos:end="59:20">s</name></expr></argument>, <argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">cpu</name></expr></argument>, <argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:29">ip</name> <operator pos:start="59:31" pos:end="59:31">+</operator> <literal type="number" pos:start="59:33" pos:end="59:33">1</literal></expr></argument>, <argument pos:start="59:36" pos:end="59:52"><expr pos:start="59:36" pos:end="59:52"><name pos:start="59:36" pos:end="59:52"><name pos:start="59:36" pos:end="59:43">handlers</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:52">set_tpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:14">case <expr pos:start="63:10" pos:end="63:13"><literal type="number" pos:start="63:10" pos:end="63:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="63:16" pos:end="63:37">/* mov r/m32 to r32 */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><call pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:18">patch_byte</name><argument_list pos:start="65:19" pos:end="65:33">(<argument pos:start="65:20" pos:end="65:22"><expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">cpu</name></expr></argument>, <argument pos:start="65:25" pos:end="65:26"><expr pos:start="65:25" pos:end="65:26"><name pos:start="65:25" pos:end="65:26">ip</name></expr></argument>, <argument pos:start="65:29" pos:end="65:32"><expr pos:start="65:29" pos:end="65:32"><literal type="number" pos:start="65:29" pos:end="65:32">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:76"><expr pos:start="67:9" pos:end="67:75"><call pos:start="67:9" pos:end="67:75"><name pos:start="67:9" pos:end="67:18">patch_call</name><argument_list pos:start="67:19" pos:end="67:75">(<argument pos:start="67:20" pos:end="67:20"><expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">s</name></expr></argument>, <argument pos:start="67:23" pos:end="67:25"><expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:25">cpu</name></expr></argument>, <argument pos:start="67:28" pos:end="67:33"><expr pos:start="67:28" pos:end="67:33"><name pos:start="67:28" pos:end="67:29">ip</name> <operator pos:start="67:31" pos:end="67:31">+</operator> <literal type="number" pos:start="67:33" pos:end="67:33">1</literal></expr></argument>, <argument pos:start="67:36" pos:end="67:74"><expr pos:start="67:36" pos:end="67:74"><name pos:start="67:36" pos:end="67:74"><name pos:start="67:36" pos:end="67:43">handlers</name><operator pos:start="67:44" pos:end="67:45">-&gt;</operator><name pos:start="67:46" pos:end="67:52">get_tpr</name><index pos:start="67:53" pos:end="67:74">[<expr pos:start="67:54" pos:end="67:73"><call pos:start="67:54" pos:end="67:73"><name pos:start="67:54" pos:end="67:62">modrm_reg</name><argument_list pos:start="67:63" pos:end="67:73">(<argument pos:start="67:64" pos:end="67:72"><expr pos:start="67:64" pos:end="67:72"><name pos:start="67:64" pos:end="67:72"><name pos:start="67:64" pos:end="67:69">opcode</name><index pos:start="67:70" pos:end="67:72">[<expr pos:start="67:71" pos:end="67:71"><literal type="number" pos:start="67:71" pos:end="67:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0xa1</literal></expr>:</case> <comment type="block" pos:start="71:16" pos:end="71:35">/* mov abs to eax */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:53"><expr pos:start="73:9" pos:end="73:52"><call pos:start="73:9" pos:end="73:52"><name pos:start="73:9" pos:end="73:18">patch_call</name><argument_list pos:start="73:19" pos:end="73:52">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">s</name></expr></argument>, <argument pos:start="73:23" pos:end="73:25"><expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:25">cpu</name></expr></argument>, <argument pos:start="73:28" pos:end="73:29"><expr pos:start="73:28" pos:end="73:29"><name pos:start="73:28" pos:end="73:29">ip</name></expr></argument>, <argument pos:start="73:32" pos:end="73:51"><expr pos:start="73:32" pos:end="73:51"><name pos:start="73:32" pos:end="73:51"><name pos:start="73:32" pos:end="73:39">handlers</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:48">get_tpr</name><index pos:start="73:49" pos:end="73:51">[<expr pos:start="73:50" pos:end="73:50"><literal type="number" pos:start="73:50" pos:end="73:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0xa3</literal></expr>:</case> <comment type="block" pos:start="77:16" pos:end="77:35">/* mov eax to abs */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:54"><expr pos:start="79:9" pos:end="79:53"><call pos:start="79:9" pos:end="79:53"><name pos:start="79:9" pos:end="79:18">patch_call</name><argument_list pos:start="79:19" pos:end="79:53">(<argument pos:start="79:20" pos:end="79:20"><expr pos:start="79:20" pos:end="79:20"><name pos:start="79:20" pos:end="79:20">s</name></expr></argument>, <argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">cpu</name></expr></argument>, <argument pos:start="79:28" pos:end="79:29"><expr pos:start="79:28" pos:end="79:29"><name pos:start="79:28" pos:end="79:29">ip</name></expr></argument>, <argument pos:start="79:32" pos:end="79:52"><expr pos:start="79:32" pos:end="79:52"><name pos:start="79:32" pos:end="79:52"><name pos:start="79:32" pos:end="79:39">handlers</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:52">set_tpr_eax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="83:16" pos:end="83:44">/* mov imm32, r/m32 (c7/0) */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><call pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:18">patch_byte</name><argument_list pos:start="85:19" pos:end="85:33">(<argument pos:start="85:20" pos:end="85:22"><expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">cpu</name></expr></argument>, <argument pos:start="85:25" pos:end="85:26"><expr pos:start="85:25" pos:end="85:26"><name pos:start="85:25" pos:end="85:26">ip</name></expr></argument>, <argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><literal type="number" pos:start="85:29" pos:end="85:32">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="85:37" pos:end="85:52">/* push imm32 */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:74"><expr pos:start="87:9" pos:end="87:73"><call pos:start="87:9" pos:end="87:73"><name pos:start="87:9" pos:end="87:27">cpu_memory_rw_debug</name><argument_list pos:start="87:28" pos:end="87:73">(<argument pos:start="87:29" pos:end="87:30"><expr pos:start="87:29" pos:end="87:30"><name pos:start="87:29" pos:end="87:30">cs</name></expr></argument>, <argument pos:start="87:33" pos:end="87:38"><expr pos:start="87:33" pos:end="87:38"><name pos:start="87:33" pos:end="87:34">ip</name> <operator pos:start="87:36" pos:end="87:36">+</operator> <literal type="number" pos:start="87:38" pos:end="87:38">6</literal></expr></argument>, <argument pos:start="87:41" pos:end="87:54"><expr pos:start="87:41" pos:end="87:54"><operator pos:start="87:41" pos:end="87:41">(</operator><name pos:start="87:42" pos:end="87:45">void</name> <operator pos:start="87:47" pos:end="87:47">*</operator><operator pos:start="87:48" pos:end="87:48">)</operator><operator pos:start="87:49" pos:end="87:49">&amp;</operator><name pos:start="87:50" pos:end="87:54">imm32</name></expr></argument>, <argument pos:start="87:57" pos:end="87:69"><expr pos:start="87:57" pos:end="87:69"><sizeof pos:start="87:57" pos:end="87:69">sizeof<argument_list pos:start="87:63" pos:end="87:69">(<argument pos:start="87:64" pos:end="87:68"><expr pos:start="87:64" pos:end="87:68"><name pos:start="87:64" pos:end="87:68">imm32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="87:72" pos:end="87:72"><expr pos:start="87:72" pos:end="87:72"><literal type="number" pos:start="87:72" pos:end="87:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:74"><expr pos:start="89:9" pos:end="89:73"><call pos:start="89:9" pos:end="89:73"><name pos:start="89:9" pos:end="89:27">cpu_memory_rw_debug</name><argument_list pos:start="89:28" pos:end="89:73">(<argument pos:start="89:29" pos:end="89:30"><expr pos:start="89:29" pos:end="89:30"><name pos:start="89:29" pos:end="89:30">cs</name></expr></argument>, <argument pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:34">ip</name> <operator pos:start="89:36" pos:end="89:36">+</operator> <literal type="number" pos:start="89:38" pos:end="89:38">1</literal></expr></argument>, <argument pos:start="89:41" pos:end="89:54"><expr pos:start="89:41" pos:end="89:54"><operator pos:start="89:41" pos:end="89:41">(</operator><name pos:start="89:42" pos:end="89:45">void</name> <operator pos:start="89:47" pos:end="89:47">*</operator><operator pos:start="89:48" pos:end="89:48">)</operator><operator pos:start="89:49" pos:end="89:49">&amp;</operator><name pos:start="89:50" pos:end="89:54">imm32</name></expr></argument>, <argument pos:start="89:57" pos:end="89:69"><expr pos:start="89:57" pos:end="89:69"><sizeof pos:start="89:57" pos:end="89:69">sizeof<argument_list pos:start="89:63" pos:end="89:69">(<argument pos:start="89:64" pos:end="89:68"><expr pos:start="89:64" pos:end="89:68"><name pos:start="89:64" pos:end="89:68">imm32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="89:72" pos:end="89:72"><expr pos:start="89:72" pos:end="89:72"><literal type="number" pos:start="89:72" pos:end="89:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:54"><expr pos:start="91:9" pos:end="91:53"><call pos:start="91:9" pos:end="91:53"><name pos:start="91:9" pos:end="91:18">patch_call</name><argument_list pos:start="91:19" pos:end="91:53">(<argument pos:start="91:20" pos:end="91:20"><expr pos:start="91:20" pos:end="91:20"><name pos:start="91:20" pos:end="91:20">s</name></expr></argument>, <argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">cpu</name></expr></argument>, <argument pos:start="91:28" pos:end="91:33"><expr pos:start="91:28" pos:end="91:33"><name pos:start="91:28" pos:end="91:29">ip</name> <operator pos:start="91:31" pos:end="91:31">+</operator> <literal type="number" pos:start="91:33" pos:end="91:33">5</literal></expr></argument>, <argument pos:start="91:36" pos:end="91:52"><expr pos:start="91:36" pos:end="91:52"><name pos:start="91:36" pos:end="91:52"><name pos:start="91:36" pos:end="91:43">handlers</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:52">set_tpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0xff</literal></expr>:</case> <comment type="block" pos:start="95:16" pos:end="95:31">/* push r/m32 */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><call pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:18">patch_byte</name><argument_list pos:start="97:19" pos:end="97:33">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">cpu</name></expr></argument>, <argument pos:start="97:25" pos:end="97:26"><expr pos:start="97:25" pos:end="97:26"><name pos:start="97:25" pos:end="97:26">ip</name></expr></argument>, <argument pos:start="97:29" pos:end="97:32"><expr pos:start="97:29" pos:end="97:32"><literal type="number" pos:start="97:29" pos:end="97:32">0x50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:36" pos:end="97:49">/* push eax */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:60"><expr pos:start="99:9" pos:end="99:59"><call pos:start="99:9" pos:end="99:59"><name pos:start="99:9" pos:end="99:18">patch_call</name><argument_list pos:start="99:19" pos:end="99:59">(<argument pos:start="99:20" pos:end="99:20"><expr pos:start="99:20" pos:end="99:20"><name pos:start="99:20" pos:end="99:20">s</name></expr></argument>, <argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">cpu</name></expr></argument>, <argument pos:start="99:28" pos:end="99:33"><expr pos:start="99:28" pos:end="99:33"><name pos:start="99:28" pos:end="99:29">ip</name> <operator pos:start="99:31" pos:end="99:31">+</operator> <literal type="number" pos:start="99:33" pos:end="99:33">1</literal></expr></argument>, <argument pos:start="99:36" pos:end="99:58"><expr pos:start="99:36" pos:end="99:58"><name pos:start="99:36" pos:end="99:58"><name pos:start="99:36" pos:end="99:43">handlers</name><operator pos:start="99:44" pos:end="99:45">-&gt;</operator><name pos:start="99:46" pos:end="99:58">get_tpr_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <default pos:start="103:5" pos:end="103:12">default:</default>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><call pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:13">abort</name><argument_list pos:start="105:14" pos:end="105:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="111:5" pos:end="111:23"><expr pos:start="111:5" pos:end="111:22"><call pos:start="111:5" pos:end="111:22"><name pos:start="111:5" pos:end="111:20">resume_all_vcpus</name><argument_list pos:start="111:21" pos:end="111:22">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:23">(<expr pos:start="115:9" pos:end="115:22"><operator pos:start="115:9" pos:end="115:9">!</operator><call pos:start="115:10" pos:end="115:22"><name pos:start="115:10" pos:end="115:20">kvm_enabled</name><argument_list pos:start="115:21" pos:end="115:22">()</argument_list></call></expr>)</condition> <block pos:start="115:25" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:41">

        <expr_stmt pos:start="117:9" pos:end="117:71"><expr pos:start="117:9" pos:end="117:70"><call pos:start="117:9" pos:end="117:70"><name pos:start="117:9" pos:end="117:19">tb_gen_code</name><argument_list pos:start="117:20" pos:end="117:70">(<argument pos:start="117:21" pos:end="117:22"><expr pos:start="117:21" pos:end="117:22"><name pos:start="117:21" pos:end="117:22">cs</name></expr></argument>, <argument pos:start="117:25" pos:end="117:34"><expr pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:34">current_pc</name></expr></argument>, <argument pos:start="117:37" pos:end="117:51"><expr pos:start="117:37" pos:end="117:51"><name pos:start="117:37" pos:end="117:51">current_cs_base</name></expr></argument>, <argument pos:start="117:54" pos:end="117:66"><expr pos:start="117:54" pos:end="117:66"><name pos:start="117:54" pos:end="117:66">current_flags</name></expr></argument>, <argument pos:start="117:69" pos:end="117:69"><expr pos:start="117:69" pos:end="117:69"><literal type="number" pos:start="117:69" pos:end="117:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><call pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:30">cpu_resume_from_signal</name><argument_list pos:start="119:31" pos:end="119:40">(<argument pos:start="119:32" pos:end="119:33"><expr pos:start="119:32" pos:end="119:33"><name pos:start="119:32" pos:end="119:33">cs</name></expr></argument>, <argument pos:start="119:36" pos:end="119:39"><expr pos:start="119:36" pos:end="119:39"><name pos:start="119:36" pos:end="119:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
