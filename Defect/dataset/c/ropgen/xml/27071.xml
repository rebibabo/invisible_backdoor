<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27071.c" pos:tabs="8"><function pos:start="1:1" pos:end="535:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">kvm_arch_init_vcpu</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:31">CPUState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:35">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="535:1">{<block_content pos:start="5:5" pos:end="533:13">

    <struct pos:start="5:5" pos:end="11:29">struct <block pos:start="5:12" pos:end="11:5">{

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:25">kvm_cpuid2</name></name></type> <name pos:start="7:27" pos:end="7:31">cpuid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:63"><decl pos:start="9:9" pos:end="9:62"><type pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:31">kvm_cpuid_entry2</name></name></type> <name pos:start="9:33" pos:end="9:62"><name pos:start="9:33" pos:end="9:39">entries</name><index pos:start="9:40" pos:end="9:62">[<expr pos:start="9:41" pos:end="9:61"><name pos:start="9:41" pos:end="9:61">KVM_MAX_CPUID_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>

    }</block> <decl pos:start="11:7" pos:end="11:28"><name pos:start="11:7" pos:end="11:17">QEMU_PACKED</name> <name pos:start="11:19" pos:end="11:28">cpuid_data</name></decl>;</struct>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">X86CPU</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">cpu</name> <init pos:start="13:17" pos:end="13:29">= <expr pos:start="13:19" pos:end="13:29"><call pos:start="13:19" pos:end="13:29"><name pos:start="13:19" pos:end="13:25">X86_CPU</name><argument_list pos:start="13:26" pos:end="13:29">(<argument pos:start="13:27" pos:end="13:28"><expr pos:start="13:27" pos:end="13:28"><name pos:start="13:27" pos:end="13:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">CPUX86State</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">env</name> <init pos:start="15:22" pos:end="15:32">= <expr pos:start="15:24" pos:end="15:32"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:27">cpu</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:18">limit</name></decl>, <decl pos:start="17:21" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:21" pos:end="17:21">i</name></decl>, <decl pos:start="17:24" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:24" pos:end="17:24">j</name></decl>, <decl pos:start="17:27" pos:end="17:33"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:27" pos:end="17:33">cpuid_i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">unused</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:27">kvm_cpuid_entry2</name></name> <modifier pos:start="21:29" pos:end="21:29">*</modifier></type><name pos:start="21:30" pos:end="21:30">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:25"><name pos:start="23:14" pos:end="23:22">signature</name><index pos:start="23:23" pos:end="23:25">[<expr pos:start="23:24" pos:end="23:24"><literal type="number" pos:start="23:24" pos:end="23:24">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:11">cpuid_i</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:35">/* Paravirtualization CPUIDs */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:5">c</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <operator pos:start="35:9" pos:end="35:9">&amp;</operator><name pos:start="35:10" pos:end="35:38"><name pos:start="35:10" pos:end="35:19">cpuid_data</name><operator pos:start="35:20" pos:end="35:20">.</operator><name pos:start="35:21" pos:end="35:27">entries</name><index pos:start="35:28" pos:end="35:38">[<expr pos:start="35:29" pos:end="35:37"><name pos:start="35:29" pos:end="35:35">cpuid_i</name><operator pos:start="35:36" pos:end="35:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:28">(<argument pos:start="37:12" pos:end="37:12"><expr pos:start="37:12" pos:end="37:12"><name pos:start="37:12" pos:end="37:12">c</name></expr></argument>, <argument pos:start="37:15" pos:end="37:15"><expr pos:start="37:15" pos:end="37:15"><literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr></argument>, <argument pos:start="37:18" pos:end="37:27"><expr pos:start="37:18" pos:end="37:27"><sizeof pos:start="37:18" pos:end="37:27">sizeof<argument_list pos:start="37:24" pos:end="37:27">(<argument pos:start="37:25" pos:end="37:26"><expr pos:start="37:25" pos:end="37:26"><operator pos:start="37:25" pos:end="37:25">*</operator><name pos:start="37:26" pos:end="37:26">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:5">c</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:15">function</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:37">KVM_CPUID_SIGNATURE</name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:29">(<expr pos:start="41:9" pos:end="41:28"><operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:28"><name pos:start="41:10" pos:end="41:23">hyperv_enabled</name><argument_list pos:start="41:24" pos:end="41:28">(<argument pos:start="41:25" pos:end="41:27"><expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:27">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:31" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:19">

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><call pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:14">memcpy</name><argument_list pos:start="43:15" pos:end="43:48">(<argument pos:start="43:16" pos:end="43:24"><expr pos:start="43:16" pos:end="43:24"><name pos:start="43:16" pos:end="43:24">signature</name></expr></argument>, <argument pos:start="43:27" pos:end="43:43"><expr pos:start="43:27" pos:end="43:43"><literal type="string" pos:start="43:27" pos:end="43:43">"KVMKVMKVM\0\0\0"</literal></expr></argument>, <argument pos:start="43:46" pos:end="43:47"><expr pos:start="43:46" pos:end="43:47"><literal type="number" pos:start="43:46" pos:end="43:47">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:19"><expr pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:9">c</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:14">eax</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="53:5">else <block pos:start="47:12" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:34">

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><call pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:14">memcpy</name><argument_list pos:start="49:15" pos:end="49:45">(<argument pos:start="49:16" pos:end="49:24"><expr pos:start="49:16" pos:end="49:24"><name pos:start="49:16" pos:end="49:24">signature</name></expr></argument>, <argument pos:start="49:27" pos:end="49:40"><expr pos:start="49:27" pos:end="49:40"><literal type="string" pos:start="49:27" pos:end="49:40">"Microsoft Hv"</literal></expr></argument>, <argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><literal type="number" pos:start="49:43" pos:end="49:44">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:9">c</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:14">eax</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:33">HYPERV_CPUID_MIN</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:5">c</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:10">ebx</name></name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:25"><name pos:start="55:14" pos:end="55:22">signature</name><index pos:start="55:23" pos:end="55:25">[<expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:5">c</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:10">ecx</name></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:25"><name pos:start="57:14" pos:end="57:22">signature</name><index pos:start="57:23" pos:end="57:25">[<expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:5">c</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:10">edx</name></name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:25"><name pos:start="59:14" pos:end="59:22">signature</name><index pos:start="59:23" pos:end="59:25">[<expr pos:start="59:24" pos:end="59:24"><literal type="number" pos:start="59:24" pos:end="59:24">2</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:39"><expr pos:start="63:5" pos:end="63:38"><name pos:start="63:5" pos:end="63:5">c</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <operator pos:start="63:9" pos:end="63:9">&amp;</operator><name pos:start="63:10" pos:end="63:38"><name pos:start="63:10" pos:end="63:19">cpuid_data</name><operator pos:start="63:20" pos:end="63:20">.</operator><name pos:start="63:21" pos:end="63:27">entries</name><index pos:start="63:28" pos:end="63:38">[<expr pos:start="63:29" pos:end="63:37"><name pos:start="63:29" pos:end="63:35">cpuid_i</name><operator pos:start="63:36" pos:end="63:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><call pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:10">memset</name><argument_list pos:start="65:11" pos:end="65:28">(<argument pos:start="65:12" pos:end="65:12"><expr pos:start="65:12" pos:end="65:12"><name pos:start="65:12" pos:end="65:12">c</name></expr></argument>, <argument pos:start="65:15" pos:end="65:15"><expr pos:start="65:15" pos:end="65:15"><literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr></argument>, <argument pos:start="65:18" pos:end="65:27"><expr pos:start="65:18" pos:end="65:27"><sizeof pos:start="65:18" pos:end="65:27">sizeof<argument_list pos:start="65:24" pos:end="65:27">(<argument pos:start="65:25" pos:end="65:26"><expr pos:start="65:25" pos:end="65:26"><operator pos:start="65:25" pos:end="65:25">*</operator><name pos:start="65:26" pos:end="65:26">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:5">c</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:15">function</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:36">KVM_CPUID_FEATURES</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:10"><name pos:start="69:5" pos:end="69:5">c</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:10">eax</name></name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:36"><name pos:start="69:14" pos:end="69:16">env</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:26">features</name><index pos:start="69:27" pos:end="69:36">[<expr pos:start="69:28" pos:end="69:35"><name pos:start="69:28" pos:end="69:35">FEAT_KVM</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="165:5"><if pos:start="73:5" pos:end="165:5">if <condition pos:start="73:8" pos:end="73:28">(<expr pos:start="73:9" pos:end="73:27"><call pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:22">hyperv_enabled</name><argument_list pos:start="73:23" pos:end="73:27">(<argument pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:30" pos:end="165:5">{<block_content pos:start="75:9" pos:end="163:30">

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><call pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:14">memcpy</name><argument_list pos:start="75:15" pos:end="75:53">(<argument pos:start="75:16" pos:end="75:24"><expr pos:start="75:16" pos:end="75:24"><name pos:start="75:16" pos:end="75:24">signature</name></expr></argument>, <argument pos:start="75:27" pos:end="75:48"><expr pos:start="75:27" pos:end="75:48"><literal type="string" pos:start="75:27" pos:end="75:48">"Hv#1\0\0\0\0\0\0\0\0"</literal></expr></argument>, <argument pos:start="75:51" pos:end="75:52"><expr pos:start="75:51" pos:end="75:52"><literal type="number" pos:start="75:51" pos:end="75:52">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:9">c</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">eax</name></name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:29"><name pos:start="77:18" pos:end="77:26">signature</name><index pos:start="77:27" pos:end="77:29">[<expr pos:start="77:28" pos:end="77:28"><literal type="number" pos:start="77:28" pos:end="77:28">0</literal></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:43"><expr pos:start="81:9" pos:end="81:42"><name pos:start="81:9" pos:end="81:9">c</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <operator pos:start="81:13" pos:end="81:13">&amp;</operator><name pos:start="81:14" pos:end="81:42"><name pos:start="81:14" pos:end="81:23">cpuid_data</name><operator pos:start="81:24" pos:end="81:24">.</operator><name pos:start="81:25" pos:end="81:31">entries</name><index pos:start="81:32" pos:end="81:42">[<expr pos:start="81:33" pos:end="81:41"><name pos:start="81:33" pos:end="81:39">cpuid_i</name><operator pos:start="81:40" pos:end="81:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:33"><expr pos:start="83:9" pos:end="83:32"><call pos:start="83:9" pos:end="83:32"><name pos:start="83:9" pos:end="83:14">memset</name><argument_list pos:start="83:15" pos:end="83:32">(<argument pos:start="83:16" pos:end="83:16"><expr pos:start="83:16" pos:end="83:16"><name pos:start="83:16" pos:end="83:16">c</name></expr></argument>, <argument pos:start="83:19" pos:end="83:19"><expr pos:start="83:19" pos:end="83:19"><literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr></argument>, <argument pos:start="83:22" pos:end="83:31"><expr pos:start="83:22" pos:end="83:31"><sizeof pos:start="83:22" pos:end="83:31">sizeof<argument_list pos:start="83:28" pos:end="83:31">(<argument pos:start="83:29" pos:end="83:30"><expr pos:start="83:29" pos:end="83:30"><operator pos:start="83:29" pos:end="83:29">*</operator><name pos:start="83:30" pos:end="83:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:43"><expr pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">c</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">function</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:42">HYPERV_CPUID_VERSION</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:9">c</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:14">eax</name></name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:27">0x00001bbc</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:28"><expr pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:9">c</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:14">ebx</name></name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:27">0x00060001</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:9">c</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <operator pos:start="93:13" pos:end="93:13">&amp;</operator><name pos:start="93:14" pos:end="93:42"><name pos:start="93:14" pos:end="93:23">cpuid_data</name><operator pos:start="93:24" pos:end="93:24">.</operator><name pos:start="93:25" pos:end="93:31">entries</name><index pos:start="93:32" pos:end="93:42">[<expr pos:start="93:33" pos:end="93:41"><name pos:start="93:33" pos:end="93:39">cpuid_i</name><operator pos:start="93:40" pos:end="93:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><call pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:14">memset</name><argument_list pos:start="95:15" pos:end="95:32">(<argument pos:start="95:16" pos:end="95:16"><expr pos:start="95:16" pos:end="95:16"><name pos:start="95:16" pos:end="95:16">c</name></expr></argument>, <argument pos:start="95:19" pos:end="95:19"><expr pos:start="95:19" pos:end="95:19"><literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr></argument>, <argument pos:start="95:22" pos:end="95:31"><expr pos:start="95:22" pos:end="95:31"><sizeof pos:start="95:22" pos:end="95:31">sizeof<argument_list pos:start="95:28" pos:end="95:31">(<argument pos:start="95:29" pos:end="95:30"><expr pos:start="95:29" pos:end="95:30"><operator pos:start="95:29" pos:end="95:29">*</operator><name pos:start="95:30" pos:end="95:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:9">c</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:19">function</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <name pos:start="97:23" pos:end="97:43">HYPERV_CPUID_FEATURES</name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:39">(<expr pos:start="99:13" pos:end="99:38"><name pos:start="99:13" pos:end="99:38"><name pos:start="99:13" pos:end="99:15">cpu</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:38">hyperv_relaxed_timing</name></name></expr>)</condition> <block pos:start="99:41" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:53">

            <expr_stmt pos:start="101:13" pos:end="101:53"><expr pos:start="101:13" pos:end="101:52"><name pos:start="101:13" pos:end="101:18"><name pos:start="101:13" pos:end="101:13">c</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:18">eax</name></name> <operator pos:start="101:20" pos:end="101:21">|=</operator> <name pos:start="101:23" pos:end="101:52">HV_X64_MSR_HYPERCALL_AVAILABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:30">(<expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:15">cpu</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:29">hyperv_vapic</name></name></expr>)</condition> <block pos:start="105:32" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:55">

            <expr_stmt pos:start="107:13" pos:end="107:53"><expr pos:start="107:13" pos:end="107:52"><name pos:start="107:13" pos:end="107:18"><name pos:start="107:13" pos:end="107:13">c</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:18">eax</name></name> <operator pos:start="107:20" pos:end="107:21">|=</operator> <name pos:start="107:23" pos:end="107:52">HV_X64_MSR_HYPERCALL_AVAILABLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:55"><expr pos:start="109:13" pos:end="109:54"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:13">c</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:18">eax</name></name> <operator pos:start="109:20" pos:end="109:21">|=</operator> <name pos:start="109:23" pos:end="109:54">HV_X64_MSR_APIC_ACCESS_AVAILABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:43"><expr pos:start="115:9" pos:end="115:42"><name pos:start="115:9" pos:end="115:9">c</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <operator pos:start="115:13" pos:end="115:13">&amp;</operator><name pos:start="115:14" pos:end="115:42"><name pos:start="115:14" pos:end="115:23">cpuid_data</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:31">entries</name><index pos:start="115:32" pos:end="115:42">[<expr pos:start="115:33" pos:end="115:41"><name pos:start="115:33" pos:end="115:39">cpuid_i</name><operator pos:start="115:40" pos:end="115:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:33"><expr pos:start="117:9" pos:end="117:32"><call pos:start="117:9" pos:end="117:32"><name pos:start="117:9" pos:end="117:14">memset</name><argument_list pos:start="117:15" pos:end="117:32">(<argument pos:start="117:16" pos:end="117:16"><expr pos:start="117:16" pos:end="117:16"><name pos:start="117:16" pos:end="117:16">c</name></expr></argument>, <argument pos:start="117:19" pos:end="117:19"><expr pos:start="117:19" pos:end="117:19"><literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr></argument>, <argument pos:start="117:22" pos:end="117:31"><expr pos:start="117:22" pos:end="117:31"><sizeof pos:start="117:22" pos:end="117:31">sizeof<argument_list pos:start="117:28" pos:end="117:31">(<argument pos:start="117:29" pos:end="117:30"><expr pos:start="117:29" pos:end="117:30"><operator pos:start="117:29" pos:end="117:29">*</operator><name pos:start="117:30" pos:end="117:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:52"><expr pos:start="119:9" pos:end="119:51"><name pos:start="119:9" pos:end="119:19"><name pos:start="119:9" pos:end="119:9">c</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:19">function</name></name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:51">HYPERV_CPUID_ENLIGHTMENT_INFO</name></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:39">(<expr pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:15">cpu</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:38">hyperv_relaxed_timing</name></name></expr>)</condition> <block pos:start="121:41" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:56">

            <expr_stmt pos:start="123:13" pos:end="123:56"><expr pos:start="123:13" pos:end="123:55"><name pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:13">c</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:18">eax</name></name> <operator pos:start="123:20" pos:end="123:21">|=</operator> <name pos:start="123:23" pos:end="123:55">HV_X64_RELAXED_TIMING_RECOMMENDED</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:30">(<expr pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:15">cpu</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:29">hyperv_vapic</name></name></expr>)</condition> <block pos:start="127:32" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:53">

            <expr_stmt pos:start="129:13" pos:end="129:53"><expr pos:start="129:13" pos:end="129:52"><name pos:start="129:13" pos:end="129:18"><name pos:start="129:13" pos:end="129:13">c</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:18">eax</name></name> <operator pos:start="129:20" pos:end="129:21">|=</operator> <name pos:start="129:23" pos:end="129:52">HV_X64_APIC_ACCESS_RECOMMENDED</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:47"><expr pos:start="133:9" pos:end="133:46"><name pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:9">c</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:14">ebx</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:46"><name pos:start="133:18" pos:end="133:20">cpu</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:46">hyperv_spinlock_attempts</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:43"><expr pos:start="137:9" pos:end="137:42"><name pos:start="137:9" pos:end="137:9">c</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <operator pos:start="137:13" pos:end="137:13">&amp;</operator><name pos:start="137:14" pos:end="137:42"><name pos:start="137:14" pos:end="137:23">cpuid_data</name><operator pos:start="137:24" pos:end="137:24">.</operator><name pos:start="137:25" pos:end="137:31">entries</name><index pos:start="137:32" pos:end="137:42">[<expr pos:start="137:33" pos:end="137:41"><name pos:start="137:33" pos:end="137:39">cpuid_i</name><operator pos:start="137:40" pos:end="137:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:33"><expr pos:start="139:9" pos:end="139:32"><call pos:start="139:9" pos:end="139:32"><name pos:start="139:9" pos:end="139:14">memset</name><argument_list pos:start="139:15" pos:end="139:32">(<argument pos:start="139:16" pos:end="139:16"><expr pos:start="139:16" pos:end="139:16"><name pos:start="139:16" pos:end="139:16">c</name></expr></argument>, <argument pos:start="139:19" pos:end="139:19"><expr pos:start="139:19" pos:end="139:19"><literal type="number" pos:start="139:19" pos:end="139:19">0</literal></expr></argument>, <argument pos:start="139:22" pos:end="139:31"><expr pos:start="139:22" pos:end="139:31"><sizeof pos:start="139:22" pos:end="139:31">sizeof<argument_list pos:start="139:28" pos:end="139:31">(<argument pos:start="139:29" pos:end="139:30"><expr pos:start="139:29" pos:end="139:30"><operator pos:start="139:29" pos:end="139:29">*</operator><name pos:start="139:30" pos:end="139:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:52"><expr pos:start="141:9" pos:end="141:51"><name pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:9">c</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:19">function</name></name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:51">HYPERV_CPUID_IMPLEMENT_LIMITS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:22"><expr pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:14"><name pos:start="143:9" pos:end="143:9">c</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:14">eax</name></name> <operator pos:start="143:16" pos:end="143:16">=</operator> <literal type="number" pos:start="143:18" pos:end="143:21">0x40</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:22"><expr pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:14"><name pos:start="145:9" pos:end="145:9">c</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:14">ebx</name></name> <operator pos:start="145:16" pos:end="145:16">=</operator> <literal type="number" pos:start="145:18" pos:end="145:21">0x40</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:43"><expr pos:start="149:9" pos:end="149:42"><name pos:start="149:9" pos:end="149:9">c</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <operator pos:start="149:13" pos:end="149:13">&amp;</operator><name pos:start="149:14" pos:end="149:42"><name pos:start="149:14" pos:end="149:23">cpuid_data</name><operator pos:start="149:24" pos:end="149:24">.</operator><name pos:start="149:25" pos:end="149:31">entries</name><index pos:start="149:32" pos:end="149:42">[<expr pos:start="149:33" pos:end="149:41"><name pos:start="149:33" pos:end="149:39">cpuid_i</name><operator pos:start="149:40" pos:end="149:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:33"><expr pos:start="151:9" pos:end="151:32"><call pos:start="151:9" pos:end="151:32"><name pos:start="151:9" pos:end="151:14">memset</name><argument_list pos:start="151:15" pos:end="151:32">(<argument pos:start="151:16" pos:end="151:16"><expr pos:start="151:16" pos:end="151:16"><name pos:start="151:16" pos:end="151:16">c</name></expr></argument>, <argument pos:start="151:19" pos:end="151:19"><expr pos:start="151:19" pos:end="151:19"><literal type="number" pos:start="151:19" pos:end="151:19">0</literal></expr></argument>, <argument pos:start="151:22" pos:end="151:31"><expr pos:start="151:22" pos:end="151:31"><sizeof pos:start="151:22" pos:end="151:31">sizeof<argument_list pos:start="151:28" pos:end="151:31">(<argument pos:start="151:29" pos:end="151:30"><expr pos:start="151:29" pos:end="151:30"><operator pos:start="151:29" pos:end="151:29">*</operator><name pos:start="151:30" pos:end="151:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:47"><expr pos:start="153:9" pos:end="153:46"><name pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:9">c</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:19">function</name></name> <operator pos:start="153:21" pos:end="153:21">=</operator> <name pos:start="153:23" pos:end="153:46">KVM_CPUID_SIGNATURE_NEXT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:49"><expr pos:start="155:9" pos:end="155:48"><call pos:start="155:9" pos:end="155:48"><name pos:start="155:9" pos:end="155:14">memcpy</name><argument_list pos:start="155:15" pos:end="155:48">(<argument pos:start="155:16" pos:end="155:24"><expr pos:start="155:16" pos:end="155:24"><name pos:start="155:16" pos:end="155:24">signature</name></expr></argument>, <argument pos:start="155:27" pos:end="155:43"><expr pos:start="155:27" pos:end="155:43"><literal type="string" pos:start="155:27" pos:end="155:43">"KVMKVMKVM\0\0\0"</literal></expr></argument>, <argument pos:start="155:46" pos:end="155:47"><expr pos:start="155:46" pos:end="155:47"><literal type="number" pos:start="155:46" pos:end="155:47">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:19"><expr pos:start="157:9" pos:end="157:18"><name pos:start="157:9" pos:end="157:14"><name pos:start="157:9" pos:end="157:9">c</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:14">eax</name></name> <operator pos:start="157:16" pos:end="157:16">=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:14"><name pos:start="159:9" pos:end="159:9">c</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:14">ebx</name></name> <operator pos:start="159:16" pos:end="159:16">=</operator> <name pos:start="159:18" pos:end="159:29"><name pos:start="159:18" pos:end="159:26">signature</name><index pos:start="159:27" pos:end="159:29">[<expr pos:start="159:28" pos:end="159:28"><literal type="number" pos:start="159:28" pos:end="159:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:30"><expr pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:14"><name pos:start="161:9" pos:end="161:9">c</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:14">ecx</name></name> <operator pos:start="161:16" pos:end="161:16">=</operator> <name pos:start="161:18" pos:end="161:29"><name pos:start="161:18" pos:end="161:26">signature</name><index pos:start="161:27" pos:end="161:29">[<expr pos:start="161:28" pos:end="161:28"><literal type="number" pos:start="161:28" pos:end="161:28">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:30"><expr pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:14"><name pos:start="163:9" pos:end="163:9">c</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:14">edx</name></name> <operator pos:start="163:16" pos:end="163:16">=</operator> <name pos:start="163:18" pos:end="163:29"><name pos:start="163:18" pos:end="163:26">signature</name><index pos:start="163:27" pos:end="163:29">[<expr pos:start="163:28" pos:end="163:28"><literal type="number" pos:start="163:28" pos:end="163:28">2</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:63"><expr pos:start="169:5" pos:end="169:62"><name pos:start="169:5" pos:end="169:23">has_msr_async_pf_en</name> <operator pos:start="169:25" pos:end="169:25">=</operator> <name pos:start="169:27" pos:end="169:32"><name pos:start="169:27" pos:end="169:27">c</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:32">eax</name></name> <operator pos:start="169:34" pos:end="169:34">&amp;</operator> <operator pos:start="169:36" pos:end="169:36">(</operator><literal type="number" pos:start="169:37" pos:end="169:37">1</literal> <operator pos:start="169:39" pos:end="169:40">&lt;&lt;</operator> <name pos:start="169:42" pos:end="169:61">KVM_FEATURE_ASYNC_PF</name><operator pos:start="169:62" pos:end="169:62">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:59"><expr pos:start="173:5" pos:end="173:58"><name pos:start="173:5" pos:end="173:21">has_msr_pv_eoi_en</name> <operator pos:start="173:23" pos:end="173:23">=</operator> <name pos:start="173:25" pos:end="173:30"><name pos:start="173:25" pos:end="173:25">c</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:30">eax</name></name> <operator pos:start="173:32" pos:end="173:32">&amp;</operator> <operator pos:start="173:34" pos:end="173:34">(</operator><literal type="number" pos:start="173:35" pos:end="173:35">1</literal> <operator pos:start="173:37" pos:end="173:38">&lt;&lt;</operator> <name pos:start="173:40" pos:end="173:57">KVM_FEATURE_PV_EOI</name><operator pos:start="173:58" pos:end="173:58">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:68"><expr pos:start="177:5" pos:end="177:67"><name pos:start="177:5" pos:end="177:26">has_msr_kvm_steal_time</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:35"><name pos:start="177:30" pos:end="177:30">c</name><operator pos:start="177:31" pos:end="177:32">-&gt;</operator><name pos:start="177:33" pos:end="177:35">eax</name></name> <operator pos:start="177:37" pos:end="177:37">&amp;</operator> <operator pos:start="177:39" pos:end="177:39">(</operator><literal type="number" pos:start="177:40" pos:end="177:40">1</literal> <operator pos:start="177:42" pos:end="177:43">&lt;&lt;</operator> <name pos:start="177:45" pos:end="177:66">KVM_FEATURE_STEAL_TIME</name><operator pos:start="177:67" pos:end="177:67">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:64"><expr pos:start="181:5" pos:end="181:63"><call pos:start="181:5" pos:end="181:63"><name pos:start="181:5" pos:end="181:17">cpu_x86_cpuid</name><argument_list pos:start="181:18" pos:end="181:63">(<argument pos:start="181:19" pos:end="181:21"><expr pos:start="181:19" pos:end="181:21"><name pos:start="181:19" pos:end="181:21">env</name></expr></argument>, <argument pos:start="181:24" pos:end="181:24"><expr pos:start="181:24" pos:end="181:24"><literal type="number" pos:start="181:24" pos:end="181:24">0</literal></expr></argument>, <argument pos:start="181:27" pos:end="181:27"><expr pos:start="181:27" pos:end="181:27"><literal type="number" pos:start="181:27" pos:end="181:27">0</literal></expr></argument>, <argument pos:start="181:30" pos:end="181:35"><expr pos:start="181:30" pos:end="181:35"><operator pos:start="181:30" pos:end="181:30">&amp;</operator><name pos:start="181:31" pos:end="181:35">limit</name></expr></argument>, <argument pos:start="181:38" pos:end="181:44"><expr pos:start="181:38" pos:end="181:44"><operator pos:start="181:38" pos:end="181:38">&amp;</operator><name pos:start="181:39" pos:end="181:44">unused</name></expr></argument>, <argument pos:start="181:47" pos:end="181:53"><expr pos:start="181:47" pos:end="181:53"><operator pos:start="181:47" pos:end="181:47">&amp;</operator><name pos:start="181:48" pos:end="181:53">unused</name></expr></argument>, <argument pos:start="181:56" pos:end="181:62"><expr pos:start="181:56" pos:end="181:62"><operator pos:start="181:56" pos:end="181:56">&amp;</operator><name pos:start="181:57" pos:end="181:62">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="185:5" pos:end="317:5">for <control pos:start="185:9" pos:end="185:32">(<init pos:start="185:10" pos:end="185:15"><expr pos:start="185:10" pos:end="185:14"><name pos:start="185:10" pos:end="185:10">i</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <literal type="number" pos:start="185:14" pos:end="185:14">0</literal></expr>;</init> <condition pos:start="185:17" pos:end="185:27"><expr pos:start="185:17" pos:end="185:26"><name pos:start="185:17" pos:end="185:17">i</name> <operator pos:start="185:19" pos:end="185:20">&lt;=</operator> <name pos:start="185:22" pos:end="185:26">limit</name></expr>;</condition> <incr pos:start="185:29" pos:end="185:31"><expr pos:start="185:29" pos:end="185:31"><name pos:start="185:29" pos:end="185:29">i</name><operator pos:start="185:30" pos:end="185:31">++</operator></expr></incr>)</control> <block pos:start="185:34" pos:end="317:5">{<block_content pos:start="187:9" pos:end="315:9">

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:45">(<expr pos:start="187:13" pos:end="187:44"><name pos:start="187:13" pos:end="187:19">cpuid_i</name> <operator pos:start="187:21" pos:end="187:22">==</operator> <name pos:start="187:24" pos:end="187:44">KVM_MAX_CPUID_ENTRIES</name></expr>)</condition> <block pos:start="187:47" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:20">

            <expr_stmt pos:start="189:13" pos:end="189:70"><expr pos:start="189:13" pos:end="189:69"><call pos:start="189:13" pos:end="189:69"><name pos:start="189:13" pos:end="189:19">fprintf</name><argument_list pos:start="189:20" pos:end="189:69">(<argument pos:start="189:21" pos:end="189:26"><expr pos:start="189:21" pos:end="189:26"><name pos:start="189:21" pos:end="189:26">stderr</name></expr></argument>, <argument pos:start="189:29" pos:end="189:61"><expr pos:start="189:29" pos:end="189:61"><literal type="string" pos:start="189:29" pos:end="189:61">"unsupported level value: 0x%x\n"</literal></expr></argument>, <argument pos:start="189:64" pos:end="189:68"><expr pos:start="189:64" pos:end="189:68"><name pos:start="189:64" pos:end="189:68">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:20"><expr pos:start="191:13" pos:end="191:19"><call pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:17">abort</name><argument_list pos:start="191:18" pos:end="191:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:43"><expr pos:start="195:9" pos:end="195:42"><name pos:start="195:9" pos:end="195:9">c</name> <operator pos:start="195:11" pos:end="195:11">=</operator> <operator pos:start="195:13" pos:end="195:13">&amp;</operator><name pos:start="195:14" pos:end="195:42"><name pos:start="195:14" pos:end="195:23">cpuid_data</name><operator pos:start="195:24" pos:end="195:24">.</operator><name pos:start="195:25" pos:end="195:31">entries</name><index pos:start="195:32" pos:end="195:42">[<expr pos:start="195:33" pos:end="195:41"><name pos:start="195:33" pos:end="195:39">cpuid_i</name><operator pos:start="195:40" pos:end="195:41">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <switch pos:start="199:9" pos:end="315:9">switch <condition pos:start="199:16" pos:end="199:18">(<expr pos:start="199:17" pos:end="199:17"><name pos:start="199:17" pos:end="199:17">i</name></expr>)</condition> <block pos:start="199:20" pos:end="315:9">{<block_content pos:start="201:9" pos:end="313:18">

        <case pos:start="201:9" pos:end="201:15">case <expr pos:start="201:14" pos:end="201:14"><literal type="number" pos:start="201:14" pos:end="201:14">2</literal></expr>:</case> <block pos:start="201:17" pos:end="245:9">{<block_content pos:start="205:13" pos:end="243:18">

            <comment type="block" pos:start="203:13" pos:end="203:72">/* Keep reading function 2 till all the input is received */</comment>

            <decl_stmt pos:start="205:13" pos:end="205:22"><decl pos:start="205:13" pos:end="205:21"><type pos:start="205:13" pos:end="205:15"><name pos:start="205:13" pos:end="205:15">int</name></type> <name pos:start="205:17" pos:end="205:21">times</name></decl>;</decl_stmt>



            <expr_stmt pos:start="209:13" pos:end="209:28"><expr pos:start="209:13" pos:end="209:27"><name pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:13">c</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:23">function</name></name> <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="213:54"><expr pos:start="211:13" pos:end="213:53"><name pos:start="211:13" pos:end="211:20"><name pos:start="211:13" pos:end="211:13">c</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:20">flags</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <name pos:start="211:24" pos:end="211:51">KVM_CPUID_FLAG_STATEFUL_FUNC</name> <operator pos:start="211:53" pos:end="211:53">|</operator>

                       <name pos:start="213:24" pos:end="213:53">KVM_CPUID_FLAG_STATE_READ_NEXT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:73"><expr pos:start="215:13" pos:end="215:72"><call pos:start="215:13" pos:end="215:72"><name pos:start="215:13" pos:end="215:25">cpu_x86_cpuid</name><argument_list pos:start="215:26" pos:end="215:72">(<argument pos:start="215:27" pos:end="215:29"><expr pos:start="215:27" pos:end="215:29"><name pos:start="215:27" pos:end="215:29">env</name></expr></argument>, <argument pos:start="215:32" pos:end="215:32"><expr pos:start="215:32" pos:end="215:32"><name pos:start="215:32" pos:end="215:32">i</name></expr></argument>, <argument pos:start="215:35" pos:end="215:35"><expr pos:start="215:35" pos:end="215:35"><literal type="number" pos:start="215:35" pos:end="215:35">0</literal></expr></argument>, <argument pos:start="215:38" pos:end="215:44"><expr pos:start="215:38" pos:end="215:44"><operator pos:start="215:38" pos:end="215:38">&amp;</operator><name pos:start="215:39" pos:end="215:44"><name pos:start="215:39" pos:end="215:39">c</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:44">eax</name></name></expr></argument>, <argument pos:start="215:47" pos:end="215:53"><expr pos:start="215:47" pos:end="215:53"><operator pos:start="215:47" pos:end="215:47">&amp;</operator><name pos:start="215:48" pos:end="215:53"><name pos:start="215:48" pos:end="215:48">c</name><operator pos:start="215:49" pos:end="215:50">-&gt;</operator><name pos:start="215:51" pos:end="215:53">ebx</name></name></expr></argument>, <argument pos:start="215:56" pos:end="215:62"><expr pos:start="215:56" pos:end="215:62"><operator pos:start="215:56" pos:end="215:56">&amp;</operator><name pos:start="215:57" pos:end="215:62"><name pos:start="215:57" pos:end="215:57">c</name><operator pos:start="215:58" pos:end="215:59">-&gt;</operator><name pos:start="215:60" pos:end="215:62">ecx</name></name></expr></argument>, <argument pos:start="215:65" pos:end="215:71"><expr pos:start="215:65" pos:end="215:71"><operator pos:start="215:65" pos:end="215:65">&amp;</operator><name pos:start="215:66" pos:end="215:71"><name pos:start="215:66" pos:end="215:66">c</name><operator pos:start="215:67" pos:end="215:68">-&gt;</operator><name pos:start="215:69" pos:end="215:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:34"><expr pos:start="217:13" pos:end="217:33"><name pos:start="217:13" pos:end="217:17">times</name> <operator pos:start="217:19" pos:end="217:19">=</operator> <name pos:start="217:21" pos:end="217:26"><name pos:start="217:21" pos:end="217:21">c</name><operator pos:start="217:22" pos:end="217:23">-&gt;</operator><name pos:start="217:24" pos:end="217:26">eax</name></name> <operator pos:start="217:28" pos:end="217:28">&amp;</operator> <literal type="number" pos:start="217:30" pos:end="217:33">0xff</literal></expr>;</expr_stmt>



            <for pos:start="221:13" pos:end="241:13">for <control pos:start="221:17" pos:end="221:39">(<init pos:start="221:18" pos:end="221:23"><expr pos:start="221:18" pos:end="221:22"><name pos:start="221:18" pos:end="221:18">j</name> <operator pos:start="221:20" pos:end="221:20">=</operator> <literal type="number" pos:start="221:22" pos:end="221:22">1</literal></expr>;</init> <condition pos:start="221:25" pos:end="221:34"><expr pos:start="221:25" pos:end="221:33"><name pos:start="221:25" pos:end="221:25">j</name> <operator pos:start="221:27" pos:end="221:27">&lt;</operator> <name pos:start="221:29" pos:end="221:33">times</name></expr>;</condition> <incr pos:start="221:36" pos:end="221:38"><expr pos:start="221:36" pos:end="221:38"><operator pos:start="221:36" pos:end="221:37">++</operator><name pos:start="221:38" pos:end="221:38">j</name></expr></incr>)</control> <block pos:start="221:41" pos:end="241:13">{<block_content pos:start="223:17" pos:end="239:77">

                <if_stmt pos:start="223:17" pos:end="231:17"><if pos:start="223:17" pos:end="231:17">if <condition pos:start="223:20" pos:end="223:53">(<expr pos:start="223:21" pos:end="223:52"><name pos:start="223:21" pos:end="223:27">cpuid_i</name> <operator pos:start="223:29" pos:end="223:30">==</operator> <name pos:start="223:32" pos:end="223:52">KVM_MAX_CPUID_ENTRIES</name></expr>)</condition> <block pos:start="223:55" pos:end="231:17">{<block_content pos:start="225:21" pos:end="229:28">

                    <expr_stmt pos:start="225:21" pos:end="227:70"><expr pos:start="225:21" pos:end="227:69"><call pos:start="225:21" pos:end="227:69"><name pos:start="225:21" pos:end="225:27">fprintf</name><argument_list pos:start="225:28" pos:end="227:69">(<argument pos:start="225:29" pos:end="225:34"><expr pos:start="225:29" pos:end="225:34"><name pos:start="225:29" pos:end="225:34">stderr</name></expr></argument>, <argument pos:start="225:37" pos:end="227:61"><expr pos:start="225:37" pos:end="227:61"><literal type="string" pos:start="225:37" pos:end="225:71">"cpuid_data is full, no space for "</literal>

                            <literal type="string" pos:start="227:29" pos:end="227:61">"cpuid(eax:2):eax &amp; 0xf = 0x%x\n"</literal></expr></argument>, <argument pos:start="227:64" pos:end="227:68"><expr pos:start="227:64" pos:end="227:68"><name pos:start="227:64" pos:end="227:68">times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="229:21" pos:end="229:28"><expr pos:start="229:21" pos:end="229:27"><call pos:start="229:21" pos:end="229:27"><name pos:start="229:21" pos:end="229:25">abort</name><argument_list pos:start="229:26" pos:end="229:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:51"><expr pos:start="233:17" pos:end="233:50"><name pos:start="233:17" pos:end="233:17">c</name> <operator pos:start="233:19" pos:end="233:19">=</operator> <operator pos:start="233:21" pos:end="233:21">&amp;</operator><name pos:start="233:22" pos:end="233:50"><name pos:start="233:22" pos:end="233:31">cpuid_data</name><operator pos:start="233:32" pos:end="233:32">.</operator><name pos:start="233:33" pos:end="233:39">entries</name><index pos:start="233:40" pos:end="233:50">[<expr pos:start="233:41" pos:end="233:49"><name pos:start="233:41" pos:end="233:47">cpuid_i</name><operator pos:start="233:48" pos:end="233:49">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:32"><expr pos:start="235:17" pos:end="235:31"><name pos:start="235:17" pos:end="235:27"><name pos:start="235:17" pos:end="235:17">c</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:27">function</name></name> <operator pos:start="235:29" pos:end="235:29">=</operator> <name pos:start="235:31" pos:end="235:31">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:56"><expr pos:start="237:17" pos:end="237:55"><name pos:start="237:17" pos:end="237:24"><name pos:start="237:17" pos:end="237:17">c</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:24">flags</name></name> <operator pos:start="237:26" pos:end="237:26">=</operator> <name pos:start="237:28" pos:end="237:55">KVM_CPUID_FLAG_STATEFUL_FUNC</name></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:77"><expr pos:start="239:17" pos:end="239:76"><call pos:start="239:17" pos:end="239:76"><name pos:start="239:17" pos:end="239:29">cpu_x86_cpuid</name><argument_list pos:start="239:30" pos:end="239:76">(<argument pos:start="239:31" pos:end="239:33"><expr pos:start="239:31" pos:end="239:33"><name pos:start="239:31" pos:end="239:33">env</name></expr></argument>, <argument pos:start="239:36" pos:end="239:36"><expr pos:start="239:36" pos:end="239:36"><name pos:start="239:36" pos:end="239:36">i</name></expr></argument>, <argument pos:start="239:39" pos:end="239:39"><expr pos:start="239:39" pos:end="239:39"><literal type="number" pos:start="239:39" pos:end="239:39">0</literal></expr></argument>, <argument pos:start="239:42" pos:end="239:48"><expr pos:start="239:42" pos:end="239:48"><operator pos:start="239:42" pos:end="239:42">&amp;</operator><name pos:start="239:43" pos:end="239:48"><name pos:start="239:43" pos:end="239:43">c</name><operator pos:start="239:44" pos:end="239:45">-&gt;</operator><name pos:start="239:46" pos:end="239:48">eax</name></name></expr></argument>, <argument pos:start="239:51" pos:end="239:57"><expr pos:start="239:51" pos:end="239:57"><operator pos:start="239:51" pos:end="239:51">&amp;</operator><name pos:start="239:52" pos:end="239:57"><name pos:start="239:52" pos:end="239:52">c</name><operator pos:start="239:53" pos:end="239:54">-&gt;</operator><name pos:start="239:55" pos:end="239:57">ebx</name></name></expr></argument>, <argument pos:start="239:60" pos:end="239:66"><expr pos:start="239:60" pos:end="239:66"><operator pos:start="239:60" pos:end="239:60">&amp;</operator><name pos:start="239:61" pos:end="239:66"><name pos:start="239:61" pos:end="239:61">c</name><operator pos:start="239:62" pos:end="239:63">-&gt;</operator><name pos:start="239:64" pos:end="239:66">ecx</name></name></expr></argument>, <argument pos:start="239:69" pos:end="239:75"><expr pos:start="239:69" pos:end="239:75"><operator pos:start="239:69" pos:end="239:69">&amp;</operator><name pos:start="239:70" pos:end="239:75"><name pos:start="239:70" pos:end="239:70">c</name><operator pos:start="239:71" pos:end="239:72">-&gt;</operator><name pos:start="239:73" pos:end="239:75">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        </block_content>}</block>

        <case pos:start="247:9" pos:end="247:15">case <expr pos:start="247:14" pos:end="247:14"><literal type="number" pos:start="247:14" pos:end="247:14">4</literal></expr>:</case>

        <case pos:start="249:9" pos:end="249:17">case <expr pos:start="249:14" pos:end="249:16"><literal type="number" pos:start="249:14" pos:end="249:16">0xb</literal></expr>:</case>

        <case pos:start="251:9" pos:end="251:17">case <expr pos:start="251:14" pos:end="251:16"><literal type="number" pos:start="251:14" pos:end="251:16">0xd</literal></expr>:</case>

            <for pos:start="253:13" pos:end="301:13">for <control pos:start="253:17" pos:end="253:30">(<init pos:start="253:18" pos:end="253:23"><expr pos:start="253:18" pos:end="253:22"><name pos:start="253:18" pos:end="253:18">j</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <literal type="number" pos:start="253:22" pos:end="253:22">0</literal></expr>;</init> <condition pos:start="253:25" pos:end="253:25">;</condition> <incr pos:start="253:27" pos:end="253:29"><expr pos:start="253:27" pos:end="253:29"><name pos:start="253:27" pos:end="253:27">j</name><operator pos:start="253:28" pos:end="253:29">++</operator></expr></incr>)</control> <block pos:start="253:32" pos:end="301:13">{<block_content pos:start="255:17" pos:end="299:51">

                <if_stmt pos:start="255:17" pos:end="259:17"><if pos:start="255:17" pos:end="259:17">if <condition pos:start="255:20" pos:end="255:40">(<expr pos:start="255:21" pos:end="255:39"><name pos:start="255:21" pos:end="255:21">i</name> <operator pos:start="255:23" pos:end="255:24">==</operator> <literal type="number" pos:start="255:26" pos:end="255:28">0xd</literal> <operator pos:start="255:30" pos:end="255:31">&amp;&amp;</operator> <name pos:start="255:33" pos:end="255:33">j</name> <operator pos:start="255:35" pos:end="255:36">==</operator> <literal type="number" pos:start="255:38" pos:end="255:39">64</literal></expr>)</condition> <block pos:start="255:42" pos:end="259:17">{<block_content pos:start="257:21" pos:end="257:26">

                    <break pos:start="257:21" pos:end="257:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:32"><expr pos:start="261:17" pos:end="261:31"><name pos:start="261:17" pos:end="261:27"><name pos:start="261:17" pos:end="261:17">c</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:27">function</name></name> <operator pos:start="261:29" pos:end="261:29">=</operator> <name pos:start="261:31" pos:end="261:31">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:59"><expr pos:start="263:17" pos:end="263:58"><name pos:start="263:17" pos:end="263:24"><name pos:start="263:17" pos:end="263:17">c</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:24">flags</name></name> <operator pos:start="263:26" pos:end="263:26">=</operator> <name pos:start="263:28" pos:end="263:58">KVM_CPUID_FLAG_SIGNIFCANT_INDEX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:29"><expr pos:start="265:17" pos:end="265:28"><name pos:start="265:17" pos:end="265:24"><name pos:start="265:17" pos:end="265:17">c</name><operator pos:start="265:18" pos:end="265:19">-&gt;</operator><name pos:start="265:20" pos:end="265:24">index</name></name> <operator pos:start="265:26" pos:end="265:26">=</operator> <name pos:start="265:28" pos:end="265:28">j</name></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:77"><expr pos:start="267:17" pos:end="267:76"><call pos:start="267:17" pos:end="267:76"><name pos:start="267:17" pos:end="267:29">cpu_x86_cpuid</name><argument_list pos:start="267:30" pos:end="267:76">(<argument pos:start="267:31" pos:end="267:33"><expr pos:start="267:31" pos:end="267:33"><name pos:start="267:31" pos:end="267:33">env</name></expr></argument>, <argument pos:start="267:36" pos:end="267:36"><expr pos:start="267:36" pos:end="267:36"><name pos:start="267:36" pos:end="267:36">i</name></expr></argument>, <argument pos:start="267:39" pos:end="267:39"><expr pos:start="267:39" pos:end="267:39"><name pos:start="267:39" pos:end="267:39">j</name></expr></argument>, <argument pos:start="267:42" pos:end="267:48"><expr pos:start="267:42" pos:end="267:48"><operator pos:start="267:42" pos:end="267:42">&amp;</operator><name pos:start="267:43" pos:end="267:48"><name pos:start="267:43" pos:end="267:43">c</name><operator pos:start="267:44" pos:end="267:45">-&gt;</operator><name pos:start="267:46" pos:end="267:48">eax</name></name></expr></argument>, <argument pos:start="267:51" pos:end="267:57"><expr pos:start="267:51" pos:end="267:57"><operator pos:start="267:51" pos:end="267:51">&amp;</operator><name pos:start="267:52" pos:end="267:57"><name pos:start="267:52" pos:end="267:52">c</name><operator pos:start="267:53" pos:end="267:54">-&gt;</operator><name pos:start="267:55" pos:end="267:57">ebx</name></name></expr></argument>, <argument pos:start="267:60" pos:end="267:66"><expr pos:start="267:60" pos:end="267:66"><operator pos:start="267:60" pos:end="267:60">&amp;</operator><name pos:start="267:61" pos:end="267:66"><name pos:start="267:61" pos:end="267:61">c</name><operator pos:start="267:62" pos:end="267:63">-&gt;</operator><name pos:start="267:64" pos:end="267:66">ecx</name></name></expr></argument>, <argument pos:start="267:69" pos:end="267:75"><expr pos:start="267:69" pos:end="267:75"><operator pos:start="267:69" pos:end="267:69">&amp;</operator><name pos:start="267:70" pos:end="267:75"><name pos:start="267:70" pos:end="267:70">c</name><operator pos:start="267:71" pos:end="267:72">-&gt;</operator><name pos:start="267:73" pos:end="267:75">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="271:17" pos:end="275:17"><if pos:start="271:17" pos:end="275:17">if <condition pos:start="271:20" pos:end="271:42">(<expr pos:start="271:21" pos:end="271:41"><name pos:start="271:21" pos:end="271:21">i</name> <operator pos:start="271:23" pos:end="271:24">==</operator> <literal type="number" pos:start="271:26" pos:end="271:26">4</literal> <operator pos:start="271:28" pos:end="271:29">&amp;&amp;</operator> <name pos:start="271:31" pos:end="271:36"><name pos:start="271:31" pos:end="271:31">c</name><operator pos:start="271:32" pos:end="271:33">-&gt;</operator><name pos:start="271:34" pos:end="271:36">eax</name></name> <operator pos:start="271:38" pos:end="271:39">==</operator> <literal type="number" pos:start="271:41" pos:end="271:41">0</literal></expr>)</condition> <block pos:start="271:44" pos:end="275:17">{<block_content pos:start="273:21" pos:end="273:26">

                    <break pos:start="273:21" pos:end="273:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="277:17" pos:end="281:17"><if pos:start="277:17" pos:end="281:17">if <condition pos:start="277:20" pos:end="277:51">(<expr pos:start="277:21" pos:end="277:50"><name pos:start="277:21" pos:end="277:21">i</name> <operator pos:start="277:23" pos:end="277:24">==</operator> <literal type="number" pos:start="277:26" pos:end="277:28">0xb</literal> <operator pos:start="277:30" pos:end="277:31">&amp;&amp;</operator> <operator pos:start="277:33" pos:end="277:33">!</operator><operator pos:start="277:34" pos:end="277:34">(</operator><name pos:start="277:35" pos:end="277:40"><name pos:start="277:35" pos:end="277:35">c</name><operator pos:start="277:36" pos:end="277:37">-&gt;</operator><name pos:start="277:38" pos:end="277:40">ecx</name></name> <operator pos:start="277:42" pos:end="277:42">&amp;</operator> <literal type="number" pos:start="277:44" pos:end="277:49">0xff00</literal><operator pos:start="277:50" pos:end="277:50">)</operator></expr>)</condition> <block pos:start="277:53" pos:end="281:17">{<block_content pos:start="279:21" pos:end="279:26">

                    <break pos:start="279:21" pos:end="279:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="283:17" pos:end="287:17"><if pos:start="283:17" pos:end="287:17">if <condition pos:start="283:20" pos:end="283:44">(<expr pos:start="283:21" pos:end="283:43"><name pos:start="283:21" pos:end="283:21">i</name> <operator pos:start="283:23" pos:end="283:24">==</operator> <literal type="number" pos:start="283:26" pos:end="283:28">0xd</literal> <operator pos:start="283:30" pos:end="283:31">&amp;&amp;</operator> <name pos:start="283:33" pos:end="283:38"><name pos:start="283:33" pos:end="283:33">c</name><operator pos:start="283:34" pos:end="283:35">-&gt;</operator><name pos:start="283:36" pos:end="283:38">eax</name></name> <operator pos:start="283:40" pos:end="283:41">==</operator> <literal type="number" pos:start="283:43" pos:end="283:43">0</literal></expr>)</condition> <block pos:start="283:46" pos:end="287:17">{<block_content pos:start="285:21" pos:end="285:29">

                    <continue pos:start="285:21" pos:end="285:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="289:17" pos:end="297:17"><if pos:start="289:17" pos:end="297:17">if <condition pos:start="289:20" pos:end="289:53">(<expr pos:start="289:21" pos:end="289:52"><name pos:start="289:21" pos:end="289:27">cpuid_i</name> <operator pos:start="289:29" pos:end="289:30">==</operator> <name pos:start="289:32" pos:end="289:52">KVM_MAX_CPUID_ENTRIES</name></expr>)</condition> <block pos:start="289:55" pos:end="297:17">{<block_content pos:start="291:21" pos:end="295:28">

                    <expr_stmt pos:start="291:21" pos:end="293:64"><expr pos:start="291:21" pos:end="293:63"><call pos:start="291:21" pos:end="293:63"><name pos:start="291:21" pos:end="291:27">fprintf</name><argument_list pos:start="291:28" pos:end="293:63">(<argument pos:start="291:29" pos:end="291:34"><expr pos:start="291:29" pos:end="291:34"><name pos:start="291:29" pos:end="291:34">stderr</name></expr></argument>, <argument pos:start="291:37" pos:end="293:56"><expr pos:start="291:37" pos:end="293:56"><literal type="string" pos:start="291:37" pos:end="291:71">"cpuid_data is full, no space for "</literal>

                            <literal type="string" pos:start="293:29" pos:end="293:56">"cpuid(eax:0x%x,ecx:0x%x)\n"</literal></expr></argument>, <argument pos:start="293:59" pos:end="293:59"><expr pos:start="293:59" pos:end="293:59"><name pos:start="293:59" pos:end="293:59">i</name></expr></argument>, <argument pos:start="293:62" pos:end="293:62"><expr pos:start="293:62" pos:end="293:62"><name pos:start="293:62" pos:end="293:62">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:28"><expr pos:start="295:21" pos:end="295:27"><call pos:start="295:21" pos:end="295:27"><name pos:start="295:21" pos:end="295:25">abort</name><argument_list pos:start="295:26" pos:end="295:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:51"><expr pos:start="299:17" pos:end="299:50"><name pos:start="299:17" pos:end="299:17">c</name> <operator pos:start="299:19" pos:end="299:19">=</operator> <operator pos:start="299:21" pos:end="299:21">&amp;</operator><name pos:start="299:22" pos:end="299:50"><name pos:start="299:22" pos:end="299:31">cpuid_data</name><operator pos:start="299:32" pos:end="299:32">.</operator><name pos:start="299:33" pos:end="299:39">entries</name><index pos:start="299:40" pos:end="299:50">[<expr pos:start="299:41" pos:end="299:49"><name pos:start="299:41" pos:end="299:47">cpuid_i</name><operator pos:start="299:48" pos:end="299:49">++</operator></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="303:13" pos:end="303:18">break;</break>

        <default pos:start="305:9" pos:end="305:16">default:</default>

            <expr_stmt pos:start="307:13" pos:end="307:28"><expr pos:start="307:13" pos:end="307:27"><name pos:start="307:13" pos:end="307:23"><name pos:start="307:13" pos:end="307:13">c</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:23">function</name></name> <operator pos:start="307:25" pos:end="307:25">=</operator> <name pos:start="307:27" pos:end="307:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:25"><expr pos:start="309:13" pos:end="309:24"><name pos:start="309:13" pos:end="309:20"><name pos:start="309:13" pos:end="309:13">c</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:20">flags</name></name> <operator pos:start="309:22" pos:end="309:22">=</operator> <literal type="number" pos:start="309:24" pos:end="309:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:73"><expr pos:start="311:13" pos:end="311:72"><call pos:start="311:13" pos:end="311:72"><name pos:start="311:13" pos:end="311:25">cpu_x86_cpuid</name><argument_list pos:start="311:26" pos:end="311:72">(<argument pos:start="311:27" pos:end="311:29"><expr pos:start="311:27" pos:end="311:29"><name pos:start="311:27" pos:end="311:29">env</name></expr></argument>, <argument pos:start="311:32" pos:end="311:32"><expr pos:start="311:32" pos:end="311:32"><name pos:start="311:32" pos:end="311:32">i</name></expr></argument>, <argument pos:start="311:35" pos:end="311:35"><expr pos:start="311:35" pos:end="311:35"><literal type="number" pos:start="311:35" pos:end="311:35">0</literal></expr></argument>, <argument pos:start="311:38" pos:end="311:44"><expr pos:start="311:38" pos:end="311:44"><operator pos:start="311:38" pos:end="311:38">&amp;</operator><name pos:start="311:39" pos:end="311:44"><name pos:start="311:39" pos:end="311:39">c</name><operator pos:start="311:40" pos:end="311:41">-&gt;</operator><name pos:start="311:42" pos:end="311:44">eax</name></name></expr></argument>, <argument pos:start="311:47" pos:end="311:53"><expr pos:start="311:47" pos:end="311:53"><operator pos:start="311:47" pos:end="311:47">&amp;</operator><name pos:start="311:48" pos:end="311:53"><name pos:start="311:48" pos:end="311:48">c</name><operator pos:start="311:49" pos:end="311:50">-&gt;</operator><name pos:start="311:51" pos:end="311:53">ebx</name></name></expr></argument>, <argument pos:start="311:56" pos:end="311:62"><expr pos:start="311:56" pos:end="311:62"><operator pos:start="311:56" pos:end="311:56">&amp;</operator><name pos:start="311:57" pos:end="311:62"><name pos:start="311:57" pos:end="311:57">c</name><operator pos:start="311:58" pos:end="311:59">-&gt;</operator><name pos:start="311:60" pos:end="311:62">ecx</name></name></expr></argument>, <argument pos:start="311:65" pos:end="311:71"><expr pos:start="311:65" pos:end="311:71"><operator pos:start="311:65" pos:end="311:65">&amp;</operator><name pos:start="311:66" pos:end="311:71"><name pos:start="311:66" pos:end="311:66">c</name><operator pos:start="311:67" pos:end="311:68">-&gt;</operator><name pos:start="311:69" pos:end="311:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="313:13" pos:end="313:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <if_stmt pos:start="321:5" pos:end="353:5"><if pos:start="321:5" pos:end="353:5">if <condition pos:start="321:8" pos:end="321:22">(<expr pos:start="321:9" pos:end="321:21"><name pos:start="321:9" pos:end="321:13">limit</name> <operator pos:start="321:15" pos:end="321:16">&gt;=</operator> <literal type="number" pos:start="321:18" pos:end="321:21">0x0a</literal></expr>)</condition> <block pos:start="321:24" pos:end="353:5">{<block_content pos:start="323:9" pos:end="351:9">

        <decl_stmt pos:start="323:9" pos:end="323:21"><decl pos:start="323:9" pos:end="323:20"><type pos:start="323:9" pos:end="323:16"><name pos:start="323:9" pos:end="323:16">uint32_t</name></type> <name pos:start="323:18" pos:end="323:20">ver</name></decl>;</decl_stmt>



        <expr_stmt pos:start="327:9" pos:end="327:69"><expr pos:start="327:9" pos:end="327:68"><call pos:start="327:9" pos:end="327:68"><name pos:start="327:9" pos:end="327:21">cpu_x86_cpuid</name><argument_list pos:start="327:22" pos:end="327:68">(<argument pos:start="327:23" pos:end="327:25"><expr pos:start="327:23" pos:end="327:25"><name pos:start="327:23" pos:end="327:25">env</name></expr></argument>, <argument pos:start="327:28" pos:end="327:31"><expr pos:start="327:28" pos:end="327:31"><literal type="number" pos:start="327:28" pos:end="327:31">0x0a</literal></expr></argument>, <argument pos:start="327:34" pos:end="327:34"><expr pos:start="327:34" pos:end="327:34"><literal type="number" pos:start="327:34" pos:end="327:34">0</literal></expr></argument>, <argument pos:start="327:37" pos:end="327:40"><expr pos:start="327:37" pos:end="327:40"><operator pos:start="327:37" pos:end="327:37">&amp;</operator><name pos:start="327:38" pos:end="327:40">ver</name></expr></argument>, <argument pos:start="327:43" pos:end="327:49"><expr pos:start="327:43" pos:end="327:49"><operator pos:start="327:43" pos:end="327:43">&amp;</operator><name pos:start="327:44" pos:end="327:49">unused</name></expr></argument>, <argument pos:start="327:52" pos:end="327:58"><expr pos:start="327:52" pos:end="327:58"><operator pos:start="327:52" pos:end="327:52">&amp;</operator><name pos:start="327:53" pos:end="327:58">unused</name></expr></argument>, <argument pos:start="327:61" pos:end="327:67"><expr pos:start="327:61" pos:end="327:67"><operator pos:start="327:61" pos:end="327:61">&amp;</operator><name pos:start="327:62" pos:end="327:67">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="329:9" pos:end="351:9"><if pos:start="329:9" pos:end="351:9">if <condition pos:start="329:12" pos:end="329:29">(<expr pos:start="329:13" pos:end="329:28"><operator pos:start="329:13" pos:end="329:13">(</operator><name pos:start="329:14" pos:end="329:16">ver</name> <operator pos:start="329:18" pos:end="329:18">&amp;</operator> <literal type="number" pos:start="329:20" pos:end="329:23">0xff</literal><operator pos:start="329:24" pos:end="329:24">)</operator> <operator pos:start="329:26" pos:end="329:26">&gt;</operator> <literal type="number" pos:start="329:28" pos:end="329:28">0</literal></expr>)</condition> <block pos:start="329:31" pos:end="351:9">{<block_content pos:start="331:13" pos:end="349:13">

            <expr_stmt pos:start="331:13" pos:end="331:45"><expr pos:start="331:13" pos:end="331:44"><name pos:start="331:13" pos:end="331:37">has_msr_architectural_pmu</name> <operator pos:start="331:39" pos:end="331:39">=</operator> <name pos:start="331:41" pos:end="331:44">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:65"><expr pos:start="333:13" pos:end="333:64"><name pos:start="333:13" pos:end="333:42">num_architectural_pmu_counters</name> <operator pos:start="333:44" pos:end="333:44">=</operator> <operator pos:start="333:46" pos:end="333:46">(</operator><name pos:start="333:47" pos:end="333:49">ver</name> <operator pos:start="333:51" pos:end="333:51">&amp;</operator> <literal type="number" pos:start="333:53" pos:end="333:58">0xff00</literal><operator pos:start="333:59" pos:end="333:59">)</operator> <operator pos:start="333:61" pos:end="333:62">&gt;&gt;</operator> <literal type="number" pos:start="333:64" pos:end="333:64">8</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="337:13" pos:end="343:15">/* Shouldn't be more than 32, since that's the number of bits

             * available in EBX to tell us _which_ counters are available.

             * Play it safe.

             */</comment>

            <if_stmt pos:start="345:13" pos:end="349:13"><if pos:start="345:13" pos:end="349:13">if <condition pos:start="345:16" pos:end="345:65">(<expr pos:start="345:17" pos:end="345:64"><name pos:start="345:17" pos:end="345:46">num_architectural_pmu_counters</name> <operator pos:start="345:48" pos:end="345:48">&gt;</operator> <name pos:start="345:50" pos:end="345:64">MAX_GP_COUNTERS</name></expr>)</condition> <block pos:start="345:67" pos:end="349:13">{<block_content pos:start="347:17" pos:end="347:65">

                <expr_stmt pos:start="347:17" pos:end="347:65"><expr pos:start="347:17" pos:end="347:64"><name pos:start="347:17" pos:end="347:46">num_architectural_pmu_counters</name> <operator pos:start="347:48" pos:end="347:48">=</operator> <name pos:start="347:50" pos:end="347:64">MAX_GP_COUNTERS</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="357:5" pos:end="357:73"><expr pos:start="357:5" pos:end="357:72"><call pos:start="357:5" pos:end="357:72"><name pos:start="357:5" pos:end="357:17">cpu_x86_cpuid</name><argument_list pos:start="357:18" pos:end="357:72">(<argument pos:start="357:19" pos:end="357:21"><expr pos:start="357:19" pos:end="357:21"><name pos:start="357:19" pos:end="357:21">env</name></expr></argument>, <argument pos:start="357:24" pos:end="357:33"><expr pos:start="357:24" pos:end="357:33"><literal type="number" pos:start="357:24" pos:end="357:33">0x80000000</literal></expr></argument>, <argument pos:start="357:36" pos:end="357:36"><expr pos:start="357:36" pos:end="357:36"><literal type="number" pos:start="357:36" pos:end="357:36">0</literal></expr></argument>, <argument pos:start="357:39" pos:end="357:44"><expr pos:start="357:39" pos:end="357:44"><operator pos:start="357:39" pos:end="357:39">&amp;</operator><name pos:start="357:40" pos:end="357:44">limit</name></expr></argument>, <argument pos:start="357:47" pos:end="357:53"><expr pos:start="357:47" pos:end="357:53"><operator pos:start="357:47" pos:end="357:47">&amp;</operator><name pos:start="357:48" pos:end="357:53">unused</name></expr></argument>, <argument pos:start="357:56" pos:end="357:62"><expr pos:start="357:56" pos:end="357:62"><operator pos:start="357:56" pos:end="357:56">&amp;</operator><name pos:start="357:57" pos:end="357:62">unused</name></expr></argument>, <argument pos:start="357:65" pos:end="357:71"><expr pos:start="357:65" pos:end="357:71"><operator pos:start="357:65" pos:end="357:65">&amp;</operator><name pos:start="357:66" pos:end="357:71">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="361:5" pos:end="381:5">for <control pos:start="361:9" pos:end="361:41">(<init pos:start="361:10" pos:end="361:24"><expr pos:start="361:10" pos:end="361:23"><name pos:start="361:10" pos:end="361:10">i</name> <operator pos:start="361:12" pos:end="361:12">=</operator> <literal type="number" pos:start="361:14" pos:end="361:23">0x80000000</literal></expr>;</init> <condition pos:start="361:26" pos:end="361:36"><expr pos:start="361:26" pos:end="361:35"><name pos:start="361:26" pos:end="361:26">i</name> <operator pos:start="361:28" pos:end="361:29">&lt;=</operator> <name pos:start="361:31" pos:end="361:35">limit</name></expr>;</condition> <incr pos:start="361:38" pos:end="361:40"><expr pos:start="361:38" pos:end="361:40"><name pos:start="361:38" pos:end="361:38">i</name><operator pos:start="361:39" pos:end="361:40">++</operator></expr></incr>)</control> <block pos:start="361:43" pos:end="381:5">{<block_content pos:start="363:9" pos:end="379:69">

        <if_stmt pos:start="363:9" pos:end="369:9"><if pos:start="363:9" pos:end="369:9">if <condition pos:start="363:12" pos:end="363:45">(<expr pos:start="363:13" pos:end="363:44"><name pos:start="363:13" pos:end="363:19">cpuid_i</name> <operator pos:start="363:21" pos:end="363:22">==</operator> <name pos:start="363:24" pos:end="363:44">KVM_MAX_CPUID_ENTRIES</name></expr>)</condition> <block pos:start="363:47" pos:end="369:9">{<block_content pos:start="365:13" pos:end="367:20">

            <expr_stmt pos:start="365:13" pos:end="365:71"><expr pos:start="365:13" pos:end="365:70"><call pos:start="365:13" pos:end="365:70"><name pos:start="365:13" pos:end="365:19">fprintf</name><argument_list pos:start="365:20" pos:end="365:70">(<argument pos:start="365:21" pos:end="365:26"><expr pos:start="365:21" pos:end="365:26"><name pos:start="365:21" pos:end="365:26">stderr</name></expr></argument>, <argument pos:start="365:29" pos:end="365:62"><expr pos:start="365:29" pos:end="365:62"><literal type="string" pos:start="365:29" pos:end="365:62">"unsupported xlevel value: 0x%x\n"</literal></expr></argument>, <argument pos:start="365:65" pos:end="365:69"><expr pos:start="365:65" pos:end="365:69"><name pos:start="365:65" pos:end="365:69">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:20"><expr pos:start="367:13" pos:end="367:19"><call pos:start="367:13" pos:end="367:19"><name pos:start="367:13" pos:end="367:17">abort</name><argument_list pos:start="367:18" pos:end="367:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:43"><expr pos:start="371:9" pos:end="371:42"><name pos:start="371:9" pos:end="371:9">c</name> <operator pos:start="371:11" pos:end="371:11">=</operator> <operator pos:start="371:13" pos:end="371:13">&amp;</operator><name pos:start="371:14" pos:end="371:42"><name pos:start="371:14" pos:end="371:23">cpuid_data</name><operator pos:start="371:24" pos:end="371:24">.</operator><name pos:start="371:25" pos:end="371:31">entries</name><index pos:start="371:32" pos:end="371:42">[<expr pos:start="371:33" pos:end="371:41"><name pos:start="371:33" pos:end="371:39">cpuid_i</name><operator pos:start="371:40" pos:end="371:41">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="375:9" pos:end="375:24"><expr pos:start="375:9" pos:end="375:23"><name pos:start="375:9" pos:end="375:19"><name pos:start="375:9" pos:end="375:9">c</name><operator pos:start="375:10" pos:end="375:11">-&gt;</operator><name pos:start="375:12" pos:end="375:19">function</name></name> <operator pos:start="375:21" pos:end="375:21">=</operator> <name pos:start="375:23" pos:end="375:23">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:21"><expr pos:start="377:9" pos:end="377:20"><name pos:start="377:9" pos:end="377:16"><name pos:start="377:9" pos:end="377:9">c</name><operator pos:start="377:10" pos:end="377:11">-&gt;</operator><name pos:start="377:12" pos:end="377:16">flags</name></name> <operator pos:start="377:18" pos:end="377:18">=</operator> <literal type="number" pos:start="377:20" pos:end="377:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:69"><expr pos:start="379:9" pos:end="379:68"><call pos:start="379:9" pos:end="379:68"><name pos:start="379:9" pos:end="379:21">cpu_x86_cpuid</name><argument_list pos:start="379:22" pos:end="379:68">(<argument pos:start="379:23" pos:end="379:25"><expr pos:start="379:23" pos:end="379:25"><name pos:start="379:23" pos:end="379:25">env</name></expr></argument>, <argument pos:start="379:28" pos:end="379:28"><expr pos:start="379:28" pos:end="379:28"><name pos:start="379:28" pos:end="379:28">i</name></expr></argument>, <argument pos:start="379:31" pos:end="379:31"><expr pos:start="379:31" pos:end="379:31"><literal type="number" pos:start="379:31" pos:end="379:31">0</literal></expr></argument>, <argument pos:start="379:34" pos:end="379:40"><expr pos:start="379:34" pos:end="379:40"><operator pos:start="379:34" pos:end="379:34">&amp;</operator><name pos:start="379:35" pos:end="379:40"><name pos:start="379:35" pos:end="379:35">c</name><operator pos:start="379:36" pos:end="379:37">-&gt;</operator><name pos:start="379:38" pos:end="379:40">eax</name></name></expr></argument>, <argument pos:start="379:43" pos:end="379:49"><expr pos:start="379:43" pos:end="379:49"><operator pos:start="379:43" pos:end="379:43">&amp;</operator><name pos:start="379:44" pos:end="379:49"><name pos:start="379:44" pos:end="379:44">c</name><operator pos:start="379:45" pos:end="379:46">-&gt;</operator><name pos:start="379:47" pos:end="379:49">ebx</name></name></expr></argument>, <argument pos:start="379:52" pos:end="379:58"><expr pos:start="379:52" pos:end="379:58"><operator pos:start="379:52" pos:end="379:52">&amp;</operator><name pos:start="379:53" pos:end="379:58"><name pos:start="379:53" pos:end="379:53">c</name><operator pos:start="379:54" pos:end="379:55">-&gt;</operator><name pos:start="379:56" pos:end="379:58">ecx</name></name></expr></argument>, <argument pos:start="379:61" pos:end="379:67"><expr pos:start="379:61" pos:end="379:67"><operator pos:start="379:61" pos:end="379:61">&amp;</operator><name pos:start="379:62" pos:end="379:67"><name pos:start="379:62" pos:end="379:62">c</name><operator pos:start="379:63" pos:end="379:64">-&gt;</operator><name pos:start="379:65" pos:end="379:67">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="385:5" pos:end="385:63">/* Call Centaur's CPUID instructions they are supported. */</comment>

    <if_stmt pos:start="387:5" pos:end="415:5"><if pos:start="387:5" pos:end="415:5">if <condition pos:start="387:8" pos:end="387:31">(<expr pos:start="387:9" pos:end="387:30"><name pos:start="387:9" pos:end="387:26"><name pos:start="387:9" pos:end="387:11">env</name><operator pos:start="387:12" pos:end="387:13">-&gt;</operator><name pos:start="387:14" pos:end="387:26">cpuid_xlevel2</name></name> <operator pos:start="387:28" pos:end="387:28">&gt;</operator> <literal type="number" pos:start="387:30" pos:end="387:30">0</literal></expr>)</condition> <block pos:start="387:33" pos:end="415:5">{<block_content pos:start="389:9" pos:end="413:9">

        <expr_stmt pos:start="389:9" pos:end="389:77"><expr pos:start="389:9" pos:end="389:76"><call pos:start="389:9" pos:end="389:76"><name pos:start="389:9" pos:end="389:21">cpu_x86_cpuid</name><argument_list pos:start="389:22" pos:end="389:76">(<argument pos:start="389:23" pos:end="389:25"><expr pos:start="389:23" pos:end="389:25"><name pos:start="389:23" pos:end="389:25">env</name></expr></argument>, <argument pos:start="389:28" pos:end="389:37"><expr pos:start="389:28" pos:end="389:37"><literal type="number" pos:start="389:28" pos:end="389:37">0xC0000000</literal></expr></argument>, <argument pos:start="389:40" pos:end="389:40"><expr pos:start="389:40" pos:end="389:40"><literal type="number" pos:start="389:40" pos:end="389:40">0</literal></expr></argument>, <argument pos:start="389:43" pos:end="389:48"><expr pos:start="389:43" pos:end="389:48"><operator pos:start="389:43" pos:end="389:43">&amp;</operator><name pos:start="389:44" pos:end="389:48">limit</name></expr></argument>, <argument pos:start="389:51" pos:end="389:57"><expr pos:start="389:51" pos:end="389:57"><operator pos:start="389:51" pos:end="389:51">&amp;</operator><name pos:start="389:52" pos:end="389:57">unused</name></expr></argument>, <argument pos:start="389:60" pos:end="389:66"><expr pos:start="389:60" pos:end="389:66"><operator pos:start="389:60" pos:end="389:60">&amp;</operator><name pos:start="389:61" pos:end="389:66">unused</name></expr></argument>, <argument pos:start="389:69" pos:end="389:75"><expr pos:start="389:69" pos:end="389:75"><operator pos:start="389:69" pos:end="389:69">&amp;</operator><name pos:start="389:70" pos:end="389:75">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="393:9" pos:end="413:9">for <control pos:start="393:13" pos:end="393:45">(<init pos:start="393:14" pos:end="393:28"><expr pos:start="393:14" pos:end="393:27"><name pos:start="393:14" pos:end="393:14">i</name> <operator pos:start="393:16" pos:end="393:16">=</operator> <literal type="number" pos:start="393:18" pos:end="393:27">0xC0000000</literal></expr>;</init> <condition pos:start="393:30" pos:end="393:40"><expr pos:start="393:30" pos:end="393:39"><name pos:start="393:30" pos:end="393:30">i</name> <operator pos:start="393:32" pos:end="393:33">&lt;=</operator> <name pos:start="393:35" pos:end="393:39">limit</name></expr>;</condition> <incr pos:start="393:42" pos:end="393:44"><expr pos:start="393:42" pos:end="393:44"><name pos:start="393:42" pos:end="393:42">i</name><operator pos:start="393:43" pos:end="393:44">++</operator></expr></incr>)</control> <block pos:start="393:47" pos:end="413:9">{<block_content pos:start="395:13" pos:end="411:73">

            <if_stmt pos:start="395:13" pos:end="401:13"><if pos:start="395:13" pos:end="401:13">if <condition pos:start="395:16" pos:end="395:49">(<expr pos:start="395:17" pos:end="395:48"><name pos:start="395:17" pos:end="395:23">cpuid_i</name> <operator pos:start="395:25" pos:end="395:26">==</operator> <name pos:start="395:28" pos:end="395:48">KVM_MAX_CPUID_ENTRIES</name></expr>)</condition> <block pos:start="395:51" pos:end="401:13">{<block_content pos:start="397:17" pos:end="399:24">

                <expr_stmt pos:start="397:17" pos:end="397:76"><expr pos:start="397:17" pos:end="397:75"><call pos:start="397:17" pos:end="397:75"><name pos:start="397:17" pos:end="397:23">fprintf</name><argument_list pos:start="397:24" pos:end="397:75">(<argument pos:start="397:25" pos:end="397:30"><expr pos:start="397:25" pos:end="397:30"><name pos:start="397:25" pos:end="397:30">stderr</name></expr></argument>, <argument pos:start="397:33" pos:end="397:67"><expr pos:start="397:33" pos:end="397:67"><literal type="string" pos:start="397:33" pos:end="397:67">"unsupported xlevel2 value: 0x%x\n"</literal></expr></argument>, <argument pos:start="397:70" pos:end="397:74"><expr pos:start="397:70" pos:end="397:74"><name pos:start="397:70" pos:end="397:74">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:24"><expr pos:start="399:17" pos:end="399:23"><call pos:start="399:17" pos:end="399:23"><name pos:start="399:17" pos:end="399:21">abort</name><argument_list pos:start="399:22" pos:end="399:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:47"><expr pos:start="403:13" pos:end="403:46"><name pos:start="403:13" pos:end="403:13">c</name> <operator pos:start="403:15" pos:end="403:15">=</operator> <operator pos:start="403:17" pos:end="403:17">&amp;</operator><name pos:start="403:18" pos:end="403:46"><name pos:start="403:18" pos:end="403:27">cpuid_data</name><operator pos:start="403:28" pos:end="403:28">.</operator><name pos:start="403:29" pos:end="403:35">entries</name><index pos:start="403:36" pos:end="403:46">[<expr pos:start="403:37" pos:end="403:45"><name pos:start="403:37" pos:end="403:43">cpuid_i</name><operator pos:start="403:44" pos:end="403:45">++</operator></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="407:13" pos:end="407:28"><expr pos:start="407:13" pos:end="407:27"><name pos:start="407:13" pos:end="407:23"><name pos:start="407:13" pos:end="407:13">c</name><operator pos:start="407:14" pos:end="407:15">-&gt;</operator><name pos:start="407:16" pos:end="407:23">function</name></name> <operator pos:start="407:25" pos:end="407:25">=</operator> <name pos:start="407:27" pos:end="407:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:25"><expr pos:start="409:13" pos:end="409:24"><name pos:start="409:13" pos:end="409:20"><name pos:start="409:13" pos:end="409:13">c</name><operator pos:start="409:14" pos:end="409:15">-&gt;</operator><name pos:start="409:16" pos:end="409:20">flags</name></name> <operator pos:start="409:22" pos:end="409:22">=</operator> <literal type="number" pos:start="409:24" pos:end="409:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:73"><expr pos:start="411:13" pos:end="411:72"><call pos:start="411:13" pos:end="411:72"><name pos:start="411:13" pos:end="411:25">cpu_x86_cpuid</name><argument_list pos:start="411:26" pos:end="411:72">(<argument pos:start="411:27" pos:end="411:29"><expr pos:start="411:27" pos:end="411:29"><name pos:start="411:27" pos:end="411:29">env</name></expr></argument>, <argument pos:start="411:32" pos:end="411:32"><expr pos:start="411:32" pos:end="411:32"><name pos:start="411:32" pos:end="411:32">i</name></expr></argument>, <argument pos:start="411:35" pos:end="411:35"><expr pos:start="411:35" pos:end="411:35"><literal type="number" pos:start="411:35" pos:end="411:35">0</literal></expr></argument>, <argument pos:start="411:38" pos:end="411:44"><expr pos:start="411:38" pos:end="411:44"><operator pos:start="411:38" pos:end="411:38">&amp;</operator><name pos:start="411:39" pos:end="411:44"><name pos:start="411:39" pos:end="411:39">c</name><operator pos:start="411:40" pos:end="411:41">-&gt;</operator><name pos:start="411:42" pos:end="411:44">eax</name></name></expr></argument>, <argument pos:start="411:47" pos:end="411:53"><expr pos:start="411:47" pos:end="411:53"><operator pos:start="411:47" pos:end="411:47">&amp;</operator><name pos:start="411:48" pos:end="411:53"><name pos:start="411:48" pos:end="411:48">c</name><operator pos:start="411:49" pos:end="411:50">-&gt;</operator><name pos:start="411:51" pos:end="411:53">ebx</name></name></expr></argument>, <argument pos:start="411:56" pos:end="411:62"><expr pos:start="411:56" pos:end="411:62"><operator pos:start="411:56" pos:end="411:56">&amp;</operator><name pos:start="411:57" pos:end="411:62"><name pos:start="411:57" pos:end="411:57">c</name><operator pos:start="411:58" pos:end="411:59">-&gt;</operator><name pos:start="411:60" pos:end="411:62">ecx</name></name></expr></argument>, <argument pos:start="411:65" pos:end="411:71"><expr pos:start="411:65" pos:end="411:71"><operator pos:start="411:65" pos:end="411:65">&amp;</operator><name pos:start="411:66" pos:end="411:71"><name pos:start="411:66" pos:end="411:66">c</name><operator pos:start="411:67" pos:end="411:68">-&gt;</operator><name pos:start="411:69" pos:end="411:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="419:5" pos:end="419:36"><expr pos:start="419:5" pos:end="419:35"><name pos:start="419:5" pos:end="419:25"><name pos:start="419:5" pos:end="419:14">cpuid_data</name><operator pos:start="419:15" pos:end="419:15">.</operator><name pos:start="419:16" pos:end="419:20">cpuid</name><operator pos:start="419:21" pos:end="419:21">.</operator><name pos:start="419:22" pos:end="419:25">nent</name></name> <operator pos:start="419:27" pos:end="419:27">=</operator> <name pos:start="419:29" pos:end="419:35">cpuid_i</name></expr>;</expr_stmt>



    <if_stmt pos:start="423:5" pos:end="475:5"><if pos:start="423:5" pos:end="475:5">if <condition pos:start="423:8" pos:end="429:63">(<expr pos:start="423:9" pos:end="429:62"><operator pos:start="423:9" pos:end="423:9">(</operator><operator pos:start="423:10" pos:end="423:10">(</operator><name pos:start="423:11" pos:end="423:28"><name pos:start="423:11" pos:end="423:13">env</name><operator pos:start="423:14" pos:end="423:15">-&gt;</operator><name pos:start="423:16" pos:end="423:28">cpuid_version</name></name> <operator pos:start="423:30" pos:end="423:31">&gt;&gt;</operator> <literal type="number" pos:start="423:33" pos:end="423:33">8</literal><operator pos:start="423:34" pos:end="423:34">)</operator><operator pos:start="423:35" pos:end="423:35">&amp;</operator><literal type="number" pos:start="423:36" pos:end="423:38">0xF</literal><operator pos:start="423:39" pos:end="423:39">)</operator> <operator pos:start="423:41" pos:end="423:42">&gt;=</operator> <literal type="number" pos:start="423:44" pos:end="423:44">6</literal>

        <operator pos:start="425:9" pos:end="425:10">&amp;&amp;</operator> <operator pos:start="425:12" pos:end="425:12">(</operator><name pos:start="425:13" pos:end="425:37"><name pos:start="425:13" pos:end="425:15">env</name><operator pos:start="425:16" pos:end="425:17">-&gt;</operator><name pos:start="425:18" pos:end="425:25">features</name><index pos:start="425:26" pos:end="425:37">[<expr pos:start="425:27" pos:end="425:36"><name pos:start="425:27" pos:end="425:36">FEAT_1_EDX</name></expr>]</index></name> <operator pos:start="425:39" pos:end="425:39">&amp;</operator> <operator pos:start="425:41" pos:end="425:41">(</operator><name pos:start="425:42" pos:end="425:50">CPUID_MCE</name> <operator pos:start="425:52" pos:end="425:52">|</operator> <name pos:start="425:54" pos:end="425:62">CPUID_MCA</name><operator pos:start="425:63" pos:end="425:63">)</operator><operator pos:start="425:64" pos:end="425:64">)</operator> <operator pos:start="425:66" pos:end="425:67">==</operator>

           <operator pos:start="427:12" pos:end="427:12">(</operator><name pos:start="427:13" pos:end="427:21">CPUID_MCE</name> <operator pos:start="427:23" pos:end="427:23">|</operator> <name pos:start="427:25" pos:end="427:33">CPUID_MCA</name><operator pos:start="427:34" pos:end="427:34">)</operator>

        <operator pos:start="429:9" pos:end="429:10">&amp;&amp;</operator> <call pos:start="429:12" pos:end="429:58"><name pos:start="429:12" pos:end="429:30">kvm_check_extension</name><argument_list pos:start="429:31" pos:end="429:58">(<argument pos:start="429:32" pos:end="429:44"><expr pos:start="429:32" pos:end="429:44"><name pos:start="429:32" pos:end="429:44"><name pos:start="429:32" pos:end="429:33">cs</name><operator pos:start="429:34" pos:end="429:35">-&gt;</operator><name pos:start="429:36" pos:end="429:44">kvm_state</name></name></expr></argument>, <argument pos:start="429:47" pos:end="429:57"><expr pos:start="429:47" pos:end="429:57"><name pos:start="429:47" pos:end="429:57">KVM_CAP_MCE</name></expr></argument>)</argument_list></call> <operator pos:start="429:60" pos:end="429:60">&gt;</operator> <literal type="number" pos:start="429:62" pos:end="429:62">0</literal></expr>)</condition> <block pos:start="429:65" pos:end="475:5">{<block_content pos:start="431:9" pos:end="473:31">

        <decl_stmt pos:start="431:9" pos:end="431:25"><decl pos:start="431:9" pos:end="431:24"><type pos:start="431:9" pos:end="431:16"><name pos:start="431:9" pos:end="431:16">uint64_t</name></type> <name pos:start="431:18" pos:end="431:24">mcg_cap</name></decl>;</decl_stmt>

        <decl_stmt pos:start="433:9" pos:end="433:18"><decl pos:start="433:9" pos:end="433:17"><type pos:start="433:9" pos:end="433:11"><name pos:start="433:9" pos:end="433:11">int</name></type> <name pos:start="433:13" pos:end="433:17">banks</name></decl>;</decl_stmt>

        <decl_stmt pos:start="435:9" pos:end="435:16"><decl pos:start="435:9" pos:end="435:15"><type pos:start="435:9" pos:end="435:11"><name pos:start="435:9" pos:end="435:11">int</name></type> <name pos:start="435:13" pos:end="435:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="439:9" pos:end="439:73"><expr pos:start="439:9" pos:end="439:72"><name pos:start="439:9" pos:end="439:11">ret</name> <operator pos:start="439:13" pos:end="439:13">=</operator> <call pos:start="439:15" pos:end="439:72"><name pos:start="439:15" pos:end="439:39">kvm_get_mce_cap_supported</name><argument_list pos:start="439:40" pos:end="439:72">(<argument pos:start="439:41" pos:end="439:53"><expr pos:start="439:41" pos:end="439:53"><name pos:start="439:41" pos:end="439:53"><name pos:start="439:41" pos:end="439:42">cs</name><operator pos:start="439:43" pos:end="439:44">-&gt;</operator><name pos:start="439:45" pos:end="439:53">kvm_state</name></name></expr></argument>, <argument pos:start="439:56" pos:end="439:63"><expr pos:start="439:56" pos:end="439:63"><operator pos:start="439:56" pos:end="439:56">&amp;</operator><name pos:start="439:57" pos:end="439:63">mcg_cap</name></expr></argument>, <argument pos:start="439:66" pos:end="439:71"><expr pos:start="439:66" pos:end="439:71"><operator pos:start="439:66" pos:end="439:66">&amp;</operator><name pos:start="439:67" pos:end="439:71">banks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="441:9" pos:end="447:9"><if pos:start="441:9" pos:end="447:9">if <condition pos:start="441:12" pos:end="441:20">(<expr pos:start="441:13" pos:end="441:19"><name pos:start="441:13" pos:end="441:15">ret</name> <operator pos:start="441:17" pos:end="441:17">&lt;</operator> <literal type="number" pos:start="441:19" pos:end="441:19">0</literal></expr>)</condition> <block pos:start="441:22" pos:end="447:9">{<block_content pos:start="443:13" pos:end="445:23">

            <expr_stmt pos:start="443:13" pos:end="443:77"><expr pos:start="443:13" pos:end="443:76"><call pos:start="443:13" pos:end="443:76"><name pos:start="443:13" pos:end="443:19">fprintf</name><argument_list pos:start="443:20" pos:end="443:76">(<argument pos:start="443:21" pos:end="443:26"><expr pos:start="443:21" pos:end="443:26"><name pos:start="443:21" pos:end="443:26">stderr</name></expr></argument>, <argument pos:start="443:29" pos:end="443:59"><expr pos:start="443:29" pos:end="443:59"><literal type="string" pos:start="443:29" pos:end="443:59">"kvm_get_mce_cap_supported: %s"</literal></expr></argument>, <argument pos:start="443:62" pos:end="443:75"><expr pos:start="443:62" pos:end="443:75"><call pos:start="443:62" pos:end="443:75"><name pos:start="443:62" pos:end="443:69">strerror</name><argument_list pos:start="443:70" pos:end="443:75">(<argument pos:start="443:71" pos:end="443:74"><expr pos:start="443:71" pos:end="443:74"><operator pos:start="443:71" pos:end="443:71">-</operator><name pos:start="443:72" pos:end="443:74">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="445:13" pos:end="445:23">return <expr pos:start="445:20" pos:end="445:22"><name pos:start="445:20" pos:end="445:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="451:9" pos:end="455:9"><if pos:start="451:9" pos:end="455:9">if <condition pos:start="451:12" pos:end="451:34">(<expr pos:start="451:13" pos:end="451:33"><name pos:start="451:13" pos:end="451:17">banks</name> <operator pos:start="451:19" pos:end="451:19">&gt;</operator> <name pos:start="451:21" pos:end="451:33">MCE_BANKS_DEF</name></expr>)</condition> <block pos:start="451:36" pos:end="455:9">{<block_content pos:start="453:13" pos:end="453:34">

            <expr_stmt pos:start="453:13" pos:end="453:34"><expr pos:start="453:13" pos:end="453:33"><name pos:start="453:13" pos:end="453:17">banks</name> <operator pos:start="453:19" pos:end="453:19">=</operator> <name pos:start="453:21" pos:end="453:33">MCE_BANKS_DEF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:31"><expr pos:start="457:9" pos:end="457:30"><name pos:start="457:9" pos:end="457:15">mcg_cap</name> <operator pos:start="457:17" pos:end="457:18">&amp;=</operator> <name pos:start="457:20" pos:end="457:30">MCE_CAP_DEF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:25"><expr pos:start="459:9" pos:end="459:24"><name pos:start="459:9" pos:end="459:15">mcg_cap</name> <operator pos:start="459:17" pos:end="459:18">|=</operator> <name pos:start="459:20" pos:end="459:24">banks</name></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:62"><expr pos:start="461:9" pos:end="461:61"><name pos:start="461:9" pos:end="461:11">ret</name> <operator pos:start="461:13" pos:end="461:13">=</operator> <call pos:start="461:15" pos:end="461:61"><name pos:start="461:15" pos:end="461:28">kvm_vcpu_ioctl</name><argument_list pos:start="461:29" pos:end="461:61">(<argument pos:start="461:30" pos:end="461:31"><expr pos:start="461:30" pos:end="461:31"><name pos:start="461:30" pos:end="461:31">cs</name></expr></argument>, <argument pos:start="461:34" pos:end="461:50"><expr pos:start="461:34" pos:end="461:50"><name pos:start="461:34" pos:end="461:50">KVM_X86_SETUP_MCE</name></expr></argument>, <argument pos:start="461:53" pos:end="461:60"><expr pos:start="461:53" pos:end="461:60"><operator pos:start="461:53" pos:end="461:53">&amp;</operator><name pos:start="461:54" pos:end="461:60">mcg_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="463:9" pos:end="469:9"><if pos:start="463:9" pos:end="469:9">if <condition pos:start="463:12" pos:end="463:20">(<expr pos:start="463:13" pos:end="463:19"><name pos:start="463:13" pos:end="463:15">ret</name> <operator pos:start="463:17" pos:end="463:17">&lt;</operator> <literal type="number" pos:start="463:19" pos:end="463:19">0</literal></expr>)</condition> <block pos:start="463:22" pos:end="469:9">{<block_content pos:start="465:13" pos:end="467:23">

            <expr_stmt pos:start="465:13" pos:end="465:69"><expr pos:start="465:13" pos:end="465:68"><call pos:start="465:13" pos:end="465:68"><name pos:start="465:13" pos:end="465:19">fprintf</name><argument_list pos:start="465:20" pos:end="465:68">(<argument pos:start="465:21" pos:end="465:26"><expr pos:start="465:21" pos:end="465:26"><name pos:start="465:21" pos:end="465:26">stderr</name></expr></argument>, <argument pos:start="465:29" pos:end="465:51"><expr pos:start="465:29" pos:end="465:51"><literal type="string" pos:start="465:29" pos:end="465:51">"KVM_X86_SETUP_MCE: %s"</literal></expr></argument>, <argument pos:start="465:54" pos:end="465:67"><expr pos:start="465:54" pos:end="465:67"><call pos:start="465:54" pos:end="465:67"><name pos:start="465:54" pos:end="465:61">strerror</name><argument_list pos:start="465:62" pos:end="465:67">(<argument pos:start="465:63" pos:end="465:66"><expr pos:start="465:63" pos:end="465:66"><operator pos:start="465:63" pos:end="465:63">-</operator><name pos:start="465:64" pos:end="465:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="467:13" pos:end="467:23">return <expr pos:start="467:20" pos:end="467:22"><name pos:start="467:20" pos:end="467:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="473:9" pos:end="473:31"><expr pos:start="473:9" pos:end="473:30"><name pos:start="473:9" pos:end="473:20"><name pos:start="473:9" pos:end="473:11">env</name><operator pos:start="473:12" pos:end="473:13">-&gt;</operator><name pos:start="473:14" pos:end="473:20">mcg_cap</name></name> <operator pos:start="473:22" pos:end="473:22">=</operator> <name pos:start="473:24" pos:end="473:30">mcg_cap</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="479:5" pos:end="479:60"><expr pos:start="479:5" pos:end="479:59"><call pos:start="479:5" pos:end="479:59"><name pos:start="479:5" pos:end="479:36">qemu_add_vm_change_state_handler</name><argument_list pos:start="479:37" pos:end="479:59">(<argument pos:start="479:38" pos:end="479:53"><expr pos:start="479:38" pos:end="479:53"><name pos:start="479:38" pos:end="479:53">cpu_update_state</name></expr></argument>, <argument pos:start="479:56" pos:end="479:58"><expr pos:start="479:56" pos:end="479:58"><name pos:start="479:56" pos:end="479:58">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="483:5" pos:end="483:50"><expr pos:start="483:5" pos:end="483:49"><name pos:start="483:5" pos:end="483:5">c</name> <operator pos:start="483:7" pos:end="483:7">=</operator> <call pos:start="483:9" pos:end="483:49"><name pos:start="483:9" pos:end="483:24">cpuid_find_entry</name><argument_list pos:start="483:25" pos:end="483:49">(<argument pos:start="483:26" pos:end="483:42"><expr pos:start="483:26" pos:end="483:42"><operator pos:start="483:26" pos:end="483:26">&amp;</operator><name pos:start="483:27" pos:end="483:42"><name pos:start="483:27" pos:end="483:36">cpuid_data</name><operator pos:start="483:37" pos:end="483:37">.</operator><name pos:start="483:38" pos:end="483:42">cpuid</name></name></expr></argument>, <argument pos:start="483:45" pos:end="483:45"><expr pos:start="483:45" pos:end="483:45"><literal type="number" pos:start="483:45" pos:end="483:45">1</literal></expr></argument>, <argument pos:start="483:48" pos:end="483:48"><expr pos:start="483:48" pos:end="483:48"><literal type="number" pos:start="483:48" pos:end="483:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="485:5" pos:end="491:5"><if pos:start="485:5" pos:end="491:5">if <condition pos:start="485:8" pos:end="485:10">(<expr pos:start="485:9" pos:end="485:9"><name pos:start="485:9" pos:end="485:9">c</name></expr>)</condition> <block pos:start="485:12" pos:end="491:5">{<block_content pos:start="487:9" pos:end="489:61">

        <expr_stmt pos:start="487:9" pos:end="489:61"><expr pos:start="487:9" pos:end="489:60"><name pos:start="487:9" pos:end="487:31">has_msr_feature_control</name> <operator pos:start="487:33" pos:end="487:33">=</operator> <operator pos:start="487:35" pos:end="487:35">!</operator><operator pos:start="487:36" pos:end="487:36">!</operator><operator pos:start="487:37" pos:end="487:37">(</operator><name pos:start="487:38" pos:end="487:43"><name pos:start="487:38" pos:end="487:38">c</name><operator pos:start="487:39" pos:end="487:40">-&gt;</operator><name pos:start="487:41" pos:end="487:43">ecx</name></name> <operator pos:start="487:45" pos:end="487:45">&amp;</operator> <name pos:start="487:47" pos:end="487:59">CPUID_EXT_VMX</name><operator pos:start="487:60" pos:end="487:60">)</operator> <operator pos:start="487:62" pos:end="487:63">||</operator>

                                  <operator pos:start="489:35" pos:end="489:35">!</operator><operator pos:start="489:36" pos:end="489:36">!</operator><operator pos:start="489:37" pos:end="489:37">(</operator><name pos:start="489:38" pos:end="489:43"><name pos:start="489:38" pos:end="489:38">c</name><operator pos:start="489:39" pos:end="489:40">-&gt;</operator><name pos:start="489:41" pos:end="489:43">ecx</name></name> <operator pos:start="489:45" pos:end="489:45">&amp;</operator> <name pos:start="489:47" pos:end="489:59">CPUID_EXT_SMX</name><operator pos:start="489:60" pos:end="489:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="495:5" pos:end="495:33"><expr pos:start="495:5" pos:end="495:32"><name pos:start="495:5" pos:end="495:28"><name pos:start="495:5" pos:end="495:14">cpuid_data</name><operator pos:start="495:15" pos:end="495:15">.</operator><name pos:start="495:16" pos:end="495:20">cpuid</name><operator pos:start="495:21" pos:end="495:21">.</operator><name pos:start="495:22" pos:end="495:28">padding</name></name> <operator pos:start="495:30" pos:end="495:30">=</operator> <literal type="number" pos:start="495:32" pos:end="495:32">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="497:5" pos:end="497:56"><expr pos:start="497:5" pos:end="497:55"><name pos:start="497:5" pos:end="497:5">r</name> <operator pos:start="497:7" pos:end="497:7">=</operator> <call pos:start="497:9" pos:end="497:55"><name pos:start="497:9" pos:end="497:22">kvm_vcpu_ioctl</name><argument_list pos:start="497:23" pos:end="497:55">(<argument pos:start="497:24" pos:end="497:25"><expr pos:start="497:24" pos:end="497:25"><name pos:start="497:24" pos:end="497:25">cs</name></expr></argument>, <argument pos:start="497:28" pos:end="497:41"><expr pos:start="497:28" pos:end="497:41"><name pos:start="497:28" pos:end="497:41">KVM_SET_CPUID2</name></expr></argument>, <argument pos:start="497:44" pos:end="497:54"><expr pos:start="497:44" pos:end="497:54"><operator pos:start="497:44" pos:end="497:44">&amp;</operator><name pos:start="497:45" pos:end="497:54">cpuid_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="499:5" pos:end="503:5"><if pos:start="499:5" pos:end="503:5">if <condition pos:start="499:8" pos:end="499:10">(<expr pos:start="499:9" pos:end="499:9"><name pos:start="499:9" pos:end="499:9">r</name></expr>)</condition> <block pos:start="499:12" pos:end="503:5">{<block_content pos:start="501:9" pos:end="501:17">

        <return pos:start="501:9" pos:end="501:17">return <expr pos:start="501:16" pos:end="501:16"><name pos:start="501:16" pos:end="501:16">r</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="507:5" pos:end="507:64"><expr pos:start="507:5" pos:end="507:63"><name pos:start="507:5" pos:end="507:5">r</name> <operator pos:start="507:7" pos:end="507:7">=</operator> <call pos:start="507:9" pos:end="507:63"><name pos:start="507:9" pos:end="507:27">kvm_check_extension</name><argument_list pos:start="507:28" pos:end="507:63">(<argument pos:start="507:29" pos:end="507:41"><expr pos:start="507:29" pos:end="507:41"><name pos:start="507:29" pos:end="507:41"><name pos:start="507:29" pos:end="507:30">cs</name><operator pos:start="507:31" pos:end="507:32">-&gt;</operator><name pos:start="507:33" pos:end="507:41">kvm_state</name></name></expr></argument>, <argument pos:start="507:44" pos:end="507:62"><expr pos:start="507:44" pos:end="507:62"><name pos:start="507:44" pos:end="507:62">KVM_CAP_TSC_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="509:5" pos:end="521:5"><if pos:start="509:5" pos:end="521:5">if <condition pos:start="509:8" pos:end="509:26">(<expr pos:start="509:9" pos:end="509:25"><name pos:start="509:9" pos:end="509:9">r</name> <operator pos:start="509:11" pos:end="509:12">&amp;&amp;</operator> <name pos:start="509:14" pos:end="509:25"><name pos:start="509:14" pos:end="509:16">env</name><operator pos:start="509:17" pos:end="509:18">-&gt;</operator><name pos:start="509:19" pos:end="509:25">tsc_khz</name></name></expr>)</condition> <block pos:start="509:28" pos:end="521:5">{<block_content pos:start="511:9" pos:end="519:9">

        <expr_stmt pos:start="511:9" pos:end="511:62"><expr pos:start="511:9" pos:end="511:61"><name pos:start="511:9" pos:end="511:9">r</name> <operator pos:start="511:11" pos:end="511:11">=</operator> <call pos:start="511:13" pos:end="511:61"><name pos:start="511:13" pos:end="511:26">kvm_vcpu_ioctl</name><argument_list pos:start="511:27" pos:end="511:61">(<argument pos:start="511:28" pos:end="511:29"><expr pos:start="511:28" pos:end="511:29"><name pos:start="511:28" pos:end="511:29">cs</name></expr></argument>, <argument pos:start="511:32" pos:end="511:46"><expr pos:start="511:32" pos:end="511:46"><name pos:start="511:32" pos:end="511:46">KVM_SET_TSC_KHZ</name></expr></argument>, <argument pos:start="511:49" pos:end="511:60"><expr pos:start="511:49" pos:end="511:60"><name pos:start="511:49" pos:end="511:60"><name pos:start="511:49" pos:end="511:51">env</name><operator pos:start="511:52" pos:end="511:53">-&gt;</operator><name pos:start="511:54" pos:end="511:60">tsc_khz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="513:9" pos:end="519:9"><if pos:start="513:9" pos:end="519:9">if <condition pos:start="513:12" pos:end="513:18">(<expr pos:start="513:13" pos:end="513:17"><name pos:start="513:13" pos:end="513:13">r</name> <operator pos:start="513:15" pos:end="513:15">&lt;</operator> <literal type="number" pos:start="513:17" pos:end="513:17">0</literal></expr>)</condition> <block pos:start="513:20" pos:end="519:9">{<block_content pos:start="515:13" pos:end="517:21">

            <expr_stmt pos:start="515:13" pos:end="515:56"><expr pos:start="515:13" pos:end="515:55"><call pos:start="515:13" pos:end="515:55"><name pos:start="515:13" pos:end="515:19">fprintf</name><argument_list pos:start="515:20" pos:end="515:55">(<argument pos:start="515:21" pos:end="515:26"><expr pos:start="515:21" pos:end="515:26"><name pos:start="515:21" pos:end="515:26">stderr</name></expr></argument>, <argument pos:start="515:29" pos:end="515:54"><expr pos:start="515:29" pos:end="515:54"><literal type="string" pos:start="515:29" pos:end="515:54">"KVM_SET_TSC_KHZ failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="517:13" pos:end="517:21">return <expr pos:start="517:20" pos:end="517:20"><name pos:start="517:20" pos:end="517:20">r</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="525:5" pos:end="529:5"><if pos:start="525:5" pos:end="529:5">if <condition pos:start="525:8" pos:end="525:24">(<expr pos:start="525:9" pos:end="525:23"><call pos:start="525:9" pos:end="525:23"><name pos:start="525:9" pos:end="525:21">kvm_has_xsave</name><argument_list pos:start="525:22" pos:end="525:23">()</argument_list></call></expr>)</condition> <block pos:start="525:26" pos:end="529:5">{<block_content pos:start="527:9" pos:end="527:75">

        <expr_stmt pos:start="527:9" pos:end="527:75"><expr pos:start="527:9" pos:end="527:74"><name pos:start="527:9" pos:end="527:26"><name pos:start="527:9" pos:end="527:11">env</name><operator pos:start="527:12" pos:end="527:13">-&gt;</operator><name pos:start="527:14" pos:end="527:26">kvm_xsave_buf</name></name> <operator pos:start="527:28" pos:end="527:28">=</operator> <call pos:start="527:30" pos:end="527:74"><name pos:start="527:30" pos:end="527:42">qemu_memalign</name><argument_list pos:start="527:43" pos:end="527:74">(<argument pos:start="527:44" pos:end="527:47"><expr pos:start="527:44" pos:end="527:47"><literal type="number" pos:start="527:44" pos:end="527:47">4096</literal></expr></argument>, <argument pos:start="527:50" pos:end="527:73"><expr pos:start="527:50" pos:end="527:73"><sizeof pos:start="527:50" pos:end="527:73">sizeof<argument_list pos:start="527:56" pos:end="527:73">(<argument pos:start="527:57" pos:end="527:72"><expr pos:start="527:57" pos:end="527:72">struct <name pos:start="527:64" pos:end="527:72">kvm_xsave</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="533:5" pos:end="533:13">return <expr pos:start="533:12" pos:end="533:12"><literal type="number" pos:start="533:12" pos:end="533:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
