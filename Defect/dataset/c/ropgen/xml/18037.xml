<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18037.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:14">MigrationState</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:44">tcp_start_outgoing_migration</name><parameter_list pos:start="1:45" pos:end="5:55">(<parameter pos:start="1:46" pos:end="1:66"><decl pos:start="1:46" pos:end="1:66"><type pos:start="1:46" pos:end="1:66"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:66">host_port</name></decl></parameter>,

					     <parameter pos:start="3:46" pos:end="3:68"><decl pos:start="3:46" pos:end="3:68"><type pos:start="3:46" pos:end="3:68"><name pos:start="3:46" pos:end="3:52">int64_t</name></type> <name pos:start="3:54" pos:end="3:68">bandwidth_limit</name></decl></parameter>,

					     <parameter pos:start="5:46" pos:end="5:54"><decl pos:start="5:46" pos:end="5:54"><type pos:start="5:46" pos:end="5:54"><name pos:start="5:46" pos:end="5:48">int</name></type> <name pos:start="5:50" pos:end="5:54">async</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="109:1">{<block_content pos:start="9:5" pos:end="107:25">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">sockaddr_in</name></name></type> <name pos:start="9:24" pos:end="9:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">FdMigrationState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:20"><if pos:start="17:5" pos:end="19:20">if <condition pos:start="17:8" pos:end="17:46">(<expr pos:start="17:9" pos:end="17:45"><call pos:start="17:9" pos:end="17:41"><name pos:start="17:9" pos:end="17:23">parse_host_port</name><argument_list pos:start="17:24" pos:end="17:41">(<argument pos:start="17:25" pos:end="17:29"><expr pos:start="17:25" pos:end="17:29"><operator pos:start="17:25" pos:end="17:25">&amp;</operator><name pos:start="17:26" pos:end="17:29">addr</name></expr></argument>, <argument pos:start="17:32" pos:end="17:40"><expr pos:start="17:32" pos:end="17:40"><name pos:start="17:32" pos:end="17:40">host_port</name></expr></argument>)</argument_list></call> <operator pos:start="17:43" pos:end="17:43">&lt;</operator> <literal type="number" pos:start="17:45" pos:end="17:45">0</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:20"><block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:5">s</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:20">qemu_mallocz</name><argument_list pos:start="23:21" pos:end="23:32">(<argument pos:start="23:22" pos:end="23:31"><expr pos:start="23:22" pos:end="23:31"><sizeof pos:start="23:22" pos:end="23:31">sizeof<argument_list pos:start="23:28" pos:end="23:31">(<argument pos:start="23:29" pos:end="23:30"><expr pos:start="23:29" pos:end="23:30"><operator pos:start="23:29" pos:end="23:29">*</operator><name pos:start="23:30" pos:end="23:30">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:20"><if pos:start="25:5" pos:end="27:20">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name> <operator pos:start="25:11" pos:end="25:12">==</operator> <name pos:start="25:14" pos:end="25:17">NULL</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:20"><block_content pos:start="27:9" pos:end="27:20">

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:16">mig_state</name><operator pos:start="31:17" pos:end="31:17">.</operator><name pos:start="31:18" pos:end="31:23">cancel</name></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <name pos:start="31:27" pos:end="31:36">tcp_cancel</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:45"><expr pos:start="33:5" pos:end="33:44"><name pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:16">mig_state</name><operator pos:start="33:17" pos:end="33:17">.</operator><name pos:start="33:18" pos:end="33:27">get_status</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <name pos:start="33:31" pos:end="33:44">tcp_get_status</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:16">mig_state</name><operator pos:start="35:17" pos:end="35:17">.</operator><name pos:start="35:18" pos:end="35:24">release</name></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:38">tcp_release</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:12">state</name></name> <operator pos:start="39:14" pos:end="39:14">=</operator> <name pos:start="39:16" pos:end="39:31">MIG_STATE_ACTIVE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:13">detach</name></name> <operator pos:start="41:15" pos:end="41:15">=</operator> <operator pos:start="41:17" pos:end="41:17">!</operator><name pos:start="41:18" pos:end="41:22">async</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:41"><expr pos:start="43:5" pos:end="43:40"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:22">bandwidth_limit</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:40">bandwidth_limit</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:9"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:9">fd</name></name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:18">socket</name><argument_list pos:start="45:19" pos:end="45:43">(<argument pos:start="45:20" pos:end="45:26"><expr pos:start="45:20" pos:end="45:26"><name pos:start="45:20" pos:end="45:26">PF_INET</name></expr></argument>, <argument pos:start="45:29" pos:end="45:39"><expr pos:start="45:29" pos:end="45:39"><name pos:start="45:29" pos:end="45:39">SOCK_STREAM</name></expr></argument>, <argument pos:start="45:42" pos:end="45:42"><expr pos:start="45:42" pos:end="45:42"><literal type="number" pos:start="45:42" pos:end="45:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:13">fd</name></name> <operator pos:start="47:15" pos:end="47:16">==</operator> <operator pos:start="47:18" pos:end="47:18">-</operator><literal type="number" pos:start="47:19" pos:end="47:19">1</literal></expr>)</condition> <block pos:start="47:22" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:20">

        <expr_stmt pos:start="49:9" pos:end="49:21"><expr pos:start="49:9" pos:end="49:20"><call pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:17">qemu_free</name><argument_list pos:start="49:18" pos:end="49:20">(<argument pos:start="49:19" pos:end="49:19"><expr pos:start="49:19" pos:end="49:19"><name pos:start="49:19" pos:end="49:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="51:9" pos:end="51:20">return <expr pos:start="51:16" pos:end="51:19"><name pos:start="51:16" pos:end="51:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:38"><expr pos:start="57:5" pos:end="57:37"><call pos:start="57:5" pos:end="57:37"><name pos:start="57:5" pos:end="57:9">fcntl</name><argument_list pos:start="57:10" pos:end="57:37">(<argument pos:start="57:11" pos:end="57:15"><expr pos:start="57:11" pos:end="57:15"><name pos:start="57:11" pos:end="57:15"><name pos:start="57:11" pos:end="57:11">s</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:15">fd</name></name></expr></argument>, <argument pos:start="57:18" pos:end="57:24"><expr pos:start="57:18" pos:end="57:24"><name pos:start="57:18" pos:end="57:24">F_SETFL</name></expr></argument>, <argument pos:start="57:27" pos:end="57:36"><expr pos:start="57:27" pos:end="57:36"><name pos:start="57:27" pos:end="57:36">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:23">(<expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:17">detach</name></name> <operator pos:start="61:19" pos:end="61:20">==</operator> <literal type="number" pos:start="61:22" pos:end="61:22">1</literal></expr>)</condition> <block pos:start="61:25" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:22">

        <expr_stmt pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:43"><call pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:15">dprintf</name><argument_list pos:start="63:16" pos:end="63:43">(<argument pos:start="63:17" pos:end="63:42"><expr pos:start="63:17" pos:end="63:42"><literal type="string" pos:start="63:17" pos:end="63:42">"detaching from monitor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:23">monitor_suspend</name><argument_list pos:start="65:24" pos:end="65:25">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">detach</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <do pos:start="73:5" pos:end="87:28">do <block pos:start="73:8" pos:end="87:5">{<block_content pos:start="75:9" pos:end="85:77">

        <expr_stmt pos:start="75:9" pos:end="75:69"><expr pos:start="75:9" pos:end="75:68"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:68"><name pos:start="75:15" pos:end="75:21">connect</name><argument_list pos:start="75:22" pos:end="75:68">(<argument pos:start="75:23" pos:end="75:27"><expr pos:start="75:23" pos:end="75:27"><name pos:start="75:23" pos:end="75:27"><name pos:start="75:23" pos:end="75:23">s</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:27">fd</name></name></expr></argument>, <argument pos:start="75:30" pos:end="75:53"><expr pos:start="75:30" pos:end="75:53"><operator pos:start="75:30" pos:end="75:30">(</operator>struct <name pos:start="75:38" pos:end="75:45">sockaddr</name> <operator pos:start="75:47" pos:end="75:47">*</operator><operator pos:start="75:48" pos:end="75:48">)</operator><operator pos:start="75:49" pos:end="75:49">&amp;</operator><name pos:start="75:50" pos:end="75:53">addr</name></expr></argument>, <argument pos:start="75:56" pos:end="75:67"><expr pos:start="75:56" pos:end="75:67"><sizeof pos:start="75:56" pos:end="75:67">sizeof<argument_list pos:start="75:62" pos:end="75:67">(<argument pos:start="75:63" pos:end="75:66"><expr pos:start="75:63" pos:end="75:66"><name pos:start="75:63" pos:end="75:66">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:25"><if pos:start="77:9" pos:end="79:25">if <condition pos:start="77:12" pos:end="77:22">(<expr pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:18">==</operator> <operator pos:start="77:20" pos:end="77:20">-</operator><literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:25"><block_content pos:start="79:13" pos:end="79:25">

            <expr_stmt pos:start="79:13" pos:end="79:25"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <operator pos:start="79:19" pos:end="79:19">-</operator><name pos:start="79:20" pos:end="79:24">errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="85:77"><if pos:start="83:9" pos:end="85:77">if <condition pos:start="83:12" pos:end="83:32">(<expr pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:18">==</operator> <operator pos:start="83:20" pos:end="83:20">-</operator><name pos:start="83:21" pos:end="83:31">EINPROGRESS</name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:77"><block_content pos:start="85:13" pos:end="85:77">

            <expr_stmt pos:start="85:13" pos:end="85:77"><expr pos:start="85:13" pos:end="85:76"><call pos:start="85:13" pos:end="85:76"><name pos:start="85:13" pos:end="85:32">qemu_set_fd_handler2</name><argument_list pos:start="85:33" pos:end="85:76">(<argument pos:start="85:34" pos:end="85:38"><expr pos:start="85:34" pos:end="85:38"><name pos:start="85:34" pos:end="85:38"><name pos:start="85:34" pos:end="85:34">s</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:38">fd</name></name></expr></argument>, <argument pos:start="85:41" pos:end="85:44"><expr pos:start="85:41" pos:end="85:44"><name pos:start="85:41" pos:end="85:44">NULL</name></expr></argument>, <argument pos:start="85:47" pos:end="85:50"><expr pos:start="85:47" pos:end="85:50"><name pos:start="85:47" pos:end="85:50">NULL</name></expr></argument>, <argument pos:start="85:53" pos:end="85:72"><expr pos:start="85:53" pos:end="85:72"><name pos:start="85:53" pos:end="85:72">tcp_wait_for_connect</name></expr></argument>, <argument pos:start="85:75" pos:end="85:75"><expr pos:start="85:75" pos:end="85:75"><name pos:start="85:75" pos:end="85:75">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="87:13" pos:end="87:27">(<expr pos:start="87:14" pos:end="87:26"><name pos:start="87:14" pos:end="87:16">ret</name> <operator pos:start="87:18" pos:end="87:19">==</operator> <operator pos:start="87:21" pos:end="87:21">-</operator><name pos:start="87:22" pos:end="87:26">EINTR</name></expr>)</condition>;</do>



    <if_stmt pos:start="91:5" pos:end="103:31"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:39">(<expr pos:start="91:9" pos:end="91:38"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">&lt;</operator> <literal type="number" pos:start="91:15" pos:end="91:15">0</literal> <operator pos:start="91:17" pos:end="91:18">&amp;&amp;</operator> <name pos:start="91:20" pos:end="91:22">ret</name> <operator pos:start="91:24" pos:end="91:25">!=</operator> <operator pos:start="91:27" pos:end="91:27">-</operator><name pos:start="91:28" pos:end="91:38">EINPROGRESS</name></expr>)</condition> <block pos:start="91:41" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:17">

        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><call pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:15">dprintf</name><argument_list pos:start="93:16" pos:end="93:35">(<argument pos:start="93:17" pos:end="93:34"><expr pos:start="93:17" pos:end="93:34"><literal type="string" pos:start="93:17" pos:end="93:34">"connect failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:21"><expr pos:start="95:9" pos:end="95:20"><call pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:13">close</name><argument_list pos:start="95:14" pos:end="95:20">(<argument pos:start="95:15" pos:end="95:19"><expr pos:start="95:15" pos:end="95:19"><name pos:start="95:15" pos:end="95:19"><name pos:start="95:15" pos:end="95:15">s</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:19">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><call pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:17">qemu_free</name><argument_list pos:start="97:18" pos:end="97:20">(<argument pos:start="97:19" pos:end="97:19"><expr pos:start="97:19" pos:end="97:19"><name pos:start="97:19" pos:end="97:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:17"><expr pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:9">s</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:16">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="101:7" pos:end="103:31">else if <condition pos:start="101:15" pos:end="101:24">(<expr pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:18">ret</name> <operator pos:start="101:20" pos:end="101:21">&gt;=</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:31"><block_content pos:start="103:9" pos:end="103:31">

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><call pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:27">tcp_connect_migrate</name><argument_list pos:start="103:28" pos:end="103:30">(<argument pos:start="103:29" pos:end="103:29"><expr pos:start="103:29" pos:end="103:29"><name pos:start="103:29" pos:end="103:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="107:5" pos:end="107:25">return <expr pos:start="107:12" pos:end="107:24"><operator pos:start="107:12" pos:end="107:12">&amp;</operator><name pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:24">mig_state</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
