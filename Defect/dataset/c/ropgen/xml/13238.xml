<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13238.c" pos:tabs="8"><function pos:start="1:1" pos:end="427:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:36">get_segment</name> <parameter_list pos:start="1:38" pos:end="3:75">(<parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">CPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">env</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:62">mmu_ctx_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">ctx</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:56"><decl pos:start="3:39" pos:end="3:56"><type pos:start="3:39" pos:end="3:56"><name pos:start="3:39" pos:end="3:50">target_ulong</name></type> <name pos:start="3:52" pos:end="3:56">eaddr</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:64"><decl pos:start="3:59" pos:end="3:64"><type pos:start="3:59" pos:end="3:64"><name pos:start="3:59" pos:end="3:61">int</name></type> <name pos:start="3:63" pos:end="3:64">rw</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:74"><decl pos:start="3:67" pos:end="3:74"><type pos:start="3:67" pos:end="3:74"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:74">type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="427:1">{<block_content pos:start="7:5" pos:end="425:15">

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:26">sdr</name></decl>, <decl pos:start="7:29" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:29" pos:end="7:32">hash</name></decl>, <decl pos:start="7:35" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:35" pos:end="7:38">mask</name></decl>, <decl pos:start="7:41" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:41" pos:end="7:48">sdr_mask</name></decl>, <decl pos:start="7:51" pos:end="7:59"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:51" pos:end="7:59">htab_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:19">sr</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:22" pos:end="9:25">vsid</name></decl>, <decl pos:start="9:28" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:28" pos:end="9:36">vsid_mask</name></decl>, <decl pos:start="9:39" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:39" pos:end="9:43">pgidx</name></decl>, <decl pos:start="9:46" pos:end="9:54"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:46" pos:end="9:54">page_mask</name></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:25">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:25"><call pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:25">(<argument pos:start="11:13" pos:end="11:24"><expr pos:start="11:13" pos:end="11:24"><name pos:start="11:13" pos:end="11:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">attr</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">ds</name></decl>, <decl pos:start="17:13" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:13" pos:end="17:19">vsid_sh</name></decl>, <decl pos:start="17:22" pos:end="17:27"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:27">sdr_sh</name></decl>, <decl pos:start="17:30" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:30" pos:end="17:31">pr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:17"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:17">ret2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:6">pr</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <name pos:start="23:10" pos:end="23:15">msr_pr</name></expr>;</expr_stmt>

<cpp:if pos:start="25:1" pos:end="25:25">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:25">(<argument pos:start="25:13" pos:end="25:24"><expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="27:5" pos:end="112:0"><if pos:start="27:5" pos:end="61:5">if <condition pos:start="27:8" pos:end="27:42">(<expr pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:11">env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:22">mmu_model</name></name> <operator pos:start="27:24" pos:end="27:25">==</operator> <name pos:start="27:27" pos:end="27:41">POWERPC_MMU_64B</name></expr>)</condition> <block pos:start="27:44" pos:end="61:5">{<block_content pos:start="31:9" pos:end="59:27">

<cpp:if pos:start="29:1" pos:end="29:23">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:23"><call pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:11">defined</name> <argument_list pos:start="29:13" pos:end="29:23">(<argument pos:start="29:14" pos:end="29:22"><expr pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="31:9" pos:end="38:0"><if pos:start="31:9" pos:end="38:0">if <condition pos:start="31:12" pos:end="31:26">(<expr pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:20">loglevel</name> <operator pos:start="31:22" pos:end="31:23">!=</operator> <literal type="number" pos:start="31:25" pos:end="31:25">0</literal></expr>)</condition> <block pos:start="31:28" pos:end="38:0">{<block_content pos:start="33:13" pos:end="33:45">

            <expr_stmt pos:start="33:13" pos:end="33:45"><expr pos:start="33:13" pos:end="33:44"><call pos:start="33:13" pos:end="33:44"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:44">(<argument pos:start="33:21" pos:end="33:27"><expr pos:start="33:21" pos:end="33:27"><name pos:start="33:21" pos:end="33:27">logfile</name></expr></argument>, <argument pos:start="33:30" pos:end="33:43"><expr pos:start="33:30" pos:end="33:43"><literal type="string" pos:start="33:30" pos:end="33:43">"Check SLBs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="39:9" pos:end="39:63"><expr pos:start="39:9" pos:end="39:62"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:62"><name pos:start="39:15" pos:end="39:24">slb_lookup</name><argument_list pos:start="39:25" pos:end="39:62">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">env</name></expr></argument>, <argument pos:start="39:31" pos:end="39:35"><expr pos:start="39:31" pos:end="39:35"><name pos:start="39:31" pos:end="39:35">eaddr</name></expr></argument>, <argument pos:start="39:38" pos:end="39:42"><expr pos:start="39:38" pos:end="39:42"><operator pos:start="39:38" pos:end="39:38">&amp;</operator><name pos:start="39:39" pos:end="39:42">vsid</name></expr></argument>, <argument pos:start="39:45" pos:end="39:54"><expr pos:start="39:45" pos:end="39:54"><operator pos:start="39:45" pos:end="39:45">&amp;</operator><name pos:start="39:46" pos:end="39:54">page_mask</name></expr></argument>, <argument pos:start="39:57" pos:end="39:61"><expr pos:start="39:57" pos:end="39:61"><operator pos:start="39:57" pos:end="39:57">&amp;</operator><name pos:start="39:58" pos:end="39:61">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:23"><if pos:start="41:9" pos:end="43:23">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">&lt;</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:23"><block_content pos:start="43:13" pos:end="43:23">

            <return pos:start="43:13" pos:end="43:23">return <expr pos:start="43:20" pos:end="43:22"><name pos:start="43:20" pos:end="43:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:49"><expr pos:start="45:9" pos:end="47:48"><name pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:11">ctx</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:16">key</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <ternary pos:start="45:20" pos:end="47:48"><condition pos:start="45:20" pos:end="47:42"><expr pos:start="45:20" pos:end="47:40"><operator pos:start="45:20" pos:end="45:20">(</operator><operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:25">attr</name> <operator pos:start="45:27" pos:end="45:27">&amp;</operator> <literal type="number" pos:start="45:29" pos:end="45:32">0x40</literal><operator pos:start="45:33" pos:end="45:33">)</operator> <operator pos:start="45:35" pos:end="45:36">&amp;&amp;</operator> <operator pos:start="45:38" pos:end="45:38">(</operator><name pos:start="45:39" pos:end="45:40">pr</name> <operator pos:start="45:42" pos:end="45:43">!=</operator> <literal type="number" pos:start="45:45" pos:end="45:45">0</literal><operator pos:start="45:46" pos:end="45:46">)</operator><operator pos:start="45:47" pos:end="45:47">)</operator> <operator pos:start="45:49" pos:end="45:50">||</operator>

            <operator pos:start="47:13" pos:end="47:13">(</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:18">attr</name> <operator pos:start="47:20" pos:end="47:20">&amp;</operator> <literal type="number" pos:start="47:22" pos:end="47:25">0x80</literal><operator pos:start="47:26" pos:end="47:26">)</operator> <operator pos:start="47:28" pos:end="47:29">&amp;&amp;</operator> <operator pos:start="47:31" pos:end="47:31">(</operator><name pos:start="47:32" pos:end="47:33">pr</name> <operator pos:start="47:35" pos:end="47:36">==</operator> <literal type="number" pos:start="47:38" pos:end="47:38">0</literal><operator pos:start="47:39" pos:end="47:39">)</operator><operator pos:start="47:40" pos:end="47:40">)</operator></expr> ?</condition><then pos:start="47:44" pos:end="47:44"> <expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">1</literal></expr> </then><else pos:start="47:46" pos:end="47:48">: <expr pos:start="47:48" pos:end="47:48"><literal type="number" pos:start="47:48" pos:end="47:48">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:15"><expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:10">ds</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:15">nx</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <ternary pos:start="51:19" pos:end="51:37"><condition pos:start="51:19" pos:end="51:31"><expr pos:start="51:19" pos:end="51:29"><name pos:start="51:19" pos:end="51:22">attr</name> <operator pos:start="51:24" pos:end="51:24">&amp;</operator> <literal type="number" pos:start="51:26" pos:end="51:29">0x20</literal></expr> ?</condition><then pos:start="51:33" pos:end="51:33"> <expr pos:start="51:33" pos:end="51:33"><literal type="number" pos:start="51:33" pos:end="51:33">1</literal></expr> </then><else pos:start="51:35" pos:end="51:37">: <expr pos:start="51:37" pos:end="51:37"><literal type="number" pos:start="51:37" pos:end="51:37">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:17">vsid_mask</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:41">0x00003FFFFFFFFF80ULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:20"><expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:15">vsid_sh</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <literal type="number" pos:start="55:19" pos:end="55:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:14">sdr_sh</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:19">18</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:16">sdr_mask</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <literal type="number" pos:start="59:20" pos:end="59:26">0x3FF80</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="112:0">else

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="63:8" pos:end="63:34">/* defined(TARGET_PPC64) */</comment>

    <block pos:start="65:5" pos:end="112:0">{<block_content pos:start="67:9" pos:end="108:0">

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:10">sr</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:33"><name pos:start="67:14" pos:end="67:16">env</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:20">sr</name><index pos:start="67:21" pos:end="67:33">[<expr pos:start="67:22" pos:end="67:32"><name pos:start="67:22" pos:end="67:26">eaddr</name> <operator pos:start="67:28" pos:end="67:29">&gt;&gt;</operator> <literal type="number" pos:start="67:31" pos:end="67:32">28</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:17">page_mask</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="number" pos:start="69:21" pos:end="69:30">0x0FFFFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:62"><expr pos:start="71:9" pos:end="73:61"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:16">key</name></name> <operator pos:start="71:18" pos:end="71:18">=</operator> <ternary pos:start="71:20" pos:end="73:61"><condition pos:start="71:20" pos:end="73:55"><expr pos:start="71:20" pos:end="73:53"><operator pos:start="71:20" pos:end="71:20">(</operator><operator pos:start="71:21" pos:end="71:21">(</operator><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:24">sr</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <literal type="number" pos:start="71:28" pos:end="71:37">0x20000000</literal><operator pos:start="71:38" pos:end="71:38">)</operator> <operator pos:start="71:40" pos:end="71:41">&amp;&amp;</operator> <operator pos:start="71:43" pos:end="71:43">(</operator><name pos:start="71:44" pos:end="71:45">pr</name> <operator pos:start="71:47" pos:end="71:48">!=</operator> <literal type="number" pos:start="71:50" pos:end="71:50">0</literal><operator pos:start="71:51" pos:end="71:51">)</operator><operator pos:start="71:52" pos:end="71:52">)</operator> <operator pos:start="71:54" pos:end="71:55">||</operator>

                    <operator pos:start="73:21" pos:end="73:21">(</operator><operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:24">sr</name> <operator pos:start="73:26" pos:end="73:26">&amp;</operator> <literal type="number" pos:start="73:28" pos:end="73:37">0x40000000</literal><operator pos:start="73:38" pos:end="73:38">)</operator> <operator pos:start="73:40" pos:end="73:41">&amp;&amp;</operator> <operator pos:start="73:43" pos:end="73:43">(</operator><name pos:start="73:44" pos:end="73:45">pr</name> <operator pos:start="73:47" pos:end="73:48">==</operator> <literal type="number" pos:start="73:50" pos:end="73:50">0</literal><operator pos:start="73:51" pos:end="73:51">)</operator><operator pos:start="73:52" pos:end="73:52">)</operator><operator pos:start="73:53" pos:end="73:53">)</operator></expr> ?</condition><then pos:start="73:57" pos:end="73:57"> <expr pos:start="73:57" pos:end="73:57"><literal type="number" pos:start="73:57" pos:end="73:57">1</literal></expr> </then><else pos:start="73:59" pos:end="73:61">: <expr pos:start="73:61" pos:end="73:61"><literal type="number" pos:start="73:61" pos:end="73:61">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:10">ds</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <ternary pos:start="75:14" pos:end="75:36"><condition pos:start="75:14" pos:end="75:30"><expr pos:start="75:14" pos:end="75:28"><name pos:start="75:14" pos:end="75:15">sr</name> <operator pos:start="75:17" pos:end="75:17">&amp;</operator> <literal type="number" pos:start="75:19" pos:end="75:28">0x80000000</literal></expr> ?</condition><then pos:start="75:32" pos:end="75:32"> <expr pos:start="75:32" pos:end="75:32"><literal type="number" pos:start="75:32" pos:end="75:32">1</literal></expr> </then><else pos:start="75:34" pos:end="75:36">: <expr pos:start="75:36" pos:end="75:36"><literal type="number" pos:start="75:36" pos:end="75:36">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:42"><expr pos:start="77:9" pos:end="77:41"><name pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ctx</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:15">nx</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <ternary pos:start="77:19" pos:end="77:41"><condition pos:start="77:19" pos:end="77:35"><expr pos:start="77:19" pos:end="77:33"><name pos:start="77:19" pos:end="77:20">sr</name> <operator pos:start="77:22" pos:end="77:22">&amp;</operator> <literal type="number" pos:start="77:24" pos:end="77:33">0x10000000</literal></expr> ?</condition><then pos:start="77:37" pos:end="77:37"> <expr pos:start="77:37" pos:end="77:37"><literal type="number" pos:start="77:37" pos:end="77:37">1</literal></expr> </then><else pos:start="77:39" pos:end="77:41">: <expr pos:start="77:41" pos:end="77:41"><literal type="number" pos:start="77:41" pos:end="77:41">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:12">vsid</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:17">sr</name> <operator pos:start="79:19" pos:end="79:19">&amp;</operator> <literal type="number" pos:start="79:21" pos:end="79:30">0x00FFFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:17">vsid_mask</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="number" pos:start="81:21" pos:end="81:30">0x01FFFFC0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:20"><expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:15">vsid_sh</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <literal type="number" pos:start="83:19" pos:end="83:19">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:20"><expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:14">sdr_sh</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:19">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="90:0"><expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:16">sdr_mask</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <literal type="number" pos:start="87:20" pos:end="87:25">0xFFC0</literal></expr>;</expr_stmt>

<cpp:if pos:start="89:1" pos:end="89:23">#<cpp:directive pos:start="89:2" pos:end="89:3">if</cpp:directive> <expr pos:start="89:5" pos:end="89:23"><call pos:start="89:5" pos:end="89:23"><name pos:start="89:5" pos:end="89:11">defined</name> <argument_list pos:start="89:13" pos:end="89:23">(<argument pos:start="89:14" pos:end="89:22"><expr pos:start="89:14" pos:end="89:22"><name pos:start="89:14" pos:end="89:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="91:9" pos:end="108:0"><if pos:start="91:9" pos:end="108:0">if <condition pos:start="91:12" pos:end="91:26">(<expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:20">loglevel</name> <operator pos:start="91:22" pos:end="91:23">!=</operator> <literal type="number" pos:start="91:25" pos:end="91:25">0</literal></expr>)</condition> <block pos:start="91:28" pos:end="108:0">{<block_content pos:start="93:13" pos:end="103:30">

            <expr_stmt pos:start="93:13" pos:end="103:30"><expr pos:start="93:13" pos:end="103:29"><call pos:start="93:13" pos:end="103:29"><name pos:start="93:13" pos:end="93:19">fprintf</name><argument_list pos:start="93:20" pos:end="103:29">(<argument pos:start="93:21" pos:end="93:27"><expr pos:start="93:21" pos:end="93:27"><name pos:start="93:21" pos:end="93:27">logfile</name></expr></argument>, <argument pos:start="93:30" pos:end="97:50"><expr pos:start="93:30" pos:end="97:50"><literal type="string" pos:start="93:30" pos:end="93:49">"Check segment v=0x"</literal> <name pos:start="93:51" pos:end="93:55">ADDRX</name> <literal type="string" pos:start="93:57" pos:end="93:64">" %d 0x"</literal> <name pos:start="93:66" pos:end="93:70">ADDRX</name>

                    <literal type="string" pos:start="95:21" pos:end="95:29">" nip=0x"</literal> <name pos:start="95:31" pos:end="95:35">ADDRX</name> <literal type="string" pos:start="95:37" pos:end="95:44">" lr=0x"</literal> <name pos:start="95:46" pos:end="95:50">ADDRX</name>

                    <literal type="string" pos:start="97:21" pos:end="97:50">" ir=%d dr=%d pr=%d %d t=%d\n"</literal></expr></argument>,

                    <argument pos:start="99:21" pos:end="99:25"><expr pos:start="99:21" pos:end="99:25"><name pos:start="99:21" pos:end="99:25">eaddr</name></expr></argument>, <argument pos:start="99:28" pos:end="99:45"><expr pos:start="99:28" pos:end="99:45"><operator pos:start="99:28" pos:end="99:28">(</operator><name pos:start="99:29" pos:end="99:31">int</name><operator pos:start="99:32" pos:end="99:32">)</operator><operator pos:start="99:33" pos:end="99:33">(</operator><name pos:start="99:34" pos:end="99:38">eaddr</name> <operator pos:start="99:40" pos:end="99:41">&gt;&gt;</operator> <literal type="number" pos:start="99:43" pos:end="99:44">28</literal><operator pos:start="99:45" pos:end="99:45">)</operator></expr></argument>, <argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><name pos:start="99:48" pos:end="99:49">sr</name></expr></argument>, <argument pos:start="99:52" pos:end="99:59"><expr pos:start="99:52" pos:end="99:59"><name pos:start="99:52" pos:end="99:59"><name pos:start="99:52" pos:end="99:54">env</name><operator pos:start="99:55" pos:end="99:56">-&gt;</operator><name pos:start="99:57" pos:end="99:59">nip</name></name></expr></argument>,

                    <argument pos:start="101:21" pos:end="101:27"><expr pos:start="101:21" pos:end="101:27"><name pos:start="101:21" pos:end="101:27"><name pos:start="101:21" pos:end="101:23">env</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:27">lr</name></name></expr></argument>, <argument pos:start="101:30" pos:end="101:40"><expr pos:start="101:30" pos:end="101:40"><operator pos:start="101:30" pos:end="101:30">(</operator><name pos:start="101:31" pos:end="101:33">int</name><operator pos:start="101:34" pos:end="101:34">)</operator><name pos:start="101:35" pos:end="101:40">msr_ir</name></expr></argument>, <argument pos:start="101:43" pos:end="101:53"><expr pos:start="101:43" pos:end="101:53"><operator pos:start="101:43" pos:end="101:43">(</operator><name pos:start="101:44" pos:end="101:46">int</name><operator pos:start="101:47" pos:end="101:47">)</operator><name pos:start="101:48" pos:end="101:53">msr_dr</name></expr></argument>, <argument pos:start="101:56" pos:end="101:70"><expr pos:start="101:56" pos:end="101:70"><ternary pos:start="101:56" pos:end="101:70"><condition pos:start="101:56" pos:end="101:64"><expr pos:start="101:56" pos:end="101:62"><name pos:start="101:56" pos:end="101:57">pr</name> <operator pos:start="101:59" pos:end="101:60">!=</operator> <literal type="number" pos:start="101:62" pos:end="101:62">0</literal></expr> ?</condition><then pos:start="101:66" pos:end="101:66"> <expr pos:start="101:66" pos:end="101:66"><literal type="number" pos:start="101:66" pos:end="101:66">1</literal></expr> </then><else pos:start="101:68" pos:end="101:70">: <expr pos:start="101:70" pos:end="101:70"><literal type="number" pos:start="101:70" pos:end="101:70">0</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="103:21" pos:end="103:22"><expr pos:start="103:21" pos:end="103:22"><name pos:start="103:21" pos:end="103:22">rw</name></expr></argument>, <argument pos:start="103:25" pos:end="103:28"><expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:28">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="111:1" pos:end="111:23">#<cpp:directive pos:start="111:2" pos:end="111:3">if</cpp:directive> <expr pos:start="111:5" pos:end="111:23"><call pos:start="111:5" pos:end="111:23"><name pos:start="111:5" pos:end="111:11">defined</name> <argument_list pos:start="111:13" pos:end="111:23">(<argument pos:start="111:14" pos:end="111:22"><expr pos:start="111:14" pos:end="111:22"><name pos:start="111:14" pos:end="111:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="113:5" pos:end="122:0"><if pos:start="113:5" pos:end="122:0">if <condition pos:start="113:8" pos:end="113:22">(<expr pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:16">loglevel</name> <operator pos:start="113:18" pos:end="113:19">!=</operator> <literal type="number" pos:start="113:21" pos:end="113:21">0</literal></expr>)</condition> <block pos:start="113:24" pos:end="122:0">{<block_content pos:start="115:9" pos:end="117:45">

        <expr_stmt pos:start="115:9" pos:end="117:45"><expr pos:start="115:9" pos:end="117:44"><call pos:start="115:9" pos:end="117:44"><name pos:start="115:9" pos:end="115:15">fprintf</name><argument_list pos:start="115:16" pos:end="117:44">(<argument pos:start="115:17" pos:end="115:23"><expr pos:start="115:17" pos:end="115:23"><name pos:start="115:17" pos:end="115:23">logfile</name></expr></argument>, <argument pos:start="115:26" pos:end="115:75"><expr pos:start="115:26" pos:end="115:75"><literal type="string" pos:start="115:26" pos:end="115:64">"pte segment: key=%d ds %d nx %d vsid "</literal> <name pos:start="115:66" pos:end="115:70">ADDRX</name> <literal type="string" pos:start="115:72" pos:end="115:75">"\n"</literal></expr></argument>,

                <argument pos:start="117:17" pos:end="117:24"><expr pos:start="117:17" pos:end="117:24"><name pos:start="117:17" pos:end="117:24"><name pos:start="117:17" pos:end="117:19">ctx</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:24">key</name></name></expr></argument>, <argument pos:start="117:27" pos:end="117:28"><expr pos:start="117:27" pos:end="117:28"><name pos:start="117:27" pos:end="117:28">ds</name></expr></argument>, <argument pos:start="117:31" pos:end="117:37"><expr pos:start="117:31" pos:end="117:37"><name pos:start="117:31" pos:end="117:37"><name pos:start="117:31" pos:end="117:33">ctx</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:37">nx</name></name></expr></argument>, <argument pos:start="117:40" pos:end="117:43"><expr pos:start="117:40" pos:end="117:43"><name pos:start="117:40" pos:end="117:43">vsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="123:5" pos:end="123:13"><expr pos:start="123:5" pos:end="123:12"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <operator pos:start="123:11" pos:end="123:11">-</operator><literal type="number" pos:start="123:12" pos:end="123:12">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="421:5"><if pos:start="125:5" pos:end="337:5">if <condition pos:start="125:8" pos:end="125:12">(<expr pos:start="125:9" pos:end="125:11"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:11">ds</name></expr>)</condition> <block pos:start="125:14" pos:end="337:5">{<block_content pos:start="129:9" pos:end="335:9">

        <comment type="block" pos:start="127:9" pos:end="127:62">/* Check if instruction fetch is allowed, if needed */</comment>

        <if_stmt pos:start="129:9" pos:end="335:9"><if pos:start="129:9" pos:end="323:9">if <condition pos:start="129:12" pos:end="129:48">(<expr pos:start="129:13" pos:end="129:47"><name pos:start="129:13" pos:end="129:16">type</name> <operator pos:start="129:18" pos:end="129:19">!=</operator> <name pos:start="129:21" pos:end="129:31">ACCESS_CODE</name> <operator pos:start="129:33" pos:end="129:34">||</operator> <name pos:start="129:36" pos:end="129:42"><name pos:start="129:36" pos:end="129:38">ctx</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:42">nx</name></name> <operator pos:start="129:44" pos:end="129:45">==</operator> <literal type="number" pos:start="129:47" pos:end="129:47">0</literal></expr>)</condition> <block pos:start="129:50" pos:end="323:9">{<block_content pos:start="135:13" pos:end="322:0">

            <comment type="block" pos:start="131:13" pos:end="131:42">/* Page address translation */</comment>

            <comment type="block" pos:start="133:13" pos:end="133:39">/* Primary table address */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:28"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:15">sdr</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <name pos:start="135:19" pos:end="135:27"><name pos:start="135:19" pos:end="135:21">env</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:27">sdr1</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="140:0"><expr pos:start="137:13" pos:end="137:59"><name pos:start="137:13" pos:end="137:17">pgidx</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <operator pos:start="137:21" pos:end="137:21">(</operator><name pos:start="137:22" pos:end="137:26">eaddr</name> <operator pos:start="137:28" pos:end="137:28">&amp;</operator> <name pos:start="137:30" pos:end="137:38">page_mask</name><operator pos:start="137:39" pos:end="137:39">)</operator> <operator pos:start="137:41" pos:end="137:42">&gt;&gt;</operator> <name pos:start="137:44" pos:end="137:59">TARGET_PAGE_BITS</name></expr>;</expr_stmt>

<cpp:if pos:start="139:1" pos:end="139:25">#<cpp:directive pos:start="139:2" pos:end="139:3">if</cpp:directive> <expr pos:start="139:5" pos:end="139:25"><call pos:start="139:5" pos:end="139:25"><name pos:start="139:5" pos:end="139:11">defined</name><argument_list pos:start="139:12" pos:end="139:25">(<argument pos:start="139:13" pos:end="139:24"><expr pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="141:13" pos:end="159:13"><if pos:start="141:13" pos:end="149:13">if <condition pos:start="141:16" pos:end="141:50">(<expr pos:start="141:17" pos:end="141:49"><name pos:start="141:17" pos:end="141:30"><name pos:start="141:17" pos:end="141:19">env</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:30">mmu_model</name></name> <operator pos:start="141:32" pos:end="141:33">==</operator> <name pos:start="141:35" pos:end="141:49">POWERPC_MMU_64B</name></expr>)</condition> <block pos:start="141:52" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:63">

                <expr_stmt pos:start="143:17" pos:end="143:62"><expr pos:start="143:17" pos:end="143:61"><name pos:start="143:17" pos:end="143:25">htab_mask</name> <operator pos:start="143:27" pos:end="143:27">=</operator> <literal type="number" pos:start="143:29" pos:end="143:38">0x0FFFFFFF</literal> <operator pos:start="143:40" pos:end="143:41">&gt;&gt;</operator> <operator pos:start="143:43" pos:end="143:43">(</operator><literal type="number" pos:start="143:44" pos:end="143:47">28</literal> <operator pos:start="143:47" pos:end="143:47">-</operator> <operator pos:start="143:49" pos:end="143:49">(</operator><name pos:start="143:50" pos:end="143:52">sdr</name> <operator pos:start="143:54" pos:end="143:54">&amp;</operator> <literal type="number" pos:start="143:56" pos:end="143:59">0x1F</literal><operator pos:start="143:60" pos:end="143:60">)</operator><operator pos:start="143:61" pos:end="143:61">)</operator></expr>;</expr_stmt>

                <comment type="block" pos:start="145:17" pos:end="145:58">/* XXX: this is false for 1 TB segments */</comment>

                <expr_stmt pos:start="147:17" pos:end="147:63"><expr pos:start="147:17" pos:end="147:62"><name pos:start="147:17" pos:end="147:20">hash</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <operator pos:start="147:24" pos:end="147:24">(</operator><operator pos:start="147:25" pos:end="147:25">(</operator><name pos:start="147:26" pos:end="147:29">vsid</name> <operator pos:start="147:31" pos:end="147:31">^</operator> <name pos:start="147:33" pos:end="147:37">pgidx</name><operator pos:start="147:38" pos:end="147:38">)</operator> <operator pos:start="147:40" pos:end="147:41">&lt;&lt;</operator> <name pos:start="147:43" pos:end="147:49">vsid_sh</name><operator pos:start="147:50" pos:end="147:50">)</operator> <operator pos:start="147:52" pos:end="147:52">&amp;</operator> <name pos:start="147:54" pos:end="147:62">vsid_mask</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="149:15" pos:end="159:13">else

<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>

            <block pos:start="153:13" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:63">

                <expr_stmt pos:start="155:17" pos:end="155:45"><expr pos:start="155:17" pos:end="155:44"><name pos:start="155:17" pos:end="155:25">htab_mask</name> <operator pos:start="155:27" pos:end="155:27">=</operator> <name pos:start="155:29" pos:end="155:31">sdr</name> <operator pos:start="155:33" pos:end="155:33">&amp;</operator> <literal type="number" pos:start="155:35" pos:end="155:44">0x000001FF</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:63"><expr pos:start="157:17" pos:end="157:62"><name pos:start="157:17" pos:end="157:20">hash</name> <operator pos:start="157:22" pos:end="157:22">=</operator> <operator pos:start="157:24" pos:end="157:24">(</operator><operator pos:start="157:25" pos:end="157:25">(</operator><name pos:start="157:26" pos:end="157:29">vsid</name> <operator pos:start="157:31" pos:end="157:31">^</operator> <name pos:start="157:33" pos:end="157:37">pgidx</name><operator pos:start="157:38" pos:end="157:38">)</operator> <operator pos:start="157:40" pos:end="157:41">&lt;&lt;</operator> <name pos:start="157:43" pos:end="157:49">vsid_sh</name><operator pos:start="157:50" pos:end="157:50">)</operator> <operator pos:start="157:52" pos:end="157:52">&amp;</operator> <name pos:start="157:54" pos:end="157:62">vsid_mask</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="164:0"><expr pos:start="161:13" pos:end="161:51"><name pos:start="161:13" pos:end="161:16">mask</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <operator pos:start="161:20" pos:end="161:20">(</operator><name pos:start="161:21" pos:end="161:29">htab_mask</name> <operator pos:start="161:31" pos:end="161:32">&lt;&lt;</operator> <name pos:start="161:34" pos:end="161:39">sdr_sh</name><operator pos:start="161:40" pos:end="161:40">)</operator> <operator pos:start="161:42" pos:end="161:42">|</operator> <name pos:start="161:44" pos:end="161:51">sdr_mask</name></expr>;</expr_stmt>

<cpp:if pos:start="163:1" pos:end="163:23">#<cpp:directive pos:start="163:2" pos:end="163:3">if</cpp:directive> <expr pos:start="163:5" pos:end="163:23"><call pos:start="163:5" pos:end="163:23"><name pos:start="163:5" pos:end="163:11">defined</name> <argument_list pos:start="163:13" pos:end="163:23">(<argument pos:start="163:14" pos:end="163:22"><expr pos:start="163:14" pos:end="163:22"><name pos:start="163:14" pos:end="163:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="165:13" pos:end="176:0"><if pos:start="165:13" pos:end="176:0">if <condition pos:start="165:16" pos:end="165:30">(<expr pos:start="165:17" pos:end="165:29"><name pos:start="165:17" pos:end="165:24">loglevel</name> <operator pos:start="165:26" pos:end="165:27">!=</operator> <literal type="number" pos:start="165:29" pos:end="165:29">0</literal></expr>)</condition> <block pos:start="165:32" pos:end="176:0">{<block_content pos:start="167:17" pos:end="171:35">

                <expr_stmt pos:start="167:17" pos:end="171:35"><expr pos:start="167:17" pos:end="171:34"><call pos:start="167:17" pos:end="171:34"><name pos:start="167:17" pos:end="167:23">fprintf</name><argument_list pos:start="167:24" pos:end="171:34">(<argument pos:start="167:25" pos:end="167:31"><expr pos:start="167:25" pos:end="167:31"><name pos:start="167:25" pos:end="167:31">logfile</name></expr></argument>, <argument pos:start="167:34" pos:end="169:45"><expr pos:start="167:34" pos:end="169:45"><literal type="string" pos:start="167:34" pos:end="167:39">"sdr "</literal> <name pos:start="167:41" pos:end="167:46">PADDRX</name> <literal type="string" pos:start="167:48" pos:end="167:61">" sh %d hash "</literal> <name pos:start="167:63" pos:end="167:68">PADDRX</name> <literal type="string" pos:start="167:70" pos:end="167:77">" mask "</literal>

                        <name pos:start="169:25" pos:end="169:30">PADDRX</name> <literal type="string" pos:start="169:32" pos:end="169:34">" "</literal> <name pos:start="169:36" pos:end="169:40">ADDRX</name> <literal type="string" pos:start="169:42" pos:end="169:45">"\n"</literal></expr></argument>, <argument pos:start="169:48" pos:end="169:50"><expr pos:start="169:48" pos:end="169:50"><name pos:start="169:48" pos:end="169:50">sdr</name></expr></argument>, <argument pos:start="169:53" pos:end="169:58"><expr pos:start="169:53" pos:end="169:58"><name pos:start="169:53" pos:end="169:58">sdr_sh</name></expr></argument>, <argument pos:start="169:61" pos:end="169:64"><expr pos:start="169:61" pos:end="169:64"><name pos:start="169:61" pos:end="169:64">hash</name></expr></argument>, <argument pos:start="169:67" pos:end="169:70"><expr pos:start="169:67" pos:end="169:70"><name pos:start="169:67" pos:end="169:70">mask</name></expr></argument>,

                        <argument pos:start="171:25" pos:end="171:33"><expr pos:start="171:25" pos:end="171:33"><name pos:start="171:25" pos:end="171:33">page_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="175:1" pos:end="175:6">#<cpp:directive pos:start="175:2" pos:end="175:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="177:13" pos:end="177:66"><expr pos:start="177:13" pos:end="177:65"><name pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:15">ctx</name><operator pos:start="177:16" pos:end="177:17">-&gt;</operator><name pos:start="177:18" pos:end="177:24">pg_addr</name><index pos:start="177:25" pos:end="177:27">[<expr pos:start="177:26" pos:end="177:26"><literal type="number" pos:start="177:26" pos:end="177:26">0</literal></expr>]</index></name> <operator pos:start="177:29" pos:end="177:29">=</operator> <call pos:start="177:31" pos:end="177:65"><name pos:start="177:31" pos:end="177:40">get_pgaddr</name><argument_list pos:start="177:41" pos:end="177:65">(<argument pos:start="177:42" pos:end="177:44"><expr pos:start="177:42" pos:end="177:44"><name pos:start="177:42" pos:end="177:44">sdr</name></expr></argument>, <argument pos:start="177:47" pos:end="177:52"><expr pos:start="177:47" pos:end="177:52"><name pos:start="177:47" pos:end="177:52">sdr_sh</name></expr></argument>, <argument pos:start="177:55" pos:end="177:58"><expr pos:start="177:55" pos:end="177:58"><name pos:start="177:55" pos:end="177:58">hash</name></expr></argument>, <argument pos:start="177:61" pos:end="177:64"><expr pos:start="177:61" pos:end="177:64"><name pos:start="177:61" pos:end="177:64">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="179:13" pos:end="179:41">/* Secondary table address */</comment>

            <expr_stmt pos:start="181:13" pos:end="184:0"><expr pos:start="181:13" pos:end="181:38"><name pos:start="181:13" pos:end="181:16">hash</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <operator pos:start="181:20" pos:end="181:20">(</operator><operator pos:start="181:21" pos:end="181:21">~</operator><name pos:start="181:22" pos:end="181:25">hash</name><operator pos:start="181:26" pos:end="181:26">)</operator> <operator pos:start="181:28" pos:end="181:28">&amp;</operator> <name pos:start="181:30" pos:end="181:38">vsid_mask</name></expr>;</expr_stmt>

<cpp:if pos:start="183:1" pos:end="183:23">#<cpp:directive pos:start="183:2" pos:end="183:3">if</cpp:directive> <expr pos:start="183:5" pos:end="183:23"><call pos:start="183:5" pos:end="183:23"><name pos:start="183:5" pos:end="183:11">defined</name> <argument_list pos:start="183:13" pos:end="183:23">(<argument pos:start="183:14" pos:end="183:22"><expr pos:start="183:14" pos:end="183:22"><name pos:start="183:14" pos:end="183:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="185:13" pos:end="194:0"><if pos:start="185:13" pos:end="194:0">if <condition pos:start="185:16" pos:end="185:30">(<expr pos:start="185:17" pos:end="185:29"><name pos:start="185:17" pos:end="185:24">loglevel</name> <operator pos:start="185:26" pos:end="185:27">!=</operator> <literal type="number" pos:start="185:29" pos:end="185:29">0</literal></expr>)</condition> <block pos:start="185:32" pos:end="194:0">{<block_content pos:start="187:17" pos:end="189:62">

                <expr_stmt pos:start="187:17" pos:end="189:62"><expr pos:start="187:17" pos:end="189:61"><call pos:start="187:17" pos:end="189:61"><name pos:start="187:17" pos:end="187:23">fprintf</name><argument_list pos:start="187:24" pos:end="189:61">(<argument pos:start="187:25" pos:end="187:31"><expr pos:start="187:25" pos:end="187:31"><name pos:start="187:25" pos:end="187:31">logfile</name></expr></argument>, <argument pos:start="187:34" pos:end="189:35"><expr pos:start="187:34" pos:end="189:35"><literal type="string" pos:start="187:34" pos:end="187:39">"sdr "</literal> <name pos:start="187:41" pos:end="187:46">PADDRX</name> <literal type="string" pos:start="187:48" pos:end="187:61">" sh %d hash "</literal> <name pos:start="187:63" pos:end="187:68">PADDRX</name> <literal type="string" pos:start="187:70" pos:end="187:77">" mask "</literal>

                        <name pos:start="189:25" pos:end="189:30">PADDRX</name> <literal type="string" pos:start="189:32" pos:end="189:35">"\n"</literal></expr></argument>, <argument pos:start="189:38" pos:end="189:40"><expr pos:start="189:38" pos:end="189:40"><name pos:start="189:38" pos:end="189:40">sdr</name></expr></argument>, <argument pos:start="189:43" pos:end="189:48"><expr pos:start="189:43" pos:end="189:48"><name pos:start="189:43" pos:end="189:48">sdr_sh</name></expr></argument>, <argument pos:start="189:51" pos:end="189:54"><expr pos:start="189:51" pos:end="189:54"><name pos:start="189:51" pos:end="189:54">hash</name></expr></argument>, <argument pos:start="189:57" pos:end="189:60"><expr pos:start="189:57" pos:end="189:60"><name pos:start="189:57" pos:end="189:60">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="195:13" pos:end="198:0"><expr pos:start="195:13" pos:end="195:65"><name pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:15">ctx</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:24">pg_addr</name><index pos:start="195:25" pos:end="195:27">[<expr pos:start="195:26" pos:end="195:26"><literal type="number" pos:start="195:26" pos:end="195:26">1</literal></expr>]</index></name> <operator pos:start="195:29" pos:end="195:29">=</operator> <call pos:start="195:31" pos:end="195:65"><name pos:start="195:31" pos:end="195:40">get_pgaddr</name><argument_list pos:start="195:41" pos:end="195:65">(<argument pos:start="195:42" pos:end="195:44"><expr pos:start="195:42" pos:end="195:44"><name pos:start="195:42" pos:end="195:44">sdr</name></expr></argument>, <argument pos:start="195:47" pos:end="195:52"><expr pos:start="195:47" pos:end="195:52"><name pos:start="195:47" pos:end="195:52">sdr_sh</name></expr></argument>, <argument pos:start="195:55" pos:end="195:58"><expr pos:start="195:55" pos:end="195:58"><name pos:start="195:55" pos:end="195:58">hash</name></expr></argument>, <argument pos:start="195:61" pos:end="195:64"><expr pos:start="195:61" pos:end="195:64"><name pos:start="195:61" pos:end="195:64">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="197:1" pos:end="197:25">#<cpp:directive pos:start="197:2" pos:end="197:3">if</cpp:directive> <expr pos:start="197:5" pos:end="197:25"><call pos:start="197:5" pos:end="197:25"><name pos:start="197:5" pos:end="197:11">defined</name><argument_list pos:start="197:12" pos:end="197:25">(<argument pos:start="197:13" pos:end="197:24"><expr pos:start="197:13" pos:end="197:24"><name pos:start="197:13" pos:end="197:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="199:13" pos:end="213:13"><if pos:start="199:13" pos:end="205:13">if <condition pos:start="199:16" pos:end="199:50">(<expr pos:start="199:17" pos:end="199:49"><name pos:start="199:17" pos:end="199:30"><name pos:start="199:17" pos:end="199:19">env</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:30">mmu_model</name></name> <operator pos:start="199:32" pos:end="199:33">==</operator> <name pos:start="199:35" pos:end="199:49">POWERPC_MMU_64B</name></expr>)</condition> <block pos:start="199:52" pos:end="205:13">{<block_content pos:start="203:17" pos:end="203:67">

                <comment type="block" pos:start="201:17" pos:end="201:72">/* Only 5 bits of the page index are used in the AVPN */</comment>

                <expr_stmt pos:start="203:17" pos:end="203:67"><expr pos:start="203:17" pos:end="203:66"><name pos:start="203:17" pos:end="203:25"><name pos:start="203:17" pos:end="203:19">ctx</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:25">ptem</name></name> <operator pos:start="203:27" pos:end="203:27">=</operator> <operator pos:start="203:29" pos:end="203:29">(</operator><name pos:start="203:30" pos:end="203:33">vsid</name> <operator pos:start="203:35" pos:end="203:36">&lt;&lt;</operator> <literal type="number" pos:start="203:38" pos:end="203:39">12</literal><operator pos:start="203:40" pos:end="203:40">)</operator> <operator pos:start="203:42" pos:end="203:42">|</operator> <operator pos:start="203:44" pos:end="203:44">(</operator><operator pos:start="203:45" pos:end="203:45">(</operator><name pos:start="203:46" pos:end="203:50">pgidx</name> <operator pos:start="203:52" pos:end="203:53">&gt;&gt;</operator> <literal type="number" pos:start="203:55" pos:end="203:55">4</literal><operator pos:start="203:56" pos:end="203:56">)</operator> <operator pos:start="203:58" pos:end="203:58">&amp;</operator> <literal type="number" pos:start="203:60" pos:end="203:65">0x0F80</literal><operator pos:start="203:66" pos:end="203:66">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="205:15" pos:end="213:13">else

<cpp:endif pos:start="207:1" pos:end="207:6">#<cpp:directive pos:start="207:2" pos:end="207:6">endif</cpp:directive></cpp:endif>

            <block pos:start="209:13" pos:end="213:13">{<block_content pos:start="211:17" pos:end="211:56">

                <expr_stmt pos:start="211:17" pos:end="211:56"><expr pos:start="211:17" pos:end="211:55"><name pos:start="211:17" pos:end="211:25"><name pos:start="211:17" pos:end="211:19">ctx</name><operator pos:start="211:20" pos:end="211:21">-&gt;</operator><name pos:start="211:22" pos:end="211:25">ptem</name></name> <operator pos:start="211:27" pos:end="211:27">=</operator> <operator pos:start="211:29" pos:end="211:29">(</operator><name pos:start="211:30" pos:end="211:33">vsid</name> <operator pos:start="211:35" pos:end="211:36">&lt;&lt;</operator> <literal type="number" pos:start="211:38" pos:end="211:38">7</literal><operator pos:start="211:39" pos:end="211:39">)</operator> <operator pos:start="211:41" pos:end="211:41">|</operator> <operator pos:start="211:43" pos:end="211:43">(</operator><name pos:start="211:44" pos:end="211:48">pgidx</name> <operator pos:start="211:50" pos:end="211:51">&gt;&gt;</operator> <literal type="number" pos:start="211:53" pos:end="211:54">10</literal><operator pos:start="211:55" pos:end="211:55">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="215:13" pos:end="215:63">/* Initialize real address with an invalid value */</comment>

            <expr_stmt pos:start="217:13" pos:end="217:42"><expr pos:start="217:13" pos:end="217:41"><name pos:start="217:13" pos:end="217:22"><name pos:start="217:13" pos:end="217:15">ctx</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:22">raddr</name></name> <operator pos:start="217:24" pos:end="217:24">=</operator> <operator pos:start="217:26" pos:end="217:26">(</operator><name pos:start="217:27" pos:end="217:38">target_ulong</name><operator pos:start="217:39" pos:end="217:39">)</operator><operator pos:start="217:40" pos:end="217:40">-</operator><literal type="number" pos:start="217:41" pos:end="217:41">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="282:0"><if pos:start="219:13" pos:end="227:13">if <condition pos:start="219:16" pos:end="221:66">(<expr pos:start="219:17" pos:end="221:65"><call pos:start="219:17" pos:end="221:65"><name pos:start="219:17" pos:end="219:24">unlikely</name><argument_list pos:start="219:25" pos:end="221:65">(<argument pos:start="219:26" pos:end="221:64"><expr pos:start="219:26" pos:end="221:64"><name pos:start="219:26" pos:end="219:39"><name pos:start="219:26" pos:end="219:28">env</name><operator pos:start="219:29" pos:end="219:30">-&gt;</operator><name pos:start="219:31" pos:end="219:39">mmu_model</name></name> <operator pos:start="219:41" pos:end="219:42">==</operator> <name pos:start="219:44" pos:end="219:63">POWERPC_MMU_SOFT_6xx</name> <operator pos:start="219:65" pos:end="219:66">||</operator>

                         <name pos:start="221:26" pos:end="221:39"><name pos:start="221:26" pos:end="221:28">env</name><operator pos:start="221:29" pos:end="221:30">-&gt;</operator><name pos:start="221:31" pos:end="221:39">mmu_model</name></name> <operator pos:start="221:41" pos:end="221:42">==</operator> <name pos:start="221:44" pos:end="221:64">POWERPC_MMU_SOFT_74xx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:68" pos:end="227:13">{<block_content pos:start="225:17" pos:end="225:66">

                <comment type="block" pos:start="223:17" pos:end="223:41">/* Software TLB search */</comment>

                <expr_stmt pos:start="225:17" pos:end="225:66"><expr pos:start="225:17" pos:end="225:65"><name pos:start="225:17" pos:end="225:19">ret</name> <operator pos:start="225:21" pos:end="225:21">=</operator> <call pos:start="225:23" pos:end="225:65"><name pos:start="225:23" pos:end="225:38">ppc6xx_tlb_check</name><argument_list pos:start="225:39" pos:end="225:65">(<argument pos:start="225:40" pos:end="225:42"><expr pos:start="225:40" pos:end="225:42"><name pos:start="225:40" pos:end="225:42">env</name></expr></argument>, <argument pos:start="225:45" pos:end="225:47"><expr pos:start="225:45" pos:end="225:47"><name pos:start="225:45" pos:end="225:47">ctx</name></expr></argument>, <argument pos:start="225:50" pos:end="225:54"><expr pos:start="225:50" pos:end="225:54"><name pos:start="225:50" pos:end="225:54">eaddr</name></expr></argument>, <argument pos:start="225:57" pos:end="225:58"><expr pos:start="225:57" pos:end="225:58"><name pos:start="225:57" pos:end="225:58">rw</name></expr></argument>, <argument pos:start="225:61" pos:end="225:64"><expr pos:start="225:61" pos:end="225:64"><name pos:start="225:61" pos:end="225:64">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="227:15" pos:end="282:0">else <block pos:start="227:20" pos:end="282:0">{<block_content pos:start="231:17" pos:end="277:17">

<cpp:if pos:start="229:1" pos:end="229:23">#<cpp:directive pos:start="229:2" pos:end="229:3">if</cpp:directive> <expr pos:start="229:5" pos:end="229:23"><call pos:start="229:5" pos:end="229:23"><name pos:start="229:5" pos:end="229:11">defined</name> <argument_list pos:start="229:13" pos:end="229:23">(<argument pos:start="229:14" pos:end="229:22"><expr pos:start="229:14" pos:end="229:22"><name pos:start="229:14" pos:end="229:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="231:17" pos:end="244:0"><if pos:start="231:17" pos:end="244:0">if <condition pos:start="231:20" pos:end="231:34">(<expr pos:start="231:21" pos:end="231:33"><name pos:start="231:21" pos:end="231:28">loglevel</name> <operator pos:start="231:30" pos:end="231:31">!=</operator> <literal type="number" pos:start="231:33" pos:end="231:33">0</literal></expr>)</condition> <block pos:start="231:36" pos:end="244:0">{<block_content pos:start="233:21" pos:end="239:61">

                    <expr_stmt pos:start="233:21" pos:end="239:61"><expr pos:start="233:21" pos:end="239:60"><call pos:start="233:21" pos:end="239:60"><name pos:start="233:21" pos:end="233:27">fprintf</name><argument_list pos:start="233:28" pos:end="239:60">(<argument pos:start="233:29" pos:end="233:35"><expr pos:start="233:29" pos:end="233:35"><name pos:start="233:29" pos:end="233:35">logfile</name></expr></argument>, <argument pos:start="233:38" pos:end="235:75"><expr pos:start="233:38" pos:end="235:75"><literal type="string" pos:start="233:38" pos:end="233:48">"0 sdr1=0x"</literal> <name pos:start="233:50" pos:end="233:55">PADDRX</name> <literal type="string" pos:start="233:57" pos:end="233:71">" vsid=0x%06x "</literal>

                            <literal type="string" pos:start="235:29" pos:end="235:63">"api=0x%04x hash=0x%07x pg_addr=0x"</literal> <name pos:start="235:65" pos:end="235:70">PADDRX</name> <literal type="string" pos:start="235:72" pos:end="235:75">"\n"</literal></expr></argument>,

                            <argument pos:start="237:29" pos:end="237:31"><expr pos:start="237:29" pos:end="237:31"><name pos:start="237:29" pos:end="237:31">sdr</name></expr></argument>, <argument pos:start="237:34" pos:end="237:47"><expr pos:start="237:34" pos:end="237:47"><operator pos:start="237:34" pos:end="237:34">(</operator><name pos:start="237:35" pos:end="237:42">uint32_t</name><operator pos:start="237:43" pos:end="237:43">)</operator><name pos:start="237:44" pos:end="237:47">vsid</name></expr></argument>, <argument pos:start="237:50" pos:end="237:64"><expr pos:start="237:50" pos:end="237:64"><operator pos:start="237:50" pos:end="237:50">(</operator><name pos:start="237:51" pos:end="237:58">uint32_t</name><operator pos:start="237:59" pos:end="237:59">)</operator><name pos:start="237:60" pos:end="237:64">pgidx</name></expr></argument>,

                            <argument pos:start="239:29" pos:end="239:42"><expr pos:start="239:29" pos:end="239:42"><operator pos:start="239:29" pos:end="239:29">(</operator><name pos:start="239:30" pos:end="239:37">uint32_t</name><operator pos:start="239:38" pos:end="239:38">)</operator><name pos:start="239:39" pos:end="239:42">hash</name></expr></argument>, <argument pos:start="239:45" pos:end="239:59"><expr pos:start="239:45" pos:end="239:59"><name pos:start="239:45" pos:end="239:59"><name pos:start="239:45" pos:end="239:47">ctx</name><operator pos:start="239:48" pos:end="239:49">-&gt;</operator><name pos:start="239:50" pos:end="239:56">pg_addr</name><index pos:start="239:57" pos:end="239:59">[<expr pos:start="239:58" pos:end="239:58"><literal type="number" pos:start="239:58" pos:end="239:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="243:1" pos:end="243:6">#<cpp:directive pos:start="243:2" pos:end="243:6">endif</cpp:directive></cpp:endif>

                <comment type="block" pos:start="245:17" pos:end="245:42">/* Primary table lookup */</comment>

                <expr_stmt pos:start="247:17" pos:end="247:54"><expr pos:start="247:17" pos:end="247:53"><name pos:start="247:17" pos:end="247:19">ret</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <call pos:start="247:23" pos:end="247:53"><name pos:start="247:23" pos:end="247:30">find_pte</name><argument_list pos:start="247:31" pos:end="247:53">(<argument pos:start="247:32" pos:end="247:34"><expr pos:start="247:32" pos:end="247:34"><name pos:start="247:32" pos:end="247:34">env</name></expr></argument>, <argument pos:start="247:37" pos:end="247:39"><expr pos:start="247:37" pos:end="247:39"><name pos:start="247:37" pos:end="247:39">ctx</name></expr></argument>, <argument pos:start="247:42" pos:end="247:42"><expr pos:start="247:42" pos:end="247:42"><literal type="number" pos:start="247:42" pos:end="247:42">0</literal></expr></argument>, <argument pos:start="247:45" pos:end="247:46"><expr pos:start="247:45" pos:end="247:46"><name pos:start="247:45" pos:end="247:46">rw</name></expr></argument>, <argument pos:start="247:49" pos:end="247:52"><expr pos:start="247:49" pos:end="247:52"><name pos:start="247:49" pos:end="247:52">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="249:17" pos:end="277:17"><if pos:start="249:17" pos:end="277:17">if <condition pos:start="249:20" pos:end="249:28">(<expr pos:start="249:21" pos:end="249:27"><name pos:start="249:21" pos:end="249:23">ret</name> <operator pos:start="249:25" pos:end="249:25">&lt;</operator> <literal type="number" pos:start="249:27" pos:end="249:27">0</literal></expr>)</condition> <block pos:start="249:30" pos:end="277:17">{<block_content pos:start="255:21" pos:end="275:35">

                    <comment type="block" pos:start="251:21" pos:end="251:48">/* Secondary table lookup */</comment>

<cpp:if pos:start="253:1" pos:end="253:23">#<cpp:directive pos:start="253:2" pos:end="253:3">if</cpp:directive> <expr pos:start="253:5" pos:end="253:23"><call pos:start="253:5" pos:end="253:23"><name pos:start="253:5" pos:end="253:11">defined</name> <argument_list pos:start="253:13" pos:end="253:23">(<argument pos:start="253:14" pos:end="253:22"><expr pos:start="253:14" pos:end="253:22"><name pos:start="253:14" pos:end="253:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <if_stmt pos:start="255:21" pos:end="270:0"><if pos:start="255:21" pos:end="270:0">if <condition pos:start="255:24" pos:end="255:61">(<expr pos:start="255:25" pos:end="255:60"><name pos:start="255:25" pos:end="255:29">eaddr</name> <operator pos:start="255:31" pos:end="255:32">!=</operator> <literal type="number" pos:start="255:34" pos:end="255:43">0xEFFFFFFF</literal> <operator pos:start="255:45" pos:end="255:46">&amp;&amp;</operator> <name pos:start="255:48" pos:end="255:55">loglevel</name> <operator pos:start="255:57" pos:end="255:58">!=</operator> <literal type="number" pos:start="255:60" pos:end="255:60">0</literal></expr>)</condition> <block pos:start="255:63" pos:end="270:0">{<block_content pos:start="257:25" pos:end="265:65">

                        <expr_stmt pos:start="257:25" pos:end="265:65"><expr pos:start="257:25" pos:end="265:64"><call pos:start="257:25" pos:end="265:64"><name pos:start="257:25" pos:end="257:31">fprintf</name><argument_list pos:start="257:32" pos:end="265:64">(<argument pos:start="257:33" pos:end="257:39"><expr pos:start="257:33" pos:end="257:39"><name pos:start="257:33" pos:end="257:39">logfile</name></expr></argument>,

                                <argument pos:start="259:33" pos:end="261:68"><expr pos:start="259:33" pos:end="261:68"><literal type="string" pos:start="259:33" pos:end="259:43">"1 sdr1=0x"</literal> <name pos:start="259:45" pos:end="259:50">PADDRX</name> <literal type="string" pos:start="259:52" pos:end="259:77">" vsid=0x%06x api=0x%04x "</literal>

                                <literal type="string" pos:start="261:33" pos:end="261:56">"hash=0x%05x pg_addr=0x"</literal> <name pos:start="261:58" pos:end="261:63">PADDRX</name> <literal type="string" pos:start="261:65" pos:end="261:68">"\n"</literal></expr></argument>,

                                <argument pos:start="263:33" pos:end="263:35"><expr pos:start="263:33" pos:end="263:35"><name pos:start="263:33" pos:end="263:35">sdr</name></expr></argument>, <argument pos:start="263:38" pos:end="263:51"><expr pos:start="263:38" pos:end="263:51"><operator pos:start="263:38" pos:end="263:38">(</operator><name pos:start="263:39" pos:end="263:46">uint32_t</name><operator pos:start="263:47" pos:end="263:47">)</operator><name pos:start="263:48" pos:end="263:51">vsid</name></expr></argument>, <argument pos:start="263:54" pos:end="263:68"><expr pos:start="263:54" pos:end="263:68"><operator pos:start="263:54" pos:end="263:54">(</operator><name pos:start="263:55" pos:end="263:62">uint32_t</name><operator pos:start="263:63" pos:end="263:63">)</operator><name pos:start="263:64" pos:end="263:68">pgidx</name></expr></argument>,

                                <argument pos:start="265:33" pos:end="265:46"><expr pos:start="265:33" pos:end="265:46"><operator pos:start="265:33" pos:end="265:33">(</operator><name pos:start="265:34" pos:end="265:41">uint32_t</name><operator pos:start="265:42" pos:end="265:42">)</operator><name pos:start="265:43" pos:end="265:46">hash</name></expr></argument>, <argument pos:start="265:49" pos:end="265:63"><expr pos:start="265:49" pos:end="265:63"><name pos:start="265:49" pos:end="265:63"><name pos:start="265:49" pos:end="265:51">ctx</name><operator pos:start="265:52" pos:end="265:53">-&gt;</operator><name pos:start="265:54" pos:end="265:60">pg_addr</name><index pos:start="265:61" pos:end="265:63">[<expr pos:start="265:62" pos:end="265:62"><literal type="number" pos:start="265:62" pos:end="265:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="271:21" pos:end="271:59"><expr pos:start="271:21" pos:end="271:58"><name pos:start="271:21" pos:end="271:24">ret2</name> <operator pos:start="271:26" pos:end="271:26">=</operator> <call pos:start="271:28" pos:end="271:58"><name pos:start="271:28" pos:end="271:35">find_pte</name><argument_list pos:start="271:36" pos:end="271:58">(<argument pos:start="271:37" pos:end="271:39"><expr pos:start="271:37" pos:end="271:39"><name pos:start="271:37" pos:end="271:39">env</name></expr></argument>, <argument pos:start="271:42" pos:end="271:44"><expr pos:start="271:42" pos:end="271:44"><name pos:start="271:42" pos:end="271:44">ctx</name></expr></argument>, <argument pos:start="271:47" pos:end="271:47"><expr pos:start="271:47" pos:end="271:47"><literal type="number" pos:start="271:47" pos:end="271:47">1</literal></expr></argument>, <argument pos:start="271:50" pos:end="271:51"><expr pos:start="271:50" pos:end="271:51"><name pos:start="271:50" pos:end="271:51">rw</name></expr></argument>, <argument pos:start="271:54" pos:end="271:57"><expr pos:start="271:54" pos:end="271:57"><name pos:start="271:54" pos:end="271:57">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="273:21" pos:end="275:35"><if pos:start="273:21" pos:end="275:35">if <condition pos:start="273:24" pos:end="273:35">(<expr pos:start="273:25" pos:end="273:34"><name pos:start="273:25" pos:end="273:28">ret2</name> <operator pos:start="273:30" pos:end="273:31">!=</operator> <operator pos:start="273:33" pos:end="273:33">-</operator><literal type="number" pos:start="273:34" pos:end="273:34">1</literal></expr>)</condition><block type="pseudo" pos:start="275:25" pos:end="275:35"><block_content pos:start="275:25" pos:end="275:35">

                        <expr_stmt pos:start="275:25" pos:end="275:35"><expr pos:start="275:25" pos:end="275:34"><name pos:start="275:25" pos:end="275:27">ret</name> <operator pos:start="275:29" pos:end="275:29">=</operator> <name pos:start="275:31" pos:end="275:34">ret2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:if pos:start="281:1" pos:end="281:30">#<cpp:directive pos:start="281:2" pos:end="281:3">if</cpp:directive> <expr pos:start="281:5" pos:end="281:30"><call pos:start="281:5" pos:end="281:30"><name pos:start="281:5" pos:end="281:11">defined</name> <argument_list pos:start="281:13" pos:end="281:30">(<argument pos:start="281:14" pos:end="281:29"><expr pos:start="281:14" pos:end="281:29"><name pos:start="281:14" pos:end="281:29">DUMP_PAGE_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="283:13" pos:end="322:0"><if pos:start="283:13" pos:end="322:0">if <condition pos:start="283:16" pos:end="283:30">(<expr pos:start="283:17" pos:end="283:29"><name pos:start="283:17" pos:end="283:24">loglevel</name> <operator pos:start="283:26" pos:end="283:27">!=</operator> <literal type="number" pos:start="283:29" pos:end="283:29">0</literal></expr>)</condition> <block pos:start="283:32" pos:end="322:0">{<block_content pos:start="285:17" pos:end="317:17">

                <decl_stmt pos:start="285:17" pos:end="285:43"><decl pos:start="285:17" pos:end="285:42"><type pos:start="285:17" pos:end="285:34"><name pos:start="285:17" pos:end="285:34">target_phys_addr_t</name></type> <name pos:start="285:36" pos:end="285:42">curaddr</name></decl>;</decl_stmt>

                <decl_stmt pos:start="287:17" pos:end="287:40"><decl pos:start="287:17" pos:end="287:27"><type pos:start="287:17" pos:end="287:24"><name pos:start="287:17" pos:end="287:24">uint32_t</name></type> <name pos:start="287:26" pos:end="287:27">a0</name></decl>, <decl pos:start="287:30" pos:end="287:31"><type ref="prev" pos:start="287:17" pos:end="287:24"/><name pos:start="287:30" pos:end="287:31">a1</name></decl>, <decl pos:start="287:34" pos:end="287:35"><type ref="prev" pos:start="287:17" pos:end="287:24"/><name pos:start="287:34" pos:end="287:35">a2</name></decl>, <decl pos:start="287:38" pos:end="287:39"><type ref="prev" pos:start="287:17" pos:end="287:24"/><name pos:start="287:38" pos:end="287:39">a3</name></decl>;</decl_stmt>

                <expr_stmt pos:start="289:17" pos:end="293:42"><expr pos:start="289:17" pos:end="293:41"><call pos:start="289:17" pos:end="293:41"><name pos:start="289:17" pos:end="289:23">fprintf</name><argument_list pos:start="289:24" pos:end="293:41">(<argument pos:start="289:25" pos:end="289:31"><expr pos:start="289:25" pos:end="289:31"><name pos:start="289:25" pos:end="289:31">logfile</name></expr></argument>,

                        <argument pos:start="291:25" pos:end="291:65"><expr pos:start="291:25" pos:end="291:65"><literal type="string" pos:start="291:25" pos:end="291:38">"Page table: "</literal> <name pos:start="291:40" pos:end="291:45">PADDRX</name> <literal type="string" pos:start="291:47" pos:end="291:53">" len "</literal> <name pos:start="291:55" pos:end="291:60">PADDRX</name> <literal type="string" pos:start="291:62" pos:end="291:65">"\n"</literal></expr></argument>,

                        <argument pos:start="293:25" pos:end="293:27"><expr pos:start="293:25" pos:end="293:27"><name pos:start="293:25" pos:end="293:27">sdr</name></expr></argument>, <argument pos:start="293:30" pos:end="293:40"><expr pos:start="293:30" pos:end="293:40"><name pos:start="293:30" pos:end="293:33">mask</name> <operator pos:start="293:35" pos:end="293:35">+</operator> <literal type="number" pos:start="293:37" pos:end="293:40">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="295:17" pos:end="317:17">for <control pos:start="295:21" pos:end="297:35">(<init pos:start="295:22" pos:end="295:35"><expr pos:start="295:22" pos:end="295:34"><name pos:start="295:22" pos:end="295:28">curaddr</name> <operator pos:start="295:30" pos:end="295:30">=</operator> <name pos:start="295:32" pos:end="295:34">sdr</name></expr>;</init> <condition pos:start="295:37" pos:end="295:66"><expr pos:start="295:37" pos:end="295:65"><name pos:start="295:37" pos:end="295:43">curaddr</name> <operator pos:start="295:45" pos:end="295:45">&lt;</operator> <operator pos:start="295:47" pos:end="295:47">(</operator><name pos:start="295:48" pos:end="295:50">sdr</name> <operator pos:start="295:52" pos:end="295:52">+</operator> <name pos:start="295:54" pos:end="295:57">mask</name> <operator pos:start="295:59" pos:end="295:59">+</operator> <literal type="number" pos:start="295:61" pos:end="295:64">0x80</literal><operator pos:start="295:65" pos:end="295:65">)</operator></expr>;</condition>

                     <incr pos:start="297:22" pos:end="297:34"><expr pos:start="297:22" pos:end="297:34"><name pos:start="297:22" pos:end="297:28">curaddr</name> <operator pos:start="297:30" pos:end="297:31">+=</operator> <literal type="number" pos:start="297:33" pos:end="297:34">16</literal></expr></incr>)</control> <block pos:start="297:37" pos:end="317:17">{<block_content pos:start="299:21" pos:end="315:21">

                    <expr_stmt pos:start="299:21" pos:end="299:43"><expr pos:start="299:21" pos:end="299:42"><name pos:start="299:21" pos:end="299:22">a0</name> <operator pos:start="299:24" pos:end="299:24">=</operator> <call pos:start="299:26" pos:end="299:42"><name pos:start="299:26" pos:end="299:33">ldl_phys</name><argument_list pos:start="299:34" pos:end="299:42">(<argument pos:start="299:35" pos:end="299:41"><expr pos:start="299:35" pos:end="299:41"><name pos:start="299:35" pos:end="299:41">curaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:47"><expr pos:start="301:21" pos:end="301:46"><name pos:start="301:21" pos:end="301:22">a1</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <call pos:start="301:26" pos:end="301:46"><name pos:start="301:26" pos:end="301:33">ldl_phys</name><argument_list pos:start="301:34" pos:end="301:46">(<argument pos:start="301:35" pos:end="301:45"><expr pos:start="301:35" pos:end="301:45"><name pos:start="301:35" pos:end="301:41">curaddr</name> <operator pos:start="301:43" pos:end="301:43">+</operator> <literal type="number" pos:start="301:45" pos:end="301:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="303:21" pos:end="303:47"><expr pos:start="303:21" pos:end="303:46"><name pos:start="303:21" pos:end="303:22">a2</name> <operator pos:start="303:24" pos:end="303:24">=</operator> <call pos:start="303:26" pos:end="303:46"><name pos:start="303:26" pos:end="303:33">ldl_phys</name><argument_list pos:start="303:34" pos:end="303:46">(<argument pos:start="303:35" pos:end="303:45"><expr pos:start="303:35" pos:end="303:45"><name pos:start="303:35" pos:end="303:41">curaddr</name> <operator pos:start="303:43" pos:end="303:43">+</operator> <literal type="number" pos:start="303:45" pos:end="303:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="305:21" pos:end="305:48"><expr pos:start="305:21" pos:end="305:47"><name pos:start="305:21" pos:end="305:22">a3</name> <operator pos:start="305:24" pos:end="305:24">=</operator> <call pos:start="305:26" pos:end="305:47"><name pos:start="305:26" pos:end="305:33">ldl_phys</name><argument_list pos:start="305:34" pos:end="305:47">(<argument pos:start="305:35" pos:end="305:46"><expr pos:start="305:35" pos:end="305:46"><name pos:start="305:35" pos:end="305:41">curaddr</name> <operator pos:start="305:43" pos:end="305:43">+</operator> <literal type="number" pos:start="305:45" pos:end="305:46">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="307:21" pos:end="315:21"><if pos:start="307:21" pos:end="315:21">if <condition pos:start="307:24" pos:end="307:65">(<expr pos:start="307:25" pos:end="307:64"><name pos:start="307:25" pos:end="307:26">a0</name> <operator pos:start="307:28" pos:end="307:29">!=</operator> <literal type="number" pos:start="307:31" pos:end="307:31">0</literal> <operator pos:start="307:33" pos:end="307:34">||</operator> <name pos:start="307:36" pos:end="307:37">a1</name> <operator pos:start="307:39" pos:end="307:40">!=</operator> <literal type="number" pos:start="307:42" pos:end="307:42">0</literal> <operator pos:start="307:44" pos:end="307:45">||</operator> <name pos:start="307:47" pos:end="307:48">a2</name> <operator pos:start="307:50" pos:end="307:51">!=</operator> <literal type="number" pos:start="307:53" pos:end="307:53">0</literal> <operator pos:start="307:55" pos:end="307:56">||</operator> <name pos:start="307:58" pos:end="307:59">a3</name> <operator pos:start="307:61" pos:end="307:62">!=</operator> <literal type="number" pos:start="307:64" pos:end="307:64">0</literal></expr>)</condition> <block pos:start="307:67" pos:end="315:21">{<block_content pos:start="309:25" pos:end="313:57">

                        <expr_stmt pos:start="309:25" pos:end="313:57"><expr pos:start="309:25" pos:end="313:56"><call pos:start="309:25" pos:end="313:56"><name pos:start="309:25" pos:end="309:31">fprintf</name><argument_list pos:start="309:32" pos:end="313:56">(<argument pos:start="309:33" pos:end="309:39"><expr pos:start="309:33" pos:end="309:39"><name pos:start="309:33" pos:end="309:39">logfile</name></expr></argument>,

                                <argument pos:start="311:33" pos:end="311:64"><expr pos:start="311:33" pos:end="311:64"><name pos:start="311:33" pos:end="311:38">PADDRX</name> <literal type="string" pos:start="311:40" pos:end="311:64">": %08x %08x %08x %08x\n"</literal></expr></argument>,

                                <argument pos:start="313:33" pos:end="313:39"><expr pos:start="313:33" pos:end="313:39"><name pos:start="313:33" pos:end="313:39">curaddr</name></expr></argument>, <argument pos:start="313:42" pos:end="313:43"><expr pos:start="313:42" pos:end="313:43"><name pos:start="313:42" pos:end="313:43">a0</name></expr></argument>, <argument pos:start="313:46" pos:end="313:47"><expr pos:start="313:46" pos:end="313:47"><name pos:start="313:46" pos:end="313:47">a1</name></expr></argument>, <argument pos:start="313:50" pos:end="313:51"><expr pos:start="313:50" pos:end="313:51"><name pos:start="313:50" pos:end="313:51">a2</name></expr></argument>, <argument pos:start="313:54" pos:end="313:55"><expr pos:start="313:54" pos:end="313:55"><name pos:start="313:54" pos:end="313:55">a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="321:1" pos:end="321:6">#<cpp:directive pos:start="321:2" pos:end="321:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="323:11" pos:end="335:9">else <block pos:start="323:16" pos:end="335:9">{<block_content pos:start="327:13" pos:end="333:21">

<cpp:if pos:start="325:1" pos:end="325:23">#<cpp:directive pos:start="325:2" pos:end="325:3">if</cpp:directive> <expr pos:start="325:5" pos:end="325:23"><call pos:start="325:5" pos:end="325:23"><name pos:start="325:5" pos:end="325:11">defined</name> <argument_list pos:start="325:13" pos:end="325:23">(<argument pos:start="325:14" pos:end="325:22"><expr pos:start="325:14" pos:end="325:22"><name pos:start="325:14" pos:end="325:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="327:13" pos:end="332:0"><if pos:start="327:13" pos:end="332:0">if <condition pos:start="327:16" pos:end="327:30">(<expr pos:start="327:17" pos:end="327:29"><name pos:start="327:17" pos:end="327:24">loglevel</name> <operator pos:start="327:26" pos:end="327:27">!=</operator> <literal type="number" pos:start="327:29" pos:end="327:29">0</literal></expr>)</condition><block type="pseudo" pos:start="329:17" pos:end="332:0"><block_content pos:start="329:17" pos:end="332:0">

                <expr_stmt pos:start="329:17" pos:end="332:0"><expr pos:start="329:17" pos:end="329:55"><call pos:start="329:17" pos:end="329:55"><name pos:start="329:17" pos:end="329:23">fprintf</name><argument_list pos:start="329:24" pos:end="329:55">(<argument pos:start="329:25" pos:end="329:31"><expr pos:start="329:25" pos:end="329:31"><name pos:start="329:25" pos:end="329:31">logfile</name></expr></argument>, <argument pos:start="329:34" pos:end="329:54"><expr pos:start="329:34" pos:end="329:54"><literal type="string" pos:start="329:34" pos:end="329:54">"No access allowed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="331:1" pos:end="331:6">#<cpp:directive pos:start="331:2" pos:end="331:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="333:13" pos:end="333:21"><expr pos:start="333:13" pos:end="333:20"><name pos:start="333:13" pos:end="333:15">ret</name> <operator pos:start="333:17" pos:end="333:17">=</operator> <operator pos:start="333:19" pos:end="333:19">-</operator><literal type="number" pos:start="333:20" pos:end="333:20">3</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="337:7" pos:end="421:5">else <block pos:start="337:12" pos:end="421:5">{<block_content pos:start="341:9" pos:end="419:9">

<cpp:if pos:start="339:1" pos:end="339:23">#<cpp:directive pos:start="339:2" pos:end="339:3">if</cpp:directive> <expr pos:start="339:5" pos:end="339:23"><call pos:start="339:5" pos:end="339:23"><name pos:start="339:5" pos:end="339:11">defined</name> <argument_list pos:start="339:13" pos:end="339:23">(<argument pos:start="339:14" pos:end="339:22"><expr pos:start="339:14" pos:end="339:22"><name pos:start="339:14" pos:end="339:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="341:9" pos:end="346:0"><if pos:start="341:9" pos:end="346:0">if <condition pos:start="341:12" pos:end="341:26">(<expr pos:start="341:13" pos:end="341:25"><name pos:start="341:13" pos:end="341:20">loglevel</name> <operator pos:start="341:22" pos:end="341:23">!=</operator> <literal type="number" pos:start="341:25" pos:end="341:25">0</literal></expr>)</condition><block type="pseudo" pos:start="343:13" pos:end="346:0"><block_content pos:start="343:13" pos:end="346:0">

            <expr_stmt pos:start="343:13" pos:end="346:0"><expr pos:start="343:13" pos:end="343:49"><call pos:start="343:13" pos:end="343:49"><name pos:start="343:13" pos:end="343:19">fprintf</name><argument_list pos:start="343:20" pos:end="343:49">(<argument pos:start="343:21" pos:end="343:27"><expr pos:start="343:21" pos:end="343:27"><name pos:start="343:21" pos:end="343:27">logfile</name></expr></argument>, <argument pos:start="343:30" pos:end="343:48"><expr pos:start="343:30" pos:end="343:48"><literal type="string" pos:start="343:30" pos:end="343:48">"direct store...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="347:9" pos:end="347:63">/* Direct-store segment : absolutely *BUGGY* for now */</comment>

        <switch pos:start="349:9" pos:end="407:9">switch <condition pos:start="349:16" pos:end="349:21">(<expr pos:start="349:17" pos:end="349:20"><name pos:start="349:17" pos:end="349:20">type</name></expr>)</condition> <block pos:start="349:23" pos:end="407:9">{<block_content pos:start="351:9" pos:end="405:22">

        <case pos:start="351:9" pos:end="351:24">case <expr pos:start="351:14" pos:end="351:23"><name pos:start="351:14" pos:end="351:23">ACCESS_INT</name></expr>:</case>

            <comment type="block" pos:start="353:13" pos:end="353:58">/* Integer load/store : only access allowed */</comment>

            <break pos:start="355:13" pos:end="355:18">break;</break>

        <case pos:start="357:9" pos:end="357:25">case <expr pos:start="357:14" pos:end="357:24"><name pos:start="357:14" pos:end="357:24">ACCESS_CODE</name></expr>:</case>

            <comment type="block" pos:start="359:13" pos:end="359:64">/* No code fetch is allowed in direct-store areas */</comment>

            <return pos:start="361:13" pos:end="361:22">return <expr pos:start="361:20" pos:end="361:21"><operator pos:start="361:20" pos:end="361:20">-</operator><literal type="number" pos:start="361:21" pos:end="361:21">4</literal></expr>;</return>

        <case pos:start="363:9" pos:end="363:26">case <expr pos:start="363:14" pos:end="363:25"><name pos:start="363:14" pos:end="363:25">ACCESS_FLOAT</name></expr>:</case>

            <comment type="block" pos:start="365:13" pos:end="365:43">/* Floating point load/store */</comment>

            <return pos:start="367:13" pos:end="367:22">return <expr pos:start="367:20" pos:end="367:21"><operator pos:start="367:20" pos:end="367:20">-</operator><literal type="number" pos:start="367:21" pos:end="367:21">4</literal></expr>;</return>

        <case pos:start="369:9" pos:end="369:24">case <expr pos:start="369:14" pos:end="369:23"><name pos:start="369:14" pos:end="369:23">ACCESS_RES</name></expr>:</case>

            <comment type="block" pos:start="371:13" pos:end="371:40">/* lwarx, ldarx or srwcx. */</comment>

            <return pos:start="373:13" pos:end="373:22">return <expr pos:start="373:20" pos:end="373:21"><operator pos:start="373:20" pos:end="373:20">-</operator><literal type="number" pos:start="373:21" pos:end="373:21">4</literal></expr>;</return>

        <case pos:start="375:9" pos:end="375:26">case <expr pos:start="375:14" pos:end="375:25"><name pos:start="375:14" pos:end="375:25">ACCESS_CACHE</name></expr>:</case>

            <comment type="block" pos:start="377:13" pos:end="377:70">/* dcba, dcbt, dcbtst, dcbf, dcbi, dcbst, dcbz, or icbi */</comment>

            <comment type="block" pos:start="379:13" pos:end="383:15">/* Should make the instruction do no-op.

             * As it already do no-op, it's quite easy :-)

             */</comment>

            <expr_stmt pos:start="385:13" pos:end="385:31"><expr pos:start="385:13" pos:end="385:30"><name pos:start="385:13" pos:end="385:22"><name pos:start="385:13" pos:end="385:15">ctx</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:22">raddr</name></name> <operator pos:start="385:24" pos:end="385:24">=</operator> <name pos:start="385:26" pos:end="385:30">eaddr</name></expr>;</expr_stmt>

            <return pos:start="387:13" pos:end="387:21">return <expr pos:start="387:20" pos:end="387:20"><literal type="number" pos:start="387:20" pos:end="387:20">0</literal></expr>;</return>

        <case pos:start="389:9" pos:end="389:24">case <expr pos:start="389:14" pos:end="389:23"><name pos:start="389:14" pos:end="389:23">ACCESS_EXT</name></expr>:</case>

            <comment type="block" pos:start="391:13" pos:end="391:32">/* eciwx or ecowx */</comment>

            <return pos:start="393:13" pos:end="393:22">return <expr pos:start="393:20" pos:end="393:21"><operator pos:start="393:20" pos:end="393:20">-</operator><literal type="number" pos:start="393:21" pos:end="393:21">4</literal></expr>;</return>

        <default pos:start="395:9" pos:end="395:16">default:</default>

            <if_stmt pos:start="397:13" pos:end="403:13"><if pos:start="397:13" pos:end="403:13">if <condition pos:start="397:16" pos:end="397:24">(<expr pos:start="397:17" pos:end="397:23"><name pos:start="397:17" pos:end="397:23">logfile</name></expr>)</condition> <block pos:start="397:26" pos:end="403:13">{<block_content pos:start="399:17" pos:end="401:49">

                <expr_stmt pos:start="399:17" pos:end="401:49"><expr pos:start="399:17" pos:end="401:48"><call pos:start="399:17" pos:end="401:48"><name pos:start="399:17" pos:end="399:23">fprintf</name><argument_list pos:start="399:24" pos:end="401:48">(<argument pos:start="399:25" pos:end="399:31"><expr pos:start="399:25" pos:end="399:31"><name pos:start="399:25" pos:end="399:31">logfile</name></expr></argument>, <argument pos:start="399:34" pos:end="401:47"><expr pos:start="399:34" pos:end="401:47"><literal type="string" pos:start="399:34" pos:end="399:70">"ERROR: instruction should not need "</literal>

                        <literal type="string" pos:start="401:25" pos:end="401:47">"address translation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="405:13" pos:end="405:22">return <expr pos:start="405:20" pos:end="405:21"><operator pos:start="405:20" pos:end="405:20">-</operator><literal type="number" pos:start="405:21" pos:end="405:21">4</literal></expr>;</return>

        </block_content>}</block></switch>

        <if_stmt pos:start="409:9" pos:end="419:9"><if pos:start="409:9" pos:end="415:9">if <condition pos:start="409:12" pos:end="409:69">(<expr pos:start="409:13" pos:end="409:68"><operator pos:start="409:13" pos:end="409:13">(</operator><name pos:start="409:14" pos:end="409:15">rw</name> <operator pos:start="409:17" pos:end="409:18">==</operator> <literal type="number" pos:start="409:20" pos:end="409:20">1</literal> <operator pos:start="409:22" pos:end="409:23">||</operator> <name pos:start="409:25" pos:end="409:32"><name pos:start="409:25" pos:end="409:27">ctx</name><operator pos:start="409:28" pos:end="409:29">-&gt;</operator><name pos:start="409:30" pos:end="409:32">key</name></name> <operator pos:start="409:34" pos:end="409:35">!=</operator> <literal type="number" pos:start="409:37" pos:end="409:37">1</literal><operator pos:start="409:38" pos:end="409:38">)</operator> <operator pos:start="409:40" pos:end="409:41">&amp;&amp;</operator> <operator pos:start="409:43" pos:end="409:43">(</operator><name pos:start="409:44" pos:end="409:45">rw</name> <operator pos:start="409:47" pos:end="409:48">==</operator> <literal type="number" pos:start="409:50" pos:end="409:50">0</literal> <operator pos:start="409:52" pos:end="409:53">||</operator> <name pos:start="409:55" pos:end="409:62"><name pos:start="409:55" pos:end="409:57">ctx</name><operator pos:start="409:58" pos:end="409:59">-&gt;</operator><name pos:start="409:60" pos:end="409:62">key</name></name> <operator pos:start="409:64" pos:end="409:65">!=</operator> <literal type="number" pos:start="409:67" pos:end="409:67">0</literal><operator pos:start="409:68" pos:end="409:68">)</operator></expr>)</condition> <block pos:start="409:71" pos:end="415:9">{<block_content pos:start="411:13" pos:end="413:20">

            <expr_stmt pos:start="411:13" pos:end="411:31"><expr pos:start="411:13" pos:end="411:30"><name pos:start="411:13" pos:end="411:22"><name pos:start="411:13" pos:end="411:15">ctx</name><operator pos:start="411:16" pos:end="411:17">-&gt;</operator><name pos:start="411:18" pos:end="411:22">raddr</name></name> <operator pos:start="411:24" pos:end="411:24">=</operator> <name pos:start="411:26" pos:end="411:30">eaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:20"><expr pos:start="413:13" pos:end="413:19"><name pos:start="413:13" pos:end="413:15">ret</name> <operator pos:start="413:17" pos:end="413:17">=</operator> <literal type="number" pos:start="413:19" pos:end="413:19">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="415:11" pos:end="419:9">else <block pos:start="415:16" pos:end="419:9">{<block_content pos:start="417:13" pos:end="417:21">

            <expr_stmt pos:start="417:13" pos:end="417:21"><expr pos:start="417:13" pos:end="417:20"><name pos:start="417:13" pos:end="417:15">ret</name> <operator pos:start="417:17" pos:end="417:17">=</operator> <operator pos:start="417:19" pos:end="417:19">-</operator><literal type="number" pos:start="417:20" pos:end="417:20">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="425:5" pos:end="425:15">return <expr pos:start="425:12" pos:end="425:14"><name pos:start="425:12" pos:end="425:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
