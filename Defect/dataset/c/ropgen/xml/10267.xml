<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10267.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:30"><name pos:start="1:1" pos:end="1:7">write_f</name><argument_list pos:start="1:8" pos:end="1:30">(<argument pos:start="1:9" pos:end="1:16">int argc</argument>, <argument pos:start="1:19" pos:end="1:29">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:9" pos:end="191:17">

	<decl_stmt pos:start="5:9" pos:end="5:30"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:22">timeval</name></name></type> <name pos:start="5:24" pos:end="5:25">t1</name></decl>, <decl pos:start="5:28" pos:end="5:29"><type ref="prev" pos:start="5:9" pos:end="5:22"/><name pos:start="5:28" pos:end="5:29">t2</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:55"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:17">Cflag</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:24" pos:end="7:28">pflag</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>, <decl pos:start="7:35" pos:end="7:43"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:35" pos:end="7:39">qflag</name> <init pos:start="7:41" pos:end="7:43">= <expr pos:start="7:43" pos:end="7:43"><literal type="number" pos:start="7:43" pos:end="7:43">0</literal></expr></init></decl>, <decl pos:start="7:46" pos:end="7:54"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:46" pos:end="7:50">bflag</name> <init pos:start="7:52" pos:end="7:54">= <expr pos:start="7:54" pos:end="7:54"><literal type="number" pos:start="7:54" pos:end="7:54">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:19"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">c</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:16" pos:end="9:18">cnt</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:18"><decl pos:start="11:9" pos:end="11:17"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:12">char</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">buf</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:23"><decl pos:start="13:9" pos:end="13:22"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">int64_t</name></type> <name pos:start="13:17" pos:end="13:22">offset</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:17">count</name></decl>;</decl_stmt>

        <comment type="block" pos:start="17:9" pos:end="17:79">/* Some compilers get confused and warn if this is not initialized.  */</comment>

        <decl_stmt pos:start="19:9" pos:end="19:22"><decl pos:start="19:9" pos:end="19:21"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:17">total</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="21:9" pos:end="21:27"><decl pos:start="21:9" pos:end="21:26"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:19">pattern</name> <init pos:start="21:21" pos:end="21:26">= <expr pos:start="21:23" pos:end="21:26"><literal type="number" pos:start="21:23" pos:end="21:26">0xcd</literal></expr></init></decl>;</decl_stmt>



	<while pos:start="25:9" pos:end="65:9">while <condition pos:start="25:15" pos:end="25:57">(<expr pos:start="25:16" pos:end="25:56"><operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:17">c</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:48"><name pos:start="25:21" pos:end="25:26">getopt</name><argument_list pos:start="25:27" pos:end="25:48">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">argc</name></expr></argument>, <argument pos:start="25:34" pos:end="25:37"><expr pos:start="25:34" pos:end="25:37"><name pos:start="25:34" pos:end="25:37">argv</name></expr></argument>, <argument pos:start="25:40" pos:end="25:47"><expr pos:start="25:40" pos:end="25:47"><literal type="string" pos:start="25:40" pos:end="25:47">"bCpP:q"</literal></expr></argument>)</argument_list></call><operator pos:start="25:49" pos:end="25:49">)</operator> <operator pos:start="25:51" pos:end="25:52">!=</operator> <name pos:start="25:54" pos:end="25:56">EOF</name></expr>)</condition> <block pos:start="25:59" pos:end="65:9">{<block_content pos:start="27:17" pos:end="63:17">

		<switch pos:start="27:17" pos:end="63:17">switch <condition pos:start="27:24" pos:end="27:26">(<expr pos:start="27:25" pos:end="27:25"><name pos:start="27:25" pos:end="27:25">c</name></expr>)</condition> <block pos:start="27:28" pos:end="63:17">{<block_content pos:start="29:17" pos:end="61:57">

		<case pos:start="29:17" pos:end="29:25">case <expr pos:start="29:22" pos:end="29:24"><literal type="char" pos:start="29:22" pos:end="29:24">'b'</literal></expr>:</case>

			<expr_stmt pos:start="31:25" pos:end="31:34"><expr pos:start="31:25" pos:end="31:33"><name pos:start="31:25" pos:end="31:29">bflag</name> <operator pos:start="31:31" pos:end="31:31">=</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr>;</expr_stmt>

			<break pos:start="33:25" pos:end="33:30">break;</break>

		<case pos:start="35:17" pos:end="35:25">case <expr pos:start="35:22" pos:end="35:24"><literal type="char" pos:start="35:22" pos:end="35:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="37:25" pos:end="37:34"><expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:29">Cflag</name> <operator pos:start="37:31" pos:end="37:31">=</operator> <literal type="number" pos:start="37:33" pos:end="37:33">1</literal></expr>;</expr_stmt>

			<break pos:start="39:25" pos:end="39:30">break;</break>

		<case pos:start="41:17" pos:end="41:25">case <expr pos:start="41:22" pos:end="41:24"><literal type="char" pos:start="41:22" pos:end="41:24">'p'</literal></expr>:</case>

			<expr_stmt pos:start="43:25" pos:end="43:34"><expr pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:29">pflag</name> <operator pos:start="43:31" pos:end="43:31">=</operator> <literal type="number" pos:start="43:33" pos:end="43:33">1</literal></expr>;</expr_stmt>

			<break pos:start="45:25" pos:end="45:30">break;</break>

		<case pos:start="47:17" pos:end="47:25">case <expr pos:start="47:22" pos:end="47:24"><literal type="char" pos:start="47:22" pos:end="47:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="49:25" pos:end="49:47"><expr pos:start="49:25" pos:end="49:46"><name pos:start="49:25" pos:end="49:31">pattern</name> <operator pos:start="49:33" pos:end="49:33">=</operator> <call pos:start="49:35" pos:end="49:46"><name pos:start="49:35" pos:end="49:38">atoi</name><argument_list pos:start="49:39" pos:end="49:46">(<argument pos:start="49:40" pos:end="49:45"><expr pos:start="49:40" pos:end="49:45"><name pos:start="49:40" pos:end="49:45">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="51:25" pos:end="51:30">break;</break>

		<case pos:start="53:17" pos:end="53:25">case <expr pos:start="53:22" pos:end="53:24"><literal type="char" pos:start="53:22" pos:end="53:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="55:25" pos:end="55:34"><expr pos:start="55:25" pos:end="55:33"><name pos:start="55:25" pos:end="55:29">qflag</name> <operator pos:start="55:31" pos:end="55:31">=</operator> <literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr>;</expr_stmt>

			<break pos:start="57:25" pos:end="57:30">break;</break>

		<default pos:start="59:17" pos:end="59:24">default:</default>

			<return pos:start="61:25" pos:end="61:57">return <expr pos:start="61:32" pos:end="61:56"><call pos:start="61:32" pos:end="61:56"><name pos:start="61:32" pos:end="61:44">command_usage</name><argument_list pos:start="61:45" pos:end="61:56">(<argument pos:start="61:46" pos:end="61:55"><expr pos:start="61:46" pos:end="61:55"><operator pos:start="61:46" pos:end="61:46">&amp;</operator><name pos:start="61:47" pos:end="61:55">write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="69:9" pos:end="71:49"><if pos:start="69:9" pos:end="71:49">if <condition pos:start="69:12" pos:end="69:31">(<expr pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:18">optind</name> <operator pos:start="69:20" pos:end="69:21">!=</operator> <name pos:start="69:23" pos:end="69:26">argc</name> <operator pos:start="69:28" pos:end="69:28">-</operator> <literal type="number" pos:start="69:30" pos:end="69:30">2</literal></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:49"><block_content pos:start="71:17" pos:end="71:49">

		<return pos:start="71:17" pos:end="71:49">return <expr pos:start="71:24" pos:end="71:48"><call pos:start="71:24" pos:end="71:48"><name pos:start="71:24" pos:end="71:36">command_usage</name><argument_list pos:start="71:37" pos:end="71:48">(<argument pos:start="71:38" pos:end="71:47"><expr pos:start="71:38" pos:end="71:47"><operator pos:start="71:38" pos:end="71:38">&amp;</operator><name pos:start="71:39" pos:end="71:47">write_cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



	<if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:27">(<expr pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:17">bflag</name> <operator pos:start="75:19" pos:end="75:20">&amp;&amp;</operator> <name pos:start="75:22" pos:end="75:26">pflag</name></expr>)</condition> <block pos:start="75:29" pos:end="81:9">{<block_content pos:start="77:17" pos:end="79:25">

		<expr_stmt pos:start="77:17" pos:end="77:75"><expr pos:start="77:17" pos:end="77:74"><call pos:start="77:17" pos:end="77:74"><name pos:start="77:17" pos:end="77:22">printf</name><argument_list pos:start="77:23" pos:end="77:74">(<argument pos:start="77:24" pos:end="77:73"><expr pos:start="77:24" pos:end="77:73"><literal type="string" pos:start="77:24" pos:end="77:73">"-b and -p cannot be specified at the same time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="79:17" pos:end="79:25">return <expr pos:start="79:24" pos:end="79:24"><literal type="number" pos:start="79:24" pos:end="79:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="85:9" pos:end="85:38"><expr pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:14">offset</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <call pos:start="85:18" pos:end="85:37"><name pos:start="85:18" pos:end="85:23">cvtnum</name><argument_list pos:start="85:24" pos:end="85:37">(<argument pos:start="85:25" pos:end="85:36"><expr pos:start="85:25" pos:end="85:36"><name pos:start="85:25" pos:end="85:36"><name pos:start="85:25" pos:end="85:28">argv</name><index pos:start="85:29" pos:end="85:36">[<expr pos:start="85:30" pos:end="85:35"><name pos:start="85:30" pos:end="85:35">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:23">(<expr pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:18">offset</name> <operator pos:start="87:20" pos:end="87:20">&lt;</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>)</condition> <block pos:start="87:25" pos:end="93:9">{<block_content pos:start="89:17" pos:end="91:25">

		<expr_stmt pos:start="89:17" pos:end="89:76"><expr pos:start="89:17" pos:end="89:75"><call pos:start="89:17" pos:end="89:75"><name pos:start="89:17" pos:end="89:22">printf</name><argument_list pos:start="89:23" pos:end="89:75">(<argument pos:start="89:24" pos:end="89:60"><expr pos:start="89:24" pos:end="89:60"><literal type="string" pos:start="89:24" pos:end="89:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="89:63" pos:end="89:74"><expr pos:start="89:63" pos:end="89:74"><name pos:start="89:63" pos:end="89:74"><name pos:start="89:63" pos:end="89:66">argv</name><index pos:start="89:67" pos:end="89:74">[<expr pos:start="89:68" pos:end="89:73"><name pos:start="89:68" pos:end="89:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="91:17" pos:end="91:25">return <expr pos:start="91:24" pos:end="91:24"><literal type="number" pos:start="91:24" pos:end="91:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="97:9" pos:end="97:17"><expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:14">optind</name><operator pos:start="97:15" pos:end="97:16">++</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:37"><expr pos:start="99:9" pos:end="99:36"><name pos:start="99:9" pos:end="99:13">count</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <call pos:start="99:17" pos:end="99:36"><name pos:start="99:17" pos:end="99:22">cvtnum</name><argument_list pos:start="99:23" pos:end="99:36">(<argument pos:start="99:24" pos:end="99:35"><expr pos:start="99:24" pos:end="99:35"><name pos:start="99:24" pos:end="99:35"><name pos:start="99:24" pos:end="99:27">argv</name><index pos:start="99:28" pos:end="99:35">[<expr pos:start="99:29" pos:end="99:34"><name pos:start="99:29" pos:end="99:34">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:22">(<expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:17">count</name> <operator pos:start="101:19" pos:end="101:19">&lt;</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>)</condition> <block pos:start="101:24" pos:end="107:9">{<block_content pos:start="103:17" pos:end="105:25">

		<expr_stmt pos:start="103:17" pos:end="103:76"><expr pos:start="103:17" pos:end="103:75"><call pos:start="103:17" pos:end="103:75"><name pos:start="103:17" pos:end="103:22">printf</name><argument_list pos:start="103:23" pos:end="103:75">(<argument pos:start="103:24" pos:end="103:60"><expr pos:start="103:24" pos:end="103:60"><literal type="string" pos:start="103:24" pos:end="103:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="103:63" pos:end="103:74"><expr pos:start="103:63" pos:end="103:74"><name pos:start="103:63" pos:end="103:74"><name pos:start="103:63" pos:end="103:66">argv</name><index pos:start="103:67" pos:end="103:74">[<expr pos:start="103:68" pos:end="103:73"><name pos:start="103:68" pos:end="103:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="105:17" pos:end="105:25">return <expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="111:9" pos:end="135:9"><if pos:start="111:9" pos:end="135:9">if <condition pos:start="111:12" pos:end="111:19">(<expr pos:start="111:13" pos:end="111:18"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:18">pflag</name></expr>)</condition> <block pos:start="111:21" pos:end="135:9">{<block_content pos:start="113:17" pos:end="133:17">

		<if_stmt pos:start="113:17" pos:end="121:17"><if pos:start="113:17" pos:end="121:17">if <condition pos:start="113:20" pos:end="113:35">(<expr pos:start="113:21" pos:end="113:34"><name pos:start="113:21" pos:end="113:26">offset</name> <operator pos:start="113:28" pos:end="113:28">&amp;</operator> <literal type="number" pos:start="113:30" pos:end="113:34">0x1ff</literal></expr>)</condition> <block pos:start="113:37" pos:end="121:17">{<block_content pos:start="115:25" pos:end="119:33">

			<expr_stmt pos:start="115:25" pos:end="117:51"><expr pos:start="115:25" pos:end="117:50"><call pos:start="115:25" pos:end="117:50"><name pos:start="115:25" pos:end="115:30">printf</name><argument_list pos:start="115:31" pos:end="117:50">(<argument pos:start="115:32" pos:end="115:68"><expr pos:start="115:32" pos:end="115:68"><literal type="string" pos:start="115:32" pos:end="115:68">"offset %lld is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="117:33" pos:end="117:49"><expr pos:start="117:33" pos:end="117:49"><operator pos:start="117:33" pos:end="117:33">(</operator><name pos:start="117:34" pos:end="117:37">long</name> <name pos:start="117:39" pos:end="117:42">long</name><operator pos:start="117:43" pos:end="117:43">)</operator><name pos:start="117:44" pos:end="117:49">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="119:25" pos:end="119:33">return <expr pos:start="119:32" pos:end="119:32"><literal type="number" pos:start="119:32" pos:end="119:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<if_stmt pos:start="125:17" pos:end="133:17"><if pos:start="125:17" pos:end="133:17">if <condition pos:start="125:20" pos:end="125:34">(<expr pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:25">count</name> <operator pos:start="125:27" pos:end="125:27">&amp;</operator> <literal type="number" pos:start="125:29" pos:end="125:33">0x1ff</literal></expr>)</condition> <block pos:start="125:36" pos:end="133:17">{<block_content pos:start="127:25" pos:end="131:33">

			<expr_stmt pos:start="127:25" pos:end="129:39"><expr pos:start="127:25" pos:end="129:38"><call pos:start="127:25" pos:end="129:38"><name pos:start="127:25" pos:end="127:30">printf</name><argument_list pos:start="127:31" pos:end="129:38">(<argument pos:start="127:32" pos:end="127:65"><expr pos:start="127:32" pos:end="127:65"><literal type="string" pos:start="127:32" pos:end="127:65">"count %d is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="129:33" pos:end="129:37"><expr pos:start="129:33" pos:end="129:37"><name pos:start="129:33" pos:end="129:37">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="131:25" pos:end="131:33">return <expr pos:start="131:32" pos:end="131:32"><literal type="number" pos:start="131:32" pos:end="131:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="139:9" pos:end="139:44"><expr pos:start="139:9" pos:end="139:43"><name pos:start="139:9" pos:end="139:11">buf</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:43"><name pos:start="139:15" pos:end="139:27">qemu_io_alloc</name><argument_list pos:start="139:28" pos:end="139:43">(<argument pos:start="139:29" pos:end="139:33"><expr pos:start="139:29" pos:end="139:33"><name pos:start="139:29" pos:end="139:33">count</name></expr></argument>, <argument pos:start="139:36" pos:end="139:42"><expr pos:start="139:36" pos:end="139:42"><name pos:start="139:36" pos:end="139:42">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="143:9" pos:end="143:32"><expr pos:start="143:9" pos:end="143:31"><call pos:start="143:9" pos:end="143:31"><name pos:start="143:9" pos:end="143:20">gettimeofday</name><argument_list pos:start="143:21" pos:end="143:31">(<argument pos:start="143:22" pos:end="143:24"><expr pos:start="143:22" pos:end="143:24"><operator pos:start="143:22" pos:end="143:22">&amp;</operator><name pos:start="143:23" pos:end="143:24">t1</name></expr></argument>, <argument pos:start="143:27" pos:end="143:30"><expr pos:start="143:27" pos:end="143:30"><name pos:start="143:27" pos:end="143:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="145:9" pos:end="155:59"><if pos:start="145:9" pos:end="147:60">if <condition pos:start="145:12" pos:end="145:18">(<expr pos:start="145:13" pos:end="145:17"><name pos:start="145:13" pos:end="145:17">pflag</name></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:60"><block_content pos:start="147:17" pos:end="147:60">

		<expr_stmt pos:start="147:17" pos:end="147:60"><expr pos:start="147:17" pos:end="147:59"><name pos:start="147:17" pos:end="147:19">cnt</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <call pos:start="147:23" pos:end="147:59"><name pos:start="147:23" pos:end="147:31">do_pwrite</name><argument_list pos:start="147:32" pos:end="147:59">(<argument pos:start="147:33" pos:end="147:35"><expr pos:start="147:33" pos:end="147:35"><name pos:start="147:33" pos:end="147:35">buf</name></expr></argument>, <argument pos:start="147:38" pos:end="147:43"><expr pos:start="147:38" pos:end="147:43"><name pos:start="147:38" pos:end="147:43">offset</name></expr></argument>, <argument pos:start="147:46" pos:end="147:50"><expr pos:start="147:46" pos:end="147:50"><name pos:start="147:46" pos:end="147:50">count</name></expr></argument>, <argument pos:start="147:53" pos:end="147:58"><expr pos:start="147:53" pos:end="147:58"><operator pos:start="147:53" pos:end="147:53">&amp;</operator><name pos:start="147:54" pos:end="147:58">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif" pos:start="149:9" pos:end="151:66">else if <condition pos:start="149:17" pos:end="149:23">(<expr pos:start="149:18" pos:end="149:22"><name pos:start="149:18" pos:end="149:22">bflag</name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:66"><block_content pos:start="151:17" pos:end="151:66">

		<expr_stmt pos:start="151:17" pos:end="151:66"><expr pos:start="151:17" pos:end="151:65"><name pos:start="151:17" pos:end="151:19">cnt</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <call pos:start="151:23" pos:end="151:65"><name pos:start="151:23" pos:end="151:37">do_save_vmstate</name><argument_list pos:start="151:38" pos:end="151:65">(<argument pos:start="151:39" pos:end="151:41"><expr pos:start="151:39" pos:end="151:41"><name pos:start="151:39" pos:end="151:41">buf</name></expr></argument>, <argument pos:start="151:44" pos:end="151:49"><expr pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:49">offset</name></expr></argument>, <argument pos:start="151:52" pos:end="151:56"><expr pos:start="151:52" pos:end="151:56"><name pos:start="151:52" pos:end="151:56">count</name></expr></argument>, <argument pos:start="151:59" pos:end="151:64"><expr pos:start="151:59" pos:end="151:64"><operator pos:start="151:59" pos:end="151:59">&amp;</operator><name pos:start="151:60" pos:end="151:64">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="153:9" pos:end="155:59">else<block type="pseudo" pos:start="155:17" pos:end="155:59"><block_content pos:start="155:17" pos:end="155:59">

		<expr_stmt pos:start="155:17" pos:end="155:59"><expr pos:start="155:17" pos:end="155:58"><name pos:start="155:17" pos:end="155:19">cnt</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <call pos:start="155:23" pos:end="155:58"><name pos:start="155:23" pos:end="155:30">do_write</name><argument_list pos:start="155:31" pos:end="155:58">(<argument pos:start="155:32" pos:end="155:34"><expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:34">buf</name></expr></argument>, <argument pos:start="155:37" pos:end="155:42"><expr pos:start="155:37" pos:end="155:42"><name pos:start="155:37" pos:end="155:42">offset</name></expr></argument>, <argument pos:start="155:45" pos:end="155:49"><expr pos:start="155:45" pos:end="155:49"><name pos:start="155:45" pos:end="155:49">count</name></expr></argument>, <argument pos:start="155:52" pos:end="155:57"><expr pos:start="155:52" pos:end="155:57"><operator pos:start="155:52" pos:end="155:52">&amp;</operator><name pos:start="155:53" pos:end="155:57">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt pos:start="157:9" pos:end="157:32"><expr pos:start="157:9" pos:end="157:31"><call pos:start="157:9" pos:end="157:31"><name pos:start="157:9" pos:end="157:20">gettimeofday</name><argument_list pos:start="157:21" pos:end="157:31">(<argument pos:start="157:22" pos:end="157:24"><expr pos:start="157:22" pos:end="157:24"><operator pos:start="157:22" pos:end="157:22">&amp;</operator><name pos:start="157:23" pos:end="157:24">t2</name></expr></argument>, <argument pos:start="157:27" pos:end="157:30"><expr pos:start="157:27" pos:end="157:30"><name pos:start="157:27" pos:end="157:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:20">(<expr pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:15">cnt</name> <operator pos:start="161:17" pos:end="161:17">&lt;</operator> <literal type="number" pos:start="161:19" pos:end="161:19">0</literal></expr>)</condition> <block pos:start="161:22" pos:end="167:9">{<block_content pos:start="163:17" pos:end="165:25">

		<expr_stmt pos:start="163:17" pos:end="163:61"><expr pos:start="163:17" pos:end="163:60"><call pos:start="163:17" pos:end="163:60"><name pos:start="163:17" pos:end="163:22">printf</name><argument_list pos:start="163:23" pos:end="163:60">(<argument pos:start="163:24" pos:end="163:43"><expr pos:start="163:24" pos:end="163:43"><literal type="string" pos:start="163:24" pos:end="163:43">"write failed: %s\n"</literal></expr></argument>, <argument pos:start="163:46" pos:end="163:59"><expr pos:start="163:46" pos:end="163:59"><call pos:start="163:46" pos:end="163:59"><name pos:start="163:46" pos:end="163:53">strerror</name><argument_list pos:start="163:54" pos:end="163:59">(<argument pos:start="163:55" pos:end="163:58"><expr pos:start="163:55" pos:end="163:58"><operator pos:start="163:55" pos:end="163:55">-</operator><name pos:start="163:56" pos:end="163:58">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="165:17" pos:end="165:25">goto <name pos:start="165:22" pos:end="165:24">out</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="171:9" pos:end="173:25"><if pos:start="171:9" pos:end="173:25">if <condition pos:start="171:12" pos:end="171:18">(<expr pos:start="171:13" pos:end="171:17"><name pos:start="171:13" pos:end="171:17">qflag</name></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:25"><block_content pos:start="173:17" pos:end="173:25">

		<goto pos:start="173:17" pos:end="173:25">goto <name pos:start="173:22" pos:end="173:24">out</name>;</goto></block_content></block></if></if_stmt>



	<comment type="block" pos:start="177:9" pos:end="177:64">/* Finally, report back -- -C gives a parsable format */</comment>

	<expr_stmt pos:start="179:9" pos:end="179:26"><expr pos:start="179:9" pos:end="179:25"><name pos:start="179:9" pos:end="179:10">t2</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <call pos:start="179:14" pos:end="179:25"><name pos:start="179:14" pos:end="179:17">tsub</name><argument_list pos:start="179:18" pos:end="179:25">(<argument pos:start="179:19" pos:end="179:20"><expr pos:start="179:19" pos:end="179:20"><name pos:start="179:19" pos:end="179:20">t2</name></expr></argument>, <argument pos:start="179:23" pos:end="179:24"><expr pos:start="179:23" pos:end="179:24"><name pos:start="179:23" pos:end="179:24">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="181:9" pos:end="181:69"><expr pos:start="181:9" pos:end="181:68"><call pos:start="181:9" pos:end="181:68"><name pos:start="181:9" pos:end="181:20">print_report</name><argument_list pos:start="181:21" pos:end="181:68">(<argument pos:start="181:22" pos:end="181:28"><expr pos:start="181:22" pos:end="181:28"><literal type="string" pos:start="181:22" pos:end="181:28">"wrote"</literal></expr></argument>, <argument pos:start="181:31" pos:end="181:33"><expr pos:start="181:31" pos:end="181:33"><operator pos:start="181:31" pos:end="181:31">&amp;</operator><name pos:start="181:32" pos:end="181:33">t2</name></expr></argument>, <argument pos:start="181:36" pos:end="181:41"><expr pos:start="181:36" pos:end="181:41"><name pos:start="181:36" pos:end="181:41">offset</name></expr></argument>, <argument pos:start="181:44" pos:end="181:48"><expr pos:start="181:44" pos:end="181:48"><name pos:start="181:44" pos:end="181:48">count</name></expr></argument>, <argument pos:start="181:51" pos:end="181:55"><expr pos:start="181:51" pos:end="181:55"><name pos:start="181:51" pos:end="181:55">total</name></expr></argument>, <argument pos:start="181:58" pos:end="181:60"><expr pos:start="181:58" pos:end="181:60"><name pos:start="181:58" pos:end="181:60">cnt</name></expr></argument>, <argument pos:start="181:63" pos:end="181:67"><expr pos:start="181:63" pos:end="181:67"><name pos:start="181:63" pos:end="181:67">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="185:1" pos:end="185:4"><name pos:start="185:1" pos:end="185:3">out</name>:</label>

	<expr_stmt pos:start="187:9" pos:end="187:26"><expr pos:start="187:9" pos:end="187:25"><call pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:20">qemu_io_free</name><argument_list pos:start="187:21" pos:end="187:25">(<argument pos:start="187:22" pos:end="187:24"><expr pos:start="187:22" pos:end="187:24"><name pos:start="187:22" pos:end="187:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="191:9" pos:end="191:17">return <expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
