<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21742.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">mips_fulong2e_init</name><parameter_list pos:start="1:31" pos:end="5:75">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:41">ram_addr_t</name></type> <name pos:start="1:43" pos:end="1:50">ram_size</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:75"><decl pos:start="1:53" pos:end="1:75"><type pos:start="1:53" pos:end="1:75"><specifier pos:start="1:53" pos:end="1:57">const</specifier> <name pos:start="1:59" pos:end="1:62">char</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:75">boot_device</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:51"><decl pos:start="3:25" pos:end="3:51"><type pos:start="3:25" pos:end="3:51"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:51">kernel_filename</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:79"><decl pos:start="3:54" pos:end="3:79"><type pos:start="3:54" pos:end="3:79"><specifier pos:start="3:54" pos:end="3:58">const</specifier> <name pos:start="3:60" pos:end="3:63">char</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:79">kernel_cmdline</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:51"><decl pos:start="5:25" pos:end="5:51"><type pos:start="5:25" pos:end="5:51"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:51">initrd_filename</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:74"><decl pos:start="5:54" pos:end="5:74"><type pos:start="5:54" pos:end="5:74"><specifier pos:start="5:54" pos:end="5:58">const</specifier> <name pos:start="5:60" pos:end="5:63">char</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:74">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="283:1">{<block_content pos:start="9:5" pos:end="281:19">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:28">ram_offset</name></decl>, <decl pos:start="11:31" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:17"/><name pos:start="11:31" pos:end="11:41">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">long</name></type> <name pos:start="13:10" pos:end="13:18">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:24">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">via_devfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:23">eeprom_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">i2c_bus</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:18">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:10"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:46"><decl pos:start="31:5" pos:end="31:45"><type pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:13">DriveInfo</name> <modifier pos:start="31:15" pos:end="31:15">*</modifier></type><name pos:start="31:16" pos:end="31:45"><name pos:start="31:16" pos:end="31:17">hd</name><index pos:start="31:18" pos:end="31:45">[<expr pos:start="31:19" pos:end="31:44"><name pos:start="31:19" pos:end="31:29">MAX_IDE_BUS</name> <operator pos:start="31:31" pos:end="31:31">*</operator> <name pos:start="31:33" pos:end="31:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:24"><decl pos:start="33:5" pos:end="33:23"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:15">DeviceState</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:23">eeprom</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">CPUState</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:17">env</name></decl>;</decl_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:19">/* init CPUs */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">NULL</name></expr>)</condition> <block pos:start="41:28" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:34">

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:17">cpu_model</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="string" pos:start="43:21" pos:end="43:33">"Loongson-2E"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:7">env</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:29"><name pos:start="47:11" pos:end="47:18">cpu_init</name><argument_list pos:start="47:19" pos:end="47:29">(<argument pos:start="47:20" pos:end="47:28"><expr pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:13">(<expr pos:start="49:9" pos:end="49:12"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:12">env</name></expr>)</condition> <block pos:start="49:15" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:58">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><literal type="string" pos:start="51:25" pos:end="51:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:64"><expr pos:start="59:5" pos:end="59:63"><call pos:start="59:5" pos:end="59:63"><name pos:start="59:5" pos:end="59:19">register_savevm</name><argument_list pos:start="59:20" pos:end="59:63">(<argument pos:start="59:21" pos:end="59:24"><expr pos:start="59:21" pos:end="59:24"><name pos:start="59:21" pos:end="59:24">NULL</name></expr></argument>, <argument pos:start="59:27" pos:end="59:31"><expr pos:start="59:27" pos:end="59:31"><literal type="string" pos:start="59:27" pos:end="59:31">"cpu"</literal></expr></argument>, <argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">0</literal></expr></argument>, <argument pos:start="59:37" pos:end="59:37"><expr pos:start="59:37" pos:end="59:37"><literal type="number" pos:start="59:37" pos:end="59:37">3</literal></expr></argument>, <argument pos:start="59:40" pos:end="59:47"><expr pos:start="59:40" pos:end="59:47"><name pos:start="59:40" pos:end="59:47">cpu_save</name></expr></argument>, <argument pos:start="59:50" pos:end="59:57"><expr pos:start="59:50" pos:end="59:57"><name pos:start="59:50" pos:end="59:57">cpu_load</name></expr></argument>, <argument pos:start="59:60" pos:end="59:62"><expr pos:start="59:60" pos:end="59:62"><name pos:start="59:60" pos:end="59:62">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><call pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:23">qemu_register_reset</name><argument_list pos:start="61:24" pos:end="61:44">(<argument pos:start="61:25" pos:end="61:38"><expr pos:start="61:25" pos:end="61:38"><name pos:start="61:25" pos:end="61:38">main_cpu_reset</name></expr></argument>, <argument pos:start="61:41" pos:end="61:43"><expr pos:start="61:41" pos:end="61:43"><name pos:start="61:41" pos:end="61:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:33">/* fulong 2e has 256M ram. */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:33"><expr pos:start="67:5" pos:end="67:32"><name pos:start="67:5" pos:end="67:12">ram_size</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <literal type="number" pos:start="67:16" pos:end="67:18">256</literal> <operator pos:start="67:20" pos:end="67:20">*</operator> <literal type="number" pos:start="67:22" pos:end="67:25">1024</literal> <operator pos:start="67:27" pos:end="67:27">*</operator> <literal type="number" pos:start="67:29" pos:end="67:32">1024</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:55">/* fulong 2e has a 1M flash.Winbond W39L040AP70Z */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:13">bios_size</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <literal type="number" pos:start="73:17" pos:end="73:20">1024</literal> <operator pos:start="73:22" pos:end="73:22">*</operator> <literal type="number" pos:start="73:24" pos:end="73:27">1024</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:64"><expr pos:start="79:5" pos:end="79:63"><name pos:start="79:5" pos:end="79:14">ram_offset</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="79:63"><name pos:start="79:18" pos:end="79:31">qemu_ram_alloc</name><argument_list pos:start="79:32" pos:end="79:63">(<argument pos:start="79:33" pos:end="79:36"><expr pos:start="79:33" pos:end="79:36"><name pos:start="79:33" pos:end="79:36">NULL</name></expr></argument>, <argument pos:start="79:39" pos:end="79:52"><expr pos:start="79:39" pos:end="79:52"><literal type="string" pos:start="79:39" pos:end="79:52">"fulong2e.ram"</literal></expr></argument>, <argument pos:start="79:55" pos:end="79:62"><expr pos:start="79:55" pos:end="79:62"><name pos:start="79:55" pos:end="79:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:67"><expr pos:start="81:5" pos:end="81:66"><name pos:start="81:5" pos:end="81:15">bios_offset</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:66"><name pos:start="81:19" pos:end="81:32">qemu_ram_alloc</name><argument_list pos:start="81:33" pos:end="81:66">(<argument pos:start="81:34" pos:end="81:37"><expr pos:start="81:34" pos:end="81:37"><name pos:start="81:34" pos:end="81:37">NULL</name></expr></argument>, <argument pos:start="81:40" pos:end="81:54"><expr pos:start="81:40" pos:end="81:54"><literal type="string" pos:start="81:40" pos:end="81:54">"fulong2e.bios"</literal></expr></argument>, <argument pos:start="81:57" pos:end="81:65"><expr pos:start="81:57" pos:end="81:65"><name pos:start="81:57" pos:end="81:65">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:58"><expr pos:start="85:5" pos:end="85:57"><call pos:start="85:5" pos:end="85:57"><name pos:start="85:5" pos:end="85:32">cpu_register_physical_memory</name><argument_list pos:start="85:33" pos:end="85:57">(<argument pos:start="85:34" pos:end="85:34"><expr pos:start="85:34" pos:end="85:34"><literal type="number" pos:start="85:34" pos:end="85:34">0</literal></expr></argument>, <argument pos:start="85:37" pos:end="85:44"><expr pos:start="85:37" pos:end="85:44"><name pos:start="85:37" pos:end="85:44">ram_size</name></expr></argument>, <argument pos:start="85:47" pos:end="85:56"><expr pos:start="85:47" pos:end="85:56"><name pos:start="85:47" pos:end="85:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:80"><expr pos:start="87:5" pos:end="89:79"><call pos:start="87:5" pos:end="89:79"><name pos:start="87:5" pos:end="87:32">cpu_register_physical_memory</name><argument_list pos:start="87:33" pos:end="89:79">(<argument pos:start="87:34" pos:end="87:45"><expr pos:start="87:34" pos:end="87:45"><literal type="number" pos:start="87:34" pos:end="87:45">0x1fc00000LL</literal></expr></argument>,

					   <argument pos:start="89:44" pos:end="89:52"><expr pos:start="89:44" pos:end="89:52"><name pos:start="89:44" pos:end="89:52">bios_size</name></expr></argument>, <argument pos:start="89:55" pos:end="89:78"><expr pos:start="89:55" pos:end="89:78"><name pos:start="89:55" pos:end="89:65">bios_offset</name> <operator pos:start="89:67" pos:end="89:67">|</operator> <name pos:start="89:69" pos:end="89:78">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="95:72">/* We do not support flash operation, just loading pmon.bin as raw BIOS.

     * Please use -L to set the BIOS path and -bios to set bios name. */</comment>



    <if_stmt pos:start="99:5" pos:end="147:5"><if pos:start="99:5" pos:end="113:5">if <condition pos:start="99:8" pos:end="99:24">(<expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:23">kernel_filename</name></expr>)</condition> <block pos:start="99:26" pos:end="113:5">{<block_content pos:start="101:9" pos:end="111:75">

        <expr_stmt pos:start="101:9" pos:end="101:41"><expr pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:20">loaderparams</name><operator pos:start="101:21" pos:end="101:21">.</operator><name pos:start="101:22" pos:end="101:29">ram_size</name></name> <operator pos:start="101:31" pos:end="101:31">=</operator> <name pos:start="101:33" pos:end="101:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:55"><expr pos:start="103:9" pos:end="103:54"><name pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:20">loaderparams</name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:36">kernel_filename</name></name> <operator pos:start="103:38" pos:end="103:38">=</operator> <name pos:start="103:40" pos:end="103:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:20">loaderparams</name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:35">kernel_cmdline</name></name> <operator pos:start="105:37" pos:end="105:37">=</operator> <name pos:start="105:39" pos:end="105:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:55"><expr pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:20">loaderparams</name><operator pos:start="107:21" pos:end="107:21">.</operator><name pos:start="107:22" pos:end="107:36">initrd_filename</name></name> <operator pos:start="107:38" pos:end="107:38">=</operator> <name pos:start="107:40" pos:end="107:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:41"><expr pos:start="109:9" pos:end="109:40"><name pos:start="109:9" pos:end="109:20">kernel_entry</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <call pos:start="109:24" pos:end="109:40"><name pos:start="109:24" pos:end="109:34">load_kernel</name> <argument_list pos:start="109:36" pos:end="109:40">(<argument pos:start="109:37" pos:end="109:39"><expr pos:start="109:37" pos:end="109:39"><name pos:start="109:37" pos:end="109:39">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:75"><expr pos:start="111:9" pos:end="111:74"><call pos:start="111:9" pos:end="111:74"><name pos:start="111:9" pos:end="111:24">write_bootloader</name><argument_list pos:start="111:25" pos:end="111:74">(<argument pos:start="111:26" pos:end="111:28"><expr pos:start="111:26" pos:end="111:28"><name pos:start="111:26" pos:end="111:28">env</name></expr></argument>, <argument pos:start="111:31" pos:end="111:59"><expr pos:start="111:31" pos:end="111:59"><call pos:start="111:31" pos:end="111:59"><name pos:start="111:31" pos:end="111:46">qemu_get_ram_ptr</name><argument_list pos:start="111:47" pos:end="111:59">(<argument pos:start="111:48" pos:end="111:58"><expr pos:start="111:48" pos:end="111:58"><name pos:start="111:48" pos:end="111:58">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:62" pos:end="111:73"><expr pos:start="111:62" pos:end="111:73"><name pos:start="111:62" pos:end="111:73">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="147:5">else <block pos:start="113:12" pos:end="147:5">{<block_content pos:start="115:9" pos:end="145:9">

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:30">(<expr pos:start="115:13" pos:end="115:29"><name pos:start="115:13" pos:end="115:21">bios_name</name> <operator pos:start="115:23" pos:end="115:24">==</operator> <name pos:start="115:26" pos:end="115:29">NULL</name></expr>)</condition> <block pos:start="115:32" pos:end="119:9">{<block_content pos:start="117:17" pos:end="117:44">

                <expr_stmt pos:start="117:17" pos:end="117:44"><expr pos:start="117:17" pos:end="117:43"><name pos:start="117:17" pos:end="117:25">bios_name</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <name pos:start="117:29" pos:end="117:43">FULONG_BIOSNAME</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:66"><expr pos:start="121:9" pos:end="121:65"><name pos:start="121:9" pos:end="121:16">filename</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="121:65"><name pos:start="121:20" pos:end="121:33">qemu_find_file</name><argument_list pos:start="121:34" pos:end="121:65">(<argument pos:start="121:35" pos:end="121:53"><expr pos:start="121:35" pos:end="121:53"><name pos:start="121:35" pos:end="121:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="121:56" pos:end="121:64"><expr pos:start="121:56" pos:end="121:64"><name pos:start="121:56" pos:end="121:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="135:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:21">(<expr pos:start="123:13" pos:end="123:20"><name pos:start="123:13" pos:end="123:20">filename</name></expr>)</condition> <block pos:start="123:23" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:32">

            <expr_stmt pos:start="125:13" pos:end="127:55"><expr pos:start="125:13" pos:end="127:54"><name pos:start="125:13" pos:end="125:21">bios_size</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <call pos:start="125:25" pos:end="127:54"><name pos:start="125:25" pos:end="125:43">load_image_targphys</name><argument_list pos:start="125:44" pos:end="127:54">(<argument pos:start="125:45" pos:end="125:52"><expr pos:start="125:45" pos:end="125:52"><name pos:start="125:45" pos:end="125:52">filename</name></expr></argument>, <argument pos:start="125:55" pos:end="125:66"><expr pos:start="125:55" pos:end="125:66"><literal type="number" pos:start="125:55" pos:end="125:66">0x1fc00000LL</literal></expr></argument>,

                                            <argument pos:start="127:45" pos:end="127:53"><expr pos:start="127:45" pos:end="127:53"><name pos:start="127:45" pos:end="127:53">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:32"><expr pos:start="129:13" pos:end="129:31"><call pos:start="129:13" pos:end="129:31"><name pos:start="129:13" pos:end="129:21">qemu_free</name><argument_list pos:start="129:22" pos:end="129:31">(<argument pos:start="129:23" pos:end="129:30"><expr pos:start="129:23" pos:end="129:30"><name pos:start="129:23" pos:end="129:30">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="131:11" pos:end="135:9">else <block pos:start="131:16" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:27">

            <expr_stmt pos:start="133:13" pos:end="133:27"><expr pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:21">bios_size</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <operator pos:start="133:25" pos:end="133:25">-</operator><literal type="number" pos:start="133:26" pos:end="133:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="139:9" pos:end="145:9"><if pos:start="139:9" pos:end="145:9">if <condition pos:start="139:12" pos:end="139:73">(<expr pos:start="139:13" pos:end="139:72"><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:41"><name pos:start="139:14" pos:end="139:22">bios_size</name> <argument_list type="generic" pos:start="139:24" pos:end="139:41">&lt; <argument pos:start="139:26" pos:end="139:39"><expr pos:start="139:26" pos:end="139:39"><literal type="number" pos:start="139:26" pos:end="139:26">0</literal> <operator pos:start="139:28" pos:end="139:29">||</operator> <name pos:start="139:31" pos:end="139:39">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="139:43" pos:end="139:51">BIOS_SIZE</name><operator pos:start="139:52" pos:end="139:52">)</operator> <operator pos:start="139:54" pos:end="139:55">&amp;&amp;</operator> <operator pos:start="139:57" pos:end="139:57">!</operator><name pos:start="139:58" pos:end="139:72">kernel_filename</name></expr>)</condition> <block pos:start="139:75" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:20">

            <expr_stmt pos:start="141:13" pos:end="141:80"><expr pos:start="141:13" pos:end="141:79"><call pos:start="141:13" pos:end="141:79"><name pos:start="141:13" pos:end="141:19">fprintf</name><argument_list pos:start="141:20" pos:end="141:79">(<argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><name pos:start="141:21" pos:end="141:26">stderr</name></expr></argument>, <argument pos:start="141:29" pos:end="141:67"><expr pos:start="141:29" pos:end="141:67"><literal type="string" pos:start="141:29" pos:end="141:67">"qemu: Could not load MIPS bios '%s'\n"</literal></expr></argument>, <argument pos:start="141:70" pos:end="141:78"><expr pos:start="141:70" pos:end="141:78"><name pos:start="141:70" pos:end="141:78">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:20"><expr pos:start="143:13" pos:end="143:19"><call pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:16">exit</name><argument_list pos:start="143:17" pos:end="143:19">(<argument pos:start="143:18" pos:end="143:18"><expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:31"><expr pos:start="153:5" pos:end="153:30"><call pos:start="153:5" pos:end="153:30"><name pos:start="153:5" pos:end="153:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="153:26" pos:end="153:30">(<argument pos:start="153:27" pos:end="153:29"><expr pos:start="153:27" pos:end="153:29"><name pos:start="153:27" pos:end="153:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:29"><expr pos:start="155:5" pos:end="155:28"><call pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:23">cpu_mips_clock_init</name><argument_list pos:start="155:24" pos:end="155:28">(<argument pos:start="155:25" pos:end="155:27"><expr pos:start="155:25" pos:end="155:27"><name pos:start="155:25" pos:end="155:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="161:5" pos:end="161:26">/* The 8259 -&gt; IP5  */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:36"><expr pos:start="163:5" pos:end="163:35"><name pos:start="163:5" pos:end="163:9">i8259</name> <operator pos:start="163:11" pos:end="163:11">=</operator> <call pos:start="163:13" pos:end="163:35"><name pos:start="163:13" pos:end="163:22">i8259_init</name><argument_list pos:start="163:23" pos:end="163:35">(<argument pos:start="163:24" pos:end="163:34"><expr pos:start="163:24" pos:end="163:34"><name pos:start="163:24" pos:end="163:34"><name pos:start="163:24" pos:end="163:26">env</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:31">irq</name><index pos:start="163:32" pos:end="163:34">[<expr pos:start="163:33" pos:end="163:33"><literal type="number" pos:start="163:33" pos:end="163:33">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:38">/* North bridge, Bonito --&gt; IP2 */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:54"><expr pos:start="169:5" pos:end="169:53"><name pos:start="169:5" pos:end="169:11">pci_bus</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:53"><name pos:start="169:15" pos:end="169:25">bonito_init</name><argument_list pos:start="169:26" pos:end="169:53">(<argument pos:start="169:27" pos:end="169:52"><expr pos:start="169:27" pos:end="169:52"><operator pos:start="169:27" pos:end="169:27">(</operator><name pos:start="169:28" pos:end="169:35">qemu_irq</name> <operator pos:start="169:37" pos:end="169:37">*</operator><operator pos:start="169:38" pos:end="169:38">)</operator><operator pos:start="169:39" pos:end="169:39">&amp;</operator><operator pos:start="169:40" pos:end="169:40">(</operator><name pos:start="169:41" pos:end="169:51"><name pos:start="169:41" pos:end="169:43">env</name><operator pos:start="169:44" pos:end="169:45">-&gt;</operator><name pos:start="169:46" pos:end="169:48">irq</name><index pos:start="169:49" pos:end="169:51">[<expr pos:start="169:50" pos:end="169:50"><literal type="number" pos:start="169:50" pos:end="169:50">2</literal></expr>]</index></name><operator pos:start="169:52" pos:end="169:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:22">/* South bridge */</comment>

    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:49">(<expr pos:start="175:9" pos:end="175:48"><call pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:25">drive_get_max_bus</name><argument_list pos:start="175:26" pos:end="175:33">(<argument pos:start="175:27" pos:end="175:32"><expr pos:start="175:27" pos:end="175:32"><name pos:start="175:27" pos:end="175:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="175:35" pos:end="175:36">&gt;=</operator> <name pos:start="175:38" pos:end="175:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="175:51" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:16">

        <expr_stmt pos:start="177:9" pos:end="177:52"><expr pos:start="177:9" pos:end="177:51"><call pos:start="177:9" pos:end="177:51"><name pos:start="177:9" pos:end="177:15">fprintf</name><argument_list pos:start="177:16" pos:end="177:51">(<argument pos:start="177:17" pos:end="177:22"><expr pos:start="177:17" pos:end="177:22"><name pos:start="177:17" pos:end="177:22">stderr</name></expr></argument>, <argument pos:start="177:25" pos:end="177:50"><expr pos:start="177:25" pos:end="177:50"><literal type="string" pos:start="177:25" pos:end="177:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:16"><expr pos:start="179:9" pos:end="179:15"><call pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:12">exit</name><argument_list pos:start="179:13" pos:end="179:15">(<argument pos:start="179:14" pos:end="179:14"><expr pos:start="179:14" pos:end="179:14"><literal type="number" pos:start="179:14" pos:end="179:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="185:5" pos:end="189:5">for<control pos:start="185:8" pos:end="185:51">(<init pos:start="185:9" pos:end="185:14"><expr pos:start="185:9" pos:end="185:13"><name pos:start="185:9" pos:end="185:9">i</name> <operator pos:start="185:11" pos:end="185:11">=</operator> <literal type="number" pos:start="185:13" pos:end="185:13">0</literal></expr>;</init> <condition pos:start="185:16" pos:end="185:46"><expr pos:start="185:16" pos:end="185:45"><name pos:start="185:16" pos:end="185:16">i</name> <operator pos:start="185:18" pos:end="185:18">&lt;</operator> <name pos:start="185:20" pos:end="185:30">MAX_IDE_BUS</name> <operator pos:start="185:32" pos:end="185:32">*</operator> <name pos:start="185:34" pos:end="185:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="185:48" pos:end="185:50"><expr pos:start="185:48" pos:end="185:50"><name pos:start="185:48" pos:end="185:48">i</name><operator pos:start="185:49" pos:end="185:50">++</operator></expr></incr>)</control> <block pos:start="185:53" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:70">

        <expr_stmt pos:start="187:9" pos:end="187:70"><expr pos:start="187:9" pos:end="187:69"><name pos:start="187:9" pos:end="187:13"><name pos:start="187:9" pos:end="187:10">hd</name><index pos:start="187:11" pos:end="187:13">[<expr pos:start="187:12" pos:end="187:12"><name pos:start="187:12" pos:end="187:12">i</name></expr>]</index></name> <operator pos:start="187:15" pos:end="187:15">=</operator> <call pos:start="187:17" pos:end="187:69"><name pos:start="187:17" pos:end="187:25">drive_get</name><argument_list pos:start="187:26" pos:end="187:69">(<argument pos:start="187:27" pos:end="187:32"><expr pos:start="187:27" pos:end="187:32"><name pos:start="187:27" pos:end="187:32">IF_IDE</name></expr></argument>, <argument pos:start="187:35" pos:end="187:50"><expr pos:start="187:35" pos:end="187:50"><name pos:start="187:35" pos:end="187:35">i</name> <operator pos:start="187:37" pos:end="187:37">/</operator> <name pos:start="187:39" pos:end="187:50">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="187:53" pos:end="187:68"><expr pos:start="187:53" pos:end="187:68"><name pos:start="187:53" pos:end="187:53">i</name> <operator pos:start="187:55" pos:end="187:55">%</operator> <name pos:start="187:57" pos:end="187:68">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="193:5" pos:end="193:73"><expr pos:start="193:5" pos:end="193:72"><name pos:start="193:5" pos:end="193:13">via_devfn</name> <operator pos:start="193:15" pos:end="193:15">=</operator> <call pos:start="193:17" pos:end="193:72"><name pos:start="193:17" pos:end="193:30">vt82c686b_init</name><argument_list pos:start="193:31" pos:end="193:72">(<argument pos:start="193:32" pos:end="193:38"><expr pos:start="193:32" pos:end="193:38"><name pos:start="193:32" pos:end="193:38">pci_bus</name></expr></argument>, <argument pos:start="193:41" pos:end="193:71"><expr pos:start="193:41" pos:end="193:71"><call pos:start="193:41" pos:end="193:71"><name pos:start="193:41" pos:end="193:49">PCI_DEVFN</name><argument_list pos:start="193:50" pos:end="193:71">(<argument pos:start="193:51" pos:end="193:67"><expr pos:start="193:51" pos:end="193:67"><name pos:start="193:51" pos:end="193:67">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="193:70" pos:end="193:70"><expr pos:start="193:70" pos:end="193:70"><literal type="number" pos:start="193:70" pos:end="193:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="195:5" pos:end="201:5"><if pos:start="195:5" pos:end="201:5">if <condition pos:start="195:8" pos:end="195:22">(<expr pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:17">via_devfn</name> <operator pos:start="195:19" pos:end="195:19">&lt;</operator> <literal type="number" pos:start="195:21" pos:end="195:21">0</literal></expr>)</condition> <block pos:start="195:24" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:16">

        <expr_stmt pos:start="197:9" pos:end="197:51"><expr pos:start="197:9" pos:end="197:50"><call pos:start="197:9" pos:end="197:50"><name pos:start="197:9" pos:end="197:15">fprintf</name><argument_list pos:start="197:16" pos:end="197:50">(<argument pos:start="197:17" pos:end="197:22"><expr pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:22">stderr</name></expr></argument>, <argument pos:start="197:25" pos:end="197:49"><expr pos:start="197:25" pos:end="197:49"><literal type="string" pos:start="197:25" pos:end="197:49">"vt82c686b_init error \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:16"><expr pos:start="199:9" pos:end="199:15"><call pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:12">exit</name><argument_list pos:start="199:13" pos:end="199:15">(<argument pos:start="199:14" pos:end="199:14"><expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:24"><expr pos:start="205:5" pos:end="205:23"><call pos:start="205:5" pos:end="205:23"><name pos:start="205:5" pos:end="205:16">isa_bus_irqs</name><argument_list pos:start="205:17" pos:end="205:23">(<argument pos:start="205:18" pos:end="205:22"><expr pos:start="205:18" pos:end="205:22"><name pos:start="205:18" pos:end="205:22">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:69"><expr pos:start="207:5" pos:end="207:68"><call pos:start="207:5" pos:end="207:68"><name pos:start="207:5" pos:end="207:22">vt82c686b_ide_init</name><argument_list pos:start="207:23" pos:end="207:68">(<argument pos:start="207:24" pos:end="207:30"><expr pos:start="207:24" pos:end="207:30"><name pos:start="207:24" pos:end="207:30">pci_bus</name></expr></argument>, <argument pos:start="207:33" pos:end="207:34"><expr pos:start="207:33" pos:end="207:34"><name pos:start="207:33" pos:end="207:34">hd</name></expr></argument>, <argument pos:start="207:37" pos:end="207:67"><expr pos:start="207:37" pos:end="207:67"><call pos:start="207:37" pos:end="207:67"><name pos:start="207:37" pos:end="207:45">PCI_DEVFN</name><argument_list pos:start="207:46" pos:end="207:67">(<argument pos:start="207:47" pos:end="207:63"><expr pos:start="207:47" pos:end="207:63"><name pos:start="207:47" pos:end="207:63">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="207:66" pos:end="207:66"><expr pos:start="207:66" pos:end="207:66"><literal type="number" pos:start="207:66" pos:end="207:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:70"><expr pos:start="209:5" pos:end="209:69"><call pos:start="209:5" pos:end="209:69"><name pos:start="209:5" pos:end="209:27">usb_uhci_vt82c686b_init</name><argument_list pos:start="209:28" pos:end="209:69">(<argument pos:start="209:29" pos:end="209:35"><expr pos:start="209:29" pos:end="209:35"><name pos:start="209:29" pos:end="209:35">pci_bus</name></expr></argument>, <argument pos:start="209:38" pos:end="209:68"><expr pos:start="209:38" pos:end="209:68"><call pos:start="209:38" pos:end="209:68"><name pos:start="209:38" pos:end="209:46">PCI_DEVFN</name><argument_list pos:start="209:47" pos:end="209:68">(<argument pos:start="209:48" pos:end="209:64"><expr pos:start="209:48" pos:end="209:64"><name pos:start="209:48" pos:end="209:64">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="209:67" pos:end="209:67"><expr pos:start="209:67" pos:end="209:67"><literal type="number" pos:start="209:67" pos:end="209:67">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:70"><expr pos:start="211:5" pos:end="211:69"><call pos:start="211:5" pos:end="211:69"><name pos:start="211:5" pos:end="211:27">usb_uhci_vt82c686b_init</name><argument_list pos:start="211:28" pos:end="211:69">(<argument pos:start="211:29" pos:end="211:35"><expr pos:start="211:29" pos:end="211:35"><name pos:start="211:29" pos:end="211:35">pci_bus</name></expr></argument>, <argument pos:start="211:38" pos:end="211:68"><expr pos:start="211:38" pos:end="211:68"><call pos:start="211:38" pos:end="211:68"><name pos:start="211:38" pos:end="211:46">PCI_DEVFN</name><argument_list pos:start="211:47" pos:end="211:68">(<argument pos:start="211:48" pos:end="211:64"><expr pos:start="211:48" pos:end="211:64"><name pos:start="211:48" pos:end="211:64">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="211:67" pos:end="211:67"><expr pos:start="211:67" pos:end="211:67"><literal type="number" pos:start="211:67" pos:end="211:67">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="217:44"><expr pos:start="215:5" pos:end="217:43"><name pos:start="215:5" pos:end="215:9">smbus</name> <operator pos:start="215:11" pos:end="215:11">=</operator> <call pos:start="215:13" pos:end="217:43"><name pos:start="215:13" pos:end="215:29">vt82c686b_pm_init</name><argument_list pos:start="215:30" pos:end="217:43">(<argument pos:start="215:31" pos:end="215:37"><expr pos:start="215:31" pos:end="215:37"><name pos:start="215:31" pos:end="215:37">pci_bus</name></expr></argument>, <argument pos:start="215:40" pos:end="215:70"><expr pos:start="215:40" pos:end="215:70"><call pos:start="215:40" pos:end="215:70"><name pos:start="215:40" pos:end="215:48">PCI_DEVFN</name><argument_list pos:start="215:49" pos:end="215:70">(<argument pos:start="215:50" pos:end="215:66"><expr pos:start="215:50" pos:end="215:66"><name pos:start="215:50" pos:end="215:66">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="215:69" pos:end="215:69"><expr pos:start="215:69" pos:end="215:69"><literal type="number" pos:start="215:69" pos:end="215:69">4</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="217:31" pos:end="217:36"><expr pos:start="217:31" pos:end="217:36"><literal type="number" pos:start="217:31" pos:end="217:36">0xeee1</literal></expr></argument>, <argument pos:start="217:39" pos:end="217:42"><expr pos:start="217:39" pos:end="217:42"><name pos:start="217:39" pos:end="217:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:39"><expr pos:start="219:5" pos:end="219:38"><name pos:start="219:5" pos:end="219:14">eeprom_buf</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <call pos:start="219:18" pos:end="219:38"><name pos:start="219:18" pos:end="219:29">qemu_mallocz</name><argument_list pos:start="219:30" pos:end="219:38">(<argument pos:start="219:31" pos:end="219:37"><expr pos:start="219:31" pos:end="219:37"><literal type="number" pos:start="219:31" pos:end="219:31">8</literal> <operator pos:start="219:33" pos:end="219:33">*</operator> <literal type="number" pos:start="219:35" pos:end="219:37">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="219:41" pos:end="219:71">/* XXX: make this persistent */</comment>

    <expr_stmt pos:start="221:5" pos:end="221:55"><expr pos:start="221:5" pos:end="221:54"><call pos:start="221:5" pos:end="221:54"><name pos:start="221:5" pos:end="221:10">memcpy</name><argument_list pos:start="221:11" pos:end="221:54">(<argument pos:start="221:12" pos:end="221:21"><expr pos:start="221:12" pos:end="221:21"><name pos:start="221:12" pos:end="221:21">eeprom_buf</name></expr></argument>, <argument pos:start="221:24" pos:end="221:33"><expr pos:start="221:24" pos:end="221:33"><name pos:start="221:24" pos:end="221:33">eeprom_spd</name></expr></argument>, <argument pos:start="221:36" pos:end="221:53"><expr pos:start="221:36" pos:end="221:53"><sizeof pos:start="221:36" pos:end="221:53">sizeof<argument_list pos:start="221:42" pos:end="221:53">(<argument pos:start="221:43" pos:end="221:52"><expr pos:start="221:43" pos:end="221:52"><name pos:start="221:43" pos:end="221:52">eeprom_spd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="223:5" pos:end="223:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:60"><expr pos:start="225:5" pos:end="225:59"><name pos:start="225:5" pos:end="225:10">eeprom</name> <operator pos:start="225:12" pos:end="225:12">=</operator> <call pos:start="225:14" pos:end="225:59"><name pos:start="225:14" pos:end="225:24">qdev_create</name><argument_list pos:start="225:25" pos:end="225:59">(<argument pos:start="225:26" pos:end="225:42"><expr pos:start="225:26" pos:end="225:42"><operator pos:start="225:26" pos:end="225:26">(</operator><name pos:start="225:27" pos:end="225:34">BusState</name> <operator pos:start="225:36" pos:end="225:36">*</operator><operator pos:start="225:37" pos:end="225:37">)</operator><name pos:start="225:38" pos:end="225:42">smbus</name></expr></argument>, <argument pos:start="225:45" pos:end="225:58"><expr pos:start="225:45" pos:end="225:58"><literal type="string" pos:start="225:45" pos:end="225:58">"smbus-eeprom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:49"><expr pos:start="227:5" pos:end="227:48"><call pos:start="227:5" pos:end="227:48"><name pos:start="227:5" pos:end="227:23">qdev_prop_set_uint8</name><argument_list pos:start="227:24" pos:end="227:48">(<argument pos:start="227:25" pos:end="227:30"><expr pos:start="227:25" pos:end="227:30"><name pos:start="227:25" pos:end="227:30">eeprom</name></expr></argument>, <argument pos:start="227:33" pos:end="227:41"><expr pos:start="227:33" pos:end="227:41"><literal type="string" pos:start="227:33" pos:end="227:41">"address"</literal></expr></argument>, <argument pos:start="227:44" pos:end="227:47"><expr pos:start="227:44" pos:end="227:47"><literal type="number" pos:start="227:44" pos:end="227:47">0x50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:50"><expr pos:start="229:5" pos:end="229:49"><call pos:start="229:5" pos:end="229:49"><name pos:start="229:5" pos:end="229:21">qdev_prop_set_ptr</name><argument_list pos:start="229:22" pos:end="229:49">(<argument pos:start="229:23" pos:end="229:28"><expr pos:start="229:23" pos:end="229:28"><name pos:start="229:23" pos:end="229:28">eeprom</name></expr></argument>, <argument pos:start="229:31" pos:end="229:36"><expr pos:start="229:31" pos:end="229:36"><literal type="string" pos:start="229:31" pos:end="229:36">"data"</literal></expr></argument>, <argument pos:start="229:39" pos:end="229:48"><expr pos:start="229:39" pos:end="229:48"><name pos:start="229:39" pos:end="229:48">eeprom_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:29"><expr pos:start="231:5" pos:end="231:28"><call pos:start="231:5" pos:end="231:28"><name pos:start="231:5" pos:end="231:20">qdev_init_nofail</name><argument_list pos:start="231:21" pos:end="231:28">(<argument pos:start="231:22" pos:end="231:27"><expr pos:start="231:22" pos:end="231:27"><name pos:start="231:22" pos:end="231:27">eeprom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:28">/* init other devices */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:45"><expr pos:start="237:5" pos:end="237:44"><name pos:start="237:5" pos:end="237:7">pit</name> <operator pos:start="237:9" pos:end="237:9">=</operator> <call pos:start="237:11" pos:end="237:44"><name pos:start="237:11" pos:end="237:18">pit_init</name><argument_list pos:start="237:19" pos:end="237:44">(<argument pos:start="237:20" pos:end="237:23"><expr pos:start="237:20" pos:end="237:23"><literal type="number" pos:start="237:20" pos:end="237:23">0x40</literal></expr></argument>, <argument pos:start="237:26" pos:end="237:43"><expr pos:start="237:26" pos:end="237:43"><call pos:start="237:26" pos:end="237:43"><name pos:start="237:26" pos:end="237:40">isa_reserve_irq</name><argument_list pos:start="237:41" pos:end="237:43">(<argument pos:start="237:42" pos:end="237:42"><expr pos:start="237:42" pos:end="237:42"><literal type="number" pos:start="237:42" pos:end="237:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:65"><expr pos:start="239:5" pos:end="239:64"><name pos:start="239:5" pos:end="239:16">cpu_exit_irq</name> <operator pos:start="239:18" pos:end="239:18">=</operator> <call pos:start="239:20" pos:end="239:64"><name pos:start="239:20" pos:end="239:37">qemu_allocate_irqs</name><argument_list pos:start="239:38" pos:end="239:64">(<argument pos:start="239:39" pos:end="239:54"><expr pos:start="239:39" pos:end="239:54"><name pos:start="239:39" pos:end="239:54">cpu_request_exit</name></expr></argument>, <argument pos:start="239:57" pos:end="239:60"><expr pos:start="239:57" pos:end="239:60"><name pos:start="239:57" pos:end="239:60">NULL</name></expr></argument>, <argument pos:start="239:63" pos:end="239:63"><expr pos:start="239:63" pos:end="239:63"><literal type="number" pos:start="239:63" pos:end="239:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:30"><expr pos:start="241:5" pos:end="241:29"><call pos:start="241:5" pos:end="241:29"><name pos:start="241:5" pos:end="241:12">DMA_init</name><argument_list pos:start="241:13" pos:end="241:29">(<argument pos:start="241:14" pos:end="241:14"><expr pos:start="241:14" pos:end="241:14"><literal type="number" pos:start="241:14" pos:end="241:14">0</literal></expr></argument>, <argument pos:start="241:17" pos:end="241:28"><expr pos:start="241:17" pos:end="241:28"><name pos:start="241:17" pos:end="241:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:19">/* Super I/O */</comment>

    <expr_stmt pos:start="247:5" pos:end="247:31"><expr pos:start="247:5" pos:end="247:30"><call pos:start="247:5" pos:end="247:30"><name pos:start="247:5" pos:end="247:21">isa_create_simple</name><argument_list pos:start="247:22" pos:end="247:30">(<argument pos:start="247:23" pos:end="247:29"><expr pos:start="247:23" pos:end="247:29"><literal type="string" pos:start="247:23" pos:end="247:29">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:25"><expr pos:start="251:5" pos:end="251:24"><call pos:start="251:5" pos:end="251:24"><name pos:start="251:5" pos:end="251:12">rtc_init</name><argument_list pos:start="251:13" pos:end="251:24">(<argument pos:start="251:14" pos:end="251:17"><expr pos:start="251:14" pos:end="251:17"><literal type="number" pos:start="251:14" pos:end="251:17">2000</literal></expr></argument>, <argument pos:start="251:20" pos:end="251:23"><expr pos:start="251:20" pos:end="251:23"><name pos:start="251:20" pos:end="251:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="255:5" pos:end="263:5">for<control pos:start="255:8" pos:end="255:41">(<init pos:start="255:9" pos:end="255:14"><expr pos:start="255:9" pos:end="255:13"><name pos:start="255:9" pos:end="255:9">i</name> <operator pos:start="255:11" pos:end="255:11">=</operator> <literal type="number" pos:start="255:13" pos:end="255:13">0</literal></expr>;</init> <condition pos:start="255:16" pos:end="255:36"><expr pos:start="255:16" pos:end="255:35"><name pos:start="255:16" pos:end="255:16">i</name> <operator pos:start="255:18" pos:end="255:18">&lt;</operator> <name pos:start="255:20" pos:end="255:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="255:38" pos:end="255:40"><expr pos:start="255:38" pos:end="255:40"><name pos:start="255:38" pos:end="255:38">i</name><operator pos:start="255:39" pos:end="255:40">++</operator></expr></incr>)</control> <block pos:start="255:43" pos:end="263:5">{<block_content pos:start="257:9" pos:end="261:9">

        <if_stmt pos:start="257:9" pos:end="261:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:26">(<expr pos:start="257:13" pos:end="257:25"><name pos:start="257:13" pos:end="257:25"><name pos:start="257:13" pos:end="257:22">serial_hds</name><index pos:start="257:23" pos:end="257:25">[<expr pos:start="257:24" pos:end="257:24"><name pos:start="257:24" pos:end="257:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="257:28" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:46">

            <expr_stmt pos:start="259:13" pos:end="259:46"><expr pos:start="259:13" pos:end="259:45"><call pos:start="259:13" pos:end="259:45"><name pos:start="259:13" pos:end="259:27">serial_isa_init</name><argument_list pos:start="259:28" pos:end="259:45">(<argument pos:start="259:29" pos:end="259:29"><expr pos:start="259:29" pos:end="259:29"><name pos:start="259:29" pos:end="259:29">i</name></expr></argument>, <argument pos:start="259:32" pos:end="259:44"><expr pos:start="259:32" pos:end="259:44"><name pos:start="259:32" pos:end="259:44"><name pos:start="259:32" pos:end="259:41">serial_hds</name><index pos:start="259:42" pos:end="259:44">[<expr pos:start="259:43" pos:end="259:43"><name pos:start="259:43" pos:end="259:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="267:5" pos:end="271:5"><if pos:start="267:5" pos:end="271:5">if <condition pos:start="267:8" pos:end="267:24">(<expr pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:20">parallel_hds</name><index pos:start="267:21" pos:end="267:23">[<expr pos:start="267:22" pos:end="267:22"><literal type="number" pos:start="267:22" pos:end="267:22">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="267:26" pos:end="271:5">{<block_content pos:start="269:9" pos:end="269:42">

        <expr_stmt pos:start="269:9" pos:end="269:42"><expr pos:start="269:9" pos:end="269:41"><call pos:start="269:9" pos:end="269:41"><name pos:start="269:9" pos:end="269:21">parallel_init</name><argument_list pos:start="269:22" pos:end="269:41">(<argument pos:start="269:23" pos:end="269:23"><expr pos:start="269:23" pos:end="269:23"><literal type="number" pos:start="269:23" pos:end="269:23">0</literal></expr></argument>, <argument pos:start="269:26" pos:end="269:40"><expr pos:start="269:26" pos:end="269:40"><name pos:start="269:26" pos:end="269:40"><name pos:start="269:26" pos:end="269:37">parallel_hds</name><index pos:start="269:38" pos:end="269:40">[<expr pos:start="269:39" pos:end="269:39"><literal type="number" pos:start="269:39" pos:end="269:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="275:5" pos:end="275:20">/* Sound card */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:24"><expr pos:start="277:5" pos:end="277:23"><call pos:start="277:5" pos:end="277:23"><name pos:start="277:5" pos:end="277:14">audio_init</name><argument_list pos:start="277:15" pos:end="277:23">(<argument pos:start="277:16" pos:end="277:22"><expr pos:start="277:16" pos:end="277:22"><name pos:start="277:16" pos:end="277:22">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="279:5" pos:end="279:22">/* Network card */</comment>

    <expr_stmt pos:start="281:5" pos:end="281:19"><expr pos:start="281:5" pos:end="281:18"><call pos:start="281:5" pos:end="281:18"><name pos:start="281:5" pos:end="281:16">network_init</name><argument_list pos:start="281:17" pos:end="281:18">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
