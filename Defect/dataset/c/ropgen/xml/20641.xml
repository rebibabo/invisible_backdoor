<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20641.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:41">kvm_physical_sync_dirty_bitmap</name><parameter_list pos:start="1:42" pos:end="1:71">(<parameter pos:start="1:43" pos:end="1:70"><decl pos:start="1:43" pos:end="1:70"><type pos:start="1:43" pos:end="1:63"><name pos:start="1:43" pos:end="1:61">MemoryRegionSection</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:70">section</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:15">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">KVMState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:27">= <expr pos:start="5:19" pos:end="5:27"><name pos:start="5:19" pos:end="5:27">kvm_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name></type> <name pos:start="7:19" pos:end="7:22">size</name></decl>, <decl pos:start="7:25" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:17"/><name pos:start="7:25" pos:end="7:38">allocated_size</name> <init pos:start="7:40" pos:end="7:42">= <expr pos:start="7:42" pos:end="7:42"><literal type="number" pos:start="7:42" pos:end="7:42">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">KVMDirtyLog</name></type> <name pos:start="9:17" pos:end="9:17">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">KVMSlot</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:61"><decl pos:start="15:5" pos:end="15:60"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:21">start_addr</name> <init pos:start="15:23" pos:end="15:60">= <expr pos:start="15:25" pos:end="15:60"><name pos:start="15:25" pos:end="15:60"><name pos:start="15:25" pos:end="15:31">section</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:60">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:63"><decl pos:start="17:5" pos:end="17:62"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:19">end_addr</name> <init pos:start="17:21" pos:end="17:62">= <expr pos:start="17:23" pos:end="17:62"><name pos:start="17:23" pos:end="17:32">start_addr</name> <operator pos:start="17:34" pos:end="17:34">+</operator> <call pos:start="17:36" pos:end="17:62"><name pos:start="17:36" pos:end="17:47">int128_get64</name><argument_list pos:start="17:48" pos:end="17:62">(<argument pos:start="17:49" pos:end="17:61"><expr pos:start="17:49" pos:end="17:61"><name pos:start="17:49" pos:end="17:61"><name pos:start="17:49" pos:end="17:55">section</name><operator pos:start="17:56" pos:end="17:57">-&gt;</operator><name pos:start="17:58" pos:end="17:61">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:5">d</name><operator pos:start="21:6" pos:end="21:6">.</operator><name pos:start="21:7" pos:end="21:18">dirty_bitmap</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:25">NULL</name></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="99:5">while <condition pos:start="23:11" pos:end="23:33">(<expr pos:start="23:12" pos:end="23:32"><name pos:start="23:12" pos:end="23:21">start_addr</name> <operator pos:start="23:23" pos:end="23:23">&lt;</operator> <name pos:start="23:25" pos:end="23:32">end_addr</name></expr>)</condition> <block pos:start="23:35" pos:end="99:5">{<block_content pos:start="25:9" pos:end="97:56">

        <expr_stmt pos:start="25:9" pos:end="25:67"><expr pos:start="25:9" pos:end="25:66"><name pos:start="25:9" pos:end="25:11">mem</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:66"><name pos:start="25:15" pos:end="25:41">kvm_lookup_overlapping_slot</name><argument_list pos:start="25:42" pos:end="25:66">(<argument pos:start="25:43" pos:end="25:43"><expr pos:start="25:43" pos:end="25:43"><name pos:start="25:43" pos:end="25:43">s</name></expr></argument>, <argument pos:start="25:46" pos:end="25:55"><expr pos:start="25:46" pos:end="25:55"><name pos:start="25:46" pos:end="25:55">start_addr</name></expr></argument>, <argument pos:start="25:58" pos:end="25:65"><expr pos:start="25:58" pos:end="25:65"><name pos:start="25:58" pos:end="25:65">end_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:15">mem</name> <operator pos:start="27:17" pos:end="27:18">==</operator> <name pos:start="27:20" pos:end="27:23">NULL</name></expr>)</condition> <block pos:start="27:26" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:18">

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="35:9" pos:end="57:11">/* XXX bad kernel interface alert

         * For dirty bitmap, kernel allocates array of size aligned to

         * bits-per-long.  But for case when the kernel is 64bits and

         * the userspace is 32bits, userspace can't align to the same

         * bits-per-long, since sizeof(long) is different between kernel

         * and user space.  This way, userspace will provide buffer which

         * may be 4 bytes less than the kernel will use, resulting in

         * userspace memory corruption (which is not detectable by valgrind

         * too, in most cases).

         * So for now, let's align to 64 instead of HOST_LONG_BITS here, in

         * a hope that sizeof(long) wont become &gt;8 any time soon.

         */</comment>

        <expr_stmt pos:start="59:9" pos:end="61:48"><expr pos:start="59:9" pos:end="61:47"><name pos:start="59:9" pos:end="59:12">size</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="61:43"><name pos:start="59:16" pos:end="59:20">ALIGN</name><argument_list pos:start="59:21" pos:end="61:43">(<argument pos:start="59:22" pos:end="59:61"><expr pos:start="59:22" pos:end="59:61"><operator pos:start="59:22" pos:end="59:22">(</operator><operator pos:start="59:23" pos:end="59:23">(</operator><name pos:start="59:24" pos:end="59:39"><name pos:start="59:24" pos:end="59:26">mem</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:39">memory_size</name></name><operator pos:start="59:40" pos:end="59:40">)</operator> <operator pos:start="59:42" pos:end="59:43">&gt;&gt;</operator> <name pos:start="59:45" pos:end="59:60">TARGET_PAGE_BITS</name><operator pos:start="59:61" pos:end="59:61">)</operator></expr></argument>,

                     <comment type="block" pos:start="61:22" pos:end="61:39">/*HOST_LONG_BITS*/</comment> <argument pos:start="61:41" pos:end="61:42"><expr pos:start="61:41" pos:end="61:42"><literal type="number" pos:start="61:41" pos:end="61:42">64</literal></expr></argument>)</argument_list></call> <operator pos:start="61:45" pos:end="61:45">/</operator> <literal type="number" pos:start="61:47" pos:end="61:47">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:27"><name pos:start="63:14" pos:end="63:14">d</name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:27">dirty_bitmap</name></name></expr>)</condition> <block pos:start="63:30" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:44">

            <expr_stmt pos:start="65:13" pos:end="65:44"><expr pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:13">d</name><operator pos:start="65:14" pos:end="65:14">.</operator><name pos:start="65:15" pos:end="65:26">dirty_bitmap</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <call pos:start="65:30" pos:end="65:43"><name pos:start="65:30" pos:end="65:37">g_malloc</name><argument_list pos:start="65:38" pos:end="65:43">(<argument pos:start="65:39" pos:end="65:42"><expr pos:start="65:39" pos:end="65:42"><name pos:start="65:39" pos:end="65:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="67:11" pos:end="71:9">else if <condition pos:start="67:19" pos:end="67:41">(<expr pos:start="67:20" pos:end="67:40"><name pos:start="67:20" pos:end="67:23">size</name> <operator pos:start="67:25" pos:end="67:25">&gt;</operator> <name pos:start="67:27" pos:end="67:40">allocated_size</name></expr>)</condition> <block pos:start="67:43" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:61">

            <expr_stmt pos:start="69:13" pos:end="69:61"><expr pos:start="69:13" pos:end="69:60"><name pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:13">d</name><operator pos:start="69:14" pos:end="69:14">.</operator><name pos:start="69:15" pos:end="69:26">dirty_bitmap</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <call pos:start="69:30" pos:end="69:60"><name pos:start="69:30" pos:end="69:38">g_realloc</name><argument_list pos:start="69:39" pos:end="69:60">(<argument pos:start="69:40" pos:end="69:53"><expr pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:40">d</name><operator pos:start="69:41" pos:end="69:41">.</operator><name pos:start="69:42" pos:end="69:53">dirty_bitmap</name></name></expr></argument>, <argument pos:start="69:56" pos:end="69:59"><expr pos:start="69:56" pos:end="69:59"><name pos:start="69:56" pos:end="69:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:22">allocated_size</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:29">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:50"><expr pos:start="75:9" pos:end="75:49"><call pos:start="75:9" pos:end="75:49"><name pos:start="75:9" pos:end="75:14">memset</name><argument_list pos:start="75:15" pos:end="75:49">(<argument pos:start="75:16" pos:end="75:29"><expr pos:start="75:16" pos:end="75:29"><name pos:start="75:16" pos:end="75:29"><name pos:start="75:16" pos:end="75:16">d</name><operator pos:start="75:17" pos:end="75:17">.</operator><name pos:start="75:18" pos:end="75:29">dirty_bitmap</name></name></expr></argument>, <argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr></argument>, <argument pos:start="75:35" pos:end="75:48"><expr pos:start="75:35" pos:end="75:48"><name pos:start="75:35" pos:end="75:48">allocated_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:9">d</name><operator pos:start="79:10" pos:end="79:10">.</operator><name pos:start="79:11" pos:end="79:14">slot</name></name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:26"><name pos:start="79:18" pos:end="79:20">mem</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:26">slot</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:57">(<expr pos:start="83:13" pos:end="83:56"><call pos:start="83:13" pos:end="83:50"><name pos:start="83:13" pos:end="83:24">kvm_vm_ioctl</name><argument_list pos:start="83:25" pos:end="83:50">(<argument pos:start="83:26" pos:end="83:26"><expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">s</name></expr></argument>, <argument pos:start="83:29" pos:end="83:45"><expr pos:start="83:29" pos:end="83:45"><name pos:start="83:29" pos:end="83:45">KVM_GET_DIRTY_LOG</name></expr></argument>, <argument pos:start="83:48" pos:end="83:49"><expr pos:start="83:48" pos:end="83:49"><operator pos:start="83:48" pos:end="83:48">&amp;</operator><name pos:start="83:49" pos:end="83:49">d</name></expr></argument>)</argument_list></call> <operator pos:start="83:52" pos:end="83:53">==</operator> <operator pos:start="83:55" pos:end="83:55">-</operator><literal type="number" pos:start="83:56" pos:end="83:56">1</literal></expr>)</condition> <block pos:start="83:59" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:18">

            <expr_stmt pos:start="85:13" pos:end="85:48"><expr pos:start="85:13" pos:end="85:47"><call pos:start="85:13" pos:end="85:47"><name pos:start="85:13" pos:end="85:19">DPRINTF</name><argument_list pos:start="85:20" pos:end="85:47">(<argument pos:start="85:21" pos:end="85:39"><expr pos:start="85:21" pos:end="85:39"><literal type="string" pos:start="85:21" pos:end="85:39">"ioctl failed %d\n"</literal></expr></argument>, <argument pos:start="85:42" pos:end="85:46"><expr pos:start="85:42" pos:end="85:46"><name pos:start="85:42" pos:end="85:46">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:21"><expr pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <operator pos:start="87:19" pos:end="87:19">-</operator><literal type="number" pos:start="87:20" pos:end="87:20">1</literal></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:63"><expr pos:start="95:9" pos:end="95:62"><call pos:start="95:9" pos:end="95:62"><name pos:start="95:9" pos:end="95:37">kvm_get_dirty_pages_log_range</name><argument_list pos:start="95:38" pos:end="95:62">(<argument pos:start="95:39" pos:end="95:45"><expr pos:start="95:39" pos:end="95:45"><name pos:start="95:39" pos:end="95:45">section</name></expr></argument>, <argument pos:start="95:48" pos:end="95:61"><expr pos:start="95:48" pos:end="95:61"><name pos:start="95:48" pos:end="95:61"><name pos:start="95:48" pos:end="95:48">d</name><operator pos:start="95:49" pos:end="95:49">.</operator><name pos:start="95:50" pos:end="95:61">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:56"><expr pos:start="97:9" pos:end="97:55"><name pos:start="97:9" pos:end="97:18">start_addr</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:36"><name pos:start="97:22" pos:end="97:24">mem</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:36">start_addr</name></name> <operator pos:start="97:38" pos:end="97:38">+</operator> <name pos:start="97:40" pos:end="97:55"><name pos:start="97:40" pos:end="97:42">mem</name><operator pos:start="97:43" pos:end="97:44">-&gt;</operator><name pos:start="97:45" pos:end="97:55">memory_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="101:5" pos:end="101:27"><expr pos:start="101:5" pos:end="101:26"><call pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:10">g_free</name><argument_list pos:start="101:11" pos:end="101:26">(<argument pos:start="101:12" pos:end="101:25"><expr pos:start="101:12" pos:end="101:25"><name pos:start="101:12" pos:end="101:25"><name pos:start="101:12" pos:end="101:12">d</name><operator pos:start="101:13" pos:end="101:13">.</operator><name pos:start="101:14" pos:end="101:25">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="105:5" pos:end="105:15">return <expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
