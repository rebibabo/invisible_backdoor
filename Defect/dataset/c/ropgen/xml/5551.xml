<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5551.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">qcow2_cache_entry_flush</name><parameter_list pos:start="1:35" pos:end="1:78">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:67">Qcow2Cache</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:70">c</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:77"><decl pos:start="1:73" pos:end="1:77"><type pos:start="1:73" pos:end="1:77"><name pos:start="1:73" pos:end="1:75">int</name></type> <name pos:start="1:77" pos:end="1:77">i</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:54">(<expr pos:start="11:9" pos:end="11:53"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:22"><name pos:start="11:10" pos:end="11:10">c</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:19">entries</name><index pos:start="11:20" pos:end="11:22">[<expr pos:start="11:21" pos:end="11:21"><name pos:start="11:21" pos:end="11:21">i</name></expr>]</index></name><operator pos:start="11:23" pos:end="11:23">.</operator><name pos:start="11:24" pos:end="11:28">dirty</name> <operator pos:start="11:30" pos:end="11:31">||</operator> <operator pos:start="11:33" pos:end="11:33">!</operator><name pos:start="11:34" pos:end="11:46"><name pos:start="11:34" pos:end="11:34">c</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:43">entries</name><index pos:start="11:44" pos:end="11:46">[<expr pos:start="11:45" pos:end="11:45"><name pos:start="11:45" pos:end="11:45">i</name></expr>]</index></name><operator pos:start="11:47" pos:end="11:47">.</operator><name pos:start="11:48" pos:end="11:53">offset</name></expr>)</condition> <block pos:start="11:56" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:61"><expr pos:start="19:5" pos:end="21:60"><call pos:start="19:5" pos:end="21:60"><name pos:start="19:5" pos:end="19:33">trace_qcow2_cache_entry_flush</name><argument_list pos:start="19:34" pos:end="21:60">(<argument pos:start="19:35" pos:end="19:55"><expr pos:start="19:35" pos:end="19:55"><call pos:start="19:35" pos:end="19:55"><name pos:start="19:35" pos:end="19:53">qemu_coroutine_self</name><argument_list pos:start="19:54" pos:end="19:55">()</argument_list></call></expr></argument>,

                                  <argument pos:start="21:35" pos:end="21:56"><expr pos:start="21:35" pos:end="21:56"><name pos:start="21:35" pos:end="21:35">c</name> <operator pos:start="21:37" pos:end="21:38">==</operator> <name pos:start="21:40" pos:end="21:56"><name pos:start="21:40" pos:end="21:40">s</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:56">l2_table_cache</name></name></expr></argument>, <argument pos:start="21:59" pos:end="21:59"><expr pos:start="21:59" pos:end="21:59"><name pos:start="21:59" pos:end="21:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:9">c</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:18">depends</name></name></expr>)</condition> <block pos:start="25:21" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:50">

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:49"><name pos:start="27:15" pos:end="27:42">qcow2_cache_flush_dependency</name><argument_list pos:start="27:43" pos:end="27:49">(<argument pos:start="27:44" pos:end="27:45"><expr pos:start="27:44" pos:end="27:45"><name pos:start="27:44" pos:end="27:45">bs</name></expr></argument>, <argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><name pos:start="27:48" pos:end="27:48">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="39:5">else if <condition pos:start="29:15" pos:end="29:35">(<expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:16">c</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:34">depends_on_flush</name></name></expr>)</condition> <block pos:start="29:37" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:9">

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:34"><name pos:start="31:15" pos:end="31:24">bdrv_flush</name><argument_list pos:start="31:25" pos:end="31:34">(<argument pos:start="31:26" pos:end="31:33"><expr pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:27">bs</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:21">(<expr pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:18">&gt;=</operator> <literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>)</condition> <block pos:start="33:23" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:40">

            <expr_stmt pos:start="35:13" pos:end="35:40"><expr pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:13">c</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:31">depends_on_flush</name></name> <operator pos:start="35:33" pos:end="35:33">=</operator> <name pos:start="35:35" pos:end="35:39">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:19">

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="73:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:37">(<expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:9">c</name> <operator pos:start="51:11" pos:end="51:12">==</operator> <name pos:start="51:14" pos:end="51:36"><name pos:start="51:14" pos:end="51:14">s</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:36">refcount_block_cache</name></name></expr>)</condition> <block pos:start="51:39" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:55">

        <expr_stmt pos:start="53:9" pos:end="57:55"><expr pos:start="53:9" pos:end="57:54"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="57:54"><name pos:start="53:15" pos:end="53:43">qcow2_pre_write_overlap_check</name><argument_list pos:start="53:44" pos:end="57:54">(<argument pos:start="53:45" pos:end="53:46"><expr pos:start="53:45" pos:end="53:46"><name pos:start="53:45" pos:end="53:46">bs</name></expr></argument>,

                <argument pos:start="55:17" pos:end="55:59"><expr pos:start="55:17" pos:end="55:59"><name pos:start="55:17" pos:end="55:32">QCOW2_OL_DEFAULT</name> <operator pos:start="55:34" pos:end="55:34">&amp;</operator> <operator pos:start="55:36" pos:end="55:36">~</operator><name pos:start="55:37" pos:end="55:59">QCOW2_OL_REFCOUNT_BLOCK</name></expr></argument>,

                <argument pos:start="57:17" pos:end="57:36"><expr pos:start="57:17" pos:end="57:36"><name pos:start="57:17" pos:end="57:29"><name pos:start="57:17" pos:end="57:17">c</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:26">entries</name><index pos:start="57:27" pos:end="57:29">[<expr pos:start="57:28" pos:end="57:28"><name pos:start="57:28" pos:end="57:28">i</name></expr>]</index></name><operator pos:start="57:30" pos:end="57:30">.</operator><name pos:start="57:31" pos:end="57:36">offset</name></expr></argument>, <argument pos:start="57:39" pos:end="57:53"><expr pos:start="57:39" pos:end="57:53"><name pos:start="57:39" pos:end="57:53"><name pos:start="57:39" pos:end="57:39">s</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:53">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="67:5">else if <condition pos:start="59:15" pos:end="59:38">(<expr pos:start="59:16" pos:end="59:37"><name pos:start="59:16" pos:end="59:16">c</name> <operator pos:start="59:18" pos:end="59:19">==</operator> <name pos:start="59:21" pos:end="59:37"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:37">l2_table_cache</name></name></expr>)</condition> <block pos:start="59:40" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:55">

        <expr_stmt pos:start="61:9" pos:end="65:55"><expr pos:start="61:9" pos:end="65:54"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="65:54"><name pos:start="61:15" pos:end="61:43">qcow2_pre_write_overlap_check</name><argument_list pos:start="61:44" pos:end="65:54">(<argument pos:start="61:45" pos:end="61:46"><expr pos:start="61:45" pos:end="61:46"><name pos:start="61:45" pos:end="61:46">bs</name></expr></argument>,

                <argument pos:start="63:17" pos:end="63:54"><expr pos:start="63:17" pos:end="63:54"><name pos:start="63:17" pos:end="63:32">QCOW2_OL_DEFAULT</name> <operator pos:start="63:34" pos:end="63:34">&amp;</operator> <operator pos:start="63:36" pos:end="63:36">~</operator><name pos:start="63:37" pos:end="63:54">QCOW2_OL_ACTIVE_L2</name></expr></argument>,

                <argument pos:start="65:17" pos:end="65:36"><expr pos:start="65:17" pos:end="65:36"><name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:17">c</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:26">entries</name><index pos:start="65:27" pos:end="65:29">[<expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">i</name></expr>]</index></name><operator pos:start="65:30" pos:end="65:30">.</operator><name pos:start="65:31" pos:end="65:36">offset</name></expr></argument>, <argument pos:start="65:39" pos:end="65:53"><expr pos:start="65:39" pos:end="65:53"><name pos:start="65:39" pos:end="65:53"><name pos:start="65:39" pos:end="65:39">s</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:53">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="73:5">else <block pos:start="67:12" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:55">

        <expr_stmt pos:start="69:9" pos:end="71:55"><expr pos:start="69:9" pos:end="71:54"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="71:54"><name pos:start="69:15" pos:end="69:43">qcow2_pre_write_overlap_check</name><argument_list pos:start="69:44" pos:end="71:54">(<argument pos:start="69:45" pos:end="69:46"><expr pos:start="69:45" pos:end="69:46"><name pos:start="69:45" pos:end="69:46">bs</name></expr></argument>, <argument pos:start="69:49" pos:end="69:64"><expr pos:start="69:49" pos:end="69:64"><name pos:start="69:49" pos:end="69:64">QCOW2_OL_DEFAULT</name></expr></argument>,

                <argument pos:start="71:17" pos:end="71:36"><expr pos:start="71:17" pos:end="71:36"><name pos:start="71:17" pos:end="71:29"><name pos:start="71:17" pos:end="71:17">c</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:26">entries</name><index pos:start="71:27" pos:end="71:29">[<expr pos:start="71:28" pos:end="71:28"><name pos:start="71:28" pos:end="71:28">i</name></expr>]</index></name><operator pos:start="71:30" pos:end="71:30">.</operator><name pos:start="71:31" pos:end="71:36">offset</name></expr></argument>, <argument pos:start="71:39" pos:end="71:53"><expr pos:start="71:39" pos:end="71:53"><name pos:start="71:39" pos:end="71:53"><name pos:start="71:39" pos:end="71:39">s</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:53">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition> <block pos:start="77:18" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:19">

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:37">(<expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:9">c</name> <operator pos:start="85:11" pos:end="85:12">==</operator> <name pos:start="85:14" pos:end="85:36"><name pos:start="85:14" pos:end="85:14">s</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:36">refcount_block_cache</name></name></expr>)</condition> <block pos:start="85:39" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:60">

        <expr_stmt pos:start="87:9" pos:end="87:60"><expr pos:start="87:9" pos:end="87:59"><call pos:start="87:9" pos:end="87:59"><name pos:start="87:9" pos:end="87:20">BLKDBG_EVENT</name><argument_list pos:start="87:21" pos:end="87:59">(<argument pos:start="87:22" pos:end="87:29"><expr pos:start="87:22" pos:end="87:29"><name pos:start="87:22" pos:end="87:29"><name pos:start="87:22" pos:end="87:23">bs</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:29">file</name></name></expr></argument>, <argument pos:start="87:32" pos:end="87:58"><expr pos:start="87:32" pos:end="87:58"><name pos:start="87:32" pos:end="87:58">BLKDBG_REFBLOCK_UPDATE_PART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="93:5">else if <condition pos:start="89:15" pos:end="89:38">(<expr pos:start="89:16" pos:end="89:37"><name pos:start="89:16" pos:end="89:16">c</name> <operator pos:start="89:18" pos:end="89:19">==</operator> <name pos:start="89:21" pos:end="89:37"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:37">l2_table_cache</name></name></expr>)</condition> <block pos:start="89:40" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:49">

        <expr_stmt pos:start="91:9" pos:end="91:49"><expr pos:start="91:9" pos:end="91:48"><call pos:start="91:9" pos:end="91:48"><name pos:start="91:9" pos:end="91:20">BLKDBG_EVENT</name><argument_list pos:start="91:21" pos:end="91:48">(<argument pos:start="91:22" pos:end="91:29"><expr pos:start="91:22" pos:end="91:29"><name pos:start="91:22" pos:end="91:29"><name pos:start="91:22" pos:end="91:23">bs</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:29">file</name></name></expr></argument>, <argument pos:start="91:32" pos:end="91:47"><expr pos:start="91:32" pos:end="91:47"><name pos:start="91:32" pos:end="91:47">BLKDBG_L2_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="99:25"><expr pos:start="97:5" pos:end="99:24"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="99:24"><name pos:start="97:11" pos:end="97:21">bdrv_pwrite</name><argument_list pos:start="97:22" pos:end="99:24">(<argument pos:start="97:23" pos:end="97:30"><expr pos:start="97:23" pos:end="97:30"><name pos:start="97:23" pos:end="97:30"><name pos:start="97:23" pos:end="97:24">bs</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:30">file</name></name></expr></argument>, <argument pos:start="97:33" pos:end="97:52"><expr pos:start="97:33" pos:end="97:52"><name pos:start="97:33" pos:end="97:45"><name pos:start="97:33" pos:end="97:33">c</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:42">entries</name><index pos:start="97:43" pos:end="97:45">[<expr pos:start="97:44" pos:end="97:44"><name pos:start="97:44" pos:end="97:44">i</name></expr>]</index></name><operator pos:start="97:46" pos:end="97:46">.</operator><name pos:start="97:47" pos:end="97:52">offset</name></expr></argument>, <argument pos:start="97:55" pos:end="97:73"><expr pos:start="97:55" pos:end="97:73"><name pos:start="97:55" pos:end="97:67"><name pos:start="97:55" pos:end="97:55">c</name><operator pos:start="97:56" pos:end="97:57">-&gt;</operator><name pos:start="97:58" pos:end="97:64">entries</name><index pos:start="97:65" pos:end="97:67">[<expr pos:start="97:66" pos:end="97:66"><name pos:start="97:66" pos:end="97:66">i</name></expr>]</index></name><operator pos:start="97:68" pos:end="97:68">.</operator><name pos:start="97:69" pos:end="97:73">table</name></expr></argument>,

        <argument pos:start="99:9" pos:end="99:23"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:23">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>)</condition> <block pos:start="101:18" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:19">

        <return pos:start="103:9" pos:end="103:19">return <expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:32"><expr pos:start="109:5" pos:end="109:31"><name pos:start="109:5" pos:end="109:17"><name pos:start="109:5" pos:end="109:5">c</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:14">entries</name><index pos:start="109:15" pos:end="109:17">[<expr pos:start="109:16" pos:end="109:16"><name pos:start="109:16" pos:end="109:16">i</name></expr>]</index></name><operator pos:start="109:18" pos:end="109:18">.</operator><name pos:start="109:19" pos:end="109:23">dirty</name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:31">false</name></expr>;</expr_stmt>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
