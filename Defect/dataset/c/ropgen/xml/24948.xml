<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24948.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">update_msix_table_msg_data</name><parameter_list pos:start="1:39" pos:end="3:67">(<parameter pos:start="1:40" pos:end="1:62"><decl pos:start="1:40" pos:end="1:62"><type pos:start="1:40" pos:end="1:62"><name pos:start="1:40" pos:end="1:55">S390PCIBusDevice</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:62">pbdev</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:79"><decl pos:start="1:65" pos:end="1:79"><type pos:start="1:65" pos:end="1:79"><name pos:start="1:65" pos:end="1:72">uint64_t</name></type> <name pos:start="1:74" pos:end="1:79">offset</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:53"><decl pos:start="3:40" pos:end="3:53"><type pos:start="3:40" pos:end="3:53"><name pos:start="3:40" pos:end="3:47">uint64_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">data</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:66"><decl pos:start="3:56" pos:end="3:66"><type pos:start="3:56" pos:end="3:66"><name pos:start="3:56" pos:end="3:62">uint8_t</name></type> <name pos:start="3:64" pos:end="3:66">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:62">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">msg_data</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:42">(<expr pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:14">offset</name> <operator pos:start="13:16" pos:end="13:16">%</operator> <name pos:start="13:18" pos:end="13:36">PCI_MSIX_ENTRY_SIZE</name> <operator pos:start="13:38" pos:end="13:39">!=</operator> <literal type="number" pos:start="13:41" pos:end="13:41">8</literal></expr>)</condition> <block pos:start="13:44" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:17">(<expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:11">len</name> <operator pos:start="21:13" pos:end="21:14">!=</operator> <literal type="number" pos:start="21:16" pos:end="21:16">4</literal></expr>)</condition> <block pos:start="21:19" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:67"><expr pos:start="23:9" pos:end="23:66"><call pos:start="23:9" pos:end="23:66"><name pos:start="23:9" pos:end="23:15">DPRINTF</name><argument_list pos:start="23:16" pos:end="23:66">(<argument pos:start="23:17" pos:end="23:60"><expr pos:start="23:17" pos:end="23:60"><literal type="string" pos:start="23:17" pos:end="23:60">"access msix table msg data but len is %d\n"</literal></expr></argument>, <argument pos:start="23:63" pos:end="23:65"><expr pos:start="23:63" pos:end="23:65"><name pos:start="23:63" pos:end="23:65">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:42"><expr pos:start="31:5" pos:end="33:41"><name pos:start="31:5" pos:end="31:12">msg_data</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:23">uint8_t</name> <operator pos:start="31:25" pos:end="31:25">*</operator><operator pos:start="31:26" pos:end="31:26">)</operator><name pos:start="31:27" pos:end="31:30">data</name> <operator pos:start="31:32" pos:end="31:32">-</operator> <name pos:start="31:34" pos:end="31:39">offset</name> <operator pos:start="31:41" pos:end="31:41">%</operator> <name pos:start="31:43" pos:end="31:61">PCI_MSIX_ENTRY_SIZE</name> <operator pos:start="31:63" pos:end="31:63">+</operator>

               <name pos:start="33:16" pos:end="33:41">PCI_MSIX_ENTRY_VECTOR_CTRL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:69"><expr pos:start="35:5" pos:end="35:68"><name pos:start="35:5" pos:end="35:7">val</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:32"><name pos:start="35:11" pos:end="35:22">pci_get_long</name><argument_list pos:start="35:23" pos:end="35:32">(<argument pos:start="35:24" pos:end="35:31"><expr pos:start="35:24" pos:end="35:31"><name pos:start="35:24" pos:end="35:31">msg_data</name></expr></argument>)</argument_list></call> <operator pos:start="35:34" pos:end="35:34">|</operator> <operator pos:start="35:36" pos:end="35:36">(</operator><name pos:start="35:37" pos:end="35:46"><name pos:start="35:37" pos:end="35:41">pbdev</name><operator pos:start="35:42" pos:end="35:43">-&gt;</operator><name pos:start="35:44" pos:end="35:46">fid</name></name> <operator pos:start="35:48" pos:end="35:49">&lt;&lt;</operator> <name pos:start="35:51" pos:end="35:67">ZPCI_MSI_VEC_BITS</name><operator pos:start="35:68" pos:end="35:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><call pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:16">pci_set_long</name><argument_list pos:start="37:17" pos:end="37:31">(<argument pos:start="37:18" pos:end="37:25"><expr pos:start="37:18" pos:end="37:25"><name pos:start="37:18" pos:end="37:25">msg_data</name></expr></argument>, <argument pos:start="37:28" pos:end="37:30"><expr pos:start="37:28" pos:end="37:30"><name pos:start="37:28" pos:end="37:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:62"><expr pos:start="39:5" pos:end="39:61"><call pos:start="39:5" pos:end="39:61"><name pos:start="39:5" pos:end="39:11">DPRINTF</name><argument_list pos:start="39:12" pos:end="39:61">(<argument pos:start="39:13" pos:end="39:53"><expr pos:start="39:13" pos:end="39:53"><literal type="string" pos:start="39:13" pos:end="39:41">"update msix msg_data to 0x%"</literal> <name pos:start="39:43" pos:end="39:48">PRIx64</name> <literal type="string" pos:start="39:50" pos:end="39:53">"\n"</literal></expr></argument>, <argument pos:start="39:56" pos:end="39:60"><expr pos:start="39:56" pos:end="39:60"><operator pos:start="39:56" pos:end="39:56">*</operator><name pos:start="39:57" pos:end="39:60">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
