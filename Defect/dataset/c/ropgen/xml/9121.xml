<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9121.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">CPUX86State</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:25">cpu_x86_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:47">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">X86CPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:14"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <name pos:start="9:12" pos:end="9:14">int</name></type> <name pos:start="9:16" pos:end="9:21">inited</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:44"><expr pos:start="13:5" pos:end="13:43"><name pos:start="13:5" pos:end="13:7">cpu</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:43"><name pos:start="13:11" pos:end="13:17">X86_CPU</name><argument_list pos:start="13:18" pos:end="13:43">(<argument pos:start="13:19" pos:end="13:42"><expr pos:start="13:19" pos:end="13:42"><call pos:start="13:19" pos:end="13:42"><name pos:start="13:19" pos:end="13:28">object_new</name><argument_list pos:start="13:29" pos:end="13:42">(<argument pos:start="13:30" pos:end="13:41"><expr pos:start="13:30" pos:end="13:41"><name pos:start="13:30" pos:end="13:41">TYPE_X86_CPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:7">env</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <operator pos:start="15:11" pos:end="15:11">&amp;</operator><name pos:start="15:12" pos:end="15:19"><name pos:start="15:12" pos:end="15:14">cpu</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">env</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:22">cpu_model_str</name></name> <operator pos:start="17:24" pos:end="17:24">=</operator> <name pos:start="17:26" pos:end="17:34">cpu_model</name></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:53">/* init various static tables used in TCG mode */</comment>

    <if_stmt pos:start="23:5" pos:end="37:5"><if pos:start="23:5" pos:end="37:5">if <condition pos:start="23:8" pos:end="23:33">(<expr pos:start="23:9" pos:end="23:32"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:19">tcg_enabled</name><argument_list pos:start="23:20" pos:end="23:21">()</argument_list></call> <operator pos:start="23:23" pos:end="23:24">&amp;&amp;</operator> <operator pos:start="23:26" pos:end="23:26">!</operator><name pos:start="23:27" pos:end="23:32">inited</name></expr>)</condition> <block pos:start="23:35" pos:end="37:5">{<block_content pos:start="25:9" pos:end="36:0">

        <expr_stmt pos:start="25:9" pos:end="25:19"><expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:14">inited</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:29"><call pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:27">optimize_flags_init</name><argument_list pos:start="27:28" pos:end="27:29">()</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="29:1" pos:end="29:24">#<cpp:directive pos:start="29:2" pos:end="29:7">ifndef</cpp:directive> <name pos:start="29:9" pos:end="29:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        <expr_stmt pos:start="31:9" pos:end="36:0"><expr pos:start="31:9" pos:end="33:58"><name pos:start="31:9" pos:end="31:31">prev_debug_excp_handler</name> <operator pos:start="31:33" pos:end="31:33">=</operator>

            <call pos:start="33:13" pos:end="33:58"><name pos:start="33:13" pos:end="33:38">cpu_set_debug_excp_handler</name><argument_list pos:start="33:39" pos:end="33:58">(<argument pos:start="33:40" pos:end="33:57"><expr pos:start="33:40" pos:end="33:57"><name pos:start="33:40" pos:end="33:57">breakpoint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:45">(<expr pos:start="39:9" pos:end="39:44"><call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:24">cpu_x86_register</name><argument_list pos:start="39:25" pos:end="39:40">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">cpu</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><name pos:start="39:31" pos:end="39:39">cpu_model</name></expr></argument>)</argument_list></call> <operator pos:start="39:42" pos:end="39:42">&lt;</operator> <literal type="number" pos:start="39:44" pos:end="39:44">0</literal></expr>)</condition> <block pos:start="39:47" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:20">

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:21">object_delete</name><argument_list pos:start="41:22" pos:end="41:34">(<argument pos:start="41:23" pos:end="41:33"><expr pos:start="41:23" pos:end="41:33"><call pos:start="41:23" pos:end="41:33"><name pos:start="41:23" pos:end="41:28">OBJECT</name><argument_list pos:start="41:29" pos:end="41:33">(<argument pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:32">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><name pos:start="43:16" pos:end="43:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><call pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:18">qemu_init_vcpu</name><argument_list pos:start="49:19" pos:end="49:23">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">env</name></expr>;</return>

</block_content>}</block></function>
</unit>
