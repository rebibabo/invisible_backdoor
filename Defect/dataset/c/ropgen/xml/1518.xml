<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1518.c" pos:tabs="8"><function pos:start="1:1" pos:end="333:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:19">simcall</name>)<parameter_list pos:start="1:21" pos:end="1:41">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:35">CPUXtensaState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="333:1">{<block_content pos:start="5:5" pos:end="331:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">uint32_t</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">regs</name> <init pos:start="5:20" pos:end="5:30">= <expr pos:start="5:22" pos:end="5:30"><name pos:start="5:22" pos:end="5:30"><name pos:start="5:22" pos:end="5:24">env</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">regs</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="331:5">switch <condition pos:start="9:12" pos:end="9:20">(<expr pos:start="9:13" pos:end="9:19"><name pos:start="9:13" pos:end="9:19"><name pos:start="9:13" pos:end="9:16">regs</name><index pos:start="9:17" pos:end="9:19">[<expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="9:22" pos:end="331:5">{<block_content pos:start="11:5" pos:end="329:14">

    <case pos:start="11:5" pos:end="11:25">case <expr pos:start="11:10" pos:end="11:24"><name pos:start="11:10" pos:end="11:24">TARGET_SYS_exit</name></expr>:</case>

        <expr_stmt pos:start="13:9" pos:end="13:48"><expr pos:start="13:9" pos:end="13:47"><call pos:start="13:9" pos:end="13:47"><name pos:start="13:9" pos:end="13:16">qemu_log</name><argument_list pos:start="13:17" pos:end="13:47">(<argument pos:start="13:18" pos:end="13:37"><expr pos:start="13:18" pos:end="13:37"><literal type="string" pos:start="13:18" pos:end="13:37">"exit(%d) simcall\n"</literal></expr></argument>, <argument pos:start="13:40" pos:end="13:46"><expr pos:start="13:40" pos:end="13:46"><name pos:start="13:40" pos:end="13:46"><name pos:start="13:40" pos:end="13:43">regs</name><index pos:start="13:44" pos:end="13:46">[<expr pos:start="13:45" pos:end="13:45"><literal type="number" pos:start="13:45" pos:end="13:45">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:22"><expr pos:start="15:9" pos:end="15:21"><call pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:12">exit</name><argument_list pos:start="15:13" pos:end="15:21">(<argument pos:start="15:14" pos:end="15:20"><expr pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:17">regs</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="17:9" pos:end="17:14">break;</break>



    <case pos:start="21:5" pos:end="21:25">case <expr pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:24">TARGET_SYS_read</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:26">case <expr pos:start="23:10" pos:end="23:25"><name pos:start="23:10" pos:end="23:25">TARGET_SYS_write</name></expr>:</case>

        <block pos:start="25:9" pos:end="88:9">{<block_content pos:start="27:13" pos:end="86:13">

            <decl_stmt pos:start="27:13" pos:end="27:56"><decl pos:start="27:13" pos:end="27:55"><type pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:16">bool</name></type> <name pos:start="27:18" pos:end="27:25">is_write</name> <init pos:start="27:27" pos:end="27:55">= <expr pos:start="27:29" pos:end="27:55"><name pos:start="27:29" pos:end="27:35"><name pos:start="27:29" pos:end="27:32">regs</name><index pos:start="27:33" pos:end="27:35">[<expr pos:start="27:34" pos:end="27:34"><literal type="number" pos:start="27:34" pos:end="27:34">2</literal></expr>]</index></name> <operator pos:start="27:37" pos:end="27:38">==</operator> <name pos:start="27:40" pos:end="27:55">TARGET_SYS_write</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="29:13" pos:end="29:34"><decl pos:start="29:13" pos:end="29:33"><type pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:20">uint32_t</name></type> <name pos:start="29:22" pos:end="29:23">fd</name> <init pos:start="29:25" pos:end="29:33">= <expr pos:start="29:27" pos:end="29:33"><name pos:start="29:27" pos:end="29:33"><name pos:start="29:27" pos:end="29:30">regs</name><index pos:start="29:31" pos:end="29:33">[<expr pos:start="29:32" pos:end="29:32"><literal type="number" pos:start="29:32" pos:end="29:32">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:37"><decl pos:start="31:13" pos:end="31:36"><type pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:20">uint32_t</name></type> <name pos:start="31:22" pos:end="31:26">vaddr</name> <init pos:start="31:28" pos:end="31:36">= <expr pos:start="31:30" pos:end="31:36"><name pos:start="31:30" pos:end="31:36"><name pos:start="31:30" pos:end="31:33">regs</name><index pos:start="31:34" pos:end="31:36">[<expr pos:start="31:35" pos:end="31:35"><literal type="number" pos:start="31:35" pos:end="31:35">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="33:13" pos:end="33:35"><decl pos:start="33:13" pos:end="33:34"><type pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:20">uint32_t</name></type> <name pos:start="33:22" pos:end="33:24">len</name> <init pos:start="33:26" pos:end="33:34">= <expr pos:start="33:28" pos:end="33:34"><name pos:start="33:28" pos:end="33:34"><name pos:start="33:28" pos:end="33:31">regs</name><index pos:start="33:32" pos:end="33:34">[<expr pos:start="33:33" pos:end="33:33"><literal type="number" pos:start="33:33" pos:end="33:33">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <while pos:start="37:13" pos:end="86:13">while <condition pos:start="37:19" pos:end="37:27">(<expr pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:22">len</name> <operator pos:start="37:24" pos:end="37:24">&gt;</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>)</condition> <block pos:start="37:29" pos:end="86:13">{<block_content pos:start="39:17" pos:end="84:17">

                <decl_stmt pos:start="39:17" pos:end="41:56"><decl pos:start="39:17" pos:end="41:55"><type pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:34">target_phys_addr_t</name></type> <name pos:start="39:36" pos:end="39:40">paddr</name> <init pos:start="39:42" pos:end="41:55">=

                    <expr pos:start="41:21" pos:end="41:55"><call pos:start="41:21" pos:end="41:55"><name pos:start="41:21" pos:end="41:43">cpu_get_phys_page_debug</name><argument_list pos:start="41:44" pos:end="41:55">(<argument pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><name pos:start="41:45" pos:end="41:47">env</name></expr></argument>, <argument pos:start="41:50" pos:end="41:54"><expr pos:start="41:50" pos:end="41:54"><name pos:start="41:50" pos:end="41:54">vaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="43:17" pos:end="45:72"><decl pos:start="43:17" pos:end="45:71"><type pos:start="43:17" pos:end="43:24"><name pos:start="43:17" pos:end="43:24">uint32_t</name></type> <name pos:start="43:26" pos:end="43:34">page_left</name> <init pos:start="43:36" pos:end="45:71">=

                    <expr pos:start="45:21" pos:end="45:71"><name pos:start="45:21" pos:end="45:36">TARGET_PAGE_SIZE</name> <operator pos:start="45:38" pos:end="45:38">-</operator> <operator pos:start="45:40" pos:end="45:40">(</operator><name pos:start="45:41" pos:end="45:45">vaddr</name> <operator pos:start="45:47" pos:end="45:47">&amp;</operator> <operator pos:start="45:49" pos:end="45:49">(</operator><name pos:start="45:50" pos:end="45:65">TARGET_PAGE_SIZE</name> <operator pos:start="45:67" pos:end="45:67">-</operator> <literal type="number" pos:start="45:69" pos:end="45:69">1</literal><operator pos:start="45:70" pos:end="45:70">)</operator><operator pos:start="45:71" pos:end="45:71">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="47:17" pos:end="47:67"><decl pos:start="47:17" pos:end="47:66"><type pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:24">uint32_t</name></type> <name pos:start="47:26" pos:end="47:30">io_sz</name> <init pos:start="47:32" pos:end="47:66">= <expr pos:start="47:34" pos:end="47:66"><ternary pos:start="47:34" pos:end="47:66"><condition pos:start="47:34" pos:end="47:50"><expr pos:start="47:34" pos:end="47:48"><name pos:start="47:34" pos:end="47:42">page_left</name> <operator pos:start="47:44" pos:end="47:44">&lt;</operator> <name pos:start="47:46" pos:end="47:48">len</name></expr> ?</condition><then pos:start="47:52" pos:end="47:60"> <expr pos:start="47:52" pos:end="47:60"><name pos:start="47:52" pos:end="47:60">page_left</name></expr> </then><else pos:start="47:62" pos:end="47:66">: <expr pos:start="47:64" pos:end="47:66"><name pos:start="47:64" pos:end="47:66">len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="49:17" pos:end="49:46"><decl pos:start="49:17" pos:end="49:45"><type pos:start="49:17" pos:end="49:34"><name pos:start="49:17" pos:end="49:34">target_phys_addr_t</name></type> <name pos:start="49:36" pos:end="49:37">sz</name> <init pos:start="49:39" pos:end="49:45">= <expr pos:start="49:41" pos:end="49:45"><name pos:start="49:41" pos:end="49:45">io_sz</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="51:17" pos:end="51:74"><decl pos:start="51:17" pos:end="51:73"><type pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:20">void</name> <modifier pos:start="51:22" pos:end="51:22">*</modifier></type><name pos:start="51:23" pos:end="51:25">buf</name> <init pos:start="51:27" pos:end="51:73">= <expr pos:start="51:29" pos:end="51:73"><call pos:start="51:29" pos:end="51:73"><name pos:start="51:29" pos:end="51:51">cpu_physical_memory_map</name><argument_list pos:start="51:52" pos:end="51:73">(<argument pos:start="51:53" pos:end="51:57"><expr pos:start="51:53" pos:end="51:57"><name pos:start="51:53" pos:end="51:57">paddr</name></expr></argument>, <argument pos:start="51:60" pos:end="51:62"><expr pos:start="51:60" pos:end="51:62"><operator pos:start="51:60" pos:end="51:60">&amp;</operator><name pos:start="51:61" pos:end="51:62">sz</name></expr></argument>, <argument pos:start="51:65" pos:end="51:72"><expr pos:start="51:65" pos:end="51:72"><name pos:start="51:65" pos:end="51:72">is_write</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="55:17" pos:end="84:17"><if pos:start="55:17" pos:end="77:17">if <condition pos:start="55:20" pos:end="55:24">(<expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:23">buf</name></expr>)</condition> <block pos:start="55:26" pos:end="77:17">{<block_content pos:start="57:21" pos:end="75:21">

                    <expr_stmt pos:start="57:21" pos:end="57:35"><expr pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:25">vaddr</name> <operator pos:start="57:27" pos:end="57:28">+=</operator> <name pos:start="57:30" pos:end="57:34">io_sz</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:33"><expr pos:start="59:21" pos:end="59:32"><name pos:start="59:21" pos:end="59:23">len</name> <operator pos:start="59:25" pos:end="59:26">-=</operator> <name pos:start="59:28" pos:end="59:32">io_sz</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="65:45"><expr pos:start="61:21" pos:end="65:44"><name pos:start="61:21" pos:end="61:27"><name pos:start="61:21" pos:end="61:24">regs</name><index pos:start="61:25" pos:end="61:27">[<expr pos:start="61:26" pos:end="61:26"><literal type="number" pos:start="61:26" pos:end="61:26">2</literal></expr>]</index></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <ternary pos:start="61:31" pos:end="65:44"><condition pos:start="61:31" pos:end="61:40"><expr pos:start="61:31" pos:end="61:38"><name pos:start="61:31" pos:end="61:38">is_write</name></expr> ?</condition><then pos:start="63:25" pos:end="63:45">

                        <expr pos:start="63:25" pos:end="63:45"><call pos:start="63:25" pos:end="63:45"><name pos:start="63:25" pos:end="63:29">write</name><argument_list pos:start="63:30" pos:end="63:45">(<argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><name pos:start="63:31" pos:end="63:32">fd</name></expr></argument>, <argument pos:start="63:35" pos:end="63:37"><expr pos:start="63:35" pos:end="63:37"><name pos:start="63:35" pos:end="63:37">buf</name></expr></argument>, <argument pos:start="63:40" pos:end="63:44"><expr pos:start="63:40" pos:end="63:44"><name pos:start="63:40" pos:end="63:44">io_sz</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="63:47" pos:end="65:44">:

                        <expr pos:start="65:25" pos:end="65:44"><call pos:start="65:25" pos:end="65:44"><name pos:start="65:25" pos:end="65:28">read</name><argument_list pos:start="65:29" pos:end="65:44">(<argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">fd</name></expr></argument>, <argument pos:start="65:34" pos:end="65:36"><expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">buf</name></expr></argument>, <argument pos:start="65:39" pos:end="65:43"><expr pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:43">io_sz</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:36"><expr pos:start="67:21" pos:end="67:35"><name pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:24">regs</name><index pos:start="67:25" pos:end="67:27">[<expr pos:start="67:26" pos:end="67:26"><literal type="number" pos:start="67:26" pos:end="67:26">3</literal></expr>]</index></name> <operator pos:start="67:29" pos:end="67:29">=</operator> <name pos:start="67:31" pos:end="67:35">errno</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:69"><expr pos:start="69:21" pos:end="69:68"><call pos:start="69:21" pos:end="69:68"><name pos:start="69:21" pos:end="69:45">cpu_physical_memory_unmap</name><argument_list pos:start="69:46" pos:end="69:68">(<argument pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><name pos:start="69:47" pos:end="69:49">buf</name></expr></argument>, <argument pos:start="69:52" pos:end="69:53"><expr pos:start="69:52" pos:end="69:53"><name pos:start="69:52" pos:end="69:53">sz</name></expr></argument>, <argument pos:start="69:56" pos:end="69:63"><expr pos:start="69:56" pos:end="69:63"><name pos:start="69:56" pos:end="69:63">is_write</name></expr></argument>, <argument pos:start="69:66" pos:end="69:67"><expr pos:start="69:66" pos:end="69:67"><name pos:start="69:66" pos:end="69:67">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="71:21" pos:end="75:21"><if pos:start="71:21" pos:end="75:21">if <condition pos:start="71:24" pos:end="71:38">(<expr pos:start="71:25" pos:end="71:37"><name pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:28">regs</name><index pos:start="71:29" pos:end="71:31">[<expr pos:start="71:30" pos:end="71:30"><literal type="number" pos:start="71:30" pos:end="71:30">2</literal></expr>]</index></name> <operator pos:start="71:33" pos:end="71:34">==</operator> <operator pos:start="71:36" pos:end="71:36">-</operator><literal type="number" pos:start="71:37" pos:end="71:37">1</literal></expr>)</condition> <block pos:start="71:40" pos:end="75:21">{<block_content pos:start="73:25" pos:end="73:30">

                        <break pos:start="73:25" pos:end="73:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="77:19" pos:end="84:17">else <block pos:start="77:24" pos:end="84:17">{<block_content pos:start="80:21" pos:end="82:26">


                    <expr_stmt pos:start="80:21" pos:end="80:37"><expr pos:start="80:21" pos:end="80:36"><name pos:start="80:21" pos:end="80:27"><name pos:start="80:21" pos:end="80:24">regs</name><index pos:start="80:25" pos:end="80:27">[<expr pos:start="80:26" pos:end="80:26"><literal type="number" pos:start="80:26" pos:end="80:26">3</literal></expr>]</index></name> <operator pos:start="80:29" pos:end="80:29">=</operator> <name pos:start="80:31" pos:end="80:36">EINVAL</name></expr>;</expr_stmt>

                    <break pos:start="82:21" pos:end="82:26">break;</break>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block>

        <break pos:start="90:9" pos:end="90:14">break;</break>



    <case pos:start="94:5" pos:end="94:25">case <expr pos:start="94:10" pos:end="94:24"><name pos:start="94:10" pos:end="94:24">TARGET_SYS_open</name></expr>:</case>

        <block pos:start="96:9" pos:end="135:9">{<block_content pos:start="98:13" pos:end="133:13">

            <decl_stmt pos:start="98:13" pos:end="98:28"><decl pos:start="98:13" pos:end="98:27"><type pos:start="98:13" pos:end="98:16"><name pos:start="98:13" pos:end="98:16">char</name></type> <name pos:start="98:18" pos:end="98:27"><name pos:start="98:18" pos:end="98:21">name</name><index pos:start="98:22" pos:end="98:27">[<expr pos:start="98:23" pos:end="98:26"><literal type="number" pos:start="98:23" pos:end="98:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="100:13" pos:end="100:19"><decl pos:start="100:13" pos:end="100:18"><type pos:start="100:13" pos:end="100:15"><name pos:start="100:13" pos:end="100:15">int</name></type> <name pos:start="100:17" pos:end="100:18">rc</name></decl>;</decl_stmt>

            <decl_stmt pos:start="102:13" pos:end="102:18"><decl pos:start="102:13" pos:end="102:17"><type pos:start="102:13" pos:end="102:15"><name pos:start="102:13" pos:end="102:15">int</name></type> <name pos:start="102:17" pos:end="102:17">i</name></decl>;</decl_stmt>



            <for pos:start="106:13" pos:end="118:13">for <control pos:start="106:17" pos:end="106:50">(<init pos:start="106:18" pos:end="106:23"><expr pos:start="106:18" pos:end="106:22"><name pos:start="106:18" pos:end="106:18">i</name> <operator pos:start="106:20" pos:end="106:20">=</operator> <literal type="number" pos:start="106:22" pos:end="106:22">0</literal></expr>;</init> <condition pos:start="106:25" pos:end="106:45"><expr pos:start="106:25" pos:end="106:44"><name pos:start="106:25" pos:end="106:25">i</name> <operator pos:start="106:27" pos:end="106:27">&lt;</operator> <call pos:start="106:29" pos:end="106:44"><name pos:start="106:29" pos:end="106:38">ARRAY_SIZE</name><argument_list pos:start="106:39" pos:end="106:44">(<argument pos:start="106:40" pos:end="106:43"><expr pos:start="106:40" pos:end="106:43"><name pos:start="106:40" pos:end="106:43">name</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="106:47" pos:end="106:49"><expr pos:start="106:47" pos:end="106:49"><operator pos:start="106:47" pos:end="106:48">++</operator><name pos:start="106:49" pos:end="106:49">i</name></expr></incr>)</control> <block pos:start="106:52" pos:end="118:13">{<block_content pos:start="108:17" pos:end="116:17">

                <expr_stmt pos:start="108:17" pos:end="110:69"><expr pos:start="108:17" pos:end="110:68"><name pos:start="108:17" pos:end="108:18">rc</name> <operator pos:start="108:20" pos:end="108:20">=</operator> <call pos:start="108:22" pos:end="110:68"><name pos:start="108:22" pos:end="108:40">cpu_memory_rw_debug</name><argument_list pos:start="108:41" pos:end="110:68">(

                        <argument pos:start="110:25" pos:end="110:27"><expr pos:start="110:25" pos:end="110:27"><name pos:start="110:25" pos:end="110:27">env</name></expr></argument>, <argument pos:start="110:30" pos:end="110:40"><expr pos:start="110:30" pos:end="110:40"><name pos:start="110:30" pos:end="110:36"><name pos:start="110:30" pos:end="110:33">regs</name><index pos:start="110:34" pos:end="110:36">[<expr pos:start="110:35" pos:end="110:35"><literal type="number" pos:start="110:35" pos:end="110:35">3</literal></expr>]</index></name> <operator pos:start="110:38" pos:end="110:38">+</operator> <name pos:start="110:40" pos:end="110:40">i</name></expr></argument>, <argument pos:start="110:43" pos:end="110:61"><expr pos:start="110:43" pos:end="110:61"><operator pos:start="110:43" pos:end="110:43">(</operator><name pos:start="110:44" pos:end="110:50">uint8_t</name> <operator pos:start="110:52" pos:end="110:52">*</operator><operator pos:start="110:53" pos:end="110:53">)</operator><name pos:start="110:54" pos:end="110:57">name</name> <operator pos:start="110:59" pos:end="110:59">+</operator> <name pos:start="110:61" pos:end="110:61">i</name></expr></argument>, <argument pos:start="110:64" pos:end="110:64"><expr pos:start="110:64" pos:end="110:64"><literal type="number" pos:start="110:64" pos:end="110:64">1</literal></expr></argument>, <argument pos:start="110:67" pos:end="110:67"><expr pos:start="110:67" pos:end="110:67"><literal type="number" pos:start="110:67" pos:end="110:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="112:17" pos:end="116:17"><if pos:start="112:17" pos:end="116:17">if <condition pos:start="112:20" pos:end="112:44">(<expr pos:start="112:21" pos:end="112:43"><name pos:start="112:21" pos:end="112:22">rc</name> <operator pos:start="112:24" pos:end="112:25">!=</operator> <literal type="number" pos:start="112:27" pos:end="112:27">0</literal> <operator pos:start="112:29" pos:end="112:30">||</operator> <name pos:start="112:32" pos:end="112:38"><name pos:start="112:32" pos:end="112:35">name</name><index pos:start="112:36" pos:end="112:38">[<expr pos:start="112:37" pos:end="112:37"><name pos:start="112:37" pos:end="112:37">i</name></expr>]</index></name> <operator pos:start="112:40" pos:end="112:41">==</operator> <literal type="number" pos:start="112:43" pos:end="112:43">0</literal></expr>)</condition> <block pos:start="112:46" pos:end="116:17">{<block_content pos:start="114:21" pos:end="114:26">

                    <break pos:start="114:21" pos:end="114:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="122:13" pos:end="133:13"><if pos:start="122:13" pos:end="128:13">if <condition pos:start="122:16" pos:end="122:48">(<expr pos:start="122:17" pos:end="122:47"><name pos:start="122:17" pos:end="122:18">rc</name> <operator pos:start="122:20" pos:end="122:21">==</operator> <literal type="number" pos:start="122:23" pos:end="122:23">0</literal> <operator pos:start="122:25" pos:end="122:26">&amp;&amp;</operator> <name pos:start="122:28" pos:end="122:28">i</name> <operator pos:start="122:30" pos:end="122:30">&lt;</operator> <call pos:start="122:32" pos:end="122:47"><name pos:start="122:32" pos:end="122:41">ARRAY_SIZE</name><argument_list pos:start="122:42" pos:end="122:47">(<argument pos:start="122:43" pos:end="122:46"><expr pos:start="122:43" pos:end="122:46"><name pos:start="122:43" pos:end="122:46">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="122:50" pos:end="128:13">{<block_content pos:start="124:17" pos:end="126:32">

                <expr_stmt pos:start="124:17" pos:end="124:55"><expr pos:start="124:17" pos:end="124:54"><name pos:start="124:17" pos:end="124:23"><name pos:start="124:17" pos:end="124:20">regs</name><index pos:start="124:21" pos:end="124:23">[<expr pos:start="124:22" pos:end="124:22"><literal type="number" pos:start="124:22" pos:end="124:22">2</literal></expr>]</index></name> <operator pos:start="124:25" pos:end="124:25">=</operator> <call pos:start="124:27" pos:end="124:54"><name pos:start="124:27" pos:end="124:30">open</name><argument_list pos:start="124:31" pos:end="124:54">(<argument pos:start="124:32" pos:end="124:35"><expr pos:start="124:32" pos:end="124:35"><name pos:start="124:32" pos:end="124:35">name</name></expr></argument>, <argument pos:start="124:38" pos:end="124:44"><expr pos:start="124:38" pos:end="124:44"><name pos:start="124:38" pos:end="124:44"><name pos:start="124:38" pos:end="124:41">regs</name><index pos:start="124:42" pos:end="124:44">[<expr pos:start="124:43" pos:end="124:43"><literal type="number" pos:start="124:43" pos:end="124:43">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="124:47" pos:end="124:53"><expr pos:start="124:47" pos:end="124:53"><name pos:start="124:47" pos:end="124:53"><name pos:start="124:47" pos:end="124:50">regs</name><index pos:start="124:51" pos:end="124:53">[<expr pos:start="124:52" pos:end="124:52"><literal type="number" pos:start="124:52" pos:end="124:52">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="126:17" pos:end="126:32"><expr pos:start="126:17" pos:end="126:31"><name pos:start="126:17" pos:end="126:23"><name pos:start="126:17" pos:end="126:20">regs</name><index pos:start="126:21" pos:end="126:23">[<expr pos:start="126:22" pos:end="126:22"><literal type="number" pos:start="126:22" pos:end="126:22">3</literal></expr>]</index></name> <operator pos:start="126:25" pos:end="126:25">=</operator> <name pos:start="126:27" pos:end="126:31">errno</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="128:15" pos:end="133:13">else <block pos:start="128:20" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:33">


                <expr_stmt pos:start="131:17" pos:end="131:33"><expr pos:start="131:17" pos:end="131:32"><name pos:start="131:17" pos:end="131:23"><name pos:start="131:17" pos:end="131:20">regs</name><index pos:start="131:21" pos:end="131:23">[<expr pos:start="131:22" pos:end="131:22"><literal type="number" pos:start="131:22" pos:end="131:22">3</literal></expr>]</index></name> <operator pos:start="131:25" pos:end="131:25">=</operator> <name pos:start="131:27" pos:end="131:32">EINVAL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="137:9" pos:end="137:14">break;</break>



    <case pos:start="141:5" pos:end="141:26">case <expr pos:start="141:10" pos:end="141:25"><name pos:start="141:10" pos:end="141:25">TARGET_SYS_close</name></expr>:</case>

        <if_stmt pos:start="143:9" pos:end="153:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:24">(<expr pos:start="143:13" pos:end="143:23"><name pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:16">regs</name><index pos:start="143:17" pos:end="143:19">[<expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">3</literal></expr>]</index></name> <operator pos:start="143:21" pos:end="143:21">&lt;</operator> <literal type="number" pos:start="143:23" pos:end="143:23">3</literal></expr>)</condition> <block pos:start="143:26" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:34">

            <expr_stmt pos:start="145:13" pos:end="145:34"><expr pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:16">regs</name><index pos:start="145:17" pos:end="145:19">[<expr pos:start="145:18" pos:end="145:18"><literal type="number" pos:start="145:18" pos:end="145:18">2</literal></expr>]</index></name> <operator pos:start="145:21" pos:end="145:21">=</operator> <name pos:start="145:23" pos:end="145:29"><name pos:start="145:23" pos:end="145:26">regs</name><index pos:start="145:27" pos:end="145:29">[<expr pos:start="145:28" pos:end="145:28"><literal type="number" pos:start="145:28" pos:end="145:28">3</literal></expr>]</index></name> <operator pos:start="145:31" pos:end="145:31">=</operator> <literal type="number" pos:start="145:33" pos:end="145:33">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="153:9">else <block pos:start="147:16" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:28">

            <expr_stmt pos:start="149:13" pos:end="149:37"><expr pos:start="149:13" pos:end="149:36"><name pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:16">regs</name><index pos:start="149:17" pos:end="149:19">[<expr pos:start="149:18" pos:end="149:18"><literal type="number" pos:start="149:18" pos:end="149:18">2</literal></expr>]</index></name> <operator pos:start="149:21" pos:end="149:21">=</operator> <call pos:start="149:23" pos:end="149:36"><name pos:start="149:23" pos:end="149:27">close</name><argument_list pos:start="149:28" pos:end="149:36">(<argument pos:start="149:29" pos:end="149:35"><expr pos:start="149:29" pos:end="149:35"><name pos:start="149:29" pos:end="149:35"><name pos:start="149:29" pos:end="149:32">regs</name><index pos:start="149:33" pos:end="149:35">[<expr pos:start="149:34" pos:end="149:34"><literal type="number" pos:start="149:34" pos:end="149:34">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:28"><expr pos:start="151:13" pos:end="151:27"><name pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:16">regs</name><index pos:start="151:17" pos:end="151:19">[<expr pos:start="151:18" pos:end="151:18"><literal type="number" pos:start="151:18" pos:end="151:18">3</literal></expr>]</index></name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:27">errno</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>



    <case pos:start="159:5" pos:end="159:26">case <expr pos:start="159:10" pos:end="159:25"><name pos:start="159:10" pos:end="159:25">TARGET_SYS_lseek</name></expr>:</case>

        <expr_stmt pos:start="161:9" pos:end="161:67"><expr pos:start="161:9" pos:end="161:66"><name pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:12">regs</name><index pos:start="161:13" pos:end="161:15">[<expr pos:start="161:14" pos:end="161:14"><literal type="number" pos:start="161:14" pos:end="161:14">2</literal></expr>]</index></name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:66"><name pos:start="161:19" pos:end="161:23">lseek</name><argument_list pos:start="161:24" pos:end="161:66">(<argument pos:start="161:25" pos:end="161:31"><expr pos:start="161:25" pos:end="161:31"><name pos:start="161:25" pos:end="161:31"><name pos:start="161:25" pos:end="161:28">regs</name><index pos:start="161:29" pos:end="161:31">[<expr pos:start="161:30" pos:end="161:30"><literal type="number" pos:start="161:30" pos:end="161:30">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:34" pos:end="161:56"><expr pos:start="161:34" pos:end="161:56"><operator pos:start="161:34" pos:end="161:34">(</operator><name pos:start="161:35" pos:end="161:39">off_t</name><operator pos:start="161:40" pos:end="161:40">)</operator><operator pos:start="161:41" pos:end="161:41">(</operator><name pos:start="161:42" pos:end="161:48">int32_t</name><operator pos:start="161:49" pos:end="161:49">)</operator><name pos:start="161:50" pos:end="161:56"><name pos:start="161:50" pos:end="161:53">regs</name><index pos:start="161:54" pos:end="161:56">[<expr pos:start="161:55" pos:end="161:55"><literal type="number" pos:start="161:55" pos:end="161:55">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:59" pos:end="161:65"><expr pos:start="161:59" pos:end="161:65"><name pos:start="161:59" pos:end="161:65"><name pos:start="161:59" pos:end="161:62">regs</name><index pos:start="161:63" pos:end="161:65">[<expr pos:start="161:64" pos:end="161:64"><literal type="number" pos:start="161:64" pos:end="161:64">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:24"><expr pos:start="163:9" pos:end="163:23"><name pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:12">regs</name><index pos:start="163:13" pos:end="163:15">[<expr pos:start="163:14" pos:end="163:14"><literal type="number" pos:start="163:14" pos:end="163:14">3</literal></expr>]</index></name> <operator pos:start="163:17" pos:end="163:17">=</operator> <name pos:start="163:19" pos:end="163:23">errno</name></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>



    <case pos:start="169:5" pos:end="169:31">case <expr pos:start="169:10" pos:end="169:30"><name pos:start="169:10" pos:end="169:30">TARGET_SYS_select_one</name></expr>:</case>

        <block pos:start="171:9" pos:end="219:9">{<block_content pos:start="173:13" pos:end="217:28">

            <decl_stmt pos:start="173:13" pos:end="173:34"><decl pos:start="173:13" pos:end="173:33"><type pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:20">uint32_t</name></type> <name pos:start="173:22" pos:end="173:23">fd</name> <init pos:start="173:25" pos:end="173:33">= <expr pos:start="173:27" pos:end="173:33"><name pos:start="173:27" pos:end="173:33"><name pos:start="173:27" pos:end="173:30">regs</name><index pos:start="173:31" pos:end="173:33">[<expr pos:start="173:32" pos:end="173:32"><literal type="number" pos:start="173:32" pos:end="173:32">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="175:13" pos:end="175:34"><decl pos:start="175:13" pos:end="175:33"><type pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:20">uint32_t</name></type> <name pos:start="175:22" pos:end="175:23">rq</name> <init pos:start="175:25" pos:end="175:33">= <expr pos:start="175:27" pos:end="175:33"><name pos:start="175:27" pos:end="175:33"><name pos:start="175:27" pos:end="175:30">regs</name><index pos:start="175:31" pos:end="175:33">[<expr pos:start="175:32" pos:end="175:32"><literal type="number" pos:start="175:32" pos:end="175:32">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="177:13" pos:end="177:41"><decl pos:start="177:13" pos:end="177:40"><type pos:start="177:13" pos:end="177:20"><name pos:start="177:13" pos:end="177:20">uint32_t</name></type> <name pos:start="177:22" pos:end="177:30">target_tv</name> <init pos:start="177:32" pos:end="177:40">= <expr pos:start="177:34" pos:end="177:40"><name pos:start="177:34" pos:end="177:40"><name pos:start="177:34" pos:end="177:37">regs</name><index pos:start="177:38" pos:end="177:40">[<expr pos:start="177:39" pos:end="177:39"><literal type="number" pos:start="177:39" pos:end="177:39">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="179:13" pos:end="179:35"><decl pos:start="179:13" pos:end="179:34"><type pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:20">uint32_t</name></type> <name pos:start="179:22" pos:end="179:34"><name pos:start="179:22" pos:end="179:31">target_tvv</name><index pos:start="179:32" pos:end="179:34">[<expr pos:start="179:33" pos:end="179:33"><literal type="number" pos:start="179:33" pos:end="179:33">2</literal></expr>]</index></name></decl>;</decl_stmt>



            <decl_stmt pos:start="183:13" pos:end="183:36"><decl pos:start="183:13" pos:end="183:35"><type pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:18">struct</name> <name pos:start="183:20" pos:end="183:26">timeval</name></name></type> <name pos:start="183:28" pos:end="183:29">tv</name> <init pos:start="183:31" pos:end="183:35">= <expr pos:start="183:33" pos:end="183:35"><block pos:start="183:33" pos:end="183:35">{<expr pos:start="183:34" pos:end="183:34"><literal type="number" pos:start="183:34" pos:end="183:34">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="185:13" pos:end="185:25"><decl pos:start="185:13" pos:end="185:24"><type pos:start="185:13" pos:end="185:18"><name pos:start="185:13" pos:end="185:18">fd_set</name></type> <name pos:start="185:20" pos:end="185:24">fdset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="189:13" pos:end="189:28"><expr pos:start="189:13" pos:end="189:27"><call pos:start="189:13" pos:end="189:27"><name pos:start="189:13" pos:end="189:19">FD_ZERO</name><argument_list pos:start="189:20" pos:end="189:27">(<argument pos:start="189:21" pos:end="189:26"><expr pos:start="189:21" pos:end="189:26"><operator pos:start="189:21" pos:end="189:21">&amp;</operator><name pos:start="189:22" pos:end="189:26">fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:31"><expr pos:start="191:13" pos:end="191:30"><call pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:18">FD_SET</name><argument_list pos:start="191:19" pos:end="191:30">(<argument pos:start="191:20" pos:end="191:21"><expr pos:start="191:20" pos:end="191:21"><name pos:start="191:20" pos:end="191:21">fd</name></expr></argument>, <argument pos:start="191:24" pos:end="191:29"><expr pos:start="191:24" pos:end="191:29"><operator pos:start="191:24" pos:end="191:24">&amp;</operator><name pos:start="191:25" pos:end="191:29">fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="195:13" pos:end="205:13"><if pos:start="195:13" pos:end="205:13">if <condition pos:start="195:16" pos:end="195:26">(<expr pos:start="195:17" pos:end="195:25"><name pos:start="195:17" pos:end="195:25">target_tv</name></expr>)</condition> <block pos:start="195:28" pos:end="205:13">{<block_content pos:start="197:17" pos:end="203:61">

                <expr_stmt pos:start="197:17" pos:end="199:70"><expr pos:start="197:17" pos:end="199:69"><call pos:start="197:17" pos:end="199:69"><name pos:start="197:17" pos:end="197:35">cpu_memory_rw_debug</name><argument_list pos:start="197:36" pos:end="199:69">(<argument pos:start="197:37" pos:end="197:39"><expr pos:start="197:37" pos:end="197:39"><name pos:start="197:37" pos:end="197:39">env</name></expr></argument>, <argument pos:start="197:42" pos:end="197:50"><expr pos:start="197:42" pos:end="197:50"><name pos:start="197:42" pos:end="197:50">target_tv</name></expr></argument>,

                        <argument pos:start="199:25" pos:end="199:45"><expr pos:start="199:25" pos:end="199:45"><operator pos:start="199:25" pos:end="199:25">(</operator><name pos:start="199:26" pos:end="199:32">uint8_t</name> <operator pos:start="199:34" pos:end="199:34">*</operator><operator pos:start="199:35" pos:end="199:35">)</operator><name pos:start="199:36" pos:end="199:45">target_tvv</name></expr></argument>, <argument pos:start="199:48" pos:end="199:65"><expr pos:start="199:48" pos:end="199:65"><sizeof pos:start="199:48" pos:end="199:65">sizeof<argument_list pos:start="199:54" pos:end="199:65">(<argument pos:start="199:55" pos:end="199:64"><expr pos:start="199:55" pos:end="199:64"><name pos:start="199:55" pos:end="199:64">target_tvv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="199:68" pos:end="199:68"><expr pos:start="199:68" pos:end="199:68"><literal type="number" pos:start="199:68" pos:end="199:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:60"><expr pos:start="201:17" pos:end="201:59"><name pos:start="201:17" pos:end="201:25"><name pos:start="201:17" pos:end="201:18">tv</name><operator pos:start="201:19" pos:end="201:19">.</operator><name pos:start="201:20" pos:end="201:25">tv_sec</name></name> <operator pos:start="201:27" pos:end="201:27">=</operator> <operator pos:start="201:29" pos:end="201:29">(</operator><name pos:start="201:30" pos:end="201:36">int32_t</name><operator pos:start="201:37" pos:end="201:37">)</operator><call pos:start="201:38" pos:end="201:59"><name pos:start="201:38" pos:end="201:44">tswap32</name><argument_list pos:start="201:45" pos:end="201:59">(<argument pos:start="201:46" pos:end="201:58"><expr pos:start="201:46" pos:end="201:58"><name pos:start="201:46" pos:end="201:58"><name pos:start="201:46" pos:end="201:55">target_tvv</name><index pos:start="201:56" pos:end="201:58">[<expr pos:start="201:57" pos:end="201:57"><literal type="number" pos:start="201:57" pos:end="201:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:61"><expr pos:start="203:17" pos:end="203:60"><name pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:18">tv</name><operator pos:start="203:19" pos:end="203:19">.</operator><name pos:start="203:20" pos:end="203:26">tv_usec</name></name> <operator pos:start="203:28" pos:end="203:28">=</operator> <operator pos:start="203:30" pos:end="203:30">(</operator><name pos:start="203:31" pos:end="203:37">int32_t</name><operator pos:start="203:38" pos:end="203:38">)</operator><call pos:start="203:39" pos:end="203:60"><name pos:start="203:39" pos:end="203:45">tswap32</name><argument_list pos:start="203:46" pos:end="203:60">(<argument pos:start="203:47" pos:end="203:59"><expr pos:start="203:47" pos:end="203:59"><name pos:start="203:47" pos:end="203:59"><name pos:start="203:47" pos:end="203:56">target_tvv</name><index pos:start="203:57" pos:end="203:59">[<expr pos:start="203:58" pos:end="203:58"><literal type="number" pos:start="203:58" pos:end="203:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="207:13" pos:end="215:44"><expr pos:start="207:13" pos:end="215:43"><name pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:16">regs</name><index pos:start="207:17" pos:end="207:19">[<expr pos:start="207:18" pos:end="207:18"><literal type="number" pos:start="207:18" pos:end="207:18">2</literal></expr>]</index></name> <operator pos:start="207:21" pos:end="207:21">=</operator> <call pos:start="207:23" pos:end="215:43"><name pos:start="207:23" pos:end="207:28">select</name><argument_list pos:start="207:29" pos:end="215:43">(<argument pos:start="207:30" pos:end="207:35"><expr pos:start="207:30" pos:end="207:35"><name pos:start="207:30" pos:end="207:31">fd</name> <operator pos:start="207:33" pos:end="207:33">+</operator> <literal type="number" pos:start="207:35" pos:end="207:35">1</literal></expr></argument>,

                    <argument pos:start="209:21" pos:end="209:59"><expr pos:start="209:21" pos:end="209:59"><ternary pos:start="209:21" pos:end="209:59"><condition pos:start="209:21" pos:end="209:45"><expr pos:start="209:21" pos:end="209:41"><name pos:start="209:21" pos:end="209:22">rq</name> <operator pos:start="209:24" pos:end="209:25">==</operator> <name pos:start="209:27" pos:end="209:41">SELECT_ONE_READ</name></expr>   ?</condition><then pos:start="209:47" pos:end="209:52"> <expr pos:start="209:47" pos:end="209:52"><operator pos:start="209:47" pos:end="209:47">&amp;</operator><name pos:start="209:48" pos:end="209:52">fdset</name></expr> </then><else pos:start="209:54" pos:end="209:59">: <expr pos:start="209:56" pos:end="209:59"><name pos:start="209:56" pos:end="209:59">NULL</name></expr></else></ternary></expr></argument>,

                    <argument pos:start="211:21" pos:end="211:59"><expr pos:start="211:21" pos:end="211:59"><ternary pos:start="211:21" pos:end="211:59"><condition pos:start="211:21" pos:end="211:45"><expr pos:start="211:21" pos:end="211:42"><name pos:start="211:21" pos:end="211:22">rq</name> <operator pos:start="211:24" pos:end="211:25">==</operator> <name pos:start="211:27" pos:end="211:42">SELECT_ONE_WRITE</name></expr>  ?</condition><then pos:start="211:47" pos:end="211:52"> <expr pos:start="211:47" pos:end="211:52"><operator pos:start="211:47" pos:end="211:47">&amp;</operator><name pos:start="211:48" pos:end="211:52">fdset</name></expr> </then><else pos:start="211:54" pos:end="211:59">: <expr pos:start="211:56" pos:end="211:59"><name pos:start="211:56" pos:end="211:59">NULL</name></expr></else></ternary></expr></argument>,

                    <argument pos:start="213:21" pos:end="213:59"><expr pos:start="213:21" pos:end="213:59"><ternary pos:start="213:21" pos:end="213:59"><condition pos:start="213:21" pos:end="213:45"><expr pos:start="213:21" pos:end="213:43"><name pos:start="213:21" pos:end="213:22">rq</name> <operator pos:start="213:24" pos:end="213:25">==</operator> <name pos:start="213:27" pos:end="213:43">SELECT_ONE_EXCEPT</name></expr> ?</condition><then pos:start="213:47" pos:end="213:52"> <expr pos:start="213:47" pos:end="213:52"><operator pos:start="213:47" pos:end="213:47">&amp;</operator><name pos:start="213:48" pos:end="213:52">fdset</name></expr> </then><else pos:start="213:54" pos:end="213:59">: <expr pos:start="213:56" pos:end="213:59"><name pos:start="213:56" pos:end="213:59">NULL</name></expr></else></ternary></expr></argument>,

                    <argument pos:start="215:21" pos:end="215:42"><expr pos:start="215:21" pos:end="215:42"><ternary pos:start="215:21" pos:end="215:42"><condition pos:start="215:21" pos:end="215:31"><expr pos:start="215:21" pos:end="215:29"><name pos:start="215:21" pos:end="215:29">target_tv</name></expr> ?</condition><then pos:start="215:33" pos:end="215:35"> <expr pos:start="215:33" pos:end="215:35"><operator pos:start="215:33" pos:end="215:33">&amp;</operator><name pos:start="215:34" pos:end="215:35">tv</name></expr> </then><else pos:start="215:37" pos:end="215:42">: <expr pos:start="215:39" pos:end="215:42"><name pos:start="215:39" pos:end="215:42">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:28"><expr pos:start="217:13" pos:end="217:27"><name pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:16">regs</name><index pos:start="217:17" pos:end="217:19">[<expr pos:start="217:18" pos:end="217:18"><literal type="number" pos:start="217:18" pos:end="217:18">3</literal></expr>]</index></name> <operator pos:start="217:21" pos:end="217:21">=</operator> <name pos:start="217:23" pos:end="217:27">errno</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="221:9" pos:end="221:14">break;</break>



    <case pos:start="225:5" pos:end="225:25">case <expr pos:start="225:10" pos:end="225:24"><name pos:start="225:10" pos:end="225:24">TARGET_SYS_argc</name></expr>:</case>

        <expr_stmt pos:start="227:9" pos:end="227:20"><expr pos:start="227:9" pos:end="227:19"><name pos:start="227:9" pos:end="227:15"><name pos:start="227:9" pos:end="227:12">regs</name><index pos:start="227:13" pos:end="227:15">[<expr pos:start="227:14" pos:end="227:14"><literal type="number" pos:start="227:14" pos:end="227:14">2</literal></expr>]</index></name> <operator pos:start="227:17" pos:end="227:17">=</operator> <literal type="number" pos:start="227:19" pos:end="227:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:20"><expr pos:start="229:9" pos:end="229:19"><name pos:start="229:9" pos:end="229:15"><name pos:start="229:9" pos:end="229:12">regs</name><index pos:start="229:13" pos:end="229:15">[<expr pos:start="229:14" pos:end="229:14"><literal type="number" pos:start="229:14" pos:end="229:14">3</literal></expr>]</index></name> <operator pos:start="229:17" pos:end="229:17">=</operator> <literal type="number" pos:start="229:19" pos:end="229:19">0</literal></expr>;</expr_stmt>

        <break pos:start="231:9" pos:end="231:14">break;</break>



    <case pos:start="235:5" pos:end="235:28">case <expr pos:start="235:10" pos:end="235:27"><name pos:start="235:10" pos:end="235:27">TARGET_SYS_argv_sz</name></expr>:</case>

        <expr_stmt pos:start="237:9" pos:end="237:22"><expr pos:start="237:9" pos:end="237:21"><name pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:12">regs</name><index pos:start="237:13" pos:end="237:15">[<expr pos:start="237:14" pos:end="237:14"><literal type="number" pos:start="237:14" pos:end="237:14">2</literal></expr>]</index></name> <operator pos:start="237:17" pos:end="237:17">=</operator> <literal type="number" pos:start="237:19" pos:end="237:21">128</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:20"><expr pos:start="239:9" pos:end="239:19"><name pos:start="239:9" pos:end="239:15"><name pos:start="239:9" pos:end="239:12">regs</name><index pos:start="239:13" pos:end="239:15">[<expr pos:start="239:14" pos:end="239:14"><literal type="number" pos:start="239:14" pos:end="239:14">3</literal></expr>]</index></name> <operator pos:start="239:17" pos:end="239:17">=</operator> <literal type="number" pos:start="239:19" pos:end="239:19">0</literal></expr>;</expr_stmt>

        <break pos:start="241:9" pos:end="241:14">break;</break>



    <case pos:start="245:5" pos:end="245:25">case <expr pos:start="245:10" pos:end="245:24"><name pos:start="245:10" pos:end="245:24">TARGET_SYS_argv</name></expr>:</case>

        <block pos:start="247:9" pos:end="271:9">{<block_content pos:start="249:13" pos:end="269:69">

            <struct pos:start="249:13" pos:end="261:14">struct <name pos:start="249:20" pos:end="249:23">Argv</name> <block pos:start="249:25" pos:end="255:13">{

                <decl_stmt pos:start="251:17" pos:end="251:35"><decl pos:start="251:17" pos:end="251:34"><type pos:start="251:17" pos:end="251:24"><name pos:start="251:17" pos:end="251:24">uint32_t</name></type> <name pos:start="251:26" pos:end="251:34"><name pos:start="251:26" pos:end="251:31">argptr</name><index pos:start="251:32" pos:end="251:34">[<expr pos:start="251:33" pos:end="251:33"><literal type="number" pos:start="251:33" pos:end="251:33">2</literal></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="253:17" pos:end="253:31"><decl pos:start="253:17" pos:end="253:30"><type pos:start="253:17" pos:end="253:20"><name pos:start="253:17" pos:end="253:20">char</name></type> <name pos:start="253:22" pos:end="253:30"><name pos:start="253:22" pos:end="253:25">text</name><index pos:start="253:26" pos:end="253:30">[<expr pos:start="253:27" pos:end="253:29"><literal type="number" pos:start="253:27" pos:end="253:29">120</literal></expr>]</index></name></decl>;</decl_stmt>

            }</block> <decl pos:start="255:15" pos:end="261:13"><name pos:start="255:15" pos:end="255:18">argv</name> <init pos:start="255:20" pos:end="261:13">= <expr pos:start="255:22" pos:end="261:13"><block pos:start="255:22" pos:end="261:13">{

                <expr pos:start="257:17" pos:end="257:22"><block pos:start="257:17" pos:end="257:22">{<expr pos:start="257:18" pos:end="257:18"><literal type="number" pos:start="257:18" pos:end="257:18">0</literal></expr>, <expr pos:start="257:21" pos:end="257:21"><literal type="number" pos:start="257:21" pos:end="257:21">0</literal></expr>}</block></expr>,

                <expr pos:start="259:17" pos:end="259:22"><literal type="string" pos:start="259:17" pos:end="259:22">"test"</literal></expr>

            }</block></expr></init></decl>;</struct>



            <expr_stmt pos:start="265:13" pos:end="265:76"><expr pos:start="265:13" pos:end="265:75"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:16">argv</name><operator pos:start="265:17" pos:end="265:17">.</operator><name pos:start="265:18" pos:end="265:23">argptr</name><index pos:start="265:24" pos:end="265:26">[<expr pos:start="265:25" pos:end="265:25"><literal type="number" pos:start="265:25" pos:end="265:25">0</literal></expr>]</index></name> <operator pos:start="265:28" pos:end="265:28">=</operator> <call pos:start="265:30" pos:end="265:75"><name pos:start="265:30" pos:end="265:36">tswap32</name><argument_list pos:start="265:37" pos:end="265:75">(<argument pos:start="265:38" pos:end="265:74"><expr pos:start="265:38" pos:end="265:74"><name pos:start="265:38" pos:end="265:44"><name pos:start="265:38" pos:end="265:41">regs</name><index pos:start="265:42" pos:end="265:44">[<expr pos:start="265:43" pos:end="265:43"><literal type="number" pos:start="265:43" pos:end="265:43">3</literal></expr>]</index></name> <operator pos:start="265:46" pos:end="265:46">+</operator> <call pos:start="265:48" pos:end="265:74"><name pos:start="265:48" pos:end="265:55">offsetof</name><argument_list pos:start="265:56" pos:end="265:74">(<argument pos:start="265:57" pos:end="265:67"><expr pos:start="265:57" pos:end="265:67">struct <name pos:start="265:64" pos:end="265:67">Argv</name></expr></argument>, <argument pos:start="265:70" pos:end="265:73"><expr pos:start="265:70" pos:end="265:73"><name pos:start="265:70" pos:end="265:73">text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="269:69"><expr pos:start="267:13" pos:end="269:68"><call pos:start="267:13" pos:end="269:68"><name pos:start="267:13" pos:end="267:31">cpu_memory_rw_debug</name><argument_list pos:start="267:32" pos:end="269:68">(

                    <argument pos:start="269:21" pos:end="269:23"><expr pos:start="269:21" pos:end="269:23"><name pos:start="269:21" pos:end="269:23">env</name></expr></argument>, <argument pos:start="269:26" pos:end="269:32"><expr pos:start="269:26" pos:end="269:32"><name pos:start="269:26" pos:end="269:32"><name pos:start="269:26" pos:end="269:29">regs</name><index pos:start="269:30" pos:end="269:32">[<expr pos:start="269:31" pos:end="269:31"><literal type="number" pos:start="269:31" pos:end="269:31">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="269:35" pos:end="269:50"><expr pos:start="269:35" pos:end="269:50"><operator pos:start="269:35" pos:end="269:35">(</operator><name pos:start="269:36" pos:end="269:42">uint8_t</name> <operator pos:start="269:44" pos:end="269:44">*</operator><operator pos:start="269:45" pos:end="269:45">)</operator><operator pos:start="269:46" pos:end="269:46">&amp;</operator><name pos:start="269:47" pos:end="269:50">argv</name></expr></argument>, <argument pos:start="269:53" pos:end="269:64"><expr pos:start="269:53" pos:end="269:64"><sizeof pos:start="269:53" pos:end="269:64">sizeof<argument_list pos:start="269:59" pos:end="269:64">(<argument pos:start="269:60" pos:end="269:63"><expr pos:start="269:60" pos:end="269:63"><name pos:start="269:60" pos:end="269:63">argv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="269:67" pos:end="269:67"><expr pos:start="269:67" pos:end="269:67"><literal type="number" pos:start="269:67" pos:end="269:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="273:9" pos:end="273:14">break;</break>



    <case pos:start="277:5" pos:end="277:27">case <expr pos:start="277:10" pos:end="277:26"><name pos:start="277:10" pos:end="277:26">TARGET_SYS_memset</name></expr>:</case>

        <block pos:start="279:9" pos:end="317:9">{<block_content pos:start="281:13" pos:end="315:24">

            <decl_stmt pos:start="281:13" pos:end="281:36"><decl pos:start="281:13" pos:end="281:35"><type pos:start="281:13" pos:end="281:20"><name pos:start="281:13" pos:end="281:20">uint32_t</name></type> <name pos:start="281:22" pos:end="281:25">base</name> <init pos:start="281:27" pos:end="281:35">= <expr pos:start="281:29" pos:end="281:35"><name pos:start="281:29" pos:end="281:35"><name pos:start="281:29" pos:end="281:32">regs</name><index pos:start="281:33" pos:end="281:35">[<expr pos:start="281:34" pos:end="281:34"><literal type="number" pos:start="281:34" pos:end="281:34">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="283:13" pos:end="283:34"><decl pos:start="283:13" pos:end="283:33"><type pos:start="283:13" pos:end="283:20"><name pos:start="283:13" pos:end="283:20">uint32_t</name></type> <name pos:start="283:22" pos:end="283:23">sz</name> <init pos:start="283:25" pos:end="283:33">= <expr pos:start="283:27" pos:end="283:33"><name pos:start="283:27" pos:end="283:33"><name pos:start="283:27" pos:end="283:30">regs</name><index pos:start="283:31" pos:end="283:33">[<expr pos:start="283:32" pos:end="283:32"><literal type="number" pos:start="283:32" pos:end="283:32">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <while pos:start="287:13" pos:end="311:13">while <condition pos:start="287:19" pos:end="287:22">(<expr pos:start="287:20" pos:end="287:21"><name pos:start="287:20" pos:end="287:21">sz</name></expr>)</condition> <block pos:start="287:24" pos:end="311:13">{<block_content pos:start="289:17" pos:end="309:26">

                <decl_stmt pos:start="289:17" pos:end="289:44"><decl pos:start="289:17" pos:end="289:43"><type pos:start="289:17" pos:end="289:34"><name pos:start="289:17" pos:end="289:34">target_phys_addr_t</name></type> <name pos:start="289:36" pos:end="289:38">len</name> <init pos:start="289:40" pos:end="289:43">= <expr pos:start="289:42" pos:end="289:43"><name pos:start="289:42" pos:end="289:43">sz</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="291:17" pos:end="291:67"><decl pos:start="291:17" pos:end="291:66"><type pos:start="291:17" pos:end="291:22"><name pos:start="291:17" pos:end="291:20">void</name> <modifier pos:start="291:22" pos:end="291:22">*</modifier></type><name pos:start="291:23" pos:end="291:25">buf</name> <init pos:start="291:27" pos:end="291:66">= <expr pos:start="291:29" pos:end="291:66"><call pos:start="291:29" pos:end="291:66"><name pos:start="291:29" pos:end="291:51">cpu_physical_memory_map</name><argument_list pos:start="291:52" pos:end="291:66">(<argument pos:start="291:53" pos:end="291:56"><expr pos:start="291:53" pos:end="291:56"><name pos:start="291:53" pos:end="291:56">base</name></expr></argument>, <argument pos:start="291:59" pos:end="291:62"><expr pos:start="291:59" pos:end="291:62"><operator pos:start="291:59" pos:end="291:59">&amp;</operator><name pos:start="291:60" pos:end="291:62">len</name></expr></argument>, <argument pos:start="291:65" pos:end="291:65"><expr pos:start="291:65" pos:end="291:65"><literal type="number" pos:start="291:65" pos:end="291:65">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="295:17" pos:end="305:17"><if pos:start="295:17" pos:end="301:17">if <condition pos:start="295:20" pos:end="295:31">(<expr pos:start="295:21" pos:end="295:30"><name pos:start="295:21" pos:end="295:23">buf</name> <operator pos:start="295:25" pos:end="295:26">&amp;&amp;</operator> <name pos:start="295:28" pos:end="295:30">len</name></expr>)</condition> <block pos:start="295:33" pos:end="301:17">{<block_content pos:start="297:21" pos:end="299:64">

                    <expr_stmt pos:start="297:21" pos:end="297:46"><expr pos:start="297:21" pos:end="297:45"><call pos:start="297:21" pos:end="297:45"><name pos:start="297:21" pos:end="297:26">memset</name><argument_list pos:start="297:27" pos:end="297:45">(<argument pos:start="297:28" pos:end="297:30"><expr pos:start="297:28" pos:end="297:30"><name pos:start="297:28" pos:end="297:30">buf</name></expr></argument>, <argument pos:start="297:33" pos:end="297:39"><expr pos:start="297:33" pos:end="297:39"><name pos:start="297:33" pos:end="297:39"><name pos:start="297:33" pos:end="297:36">regs</name><index pos:start="297:37" pos:end="297:39">[<expr pos:start="297:38" pos:end="297:38"><literal type="number" pos:start="297:38" pos:end="297:38">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="297:42" pos:end="297:44"><expr pos:start="297:42" pos:end="297:44"><name pos:start="297:42" pos:end="297:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:64"><expr pos:start="299:21" pos:end="299:63"><call pos:start="299:21" pos:end="299:63"><name pos:start="299:21" pos:end="299:45">cpu_physical_memory_unmap</name><argument_list pos:start="299:46" pos:end="299:63">(<argument pos:start="299:47" pos:end="299:49"><expr pos:start="299:47" pos:end="299:49"><name pos:start="299:47" pos:end="299:49">buf</name></expr></argument>, <argument pos:start="299:52" pos:end="299:54"><expr pos:start="299:52" pos:end="299:54"><name pos:start="299:52" pos:end="299:54">len</name></expr></argument>, <argument pos:start="299:57" pos:end="299:57"><expr pos:start="299:57" pos:end="299:57"><literal type="number" pos:start="299:57" pos:end="299:57">1</literal></expr></argument>, <argument pos:start="299:60" pos:end="299:62"><expr pos:start="299:60" pos:end="299:62"><name pos:start="299:60" pos:end="299:62">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="301:19" pos:end="305:17">else <block pos:start="301:24" pos:end="305:17">{<block_content pos:start="303:21" pos:end="303:28">

                    <expr_stmt pos:start="303:21" pos:end="303:28"><expr pos:start="303:21" pos:end="303:27"><name pos:start="303:21" pos:end="303:23">len</name> <operator pos:start="303:25" pos:end="303:25">=</operator> <literal type="number" pos:start="303:27" pos:end="303:27">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:28"><expr pos:start="307:17" pos:end="307:27"><name pos:start="307:17" pos:end="307:20">base</name> <operator pos:start="307:22" pos:end="307:23">+=</operator> <name pos:start="307:25" pos:end="307:27">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="309:17" pos:end="309:26"><expr pos:start="309:17" pos:end="309:25"><name pos:start="309:17" pos:end="309:18">sz</name> <operator pos:start="309:20" pos:end="309:21">-=</operator> <name pos:start="309:23" pos:end="309:25">len</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="313:13" pos:end="313:30"><expr pos:start="313:13" pos:end="313:29"><name pos:start="313:13" pos:end="313:19"><name pos:start="313:13" pos:end="313:16">regs</name><index pos:start="313:17" pos:end="313:19">[<expr pos:start="313:18" pos:end="313:18"><literal type="number" pos:start="313:18" pos:end="313:18">2</literal></expr>]</index></name> <operator pos:start="313:21" pos:end="313:21">=</operator> <name pos:start="313:23" pos:end="313:29"><name pos:start="313:23" pos:end="313:26">regs</name><index pos:start="313:27" pos:end="313:29">[<expr pos:start="313:28" pos:end="313:28"><literal type="number" pos:start="313:28" pos:end="313:28">3</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:24"><expr pos:start="315:13" pos:end="315:23"><name pos:start="315:13" pos:end="315:19"><name pos:start="315:13" pos:end="315:16">regs</name><index pos:start="315:17" pos:end="315:19">[<expr pos:start="315:18" pos:end="315:18"><literal type="number" pos:start="315:18" pos:end="315:18">3</literal></expr>]</index></name> <operator pos:start="315:21" pos:end="315:21">=</operator> <literal type="number" pos:start="315:23" pos:end="315:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="319:9" pos:end="319:14">break;</break>



    <default pos:start="323:5" pos:end="323:12">default:</default>

        <expr_stmt pos:start="325:9" pos:end="325:65"><expr pos:start="325:9" pos:end="325:64"><call pos:start="325:9" pos:end="325:64"><name pos:start="325:9" pos:end="325:16">qemu_log</name><argument_list pos:start="325:17" pos:end="325:64">(<argument pos:start="325:18" pos:end="325:44"><expr pos:start="325:18" pos:end="325:44"><literal type="string" pos:start="325:18" pos:end="325:44">"%s(%d): not implemented\n"</literal></expr></argument>, <argument pos:start="325:47" pos:end="325:54"><expr pos:start="325:47" pos:end="325:54"><name pos:start="325:47" pos:end="325:54">__func__</name></expr></argument>, <argument pos:start="325:57" pos:end="325:63"><expr pos:start="325:57" pos:end="325:63"><name pos:start="325:57" pos:end="325:63"><name pos:start="325:57" pos:end="325:60">regs</name><index pos:start="325:61" pos:end="325:63">[<expr pos:start="325:62" pos:end="325:62"><literal type="number" pos:start="325:62" pos:end="325:62">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="329:9" pos:end="329:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function></unit>
