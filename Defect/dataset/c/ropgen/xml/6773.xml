<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6773.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">ffio_rewind_with_probe_data</name><parameter_list pos:start="1:32" pos:end="1:81">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:43">AVIOContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:56">unsigned</name> <name pos:start="1:58" pos:end="1:61">char</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">buf</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:80"><decl pos:start="1:69" pos:end="1:80"><type pos:start="1:69" pos:end="1:80"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:80">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:24">buffer_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">buffer_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">overlap</name></decl>, <decl pos:start="9:18" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:25">new_size</name></decl>, <decl pos:start="9:28" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:37">alloc_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:31"><if pos:start="13:5" pos:end="15:31">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:21">write_flag</name></name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:31"><block_content pos:start="15:9" pos:end="15:31">

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:15">buffer_size</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:28"><name pos:start="19:19" pos:end="19:19">s</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:28">buf_end</name></name> <operator pos:start="19:30" pos:end="19:30">-</operator> <name pos:start="19:32" pos:end="19:40"><name pos:start="19:32" pos:end="19:32">s</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:40">buffer</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:43">/* the buffers must touch or overlap */</comment>

    <if_stmt pos:start="25:5" pos:end="27:31"><if pos:start="25:5" pos:end="27:31">if <condition pos:start="25:8" pos:end="25:57">(<expr pos:start="25:9" pos:end="25:56"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:21">buffer_start</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:30"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:30">pos</name></name> <operator pos:start="25:32" pos:end="25:32">-</operator> <name pos:start="25:34" pos:end="25:44">buffer_size</name><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:47">&gt;</operator> <name pos:start="25:49" pos:end="25:56">buf_size</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:31"><block_content pos:start="27:9" pos:end="27:31">

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:11">overlap</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:22">buf_size</name> <operator pos:start="31:24" pos:end="31:24">-</operator> <name pos:start="31:26" pos:end="31:37">buffer_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:12">new_size</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:23">buf_size</name> <operator pos:start="33:25" pos:end="33:25">+</operator> <name pos:start="33:27" pos:end="33:37">buffer_size</name> <operator pos:start="33:39" pos:end="33:39">-</operator> <name pos:start="33:41" pos:end="33:47">overlap</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:49"><expr pos:start="37:5" pos:end="37:48"><name pos:start="37:5" pos:end="37:14">alloc_size</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:48"><name pos:start="37:18" pos:end="37:22">FFMAX</name><argument_list pos:start="37:23" pos:end="37:48">(<argument pos:start="37:24" pos:end="37:37"><expr pos:start="37:24" pos:end="37:37"><name pos:start="37:24" pos:end="37:37"><name pos:start="37:24" pos:end="37:24">s</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:37">buffer_size</name></name></expr></argument>, <argument pos:start="37:40" pos:end="37:47"><expr pos:start="37:40" pos:end="37:47"><name pos:start="37:40" pos:end="37:47">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:35"><if pos:start="39:5" pos:end="43:35">if <condition pos:start="39:8" pos:end="39:30">(<expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:18">alloc_size</name> <operator pos:start="39:20" pos:end="39:20">&gt;</operator> <name pos:start="39:22" pos:end="39:29">buf_size</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="43:35"><block_content pos:start="41:9" pos:end="43:35">

        <if_stmt pos:start="41:9" pos:end="43:35"><if pos:start="41:9" pos:end="43:35">if <condition pos:start="41:12" pos:end="41:54">(<expr pos:start="41:13" pos:end="41:53"><operator pos:start="41:13" pos:end="41:13">!</operator><operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:17">buf</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:52"><name pos:start="41:21" pos:end="41:32">av_realloc_f</name><argument_list pos:start="41:33" pos:end="41:52">(<argument pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:36">buf</name></expr></argument>, <argument pos:start="41:39" pos:end="41:39"><expr pos:start="41:39" pos:end="41:39"><literal type="number" pos:start="41:39" pos:end="41:39">1</literal></expr></argument>, <argument pos:start="41:42" pos:end="41:51"><expr pos:start="41:42" pos:end="41:51"><name pos:start="41:42" pos:end="41:51">alloc_size</name></expr></argument>)</argument_list></call><operator pos:start="41:53" pos:end="41:53">)</operator></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:35"><block_content pos:start="43:13" pos:end="43:35">

            <return pos:start="43:13" pos:end="43:35">return <expr pos:start="43:20" pos:end="43:34"><call pos:start="43:20" pos:end="43:34"><name pos:start="43:20" pos:end="43:26">AVERROR</name><argument_list pos:start="43:27" pos:end="43:34">(<argument pos:start="43:28" pos:end="43:33"><expr pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:28">(<expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:16">new_size</name> <operator pos:start="47:18" pos:end="47:18">&gt;</operator> <name pos:start="47:20" pos:end="47:27">buf_size</name></expr>)</condition> <block pos:start="47:30" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:28">

        <expr_stmt pos:start="49:9" pos:end="49:75"><expr pos:start="49:9" pos:end="49:74"><call pos:start="49:9" pos:end="49:74"><name pos:start="49:9" pos:end="49:14">memcpy</name><argument_list pos:start="49:15" pos:end="49:74">(<argument pos:start="49:16" pos:end="49:29"><expr pos:start="49:16" pos:end="49:29"><name pos:start="49:16" pos:end="49:18">buf</name> <operator pos:start="49:20" pos:end="49:20">+</operator> <name pos:start="49:22" pos:end="49:29">buf_size</name></expr></argument>, <argument pos:start="49:32" pos:end="49:50"><expr pos:start="49:32" pos:end="49:50"><name pos:start="49:32" pos:end="49:40"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:40">buffer</name></name> <operator pos:start="49:42" pos:end="49:42">+</operator> <name pos:start="49:44" pos:end="49:50">overlap</name></expr></argument>, <argument pos:start="49:53" pos:end="49:73"><expr pos:start="49:53" pos:end="49:73"><name pos:start="49:53" pos:end="49:63">buffer_size</name> <operator pos:start="49:65" pos:end="49:65">-</operator> <name pos:start="49:67" pos:end="49:73">overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:16">buf_size</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:27">new_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><call pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:11">av_free</name><argument_list pos:start="57:12" pos:end="57:22">(<argument pos:start="57:13" pos:end="57:21"><expr pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:14">buf_ptr</name></name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:26"><name pos:start="59:18" pos:end="59:18">s</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:26">buffer</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:32">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:18">buffer_size</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:31">alloc_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:22"><expr pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:10">pos</name></name> <operator pos:start="63:12" pos:end="63:12">=</operator> <name pos:start="63:14" pos:end="63:21">buf_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:14"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:14">buf_end</name></name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:27"><name pos:start="65:18" pos:end="65:18">s</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:27">buf_ptr</name></name> <operator pos:start="65:29" pos:end="65:29">+</operator> <name pos:start="65:31" pos:end="65:38">buf_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:23"><expr pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:18">eof_reached</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:22"><expr pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:17"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:17">must_flush</name></name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="number" pos:start="69:21" pos:end="69:21">0</literal></expr>;</expr_stmt>



    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><literal type="number" pos:start="73:12" pos:end="73:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
