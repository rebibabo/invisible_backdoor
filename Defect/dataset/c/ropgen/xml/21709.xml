<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21709.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">mov_read_smi</name><parameter_list pos:start="1:24" pos:end="1:69">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">MOVContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">c</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:54"><decl pos:start="1:40" pos:end="1:54"><type pos:start="1:40" pos:end="1:54"><name pos:start="1:40" pos:end="1:50">AVIOContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">pb</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">MOVAtom</name></type> <name pos:start="1:65" pos:end="1:68">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:17"><if pos:start="9:5" pos:end="11:17">if <condition pos:start="9:8" pos:end="9:30">(<expr pos:start="9:9" pos:end="9:29"><name pos:start="9:9" pos:end="9:25"><name pos:start="9:9" pos:end="9:9">c</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:13">fc</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:25">nb_streams</name></name> <operator pos:start="9:27" pos:end="9:27">&lt;</operator> <literal type="number" pos:start="9:29" pos:end="9:29">1</literal></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:17"><block_content pos:start="11:9" pos:end="11:17">

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:6">st</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <name pos:start="13:10" pos:end="13:44"><name pos:start="13:10" pos:end="13:10">c</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:14">fc</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:23">streams</name><index pos:start="13:24" pos:end="13:44">[<expr pos:start="13:25" pos:end="13:43"><name pos:start="13:25" pos:end="13:41"><name pos:start="13:25" pos:end="13:25">c</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">fc</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:41">nb_streams</name></name><operator pos:start="13:42" pos:end="13:42">-</operator><literal type="number" pos:start="13:43" pos:end="13:43">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="19:35"><if pos:start="17:5" pos:end="19:35">if <condition pos:start="17:8" pos:end="17:38">(<expr pos:start="17:9" pos:end="17:37"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:17">uint64_t</name><operator pos:start="17:18" pos:end="17:18">)</operator><name pos:start="17:19" pos:end="17:27"><name pos:start="17:19" pos:end="17:22">atom</name><operator pos:start="17:23" pos:end="17:23">.</operator><name pos:start="17:24" pos:end="17:27">size</name></name> <operator pos:start="17:29" pos:end="17:29">&gt;</operator> <operator pos:start="17:31" pos:end="17:31">(</operator><literal type="number" pos:start="17:32" pos:end="17:32">1</literal><operator pos:start="17:33" pos:end="17:34">&lt;&lt;</operator><literal type="number" pos:start="17:35" pos:end="17:36">30</literal><operator pos:start="17:37" pos:end="17:37">)</operator></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:35"><block_content pos:start="19:9" pos:end="19:35">

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="23:5" pos:end="23:72">// currently SVQ3 decoder expect full STSD header - so let's fake it</comment>

    <comment type="line" pos:start="25:5" pos:end="25:64">// this should be fixed and just SMI header should be passed</comment>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><call pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:11">av_free</name><argument_list pos:start="27:12" pos:end="27:33">(<argument pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:14">st</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:21">codec</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:32">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:87"><expr pos:start="29:5" pos:end="29:86"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:6">st</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:13">codec</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:24">extradata</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <call pos:start="29:28" pos:end="29:86"><name pos:start="29:28" pos:end="29:37">av_mallocz</name><argument_list pos:start="29:38" pos:end="29:86">(<argument pos:start="29:39" pos:end="29:85"><expr pos:start="29:39" pos:end="29:85"><name pos:start="29:39" pos:end="29:47"><name pos:start="29:39" pos:end="29:42">atom</name><operator pos:start="29:43" pos:end="29:43">.</operator><name pos:start="29:44" pos:end="29:47">size</name></name> <operator pos:start="29:49" pos:end="29:49">+</operator> <literal type="number" pos:start="29:51" pos:end="29:56">0x5a</literal> <operator pos:start="29:56" pos:end="29:56">+</operator> <name pos:start="29:58" pos:end="29:85">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:31"><if pos:start="31:5" pos:end="33:31">if <condition pos:start="31:8" pos:end="31:30">(<expr pos:start="31:9" pos:end="31:29"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:29"><name pos:start="31:10" pos:end="31:11">st</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:18">codec</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:29">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:31"><block_content pos:start="33:9" pos:end="33:31">

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:49"><expr pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:6">st</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:13">codec</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:29">extradata_size</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <literal type="number" pos:start="35:33" pos:end="35:38">0x5a</literal> <operator pos:start="35:38" pos:end="35:38">+</operator> <name pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:43">atom</name><operator pos:start="35:44" pos:end="35:44">.</operator><name pos:start="35:45" pos:end="35:48">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><call pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:10">memcpy</name><argument_list pos:start="37:11" pos:end="37:43">(<argument pos:start="37:12" pos:end="37:31"><expr pos:start="37:12" pos:end="37:31"><name pos:start="37:12" pos:end="37:31"><name pos:start="37:12" pos:end="37:13">st</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">codec</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:31">extradata</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:39"><expr pos:start="37:34" pos:end="37:39"><literal type="string" pos:start="37:34" pos:end="37:39">"SVQ3"</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:42"><expr pos:start="37:42" pos:end="37:42"><literal type="number" pos:start="37:42" pos:end="37:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="37:46" pos:end="37:52">// fake</comment>

    <expr_stmt pos:start="39:5" pos:end="39:58"><expr pos:start="39:5" pos:end="39:57"><call pos:start="39:5" pos:end="39:57"><name pos:start="39:5" pos:end="39:13">avio_read</name><argument_list pos:start="39:14" pos:end="39:57">(<argument pos:start="39:15" pos:end="39:16"><expr pos:start="39:15" pos:end="39:16"><name pos:start="39:15" pos:end="39:16">pb</name></expr></argument>, <argument pos:start="39:19" pos:end="39:45"><expr pos:start="39:19" pos:end="39:45"><name pos:start="39:19" pos:end="39:38"><name pos:start="39:19" pos:end="39:20">st</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:27">codec</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:38">extradata</name></name> <operator pos:start="39:40" pos:end="39:40">+</operator> <literal type="number" pos:start="39:42" pos:end="39:45">0x5a</literal></expr></argument>, <argument pos:start="39:48" pos:end="39:56"><expr pos:start="39:48" pos:end="39:56"><name pos:start="39:48" pos:end="39:56"><name pos:start="39:48" pos:end="39:51">atom</name><operator pos:start="39:52" pos:end="39:52">.</operator><name pos:start="39:53" pos:end="39:56">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:103"><expr pos:start="41:5" pos:end="41:102"><call pos:start="41:5" pos:end="41:102"><name pos:start="41:5" pos:end="41:10">av_log</name><argument_list pos:start="41:11" pos:end="41:102">(<argument pos:start="41:12" pos:end="41:16"><expr pos:start="41:12" pos:end="41:16"><name pos:start="41:12" pos:end="41:16"><name pos:start="41:12" pos:end="41:12">c</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:16">fc</name></name></expr></argument>, <argument pos:start="41:19" pos:end="41:30"><expr pos:start="41:19" pos:end="41:30"><name pos:start="41:19" pos:end="41:30">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="41:33" pos:end="41:61"><expr pos:start="41:33" pos:end="41:61"><literal type="string" pos:start="41:33" pos:end="41:47">"Reading SMI %"</literal><name pos:start="41:48" pos:end="41:53">PRId64</name><literal type="string" pos:start="41:54" pos:end="41:61">"  %s\n"</literal></expr></argument>, <argument pos:start="41:64" pos:end="41:72"><expr pos:start="41:64" pos:end="41:72"><name pos:start="41:64" pos:end="41:72"><name pos:start="41:64" pos:end="41:67">atom</name><operator pos:start="41:68" pos:end="41:68">.</operator><name pos:start="41:69" pos:end="41:72">size</name></name></expr></argument>, <argument pos:start="41:75" pos:end="41:101"><expr pos:start="41:75" pos:end="41:101"><name pos:start="41:75" pos:end="41:94"><name pos:start="41:75" pos:end="41:76">st</name><operator pos:start="41:77" pos:end="41:78">-&gt;</operator><name pos:start="41:79" pos:end="41:83">codec</name><operator pos:start="41:84" pos:end="41:85">-&gt;</operator><name pos:start="41:86" pos:end="41:94">extradata</name></name> <operator pos:start="41:96" pos:end="41:96">+</operator> <literal type="number" pos:start="41:98" pos:end="41:101">0x5a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="43:5" pos:end="43:13">return <expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
