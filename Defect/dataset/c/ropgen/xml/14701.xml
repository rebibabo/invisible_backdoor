<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14701.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">decode_scaling_list</name><parameter_list pos:start="1:32" pos:end="5:61">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:45">GetBitContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">gb</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:67"><decl pos:start="1:52" pos:end="1:67"><type pos:start="1:52" pos:end="1:67"><name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:67">factors</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:77"><decl pos:start="1:70" pos:end="1:77"><type pos:start="1:70" pos:end="1:77"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:77">size</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:55"><decl pos:start="3:33" pos:end="3:55"><type pos:start="3:33" pos:end="3:55"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:45">uint8_t</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:55">jvt_list</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:60"><decl pos:start="5:33" pos:end="5:60"><type pos:start="5:33" pos:end="5:60"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:60">fallback_list</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="37:1">{<block_content pos:start="9:5" pos:end="35:9">

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:15">last</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">8</literal></expr></init></decl>, <decl pos:start="9:22" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:25">next</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:73"><decl pos:start="11:5" pos:end="11:72"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">scan</name> <init pos:start="11:25" pos:end="11:72">= <expr pos:start="11:27" pos:end="11:72"><ternary pos:start="11:27" pos:end="11:72"><condition pos:start="11:27" pos:end="11:38"><expr pos:start="11:27" pos:end="11:36"><name pos:start="11:27" pos:end="11:30">size</name> <operator pos:start="11:32" pos:end="11:33">==</operator> <literal type="number" pos:start="11:35" pos:end="11:36">16</literal></expr> ?</condition><then pos:start="11:40" pos:end="11:53"> <expr pos:start="11:40" pos:end="11:53"><name pos:start="11:40" pos:end="11:53">ff_zigzag_scan</name></expr> </then><else pos:start="11:55" pos:end="11:72">: <expr pos:start="11:57" pos:end="11:72"><name pos:start="11:57" pos:end="11:72">ff_zigzag_direct</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="13:5" pos:end="35:9"><if pos:start="13:5" pos:end="15:63">if <condition pos:start="13:8" pos:end="13:23">(<expr pos:start="13:9" pos:end="13:22"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:22"><name pos:start="13:10" pos:end="13:18">get_bits1</name><argument_list pos:start="13:19" pos:end="13:22">(<argument pos:start="13:20" pos:end="13:21"><expr pos:start="13:20" pos:end="13:21"><name pos:start="13:20" pos:end="13:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:63"><block_content pos:start="15:9" pos:end="15:63"> <comment type="block" pos:start="13:25" pos:end="13:74">/* matrix not written, we use the predicted one */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:63"><expr pos:start="15:9" pos:end="15:62"><call pos:start="15:9" pos:end="15:62"><name pos:start="15:9" pos:end="15:14">memcpy</name><argument_list pos:start="15:15" pos:end="15:62">(<argument pos:start="15:16" pos:end="15:22"><expr pos:start="15:16" pos:end="15:22"><name pos:start="15:16" pos:end="15:22">factors</name></expr></argument>, <argument pos:start="15:25" pos:end="15:37"><expr pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:37">fallback_list</name></expr></argument>, <argument pos:start="15:40" pos:end="15:61"><expr pos:start="15:40" pos:end="15:61"><name pos:start="15:40" pos:end="15:43">size</name> <operator pos:start="15:45" pos:end="15:45">*</operator> <sizeof pos:start="15:47" pos:end="15:61">sizeof<argument_list pos:start="15:53" pos:end="15:61">(<argument pos:start="15:54" pos:end="15:60"><expr pos:start="15:54" pos:end="15:60"><name pos:start="15:54" pos:end="15:60">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="17:5" pos:end="35:9">else<block type="pseudo" pos:start="19:9" pos:end="35:9"><block_content pos:start="19:9" pos:end="35:9">

        <for pos:start="19:9" pos:end="35:9">for <control pos:start="19:13" pos:end="19:34">(<init pos:start="19:14" pos:end="19:19"><expr pos:start="19:14" pos:end="19:18"><name pos:start="19:14" pos:end="19:14">i</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</init> <condition pos:start="19:21" pos:end="19:29"><expr pos:start="19:21" pos:end="19:28"><name pos:start="19:21" pos:end="19:21">i</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <name pos:start="19:25" pos:end="19:28">size</name></expr>;</condition> <incr pos:start="19:31" pos:end="19:33"><expr pos:start="19:31" pos:end="19:33"><name pos:start="19:31" pos:end="19:31">i</name><operator pos:start="19:32" pos:end="19:33">++</operator></expr></incr>)</control> <block pos:start="19:36" pos:end="35:9">{<block_content pos:start="21:13" pos:end="33:57">

            <if_stmt pos:start="21:13" pos:end="23:57"><if pos:start="21:13" pos:end="23:57">if <condition pos:start="21:16" pos:end="21:21">(<expr pos:start="21:17" pos:end="21:20"><name pos:start="21:17" pos:end="21:20">next</name></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:57"><block_content pos:start="23:17" pos:end="23:57">

                <expr_stmt pos:start="23:17" pos:end="23:57"><expr pos:start="23:17" pos:end="23:56"><name pos:start="23:17" pos:end="23:20">next</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <operator pos:start="23:24" pos:end="23:24">(</operator><name pos:start="23:25" pos:end="23:28">last</name> <operator pos:start="23:30" pos:end="23:30">+</operator> <call pos:start="23:32" pos:end="23:48"><name pos:start="23:32" pos:end="23:44">get_se_golomb</name><argument_list pos:start="23:45" pos:end="23:48">(<argument pos:start="23:46" pos:end="23:47"><expr pos:start="23:46" pos:end="23:47"><name pos:start="23:46" pos:end="23:47">gb</name></expr></argument>)</argument_list></call><operator pos:start="23:49" pos:end="23:49">)</operator> <operator pos:start="23:51" pos:end="23:51">&amp;</operator> <literal type="number" pos:start="23:53" pos:end="23:56">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="25:13" pos:end="31:13"><if pos:start="25:13" pos:end="31:13">if <condition pos:start="25:16" pos:end="25:28">(<expr pos:start="25:17" pos:end="25:27"><operator pos:start="25:17" pos:end="25:17">!</operator><name pos:start="25:18" pos:end="25:18">i</name> <operator pos:start="25:20" pos:end="25:21">&amp;&amp;</operator> <operator pos:start="25:23" pos:end="25:23">!</operator><name pos:start="25:24" pos:end="25:27">next</name></expr>)</condition> <block pos:start="25:30" pos:end="31:13">{<block_content pos:start="27:17" pos:end="29:22"> <comment type="block" pos:start="25:32" pos:end="25:78">/* matrix not written, we use the preset one */</comment>

                <expr_stmt pos:start="27:17" pos:end="27:66"><expr pos:start="27:17" pos:end="27:65"><call pos:start="27:17" pos:end="27:65"><name pos:start="27:17" pos:end="27:22">memcpy</name><argument_list pos:start="27:23" pos:end="27:65">(<argument pos:start="27:24" pos:end="27:30"><expr pos:start="27:24" pos:end="27:30"><name pos:start="27:24" pos:end="27:30">factors</name></expr></argument>, <argument pos:start="27:33" pos:end="27:40"><expr pos:start="27:33" pos:end="27:40"><name pos:start="27:33" pos:end="27:40">jvt_list</name></expr></argument>, <argument pos:start="27:43" pos:end="27:64"><expr pos:start="27:43" pos:end="27:64"><name pos:start="27:43" pos:end="27:46">size</name> <operator pos:start="27:48" pos:end="27:48">*</operator> <sizeof pos:start="27:50" pos:end="27:64">sizeof<argument_list pos:start="27:56" pos:end="27:64">(<argument pos:start="27:57" pos:end="27:63"><expr pos:start="27:57" pos:end="27:63"><name pos:start="27:57" pos:end="27:63">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="29:17" pos:end="29:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:57"><expr pos:start="33:13" pos:end="33:56"><name pos:start="33:13" pos:end="33:16">last</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <name pos:start="33:20" pos:end="33:35"><name pos:start="33:20" pos:end="33:26">factors</name><index pos:start="33:27" pos:end="33:35">[<expr pos:start="33:28" pos:end="33:34"><name pos:start="33:28" pos:end="33:34"><name pos:start="33:28" pos:end="33:31">scan</name><index pos:start="33:32" pos:end="33:34">[<expr pos:start="33:33" pos:end="33:33"><name pos:start="33:33" pos:end="33:33">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="33:37" pos:end="33:37">=</operator> <ternary pos:start="33:39" pos:end="33:56"><condition pos:start="33:39" pos:end="33:44"><expr pos:start="33:39" pos:end="33:42"><name pos:start="33:39" pos:end="33:42">next</name></expr> ?</condition><then pos:start="33:46" pos:end="33:49"> <expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">next</name></expr> </then><else pos:start="33:51" pos:end="33:56">: <expr pos:start="33:53" pos:end="33:56"><name pos:start="33:53" pos:end="33:56">last</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
