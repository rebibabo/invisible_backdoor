<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23538.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">read_event_data</name><parameter_list pos:start="1:28" pos:end="1:62">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:45">SCLPEventFacility</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">ef</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">SCCB</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">sccb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:11">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:43">sclp_active_selection_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:37">sclp_cp_receive_mask</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:47"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">ReadEventData</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">red</name> <init pos:start="11:24" pos:end="11:47">= <expr pos:start="11:26" pos:end="11:47"><operator pos:start="11:26" pos:end="11:26">(</operator><name pos:start="11:27" pos:end="11:39">ReadEventData</name> <operator pos:start="11:41" pos:end="11:41">*</operator><operator pos:start="11:42" pos:end="11:42">)</operator> <name pos:start="11:44" pos:end="11:47">sccb</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:49">(<expr pos:start="15:9" pos:end="15:48"><call pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:19">be16_to_cpu</name><argument_list pos:start="15:20" pos:end="15:35">(<argument pos:start="15:21" pos:end="15:34"><expr pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:24">sccb</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:27">h</name><operator pos:start="15:28" pos:end="15:28">.</operator><name pos:start="15:29" pos:end="15:34">length</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:37" pos:end="15:38">!=</operator> <name pos:start="15:40" pos:end="15:48">SCCB_SIZE</name></expr>)</condition> <block pos:start="15:51" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:17">

        <expr_stmt pos:start="17:9" pos:end="17:78"><expr pos:start="17:9" pos:end="17:77"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:12">sccb</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:15">h</name><operator pos:start="17:16" pos:end="17:16">.</operator><name pos:start="17:17" pos:end="17:29">response_code</name></name> <operator pos:start="17:31" pos:end="17:31">=</operator> <call pos:start="17:33" pos:end="17:77"><name pos:start="17:33" pos:end="17:43">cpu_to_be16</name><argument_list pos:start="17:44" pos:end="17:77">(<argument pos:start="17:45" pos:end="17:76"><expr pos:start="17:45" pos:end="17:76"><name pos:start="17:45" pos:end="17:76">SCLP_RC_INSUFFICIENT_SCCB_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="19:9" pos:end="19:17">goto <name pos:start="19:14" pos:end="19:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:24">sclp_cp_receive_mask</name> <operator pos:start="25:26" pos:end="25:26">=</operator> <name pos:start="25:28" pos:end="25:43"><name pos:start="25:28" pos:end="25:29">ef</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:43">receive_mask</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:35">/* get active selection mask */</comment>

    <switch pos:start="31:5" pos:end="61:5">switch <condition pos:start="31:12" pos:end="31:34">(<expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:16">sccb</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:19">h</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:33">function_code</name></name></expr>)</condition> <block pos:start="31:36" pos:end="61:5">{<block_content pos:start="33:5" pos:end="59:17">

    <case pos:start="33:5" pos:end="33:33">case <expr pos:start="33:10" pos:end="33:32"><name pos:start="33:10" pos:end="33:32">SCLP_UNCONDITIONAL_READ</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:58"><expr pos:start="35:9" pos:end="35:57"><name pos:start="35:9" pos:end="35:34">sclp_active_selection_mask</name> <operator pos:start="35:36" pos:end="35:36">=</operator> <name pos:start="35:38" pos:end="35:57">sclp_cp_receive_mask</name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:29">case <expr pos:start="39:10" pos:end="39:28"><name pos:start="39:10" pos:end="39:28">SCLP_SELECTIVE_READ</name></expr>:</case>

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:61">(<expr pos:start="41:13" pos:end="41:60"><operator pos:start="41:13" pos:end="41:13">!</operator><operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:34">sclp_cp_receive_mask</name> <operator pos:start="41:36" pos:end="41:36">&amp;</operator> <call pos:start="41:38" pos:end="41:59"><name pos:start="41:38" pos:end="41:48">be32_to_cpu</name><argument_list pos:start="41:49" pos:end="41:59">(<argument pos:start="41:50" pos:end="41:58"><expr pos:start="41:50" pos:end="41:58"><name pos:start="41:50" pos:end="41:58"><name pos:start="41:50" pos:end="41:52">red</name><operator pos:start="41:53" pos:end="41:54">-&gt;</operator><name pos:start="41:55" pos:end="41:58">mask</name></name></expr></argument>)</argument_list></call><operator pos:start="41:60" pos:end="41:60">)</operator></expr>)</condition> <block pos:start="41:63" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:21">

            <expr_stmt pos:start="43:13" pos:end="45:64"><expr pos:start="43:13" pos:end="45:63"><name pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:16">sccb</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:19">h</name><operator pos:start="43:20" pos:end="43:20">.</operator><name pos:start="43:21" pos:end="43:33">response_code</name></name> <operator pos:start="43:35" pos:end="43:35">=</operator>

                    <call pos:start="45:21" pos:end="45:63"><name pos:start="45:21" pos:end="45:31">cpu_to_be16</name><argument_list pos:start="45:32" pos:end="45:63">(<argument pos:start="45:33" pos:end="45:62"><expr pos:start="45:33" pos:end="45:62"><name pos:start="45:33" pos:end="45:62">SCLP_RC_INVALID_SELECTION_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="47:13" pos:end="47:21">goto <name pos:start="47:18" pos:end="47:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:34">sclp_active_selection_mask</name> <operator pos:start="51:36" pos:end="51:36">=</operator> <call pos:start="51:38" pos:end="51:59"><name pos:start="51:38" pos:end="51:48">be32_to_cpu</name><argument_list pos:start="51:49" pos:end="51:59">(<argument pos:start="51:50" pos:end="51:58"><expr pos:start="51:50" pos:end="51:58"><name pos:start="51:50" pos:end="51:58"><name pos:start="51:50" pos:end="51:52">red</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:58">mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <default pos:start="55:5" pos:end="55:12">default:</default>

        <expr_stmt pos:start="57:9" pos:end="57:70"><expr pos:start="57:9" pos:end="57:69"><name pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:12">sccb</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:15">h</name><operator pos:start="57:16" pos:end="57:16">.</operator><name pos:start="57:17" pos:end="57:29">response_code</name></name> <operator pos:start="57:31" pos:end="57:31">=</operator> <call pos:start="57:33" pos:end="57:69"><name pos:start="57:33" pos:end="57:43">cpu_to_be16</name><argument_list pos:start="57:44" pos:end="57:69">(<argument pos:start="57:45" pos:end="57:68"><expr pos:start="57:45" pos:end="57:68"><name pos:start="57:45" pos:end="57:68">SCLP_RC_INVALID_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:17">goto <name pos:start="59:14" pos:end="59:16">out</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="63:5" pos:end="65:75"><expr pos:start="63:5" pos:end="65:74"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:8">sccb</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:11">h</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:25">response_code</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <call pos:start="63:29" pos:end="65:74"><name pos:start="63:29" pos:end="63:39">cpu_to_be16</name><argument_list pos:start="63:40" pos:end="65:74">(

            <argument pos:start="65:13" pos:end="65:73"><expr pos:start="65:13" pos:end="65:73"><call pos:start="65:13" pos:end="65:73"><name pos:start="65:13" pos:end="65:35">handle_sccb_read_events</name><argument_list pos:start="65:36" pos:end="65:73">(<argument pos:start="65:37" pos:end="65:38"><expr pos:start="65:37" pos:end="65:38"><name pos:start="65:37" pos:end="65:38">ef</name></expr></argument>, <argument pos:start="65:41" pos:end="65:44"><expr pos:start="65:41" pos:end="65:44"><name pos:start="65:41" pos:end="65:44">sccb</name></expr></argument>, <argument pos:start="65:47" pos:end="65:72"><expr pos:start="65:47" pos:end="65:72"><name pos:start="65:47" pos:end="65:72">sclp_active_selection_mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="69:1" pos:end="69:4"><name pos:start="69:1" pos:end="69:3">out</name>:</label>

    <return pos:start="71:5" pos:end="71:11">return;</return>

</block_content>}</block></function>
</unit>
