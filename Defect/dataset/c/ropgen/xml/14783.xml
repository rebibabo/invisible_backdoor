<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14783.c" pos:tabs="8"><macro pos:start="1:1" pos:end="11:37"><name pos:start="1:1" pos:end="1:23">qcrypto_block_luks_open</name><argument_list pos:start="1:24" pos:end="11:37">(<argument pos:start="1:25" pos:end="1:43">QCryptoBlock *block</argument>,

                        <argument pos:start="3:25" pos:end="3:56">QCryptoBlockOpenOptions *options</argument>,

                        <argument pos:start="5:25" pos:end="5:53">QCryptoBlockReadFunc readfunc</argument>,

                        <argument pos:start="7:25" pos:end="7:36">void *opaque</argument>,

                        <argument pos:start="9:25" pos:end="9:42">unsigned int flags</argument>,

                        <argument pos:start="11:25" pos:end="11:36">Error **errp</argument>)</argument_list></macro>

<block pos:start="13:1" pos:end="469:1">{<block_content pos:start="15:5" pos:end="467:15">

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">QCryptoBlockLUKS</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:26">luks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:20">local_err</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name> <init pos:start="19:13" pos:end="19:15">= <expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:15"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">ssize_t</name></type> <name pos:start="23:13" pos:end="23:14">rv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:22">masterkey</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:10">size_t</name></type> <name pos:start="27:12" pos:end="27:23">masterkeylen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:35"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">char</name> <modifier pos:start="29:10" pos:end="29:10">*</modifier></type><name pos:start="29:11" pos:end="29:20">ivgen_name</name></decl>, <decl pos:start="29:23" pos:end="29:34"><type ref="prev" pos:start="29:5" pos:end="29:10"><modifier pos:start="29:23" pos:end="29:23">*</modifier></type><name pos:start="29:24" pos:end="29:34">ivhash_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:33"><decl pos:start="31:5" pos:end="31:32"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:21">QCryptoCipherMode</name></type> <name pos:start="31:23" pos:end="31:32">ciphermode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:37"><decl pos:start="33:5" pos:end="33:36"><type pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:26">QCryptoCipherAlgorithm</name></type> <name pos:start="33:28" pos:end="33:36">cipheralg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:32"><decl pos:start="35:5" pos:end="35:31"><type pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:25">QCryptoIVGenAlgorithm</name></type> <name pos:start="35:27" pos:end="35:31">ivalg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:39"><decl pos:start="37:5" pos:end="37:38"><type pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:26">QCryptoCipherAlgorithm</name></type> <name pos:start="37:28" pos:end="37:38">ivcipheralg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:30"><decl pos:start="39:5" pos:end="39:29"><type pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:24">QCryptoHashAlgorithm</name></type> <name pos:start="39:26" pos:end="39:29">hash</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:32"><decl pos:start="41:5" pos:end="41:31"><type pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:24">QCryptoHashAlgorithm</name></type> <name pos:start="41:26" pos:end="41:31">ivhash</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:26"><decl pos:start="43:5" pos:end="43:25"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">char</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:18">password</name> <init pos:start="43:20" pos:end="43:25">= <expr pos:start="43:22" pos:end="43:25"><name pos:start="43:22" pos:end="43:25">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="47:5" pos:end="67:5"><if pos:start="47:5" pos:end="67:5">if <condition pos:start="47:8" pos:end="47:44">(<expr pos:start="47:9" pos:end="47:43"><operator pos:start="47:9" pos:end="47:9">!</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:15">flags</name> <operator pos:start="47:17" pos:end="47:17">&amp;</operator> <name pos:start="47:19" pos:end="47:42">QCRYPTO_BLOCK_OPEN_NO_IO</name><operator pos:start="47:43" pos:end="47:43">)</operator></expr>)</condition> <block pos:start="47:46" pos:end="67:5">{<block_content pos:start="49:9" pos:end="65:9">

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:40">(<expr pos:start="49:13" pos:end="49:39"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:39"><name pos:start="49:14" pos:end="49:20">options</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:23">u</name><operator pos:start="49:24" pos:end="49:24">.</operator><name pos:start="49:25" pos:end="49:28">luks</name><operator pos:start="49:29" pos:end="49:29">.</operator><name pos:start="49:30" pos:end="49:39">key_secret</name></name></expr>)</condition> <block pos:start="49:42" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:22">

            <expr_stmt pos:start="51:13" pos:end="51:78"><expr pos:start="51:13" pos:end="51:77"><call pos:start="51:13" pos:end="51:77"><name pos:start="51:13" pos:end="51:22">error_setg</name><argument_list pos:start="51:23" pos:end="51:77">(<argument pos:start="51:24" pos:end="51:27"><expr pos:start="51:24" pos:end="51:27"><name pos:start="51:24" pos:end="51:27">errp</name></expr></argument>, <argument pos:start="51:30" pos:end="51:76"><expr pos:start="51:30" pos:end="51:76"><literal type="string" pos:start="51:30" pos:end="51:76">"Parameter 'key-secret' is required for cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="59:46"><expr pos:start="57:9" pos:end="59:45"><name pos:start="57:9" pos:end="57:16">password</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="59:45"><name pos:start="57:20" pos:end="57:48">qcrypto_secret_lookup_as_utf8</name><argument_list pos:start="57:49" pos:end="59:45">(

            <argument pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:19">options</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:22">u</name><operator pos:start="59:23" pos:end="59:23">.</operator><name pos:start="59:24" pos:end="59:27">luks</name><operator pos:start="59:28" pos:end="59:28">.</operator><name pos:start="59:29" pos:end="59:38">key_secret</name></name></expr></argument>, <argument pos:start="59:41" pos:end="59:44"><expr pos:start="59:41" pos:end="59:44"><name pos:start="59:41" pos:end="59:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:22">(<expr pos:start="61:13" pos:end="61:21"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:21">password</name></expr>)</condition> <block pos:start="61:24" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:22">

            <return pos:start="63:13" pos:end="63:22">return <expr pos:start="63:20" pos:end="63:21"><operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:39"><expr pos:start="71:5" pos:end="71:38"><name pos:start="71:5" pos:end="71:8">luks</name> <operator pos:start="71:10" pos:end="71:10">=</operator> <call pos:start="71:12" pos:end="71:38"><name pos:start="71:12" pos:end="71:17">g_new0</name><argument_list pos:start="71:18" pos:end="71:38">(<argument pos:start="71:19" pos:end="71:34"><expr pos:start="71:19" pos:end="71:34"><name pos:start="71:19" pos:end="71:34">QCryptoBlockLUKS</name></expr></argument>, <argument pos:start="71:37" pos:end="71:37"><expr pos:start="71:37" pos:end="71:37"><literal type="number" pos:start="71:37" pos:end="71:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:25"><expr pos:start="73:5" pos:end="73:24"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:9">block</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">opaque</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:24">luks</name></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="79:31">/* Read the entire LUKS header, minus the key material from

     * the underlying device */</comment>

    <expr_stmt pos:start="81:5" pos:end="87:24"><expr pos:start="81:5" pos:end="87:23"><name pos:start="81:5" pos:end="81:6">rv</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="87:23"><name pos:start="81:10" pos:end="81:17">readfunc</name><argument_list pos:start="81:18" pos:end="87:23">(<argument pos:start="81:19" pos:end="81:23"><expr pos:start="81:19" pos:end="81:23"><name pos:start="81:19" pos:end="81:23">block</name></expr></argument>, <argument pos:start="81:26" pos:end="81:31"><expr pos:start="81:26" pos:end="81:31"><name pos:start="81:26" pos:end="81:31">opaque</name></expr></argument>, <argument pos:start="81:34" pos:end="81:34"><expr pos:start="81:34" pos:end="81:34"><literal type="number" pos:start="81:34" pos:end="81:34">0</literal></expr></argument>,

                  <argument pos:start="83:19" pos:end="83:42"><expr pos:start="83:19" pos:end="83:42"><operator pos:start="83:19" pos:end="83:19">(</operator><name pos:start="83:20" pos:end="83:26">uint8_t</name> <operator pos:start="83:28" pos:end="83:28">*</operator><operator pos:start="83:29" pos:end="83:29">)</operator><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:42"><name pos:start="83:31" pos:end="83:34">luks</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:42">header</name></name></expr></argument>,

                  <argument pos:start="85:19" pos:end="85:38"><expr pos:start="85:19" pos:end="85:38"><sizeof pos:start="85:19" pos:end="85:38">sizeof<argument_list pos:start="85:25" pos:end="85:38">(<argument pos:start="85:26" pos:end="85:37"><expr pos:start="85:26" pos:end="85:37"><name pos:start="85:26" pos:end="85:37"><name pos:start="85:26" pos:end="85:29">luks</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:37">header</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                  <argument pos:start="87:19" pos:end="87:22"><expr pos:start="87:19" pos:end="87:22"><name pos:start="87:19" pos:end="87:22">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:15">(<expr pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:10">rv</name> <operator pos:start="89:12" pos:end="89:12">&lt;</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>)</condition> <block pos:start="89:17" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:18">

        <expr_stmt pos:start="91:9" pos:end="91:17"><expr pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:16">rv</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:18">goto <name pos:start="93:14" pos:end="93:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="101:38">/* The header is always stored in big-endian format, so

     * convert everything to native */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:40"><expr pos:start="103:5" pos:end="103:39"><call pos:start="103:5" pos:end="103:39"><name pos:start="103:5" pos:end="103:16">be16_to_cpus</name><argument_list pos:start="103:17" pos:end="103:39">(<argument pos:start="103:18" pos:end="103:38"><expr pos:start="103:18" pos:end="103:38"><operator pos:start="103:18" pos:end="103:18">&amp;</operator><name pos:start="103:19" pos:end="103:38"><name pos:start="103:19" pos:end="103:22">luks</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:30">header</name><operator pos:start="103:31" pos:end="103:31">.</operator><name pos:start="103:32" pos:end="103:38">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><call pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:16">be32_to_cpus</name><argument_list pos:start="105:17" pos:end="105:46">(<argument pos:start="105:18" pos:end="105:45"><expr pos:start="105:18" pos:end="105:45"><operator pos:start="105:18" pos:end="105:18">&amp;</operator><name pos:start="105:19" pos:end="105:45"><name pos:start="105:19" pos:end="105:22">luks</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:30">header</name><operator pos:start="105:31" pos:end="105:31">.</operator><name pos:start="105:32" pos:end="105:45">payload_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><call pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:16">be32_to_cpus</name><argument_list pos:start="107:17" pos:end="107:41">(<argument pos:start="107:18" pos:end="107:40"><expr pos:start="107:18" pos:end="107:40"><operator pos:start="107:18" pos:end="107:18">&amp;</operator><name pos:start="107:19" pos:end="107:40"><name pos:start="107:19" pos:end="107:22">luks</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:30">header</name><operator pos:start="107:31" pos:end="107:31">.</operator><name pos:start="107:32" pos:end="107:40">key_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:54"><expr pos:start="109:5" pos:end="109:53"><call pos:start="109:5" pos:end="109:53"><name pos:start="109:5" pos:end="109:16">be32_to_cpus</name><argument_list pos:start="109:17" pos:end="109:53">(<argument pos:start="109:18" pos:end="109:52"><expr pos:start="109:18" pos:end="109:52"><operator pos:start="109:18" pos:end="109:18">&amp;</operator><name pos:start="109:19" pos:end="109:52"><name pos:start="109:19" pos:end="109:22">luks</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:30">header</name><operator pos:start="109:31" pos:end="109:31">.</operator><name pos:start="109:32" pos:end="109:52">master_key_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="113:5" pos:end="123:5">for <control pos:start="113:9" pos:end="113:58">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">i</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:53"><expr pos:start="113:17" pos:end="113:52"><name pos:start="113:17" pos:end="113:17">i</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <name pos:start="113:21" pos:end="113:52">QCRYPTO_BLOCK_LUKS_NUM_KEY_SLOTS</name></expr>;</condition> <incr pos:start="113:55" pos:end="113:57"><expr pos:start="113:55" pos:end="113:57"><name pos:start="113:55" pos:end="113:55">i</name><operator pos:start="113:56" pos:end="113:57">++</operator></expr></incr>)</control> <block pos:start="113:60" pos:end="123:5">{<block_content pos:start="115:9" pos:end="121:57">

        <expr_stmt pos:start="115:9" pos:end="115:56"><expr pos:start="115:9" pos:end="115:55"><call pos:start="115:9" pos:end="115:55"><name pos:start="115:9" pos:end="115:20">be32_to_cpus</name><argument_list pos:start="115:21" pos:end="115:55">(<argument pos:start="115:22" pos:end="115:54"><expr pos:start="115:22" pos:end="115:54"><operator pos:start="115:22" pos:end="115:22">&amp;</operator><name pos:start="115:23" pos:end="115:47"><name pos:start="115:23" pos:end="115:26">luks</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:34">header</name><operator pos:start="115:35" pos:end="115:35">.</operator><name pos:start="115:36" pos:end="115:44">key_slots</name><index pos:start="115:45" pos:end="115:47">[<expr pos:start="115:46" pos:end="115:46"><name pos:start="115:46" pos:end="115:46">i</name></expr>]</index></name><operator pos:start="115:48" pos:end="115:48">.</operator><name pos:start="115:49" pos:end="115:54">active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:60"><expr pos:start="117:9" pos:end="117:59"><call pos:start="117:9" pos:end="117:59"><name pos:start="117:9" pos:end="117:20">be32_to_cpus</name><argument_list pos:start="117:21" pos:end="117:59">(<argument pos:start="117:22" pos:end="117:58"><expr pos:start="117:22" pos:end="117:58"><operator pos:start="117:22" pos:end="117:22">&amp;</operator><name pos:start="117:23" pos:end="117:47"><name pos:start="117:23" pos:end="117:26">luks</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:34">header</name><operator pos:start="117:35" pos:end="117:35">.</operator><name pos:start="117:36" pos:end="117:44">key_slots</name><index pos:start="117:45" pos:end="117:47">[<expr pos:start="117:46" pos:end="117:46"><name pos:start="117:46" pos:end="117:46">i</name></expr>]</index></name><operator pos:start="117:48" pos:end="117:48">.</operator><name pos:start="117:49" pos:end="117:58">iterations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:60"><expr pos:start="119:9" pos:end="119:59"><call pos:start="119:9" pos:end="119:59"><name pos:start="119:9" pos:end="119:20">be32_to_cpus</name><argument_list pos:start="119:21" pos:end="119:59">(<argument pos:start="119:22" pos:end="119:58"><expr pos:start="119:22" pos:end="119:58"><operator pos:start="119:22" pos:end="119:22">&amp;</operator><name pos:start="119:23" pos:end="119:47"><name pos:start="119:23" pos:end="119:26">luks</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:34">header</name><operator pos:start="119:35" pos:end="119:35">.</operator><name pos:start="119:36" pos:end="119:44">key_slots</name><index pos:start="119:45" pos:end="119:47">[<expr pos:start="119:46" pos:end="119:46"><name pos:start="119:46" pos:end="119:46">i</name></expr>]</index></name><operator pos:start="119:48" pos:end="119:48">.</operator><name pos:start="119:49" pos:end="119:58">key_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:57"><expr pos:start="121:9" pos:end="121:56"><call pos:start="121:9" pos:end="121:56"><name pos:start="121:9" pos:end="121:20">be32_to_cpus</name><argument_list pos:start="121:21" pos:end="121:56">(<argument pos:start="121:22" pos:end="121:55"><expr pos:start="121:22" pos:end="121:55"><operator pos:start="121:22" pos:end="121:22">&amp;</operator><name pos:start="121:23" pos:end="121:47"><name pos:start="121:23" pos:end="121:26">luks</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:34">header</name><operator pos:start="121:35" pos:end="121:35">.</operator><name pos:start="121:36" pos:end="121:44">key_slots</name><index pos:start="121:45" pos:end="121:47">[<expr pos:start="121:46" pos:end="121:46"><name pos:start="121:46" pos:end="121:46">i</name></expr>]</index></name><operator pos:start="121:48" pos:end="121:48">.</operator><name pos:start="121:49" pos:end="121:55">stripes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="127:5" pos:end="137:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="129:50">(<expr pos:start="127:9" pos:end="129:49"><call pos:start="127:9" pos:end="129:44"><name pos:start="127:9" pos:end="127:14">memcmp</name><argument_list pos:start="127:15" pos:end="129:44">(<argument pos:start="127:16" pos:end="127:33"><expr pos:start="127:16" pos:end="127:33"><name pos:start="127:16" pos:end="127:33"><name pos:start="127:16" pos:end="127:19">luks</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:27">header</name><operator pos:start="127:28" pos:end="127:28">.</operator><name pos:start="127:29" pos:end="127:33">magic</name></name></expr></argument>, <argument pos:start="127:36" pos:end="127:59"><expr pos:start="127:36" pos:end="127:59"><name pos:start="127:36" pos:end="127:59">qcrypto_block_luks_magic</name></expr></argument>,

               <argument pos:start="129:16" pos:end="129:43"><expr pos:start="129:16" pos:end="129:43"><name pos:start="129:16" pos:end="129:43">QCRYPTO_BLOCK_LUKS_MAGIC_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="129:46" pos:end="129:47">!=</operator> <literal type="number" pos:start="129:49" pos:end="129:49">0</literal></expr>)</condition> <block pos:start="129:52" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:18">

        <expr_stmt pos:start="131:9" pos:end="131:57"><expr pos:start="131:9" pos:end="131:56"><call pos:start="131:9" pos:end="131:56"><name pos:start="131:9" pos:end="131:18">error_setg</name><argument_list pos:start="131:19" pos:end="131:56">(<argument pos:start="131:20" pos:end="131:23"><expr pos:start="131:20" pos:end="131:23"><name pos:start="131:20" pos:end="131:23">errp</name></expr></argument>, <argument pos:start="131:26" pos:end="131:55"><expr pos:start="131:26" pos:end="131:55"><literal type="string" pos:start="131:26" pos:end="131:55">"Volume is not in LUKS format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:11">ret</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <operator pos:start="133:15" pos:end="133:15">-</operator><name pos:start="133:16" pos:end="133:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="149:5"><if pos:start="139:5" pos:end="149:5">if <condition pos:start="139:8" pos:end="139:59">(<expr pos:start="139:9" pos:end="139:58"><name pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:12">luks</name><operator pos:start="139:13" pos:end="139:14">-&gt;</operator><name pos:start="139:15" pos:end="139:20">header</name><operator pos:start="139:21" pos:end="139:21">.</operator><name pos:start="139:22" pos:end="139:28">version</name></name> <operator pos:start="139:30" pos:end="139:31">!=</operator> <name pos:start="139:33" pos:end="139:58">QCRYPTO_BLOCK_LUKS_VERSION</name></expr>)</condition> <block pos:start="139:61" pos:end="149:5">{<block_content pos:start="141:9" pos:end="147:18">

        <expr_stmt pos:start="141:9" pos:end="143:41"><expr pos:start="141:9" pos:end="143:40"><call pos:start="141:9" pos:end="143:40"><name pos:start="141:9" pos:end="141:18">error_setg</name><argument_list pos:start="141:19" pos:end="143:40">(<argument pos:start="141:20" pos:end="141:23"><expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">errp</name></expr></argument>, <argument pos:start="141:26" pos:end="141:68"><expr pos:start="141:26" pos:end="141:68"><literal type="string" pos:start="141:26" pos:end="141:41">"LUKS version %"</literal> <name pos:start="141:43" pos:end="141:48">PRIu32</name> <literal type="string" pos:start="141:50" pos:end="141:68">" is not supported"</literal></expr></argument>,

                   <argument pos:start="143:20" pos:end="143:39"><expr pos:start="143:20" pos:end="143:39"><name pos:start="143:20" pos:end="143:39"><name pos:start="143:20" pos:end="143:23">luks</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:31">header</name><operator pos:start="143:32" pos:end="143:32">.</operator><name pos:start="143:33" pos:end="143:39">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:23"><expr pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <operator pos:start="145:15" pos:end="145:15">-</operator><name pos:start="145:16" pos:end="145:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:18">goto <name pos:start="147:14" pos:end="147:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="167:7">/*

     * The cipher_mode header contains a string that we have

     * to further parse, of the format

     *

     *    &lt;cipher-mode&gt;-&lt;iv-generator&gt;[:&lt;iv-hash&gt;]

     *

     * eg  cbc-essiv:sha256, cbc-plain64

     */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:55"><expr pos:start="169:5" pos:end="169:54"><name pos:start="169:5" pos:end="169:14">ivgen_name</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <call pos:start="169:18" pos:end="169:54"><name pos:start="169:18" pos:end="169:23">strchr</name><argument_list pos:start="169:24" pos:end="169:54">(<argument pos:start="169:25" pos:end="169:48"><expr pos:start="169:25" pos:end="169:48"><name pos:start="169:25" pos:end="169:48"><name pos:start="169:25" pos:end="169:28">luks</name><operator pos:start="169:29" pos:end="169:30">-&gt;</operator><name pos:start="169:31" pos:end="169:36">header</name><operator pos:start="169:37" pos:end="169:37">.</operator><name pos:start="169:38" pos:end="169:48">cipher_mode</name></name></expr></argument>, <argument pos:start="169:51" pos:end="169:53"><expr pos:start="169:51" pos:end="169:53"><literal type="char" pos:start="169:51" pos:end="169:53">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="181:5"><if pos:start="171:5" pos:end="181:5">if <condition pos:start="171:8" pos:end="171:20">(<expr pos:start="171:9" pos:end="171:19"><operator pos:start="171:9" pos:end="171:9">!</operator><name pos:start="171:10" pos:end="171:19">ivgen_name</name></expr>)</condition> <block pos:start="171:22" pos:end="181:5">{<block_content pos:start="173:9" pos:end="179:18">

        <expr_stmt pos:start="173:9" pos:end="173:22"><expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <operator pos:start="173:15" pos:end="173:15">-</operator><name pos:start="173:16" pos:end="173:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="177:45"><expr pos:start="175:9" pos:end="177:44"><call pos:start="175:9" pos:end="177:44"><name pos:start="175:9" pos:end="175:18">error_setg</name><argument_list pos:start="175:19" pos:end="177:44">(<argument pos:start="175:20" pos:end="175:23"><expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">errp</name></expr></argument>, <argument pos:start="175:26" pos:end="175:66"><expr pos:start="175:26" pos:end="175:66"><literal type="string" pos:start="175:26" pos:end="175:66">"Unexpected cipher mode string format %s"</literal></expr></argument>,

                   <argument pos:start="177:20" pos:end="177:43"><expr pos:start="177:20" pos:end="177:43"><name pos:start="177:20" pos:end="177:43"><name pos:start="177:20" pos:end="177:23">luks</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:31">header</name><operator pos:start="177:32" pos:end="177:32">.</operator><name pos:start="177:33" pos:end="177:43">cipher_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="179:9" pos:end="179:18">goto <name pos:start="179:14" pos:end="179:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:23"><expr pos:start="183:5" pos:end="183:22"><operator pos:start="183:5" pos:end="183:5">*</operator><name pos:start="183:6" pos:end="183:15">ivgen_name</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <literal type="char" pos:start="183:19" pos:end="183:22">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:17"><expr pos:start="185:5" pos:end="185:16"><name pos:start="185:5" pos:end="185:14">ivgen_name</name><operator pos:start="185:15" pos:end="185:16">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:42"><expr pos:start="189:5" pos:end="189:41"><name pos:start="189:5" pos:end="189:15">ivhash_name</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:41"><name pos:start="189:19" pos:end="189:24">strchr</name><argument_list pos:start="189:25" pos:end="189:41">(<argument pos:start="189:26" pos:end="189:35"><expr pos:start="189:26" pos:end="189:35"><name pos:start="189:26" pos:end="189:35">ivgen_name</name></expr></argument>, <argument pos:start="189:38" pos:end="189:40"><expr pos:start="189:38" pos:end="189:40"><literal type="char" pos:start="189:38" pos:end="189:40">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="191:5" pos:end="217:5"><if pos:start="191:5" pos:end="195:5">if <condition pos:start="191:8" pos:end="191:21">(<expr pos:start="191:9" pos:end="191:20"><operator pos:start="191:9" pos:end="191:9">!</operator><name pos:start="191:10" pos:end="191:20">ivhash_name</name></expr>)</condition> <block pos:start="191:23" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:19">

        <expr_stmt pos:start="193:9" pos:end="193:19"><expr pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:14">ivhash</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="217:5">else <block pos:start="195:12" pos:end="217:5">{<block_content pos:start="197:9" pos:end="215:9">

        <expr_stmt pos:start="197:9" pos:end="197:28"><expr pos:start="197:9" pos:end="197:27"><operator pos:start="197:9" pos:end="197:9">*</operator><name pos:start="197:10" pos:end="197:20">ivhash_name</name> <operator pos:start="197:22" pos:end="197:22">=</operator> <literal type="char" pos:start="197:24" pos:end="197:27">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:22"><expr pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:19">ivhash_name</name><operator pos:start="199:20" pos:end="199:21">++</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="203:9" pos:end="205:65"><expr pos:start="203:9" pos:end="205:64"><name pos:start="203:9" pos:end="203:14">ivhash</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <call pos:start="203:18" pos:end="205:64"><name pos:start="203:18" pos:end="203:52">qcrypto_block_luks_hash_name_lookup</name><argument_list pos:start="203:53" pos:end="205:64">(<argument pos:start="203:54" pos:end="203:64"><expr pos:start="203:54" pos:end="203:64"><name pos:start="203:54" pos:end="203:64">ivhash_name</name></expr></argument>,

                                                     <argument pos:start="205:54" pos:end="205:63"><expr pos:start="205:54" pos:end="205:63"><operator pos:start="205:54" pos:end="205:54">&amp;</operator><name pos:start="205:55" pos:end="205:63">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:22">(<expr pos:start="207:13" pos:end="207:21"><name pos:start="207:13" pos:end="207:21">local_err</name></expr>)</condition> <block pos:start="207:24" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:22">

            <expr_stmt pos:start="209:13" pos:end="209:27"><expr pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:15">ret</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <operator pos:start="209:19" pos:end="209:19">-</operator><name pos:start="209:20" pos:end="209:26">ENOTSUP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:45"><expr pos:start="211:13" pos:end="211:44"><call pos:start="211:13" pos:end="211:44"><name pos:start="211:13" pos:end="211:27">error_propagate</name><argument_list pos:start="211:28" pos:end="211:44">(<argument pos:start="211:29" pos:end="211:32"><expr pos:start="211:29" pos:end="211:32"><name pos:start="211:29" pos:end="211:32">errp</name></expr></argument>, <argument pos:start="211:35" pos:end="211:43"><expr pos:start="211:35" pos:end="211:43"><name pos:start="211:35" pos:end="211:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="223:67"><expr pos:start="221:5" pos:end="223:66"><name pos:start="221:5" pos:end="221:14">ciphermode</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <call pos:start="221:18" pos:end="223:66"><name pos:start="221:18" pos:end="221:54">qcrypto_block_luks_cipher_mode_lookup</name><argument_list pos:start="221:55" pos:end="223:66">(<argument pos:start="221:56" pos:end="221:79"><expr pos:start="221:56" pos:end="221:79"><name pos:start="221:56" pos:end="221:79"><name pos:start="221:56" pos:end="221:59">luks</name><operator pos:start="221:60" pos:end="221:61">-&gt;</operator><name pos:start="221:62" pos:end="221:67">header</name><operator pos:start="221:68" pos:end="221:68">.</operator><name pos:start="221:69" pos:end="221:79">cipher_mode</name></name></expr></argument>,

                                                       <argument pos:start="223:56" pos:end="223:65"><expr pos:start="223:56" pos:end="223:65"><operator pos:start="223:56" pos:end="223:56">&amp;</operator><name pos:start="223:57" pos:end="223:65">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="233:5"><if pos:start="225:5" pos:end="233:5">if <condition pos:start="225:8" pos:end="225:18">(<expr pos:start="225:9" pos:end="225:17"><name pos:start="225:9" pos:end="225:17">local_err</name></expr>)</condition> <block pos:start="225:20" pos:end="233:5">{<block_content pos:start="227:9" pos:end="231:18">

        <expr_stmt pos:start="227:9" pos:end="227:23"><expr pos:start="227:9" pos:end="227:22"><name pos:start="227:9" pos:end="227:11">ret</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <operator pos:start="227:15" pos:end="227:15">-</operator><name pos:start="227:16" pos:end="227:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:41"><expr pos:start="229:9" pos:end="229:40"><call pos:start="229:9" pos:end="229:40"><name pos:start="229:9" pos:end="229:23">error_propagate</name><argument_list pos:start="229:24" pos:end="229:40">(<argument pos:start="229:25" pos:end="229:28"><expr pos:start="229:25" pos:end="229:28"><name pos:start="229:25" pos:end="229:28">errp</name></expr></argument>, <argument pos:start="229:31" pos:end="229:39"><expr pos:start="229:31" pos:end="229:39"><name pos:start="229:31" pos:end="229:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="231:9" pos:end="231:18">goto <name pos:start="231:14" pos:end="231:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="237:5" pos:end="243:66"><expr pos:start="237:5" pos:end="243:65"><name pos:start="237:5" pos:end="237:13">cipheralg</name> <operator pos:start="237:15" pos:end="237:15">=</operator> <call pos:start="237:17" pos:end="243:65"><name pos:start="237:17" pos:end="237:53">qcrypto_block_luks_cipher_name_lookup</name><argument_list pos:start="237:54" pos:end="243:65">(<argument pos:start="237:55" pos:end="237:78"><expr pos:start="237:55" pos:end="237:78"><name pos:start="237:55" pos:end="237:78"><name pos:start="237:55" pos:end="237:58">luks</name><operator pos:start="237:59" pos:end="237:60">-&gt;</operator><name pos:start="237:61" pos:end="237:66">header</name><operator pos:start="237:67" pos:end="237:67">.</operator><name pos:start="237:68" pos:end="237:78">cipher_name</name></name></expr></argument>,

                                                      <argument pos:start="239:55" pos:end="239:64"><expr pos:start="239:55" pos:end="239:64"><name pos:start="239:55" pos:end="239:64">ciphermode</name></expr></argument>,

                                                      <argument pos:start="241:55" pos:end="241:76"><expr pos:start="241:55" pos:end="241:76"><name pos:start="241:55" pos:end="241:76"><name pos:start="241:55" pos:end="241:58">luks</name><operator pos:start="241:59" pos:end="241:60">-&gt;</operator><name pos:start="241:61" pos:end="241:66">header</name><operator pos:start="241:67" pos:end="241:67">.</operator><name pos:start="241:68" pos:end="241:76">key_bytes</name></name></expr></argument>,

                                                      <argument pos:start="243:55" pos:end="243:64"><expr pos:start="243:55" pos:end="243:64"><operator pos:start="243:55" pos:end="243:55">&amp;</operator><name pos:start="243:56" pos:end="243:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="245:5" pos:end="253:5"><if pos:start="245:5" pos:end="253:5">if <condition pos:start="245:8" pos:end="245:18">(<expr pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:17">local_err</name></expr>)</condition> <block pos:start="245:20" pos:end="253:5">{<block_content pos:start="247:9" pos:end="251:18">

        <expr_stmt pos:start="247:9" pos:end="247:23"><expr pos:start="247:9" pos:end="247:22"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <operator pos:start="247:15" pos:end="247:15">-</operator><name pos:start="247:16" pos:end="247:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:41"><expr pos:start="249:9" pos:end="249:40"><call pos:start="249:9" pos:end="249:40"><name pos:start="249:9" pos:end="249:23">error_propagate</name><argument_list pos:start="249:24" pos:end="249:40">(<argument pos:start="249:25" pos:end="249:28"><expr pos:start="249:25" pos:end="249:28"><name pos:start="249:25" pos:end="249:28">errp</name></expr></argument>, <argument pos:start="249:31" pos:end="249:39"><expr pos:start="249:31" pos:end="249:39"><name pos:start="249:31" pos:end="249:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="251:9" pos:end="251:18">goto <name pos:start="251:14" pos:end="251:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="257:5" pos:end="259:59"><expr pos:start="257:5" pos:end="259:58"><name pos:start="257:5" pos:end="257:8">hash</name> <operator pos:start="257:10" pos:end="257:10">=</operator> <call pos:start="257:12" pos:end="259:58"><name pos:start="257:12" pos:end="257:46">qcrypto_block_luks_hash_name_lookup</name><argument_list pos:start="257:47" pos:end="259:58">(<argument pos:start="257:48" pos:end="257:69"><expr pos:start="257:48" pos:end="257:69"><name pos:start="257:48" pos:end="257:69"><name pos:start="257:48" pos:end="257:51">luks</name><operator pos:start="257:52" pos:end="257:53">-&gt;</operator><name pos:start="257:54" pos:end="257:59">header</name><operator pos:start="257:60" pos:end="257:60">.</operator><name pos:start="257:61" pos:end="257:69">hash_spec</name></name></expr></argument>,

                                               <argument pos:start="259:48" pos:end="259:57"><expr pos:start="259:48" pos:end="259:57"><operator pos:start="259:48" pos:end="259:48">&amp;</operator><name pos:start="259:49" pos:end="259:57">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="261:5" pos:end="269:5"><if pos:start="261:5" pos:end="269:5">if <condition pos:start="261:8" pos:end="261:18">(<expr pos:start="261:9" pos:end="261:17"><name pos:start="261:9" pos:end="261:17">local_err</name></expr>)</condition> <block pos:start="261:20" pos:end="269:5">{<block_content pos:start="263:9" pos:end="267:18">

        <expr_stmt pos:start="263:9" pos:end="263:23"><expr pos:start="263:9" pos:end="263:22"><name pos:start="263:9" pos:end="263:11">ret</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <operator pos:start="263:15" pos:end="263:15">-</operator><name pos:start="263:16" pos:end="263:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:41"><expr pos:start="265:9" pos:end="265:40"><call pos:start="265:9" pos:end="265:40"><name pos:start="265:9" pos:end="265:23">error_propagate</name><argument_list pos:start="265:24" pos:end="265:40">(<argument pos:start="265:25" pos:end="265:28"><expr pos:start="265:25" pos:end="265:28"><name pos:start="265:25" pos:end="265:28">errp</name></expr></argument>, <argument pos:start="265:31" pos:end="265:39"><expr pos:start="265:31" pos:end="265:39"><name pos:start="265:31" pos:end="265:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="267:9" pos:end="267:18">goto <name pos:start="267:14" pos:end="267:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="273:5" pos:end="275:61"><expr pos:start="273:5" pos:end="275:60"><name pos:start="273:5" pos:end="273:9">ivalg</name> <operator pos:start="273:11" pos:end="273:11">=</operator> <call pos:start="273:13" pos:end="275:60"><name pos:start="273:13" pos:end="273:48">qcrypto_block_luks_ivgen_name_lookup</name><argument_list pos:start="273:49" pos:end="275:60">(<argument pos:start="273:50" pos:end="273:59"><expr pos:start="273:50" pos:end="273:59"><name pos:start="273:50" pos:end="273:59">ivgen_name</name></expr></argument>,

                                                 <argument pos:start="275:50" pos:end="275:59"><expr pos:start="275:50" pos:end="275:59"><operator pos:start="275:50" pos:end="275:50">&amp;</operator><name pos:start="275:51" pos:end="275:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="277:5" pos:end="285:5"><if pos:start="277:5" pos:end="285:5">if <condition pos:start="277:8" pos:end="277:18">(<expr pos:start="277:9" pos:end="277:17"><name pos:start="277:9" pos:end="277:17">local_err</name></expr>)</condition> <block pos:start="277:20" pos:end="285:5">{<block_content pos:start="279:9" pos:end="283:18">

        <expr_stmt pos:start="279:9" pos:end="279:23"><expr pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:11">ret</name> <operator pos:start="279:13" pos:end="279:13">=</operator> <operator pos:start="279:15" pos:end="279:15">-</operator><name pos:start="279:16" pos:end="279:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:41"><expr pos:start="281:9" pos:end="281:40"><call pos:start="281:9" pos:end="281:40"><name pos:start="281:9" pos:end="281:23">error_propagate</name><argument_list pos:start="281:24" pos:end="281:40">(<argument pos:start="281:25" pos:end="281:28"><expr pos:start="281:25" pos:end="281:28"><name pos:start="281:25" pos:end="281:28">errp</name></expr></argument>, <argument pos:start="281:31" pos:end="281:39"><expr pos:start="281:31" pos:end="281:39"><name pos:start="281:31" pos:end="281:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="283:9" pos:end="283:18">goto <name pos:start="283:14" pos:end="283:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="335:5"><if pos:start="289:5" pos:end="317:5">if <condition pos:start="289:8" pos:end="289:41">(<expr pos:start="289:9" pos:end="289:40"><name pos:start="289:9" pos:end="289:13">ivalg</name> <operator pos:start="289:15" pos:end="289:16">==</operator> <name pos:start="289:18" pos:end="289:40">QCRYPTO_IVGEN_ALG_ESSIV</name></expr>)</condition> <block pos:start="289:43" pos:end="317:5">{<block_content pos:start="291:9" pos:end="315:9">

        <if_stmt pos:start="291:9" pos:end="299:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:25">(<expr pos:start="291:13" pos:end="291:24"><operator pos:start="291:13" pos:end="291:13">!</operator><name pos:start="291:14" pos:end="291:24">ivhash_name</name></expr>)</condition> <block pos:start="291:27" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:22">

            <expr_stmt pos:start="293:13" pos:end="293:26"><expr pos:start="293:13" pos:end="293:25"><name pos:start="293:13" pos:end="293:15">ret</name> <operator pos:start="293:17" pos:end="293:17">=</operator> <operator pos:start="293:19" pos:end="293:19">-</operator><name pos:start="293:20" pos:end="293:25">EINVAL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:72"><expr pos:start="295:13" pos:end="295:71"><call pos:start="295:13" pos:end="295:71"><name pos:start="295:13" pos:end="295:22">error_setg</name><argument_list pos:start="295:23" pos:end="295:71">(<argument pos:start="295:24" pos:end="295:27"><expr pos:start="295:24" pos:end="295:27"><name pos:start="295:24" pos:end="295:27">errp</name></expr></argument>, <argument pos:start="295:30" pos:end="295:70"><expr pos:start="295:30" pos:end="295:70"><literal type="string" pos:start="295:30" pos:end="295:70">"Missing IV generator hash specification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="297:13" pos:end="297:22">goto <name pos:start="297:18" pos:end="297:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="305:66"><expr pos:start="301:9" pos:end="305:65"><name pos:start="301:9" pos:end="301:19">ivcipheralg</name> <operator pos:start="301:21" pos:end="301:21">=</operator> <call pos:start="301:23" pos:end="305:65"><name pos:start="301:23" pos:end="301:53">qcrypto_block_luks_essiv_cipher</name><argument_list pos:start="301:54" pos:end="305:65">(<argument pos:start="301:55" pos:end="301:63"><expr pos:start="301:55" pos:end="301:63"><name pos:start="301:55" pos:end="301:63">cipheralg</name></expr></argument>,

                                                      <argument pos:start="303:55" pos:end="303:60"><expr pos:start="303:55" pos:end="303:60"><name pos:start="303:55" pos:end="303:60">ivhash</name></expr></argument>,

                                                      <argument pos:start="305:55" pos:end="305:64"><expr pos:start="305:55" pos:end="305:64"><operator pos:start="305:55" pos:end="305:55">&amp;</operator><name pos:start="305:56" pos:end="305:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="307:9" pos:end="315:9"><if pos:start="307:9" pos:end="315:9">if <condition pos:start="307:12" pos:end="307:22">(<expr pos:start="307:13" pos:end="307:21"><name pos:start="307:13" pos:end="307:21">local_err</name></expr>)</condition> <block pos:start="307:24" pos:end="315:9">{<block_content pos:start="309:13" pos:end="313:22">

            <expr_stmt pos:start="309:13" pos:end="309:27"><expr pos:start="309:13" pos:end="309:26"><name pos:start="309:13" pos:end="309:15">ret</name> <operator pos:start="309:17" pos:end="309:17">=</operator> <operator pos:start="309:19" pos:end="309:19">-</operator><name pos:start="309:20" pos:end="309:26">ENOTSUP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:45"><expr pos:start="311:13" pos:end="311:44"><call pos:start="311:13" pos:end="311:44"><name pos:start="311:13" pos:end="311:27">error_propagate</name><argument_list pos:start="311:28" pos:end="311:44">(<argument pos:start="311:29" pos:end="311:32"><expr pos:start="311:29" pos:end="311:32"><name pos:start="311:29" pos:end="311:32">errp</name></expr></argument>, <argument pos:start="311:35" pos:end="311:43"><expr pos:start="311:35" pos:end="311:43"><name pos:start="311:35" pos:end="311:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="313:13" pos:end="313:22">goto <name pos:start="313:18" pos:end="313:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="317:7" pos:end="335:5">else <block pos:start="317:12" pos:end="335:5">{<block_content pos:start="333:9" pos:end="333:32">

        <comment type="block" pos:start="319:9" pos:end="331:11">/* Note we parsed the ivhash_name earlier in the cipher_mode

         * spec string even with plain/plain64 ivgens, but we

         * will ignore it, since it is irrelevant for these ivgens.

         * This is for compat with dm-crypt which will silently

         * ignore hash names with these ivgens rather than report

         * an error about the invalid usage

         */</comment>

        <expr_stmt pos:start="333:9" pos:end="333:32"><expr pos:start="333:9" pos:end="333:31"><name pos:start="333:9" pos:end="333:19">ivcipheralg</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <name pos:start="333:23" pos:end="333:31">cipheralg</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="339:5" pos:end="423:5"><if pos:start="339:5" pos:end="423:5">if <condition pos:start="339:8" pos:end="339:44">(<expr pos:start="339:9" pos:end="339:43"><operator pos:start="339:9" pos:end="339:9">!</operator><operator pos:start="339:10" pos:end="339:10">(</operator><name pos:start="339:11" pos:end="339:15">flags</name> <operator pos:start="339:17" pos:end="339:17">&amp;</operator> <name pos:start="339:19" pos:end="339:42">QCRYPTO_BLOCK_OPEN_NO_IO</name><operator pos:start="339:43" pos:end="339:43">)</operator></expr>)</condition> <block pos:start="339:46" pos:end="423:5">{<block_content pos:start="347:9" pos:end="421:9">

        <comment type="block" pos:start="341:9" pos:end="345:11">/* Try to find which key slot our password is valid for

         * and unlock the master key from that slot.

         */</comment>

        <if_stmt pos:start="347:9" pos:end="371:9"><if pos:start="347:9" pos:end="371:9">if <condition pos:start="347:12" pos:end="365:50">(<expr pos:start="347:13" pos:end="365:49"><call pos:start="347:13" pos:end="365:45"><name pos:start="347:13" pos:end="347:39">qcrypto_block_luks_find_key</name><argument_list pos:start="347:40" pos:end="365:45">(<argument pos:start="347:41" pos:end="347:45"><expr pos:start="347:41" pos:end="347:45"><name pos:start="347:41" pos:end="347:45">block</name></expr></argument>,

                                        <argument pos:start="349:41" pos:end="349:48"><expr pos:start="349:41" pos:end="349:48"><name pos:start="349:41" pos:end="349:48">password</name></expr></argument>,

                                        <argument pos:start="351:41" pos:end="351:49"><expr pos:start="351:41" pos:end="351:49"><name pos:start="351:41" pos:end="351:49">cipheralg</name></expr></argument>, <argument pos:start="351:52" pos:end="351:61"><expr pos:start="351:52" pos:end="351:61"><name pos:start="351:52" pos:end="351:61">ciphermode</name></expr></argument>,

                                        <argument pos:start="353:41" pos:end="353:44"><expr pos:start="353:41" pos:end="353:44"><name pos:start="353:41" pos:end="353:44">hash</name></expr></argument>,

                                        <argument pos:start="355:41" pos:end="355:45"><expr pos:start="355:41" pos:end="355:45"><name pos:start="355:41" pos:end="355:45">ivalg</name></expr></argument>,

                                        <argument pos:start="357:41" pos:end="357:51"><expr pos:start="357:41" pos:end="357:51"><name pos:start="357:41" pos:end="357:51">ivcipheralg</name></expr></argument>,

                                        <argument pos:start="359:41" pos:end="359:46"><expr pos:start="359:41" pos:end="359:46"><name pos:start="359:41" pos:end="359:46">ivhash</name></expr></argument>,

                                        <argument pos:start="361:41" pos:end="361:50"><expr pos:start="361:41" pos:end="361:50"><operator pos:start="361:41" pos:end="361:41">&amp;</operator><name pos:start="361:42" pos:end="361:50">masterkey</name></expr></argument>, <argument pos:start="361:53" pos:end="361:65"><expr pos:start="361:53" pos:end="361:65"><operator pos:start="361:53" pos:end="361:53">&amp;</operator><name pos:start="361:54" pos:end="361:65">masterkeylen</name></expr></argument>,

                                        <argument pos:start="363:41" pos:end="363:48"><expr pos:start="363:41" pos:end="363:48"><name pos:start="363:41" pos:end="363:48">readfunc</name></expr></argument>, <argument pos:start="363:51" pos:end="363:56"><expr pos:start="363:51" pos:end="363:56"><name pos:start="363:51" pos:end="363:56">opaque</name></expr></argument>,

                                        <argument pos:start="365:41" pos:end="365:44"><expr pos:start="365:41" pos:end="365:44"><name pos:start="365:41" pos:end="365:44">errp</name></expr></argument>)</argument_list></call> <operator pos:start="365:47" pos:end="365:47">&lt;</operator> <literal type="number" pos:start="365:49" pos:end="365:49">0</literal></expr>)</condition> <block pos:start="365:52" pos:end="371:9">{<block_content pos:start="367:13" pos:end="369:22">

            <expr_stmt pos:start="367:13" pos:end="367:26"><expr pos:start="367:13" pos:end="367:25"><name pos:start="367:13" pos:end="367:15">ret</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <operator pos:start="367:19" pos:end="367:19">-</operator><name pos:start="367:20" pos:end="367:25">EACCES</name></expr>;</expr_stmt>

            <goto pos:start="369:13" pos:end="369:22">goto <name pos:start="369:18" pos:end="369:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="375:9" pos:end="379:11">/* We have a valid master key now, so can setup the

         * block device payload decryption objects

         */</comment>

        <expr_stmt pos:start="381:9" pos:end="381:30"><expr pos:start="381:9" pos:end="381:29"><name pos:start="381:9" pos:end="381:22"><name pos:start="381:9" pos:end="381:13">block</name><operator pos:start="381:14" pos:end="381:15">-&gt;</operator><name pos:start="381:16" pos:end="381:22">kdfhash</name></name> <operator pos:start="381:24" pos:end="381:24">=</operator> <name pos:start="381:26" pos:end="381:29">hash</name></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="385:59"><expr pos:start="383:9" pos:end="385:58"><name pos:start="383:9" pos:end="383:18"><name pos:start="383:9" pos:end="383:13">block</name><operator pos:start="383:14" pos:end="383:15">-&gt;</operator><name pos:start="383:16" pos:end="383:18">niv</name></name> <operator pos:start="383:20" pos:end="383:20">=</operator> <call pos:start="383:22" pos:end="385:58"><name pos:start="383:22" pos:end="383:46">qcrypto_cipher_get_iv_len</name><argument_list pos:start="383:47" pos:end="385:58">(<argument pos:start="383:48" pos:end="383:56"><expr pos:start="383:48" pos:end="383:56"><name pos:start="383:48" pos:end="383:56">cipheralg</name></expr></argument>,

                                               <argument pos:start="385:48" pos:end="385:57"><expr pos:start="385:48" pos:end="385:57"><name pos:start="385:48" pos:end="385:57">ciphermode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="395:47"><expr pos:start="387:9" pos:end="395:46"><name pos:start="387:9" pos:end="387:20"><name pos:start="387:9" pos:end="387:13">block</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:20">ivgen</name></name> <operator pos:start="387:22" pos:end="387:22">=</operator> <call pos:start="387:24" pos:end="395:46"><name pos:start="387:24" pos:end="387:40">qcrypto_ivgen_new</name><argument_list pos:start="387:41" pos:end="395:46">(<argument pos:start="387:42" pos:end="387:46"><expr pos:start="387:42" pos:end="387:46"><name pos:start="387:42" pos:end="387:46">ivalg</name></expr></argument>,

                                         <argument pos:start="389:42" pos:end="389:52"><expr pos:start="389:42" pos:end="389:52"><name pos:start="389:42" pos:end="389:52">ivcipheralg</name></expr></argument>,

                                         <argument pos:start="391:42" pos:end="391:47"><expr pos:start="391:42" pos:end="391:47"><name pos:start="391:42" pos:end="391:47">ivhash</name></expr></argument>,

                                         <argument pos:start="393:42" pos:end="393:50"><expr pos:start="393:42" pos:end="393:50"><name pos:start="393:42" pos:end="393:50">masterkey</name></expr></argument>, <argument pos:start="393:53" pos:end="393:64"><expr pos:start="393:53" pos:end="393:64"><name pos:start="393:53" pos:end="393:64">masterkeylen</name></expr></argument>,

                                         <argument pos:start="395:42" pos:end="395:45"><expr pos:start="395:42" pos:end="395:45"><name pos:start="395:42" pos:end="395:45">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="397:9" pos:end="403:9"><if pos:start="397:9" pos:end="403:9">if <condition pos:start="397:12" pos:end="397:26">(<expr pos:start="397:13" pos:end="397:25"><operator pos:start="397:13" pos:end="397:13">!</operator><name pos:start="397:14" pos:end="397:25"><name pos:start="397:14" pos:end="397:18">block</name><operator pos:start="397:19" pos:end="397:20">-&gt;</operator><name pos:start="397:21" pos:end="397:25">ivgen</name></name></expr>)</condition> <block pos:start="397:28" pos:end="403:9">{<block_content pos:start="399:13" pos:end="401:22">

            <expr_stmt pos:start="399:13" pos:end="399:27"><expr pos:start="399:13" pos:end="399:26"><name pos:start="399:13" pos:end="399:15">ret</name> <operator pos:start="399:17" pos:end="399:17">=</operator> <operator pos:start="399:19" pos:end="399:19">-</operator><name pos:start="399:20" pos:end="399:26">ENOTSUP</name></expr>;</expr_stmt>

            <goto pos:start="401:13" pos:end="401:22">goto <name pos:start="401:18" pos:end="401:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="407:9" pos:end="413:49"><expr pos:start="407:9" pos:end="413:48"><name pos:start="407:9" pos:end="407:21"><name pos:start="407:9" pos:end="407:13">block</name><operator pos:start="407:14" pos:end="407:15">-&gt;</operator><name pos:start="407:16" pos:end="407:21">cipher</name></name> <operator pos:start="407:23" pos:end="407:23">=</operator> <call pos:start="407:25" pos:end="413:48"><name pos:start="407:25" pos:end="407:42">qcrypto_cipher_new</name><argument_list pos:start="407:43" pos:end="413:48">(<argument pos:start="407:44" pos:end="407:52"><expr pos:start="407:44" pos:end="407:52"><name pos:start="407:44" pos:end="407:52">cipheralg</name></expr></argument>,

                                           <argument pos:start="409:44" pos:end="409:53"><expr pos:start="409:44" pos:end="409:53"><name pos:start="409:44" pos:end="409:53">ciphermode</name></expr></argument>,

                                           <argument pos:start="411:44" pos:end="411:52"><expr pos:start="411:44" pos:end="411:52"><name pos:start="411:44" pos:end="411:52">masterkey</name></expr></argument>, <argument pos:start="411:55" pos:end="411:66"><expr pos:start="411:55" pos:end="411:66"><name pos:start="411:55" pos:end="411:66">masterkeylen</name></expr></argument>,

                                           <argument pos:start="413:44" pos:end="413:47"><expr pos:start="413:44" pos:end="413:47"><name pos:start="413:44" pos:end="413:47">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="415:9" pos:end="421:9"><if pos:start="415:9" pos:end="421:9">if <condition pos:start="415:12" pos:end="415:27">(<expr pos:start="415:13" pos:end="415:26"><operator pos:start="415:13" pos:end="415:13">!</operator><name pos:start="415:14" pos:end="415:26"><name pos:start="415:14" pos:end="415:18">block</name><operator pos:start="415:19" pos:end="415:20">-&gt;</operator><name pos:start="415:21" pos:end="415:26">cipher</name></name></expr>)</condition> <block pos:start="415:29" pos:end="421:9">{<block_content pos:start="417:13" pos:end="419:22">

            <expr_stmt pos:start="417:13" pos:end="417:27"><expr pos:start="417:13" pos:end="417:26"><name pos:start="417:13" pos:end="417:15">ret</name> <operator pos:start="417:17" pos:end="417:17">=</operator> <operator pos:start="417:19" pos:end="417:19">-</operator><name pos:start="417:20" pos:end="417:26">ENOTSUP</name></expr>;</expr_stmt>

            <goto pos:start="419:13" pos:end="419:22">goto <name pos:start="419:18" pos:end="419:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="427:5" pos:end="429:39"><expr pos:start="427:5" pos:end="429:38"><name pos:start="427:5" pos:end="427:25"><name pos:start="427:5" pos:end="427:9">block</name><operator pos:start="427:10" pos:end="427:11">-&gt;</operator><name pos:start="427:12" pos:end="427:25">payload_offset</name></name> <operator pos:start="427:27" pos:end="427:27">=</operator> <name pos:start="427:29" pos:end="427:55"><name pos:start="427:29" pos:end="427:32">luks</name><operator pos:start="427:33" pos:end="427:34">-&gt;</operator><name pos:start="427:35" pos:end="427:40">header</name><operator pos:start="427:41" pos:end="427:41">.</operator><name pos:start="427:42" pos:end="427:55">payload_offset</name></name> <operator pos:start="427:57" pos:end="427:57">*</operator>

        <name pos:start="429:9" pos:end="429:38">QCRYPTO_BLOCK_LUKS_SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="433:5" pos:end="433:33"><expr pos:start="433:5" pos:end="433:32"><name pos:start="433:5" pos:end="433:20"><name pos:start="433:5" pos:end="433:8">luks</name><operator pos:start="433:9" pos:end="433:10">-&gt;</operator><name pos:start="433:11" pos:end="433:20">cipher_alg</name></name> <operator pos:start="433:22" pos:end="433:22">=</operator> <name pos:start="433:24" pos:end="433:32">cipheralg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:35"><expr pos:start="435:5" pos:end="435:34"><name pos:start="435:5" pos:end="435:21"><name pos:start="435:5" pos:end="435:8">luks</name><operator pos:start="435:9" pos:end="435:10">-&gt;</operator><name pos:start="435:11" pos:end="435:21">cipher_mode</name></name> <operator pos:start="435:23" pos:end="435:23">=</operator> <name pos:start="435:25" pos:end="435:34">ciphermode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:28"><expr pos:start="437:5" pos:end="437:27"><name pos:start="437:5" pos:end="437:19"><name pos:start="437:5" pos:end="437:8">luks</name><operator pos:start="437:9" pos:end="437:10">-&gt;</operator><name pos:start="437:11" pos:end="437:19">ivgen_alg</name></name> <operator pos:start="437:21" pos:end="437:21">=</operator> <name pos:start="437:23" pos:end="437:27">ivalg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:34"><expr pos:start="439:5" pos:end="439:33"><name pos:start="439:5" pos:end="439:24"><name pos:start="439:5" pos:end="439:8">luks</name><operator pos:start="439:9" pos:end="439:10">-&gt;</operator><name pos:start="439:11" pos:end="439:24">ivgen_hash_alg</name></name> <operator pos:start="439:26" pos:end="439:26">=</operator> <name pos:start="439:28" pos:end="439:33">ivhash</name></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:26"><expr pos:start="441:5" pos:end="441:25"><name pos:start="441:5" pos:end="441:18"><name pos:start="441:5" pos:end="441:8">luks</name><operator pos:start="441:9" pos:end="441:10">-&gt;</operator><name pos:start="441:11" pos:end="441:18">hash_alg</name></name> <operator pos:start="441:20" pos:end="441:20">=</operator> <name pos:start="441:22" pos:end="441:25">hash</name></expr>;</expr_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:22"><expr pos:start="445:5" pos:end="445:21"><call pos:start="445:5" pos:end="445:21"><name pos:start="445:5" pos:end="445:10">g_free</name><argument_list pos:start="445:11" pos:end="445:21">(<argument pos:start="445:12" pos:end="445:20"><expr pos:start="445:12" pos:end="445:20"><name pos:start="445:12" pos:end="445:20">masterkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:21"><expr pos:start="447:5" pos:end="447:20"><call pos:start="447:5" pos:end="447:20"><name pos:start="447:5" pos:end="447:10">g_free</name><argument_list pos:start="447:11" pos:end="447:20">(<argument pos:start="447:12" pos:end="447:19"><expr pos:start="447:12" pos:end="447:19"><name pos:start="447:12" pos:end="447:19">password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="451:5" pos:end="451:13">return <expr pos:start="451:12" pos:end="451:12"><literal type="number" pos:start="451:12" pos:end="451:12">0</literal></expr>;</return>



 <label pos:start="455:2" pos:end="455:6"><name pos:start="455:2" pos:end="455:5">fail</name>:</label>

    <expr_stmt pos:start="457:5" pos:end="457:22"><expr pos:start="457:5" pos:end="457:21"><call pos:start="457:5" pos:end="457:21"><name pos:start="457:5" pos:end="457:10">g_free</name><argument_list pos:start="457:11" pos:end="457:21">(<argument pos:start="457:12" pos:end="457:20"><expr pos:start="457:12" pos:end="457:20"><name pos:start="457:12" pos:end="457:20">masterkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="459:5" pos:end="459:39"><expr pos:start="459:5" pos:end="459:38"><call pos:start="459:5" pos:end="459:38"><name pos:start="459:5" pos:end="459:23">qcrypto_cipher_free</name><argument_list pos:start="459:24" pos:end="459:38">(<argument pos:start="459:25" pos:end="459:37"><expr pos:start="459:25" pos:end="459:37"><name pos:start="459:25" pos:end="459:37"><name pos:start="459:25" pos:end="459:29">block</name><operator pos:start="459:30" pos:end="459:31">-&gt;</operator><name pos:start="459:32" pos:end="459:37">cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="461:5" pos:end="461:37"><expr pos:start="461:5" pos:end="461:36"><call pos:start="461:5" pos:end="461:36"><name pos:start="461:5" pos:end="461:22">qcrypto_ivgen_free</name><argument_list pos:start="461:23" pos:end="461:36">(<argument pos:start="461:24" pos:end="461:35"><expr pos:start="461:24" pos:end="461:35"><name pos:start="461:24" pos:end="461:35"><name pos:start="461:24" pos:end="461:28">block</name><operator pos:start="461:29" pos:end="461:30">-&gt;</operator><name pos:start="461:31" pos:end="461:35">ivgen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:17"><expr pos:start="463:5" pos:end="463:16"><call pos:start="463:5" pos:end="463:16"><name pos:start="463:5" pos:end="463:10">g_free</name><argument_list pos:start="463:11" pos:end="463:16">(<argument pos:start="463:12" pos:end="463:15"><expr pos:start="463:12" pos:end="463:15"><name pos:start="463:12" pos:end="463:15">luks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:21"><expr pos:start="465:5" pos:end="465:20"><call pos:start="465:5" pos:end="465:20"><name pos:start="465:5" pos:end="465:10">g_free</name><argument_list pos:start="465:11" pos:end="465:20">(<argument pos:start="465:12" pos:end="465:19"><expr pos:start="465:12" pos:end="465:19"><name pos:start="465:12" pos:end="465:19">password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="467:5" pos:end="467:15">return <expr pos:start="467:12" pos:end="467:14"><name pos:start="467:12" pos:end="467:14">ret</name></expr>;</return>

</block_content>}</block>
</unit>
