<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14754.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ass_encode_frame</name><parameter_list pos:start="1:28" pos:end="5:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:36">unsigned</name> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:59"><decl pos:start="3:49" pos:end="3:59"><type pos:start="3:49" pos:end="3:59"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:59">bufsize</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:49"><decl pos:start="5:29" pos:end="5:49"><type pos:start="5:29" pos:end="5:49"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:44">AVSubtitle</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:49">sub</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="111:1">{<block_content pos:start="9:5" pos:end="109:21">

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">ASSEncodeContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">len</name></decl>, <decl pos:start="11:17" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:25">total_len</name> <init pos:start="11:27" pos:end="11:29">= <expr pos:start="11:29" pos:end="11:29"><literal type="number" pos:start="11:29" pos:end="11:29">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="105:5">for <control pos:start="15:9" pos:end="15:36">(<init pos:start="15:10" pos:end="15:13"><expr pos:start="15:10" pos:end="15:12"><name pos:start="15:10" pos:end="15:10">i</name><operator pos:start="15:11" pos:end="15:11">=</operator><literal type="number" pos:start="15:12" pos:end="15:12">0</literal></expr>;</init> <condition pos:start="15:15" pos:end="15:31"><expr pos:start="15:15" pos:end="15:30"><name pos:start="15:15" pos:end="15:15">i</name><operator pos:start="15:16" pos:end="15:16">&lt;</operator><name pos:start="15:17" pos:end="15:30"><name pos:start="15:17" pos:end="15:19">sub</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:30">num_rects</name></name></expr>;</condition> <incr pos:start="15:33" pos:end="15:35"><expr pos:start="15:33" pos:end="15:35"><name pos:start="15:33" pos:end="15:33">i</name><operator pos:start="15:34" pos:end="15:35">++</operator></expr></incr>)</control> <block pos:start="15:38" pos:end="105:5">{<block_content pos:start="17:9" pos:end="103:25">

        <decl_stmt pos:start="17:9" pos:end="17:28"><decl pos:start="17:9" pos:end="17:27"><type pos:start="17:9" pos:end="17:12"><name pos:start="17:9" pos:end="17:12">char</name></type> <name pos:start="17:14" pos:end="17:27"><name pos:start="17:14" pos:end="17:21">ass_line</name><index pos:start="17:22" pos:end="17:27">[<expr pos:start="17:23" pos:end="17:26"><literal type="number" pos:start="17:23" pos:end="17:26">2048</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:45"><decl pos:start="19:9" pos:end="19:44"><type pos:start="19:9" pos:end="19:20"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:18">char</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">ass</name> <init pos:start="19:25" pos:end="19:44">= <expr pos:start="19:27" pos:end="19:44"><name pos:start="19:27" pos:end="19:39"><name pos:start="19:27" pos:end="19:29">sub</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:36">rects</name><index pos:start="19:37" pos:end="19:39">[<expr pos:start="19:38" pos:end="19:38"><name pos:start="19:38" pos:end="19:38">i</name></expr>]</index></name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:44">ass</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:48">(<expr pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:15">sub</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:22">rects</name><index pos:start="23:23" pos:end="23:25">[<expr pos:start="23:24" pos:end="23:24"><name pos:start="23:24" pos:end="23:24">i</name></expr>]</index></name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:31">type</name> <operator pos:start="23:33" pos:end="23:34">!=</operator> <name pos:start="23:36" pos:end="23:47">SUBTITLE_ASS</name></expr>)</condition> <block pos:start="23:50" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:22">

            <expr_stmt pos:start="25:13" pos:end="25:79"><expr pos:start="25:13" pos:end="25:78"><call pos:start="25:13" pos:end="25:78"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="25:78">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:41" pos:end="25:77"><expr pos:start="25:41" pos:end="25:77"><literal type="string" pos:start="25:41" pos:end="25:77">"Only SUBTITLE_ASS type supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:43">(<expr pos:start="33:13" pos:end="33:42"><call pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:19">strncmp</name><argument_list pos:start="33:20" pos:end="33:42">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">ass</name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><literal type="string" pos:start="33:26" pos:end="33:37">"Dialogue: "</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:41"><expr pos:start="33:40" pos:end="33:41"><literal type="number" pos:start="33:40" pos:end="33:41">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:45" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:39">

            <expr_stmt pos:start="35:13" pos:end="37:62"><expr pos:start="35:13" pos:end="37:61"><call pos:start="35:13" pos:end="37:61"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="37:61">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="37:55"><expr pos:start="35:41" pos:end="37:55"><literal type="string" pos:start="35:41" pos:end="35:73">"AVSubtitle rectangle ass \"%s\""</literal>

                   <literal type="string" pos:start="37:20" pos:end="37:55">" does not look like a SSA markup\n"</literal></expr></argument>, <argument pos:start="37:58" pos:end="37:60"><expr pos:start="37:58" pos:end="37:60"><name pos:start="37:58" pos:end="37:60">ass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:39">return <expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="45:9" pos:end="87:9"><if pos:start="45:9" pos:end="87:9">if <condition pos:start="45:12" pos:end="45:48">(<expr pos:start="45:13" pos:end="45:47"><name pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:17">avctx</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:24">codec</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:28">id</name></name> <operator pos:start="45:30" pos:end="45:31">==</operator> <name pos:start="45:33" pos:end="45:47">AV_CODEC_ID_ASS</name></expr>)</condition> <block pos:start="45:50" pos:end="87:9">{<block_content pos:start="47:13" pos:end="85:27">

            <decl_stmt pos:start="47:13" pos:end="47:27"><decl pos:start="47:13" pos:end="47:26"><type pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:16">long</name> <name pos:start="47:18" pos:end="47:20">int</name></type> <name pos:start="47:22" pos:end="47:26">layer</name></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:20"><decl pos:start="49:13" pos:end="49:19"><type pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:16">char</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:19">p</name></decl>;</decl_stmt>



            <if_stmt pos:start="53:13" pos:end="61:13"><if pos:start="53:13" pos:end="61:13">if <condition pos:start="53:16" pos:end="53:22">(<expr pos:start="53:17" pos:end="53:21"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&gt;</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="61:13">{<block_content pos:start="55:17" pos:end="59:43">

                <expr_stmt pos:start="55:17" pos:end="57:49"><expr pos:start="55:17" pos:end="57:48"><call pos:start="55:17" pos:end="57:48"><name pos:start="55:17" pos:end="55:22">av_log</name><argument_list pos:start="55:23" pos:end="57:48">(<argument pos:start="55:24" pos:end="55:28"><expr pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:28">avctx</name></expr></argument>, <argument pos:start="55:31" pos:end="55:42"><expr pos:start="55:31" pos:end="55:42"><name pos:start="55:31" pos:end="55:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:45" pos:end="57:47"><expr pos:start="55:45" pos:end="57:47"><literal type="string" pos:start="55:45" pos:end="55:76">"ASS encoder supports only one "</literal>

                       <literal type="string" pos:start="57:24" pos:end="57:47">"ASS rectangle field.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="59:17" pos:end="59:43">return <expr pos:start="59:24" pos:end="59:42"><name pos:start="59:24" pos:end="59:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:22"><expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:15">ass</name> <operator pos:start="65:17" pos:end="65:18">+=</operator> <literal type="number" pos:start="65:20" pos:end="65:21">10</literal></expr>;</expr_stmt> <comment type="line" pos:start="65:24" pos:end="65:43">// skip "Dialogue: "</comment>

            <comment type="block" pos:start="67:13" pos:end="71:46">/* parse Layer field. If it's a Marked field, the content

             * will be "Marked=N" instead of the layer num, so we will

             * have layer=0, which is fine. */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:40"><expr pos:start="73:13" pos:end="73:39"><name pos:start="73:13" pos:end="73:17">layer</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:39"><name pos:start="73:21" pos:end="73:26">strtol</name><argument_list pos:start="73:27" pos:end="73:39">(<argument pos:start="73:28" pos:end="73:30"><expr pos:start="73:28" pos:end="73:30"><name pos:start="73:28" pos:end="73:30">ass</name></expr></argument>, <argument pos:start="73:33" pos:end="73:34"><expr pos:start="73:33" pos:end="73:34"><operator pos:start="73:33" pos:end="73:33">&amp;</operator><name pos:start="73:34" pos:end="73:34">p</name></expr></argument>, <argument pos:start="73:37" pos:end="73:38"><expr pos:start="73:37" pos:end="73:38"><literal type="number" pos:start="73:37" pos:end="73:38">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="75:45"><if pos:start="75:13" pos:end="75:45">if <condition pos:start="75:16" pos:end="75:19">(<expr pos:start="75:17" pos:end="75:18"><operator pos:start="75:17" pos:end="75:17">*</operator><name pos:start="75:18" pos:end="75:18">p</name></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:45"><block_content pos:start="75:21" pos:end="75:45"> <expr_stmt pos:start="75:21" pos:end="75:45"><expr pos:start="75:21" pos:end="75:44"><name pos:start="75:21" pos:end="75:21">p</name> <operator pos:start="75:23" pos:end="75:24">+=</operator> <call pos:start="75:26" pos:end="75:40"><name pos:start="75:26" pos:end="75:32">strcspn</name><argument_list pos:start="75:33" pos:end="75:40">(<argument pos:start="75:34" pos:end="75:34"><expr pos:start="75:34" pos:end="75:34"><name pos:start="75:34" pos:end="75:34">p</name></expr></argument>, <argument pos:start="75:37" pos:end="75:39"><expr pos:start="75:37" pos:end="75:39"><literal type="string" pos:start="75:37" pos:end="75:39">","</literal></expr></argument>)</argument_list></call> <operator pos:start="75:42" pos:end="75:42">+</operator> <literal type="number" pos:start="75:44" pos:end="75:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="75:47" pos:end="75:69">// skip layer or marked</comment>

            <if_stmt pos:start="77:13" pos:end="77:45"><if pos:start="77:13" pos:end="77:45">if <condition pos:start="77:16" pos:end="77:19">(<expr pos:start="77:17" pos:end="77:18"><operator pos:start="77:17" pos:end="77:17">*</operator><name pos:start="77:18" pos:end="77:18">p</name></expr>)</condition><block type="pseudo" pos:start="77:21" pos:end="77:45"><block_content pos:start="77:21" pos:end="77:45"> <expr_stmt pos:start="77:21" pos:end="77:45"><expr pos:start="77:21" pos:end="77:44"><name pos:start="77:21" pos:end="77:21">p</name> <operator pos:start="77:23" pos:end="77:24">+=</operator> <call pos:start="77:26" pos:end="77:40"><name pos:start="77:26" pos:end="77:32">strcspn</name><argument_list pos:start="77:33" pos:end="77:40">(<argument pos:start="77:34" pos:end="77:34"><expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">p</name></expr></argument>, <argument pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><literal type="string" pos:start="77:37" pos:end="77:39">","</literal></expr></argument>)</argument_list></call> <operator pos:start="77:42" pos:end="77:42">+</operator> <literal type="number" pos:start="77:44" pos:end="77:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="77:47" pos:end="77:69">// skip start timestamp</comment>

            <if_stmt pos:start="79:13" pos:end="79:45"><if pos:start="79:13" pos:end="79:45">if <condition pos:start="79:16" pos:end="79:19">(<expr pos:start="79:17" pos:end="79:18"><operator pos:start="79:17" pos:end="79:17">*</operator><name pos:start="79:18" pos:end="79:18">p</name></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="79:45"><block_content pos:start="79:21" pos:end="79:45"> <expr_stmt pos:start="79:21" pos:end="79:45"><expr pos:start="79:21" pos:end="79:44"><name pos:start="79:21" pos:end="79:21">p</name> <operator pos:start="79:23" pos:end="79:24">+=</operator> <call pos:start="79:26" pos:end="79:40"><name pos:start="79:26" pos:end="79:32">strcspn</name><argument_list pos:start="79:33" pos:end="79:40">(<argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><name pos:start="79:34" pos:end="79:34">p</name></expr></argument>, <argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><literal type="string" pos:start="79:37" pos:end="79:39">","</literal></expr></argument>)</argument_list></call> <operator pos:start="79:42" pos:end="79:42">+</operator> <literal type="number" pos:start="79:44" pos:end="79:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="79:47" pos:end="79:67">// skip end timestamp</comment>

            <expr_stmt pos:start="81:13" pos:end="81:81"><expr pos:start="81:13" pos:end="81:80"><call pos:start="81:13" pos:end="81:80"><name pos:start="81:13" pos:end="81:20">snprintf</name><argument_list pos:start="81:21" pos:end="81:80">(<argument pos:start="81:22" pos:end="81:29"><expr pos:start="81:22" pos:end="81:29"><name pos:start="81:22" pos:end="81:29">ass_line</name></expr></argument>, <argument pos:start="81:32" pos:end="81:47"><expr pos:start="81:32" pos:end="81:47"><sizeof pos:start="81:32" pos:end="81:47">sizeof<argument_list pos:start="81:38" pos:end="81:47">(<argument pos:start="81:39" pos:end="81:46"><expr pos:start="81:39" pos:end="81:46"><name pos:start="81:39" pos:end="81:46">ass_line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:50" pos:end="81:60"><expr pos:start="81:50" pos:end="81:60"><literal type="string" pos:start="81:50" pos:end="81:60">"%d,%ld,%s"</literal></expr></argument>, <argument pos:start="81:63" pos:end="81:69"><expr pos:start="81:63" pos:end="81:69"><operator pos:start="81:63" pos:end="81:64">++</operator><name pos:start="81:65" pos:end="81:69"><name pos:start="81:65" pos:end="81:65">s</name><operator pos:start="81:66" pos:end="81:67">-&gt;</operator><name pos:start="81:68" pos:end="81:69">id</name></name></expr></argument>, <argument pos:start="81:72" pos:end="81:76"><expr pos:start="81:72" pos:end="81:76"><name pos:start="81:72" pos:end="81:76">layer</name></expr></argument>, <argument pos:start="81:79" pos:end="81:79"><expr pos:start="81:79" pos:end="81:79"><name pos:start="81:79" pos:end="81:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:52"><expr pos:start="83:13" pos:end="83:51"><name pos:start="83:13" pos:end="83:47"><name pos:start="83:13" pos:end="83:20">ass_line</name><index pos:start="83:21" pos:end="83:47">[<expr pos:start="83:22" pos:end="83:46"><call pos:start="83:22" pos:end="83:46"><name pos:start="83:22" pos:end="83:28">strcspn</name><argument_list pos:start="83:29" pos:end="83:46">(<argument pos:start="83:30" pos:end="83:37"><expr pos:start="83:30" pos:end="83:37"><name pos:start="83:30" pos:end="83:37">ass_line</name></expr></argument>, <argument pos:start="83:40" pos:end="83:45"><expr pos:start="83:40" pos:end="83:45"><literal type="string" pos:start="83:40" pos:end="83:45">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="83:49" pos:end="83:49">=</operator> <literal type="number" pos:start="83:51" pos:end="83:51">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:15">ass</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:26">ass_line</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:64"><expr pos:start="89:9" pos:end="89:63"><name pos:start="89:9" pos:end="89:11">len</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:63"><name pos:start="89:15" pos:end="89:24">av_strlcpy</name><argument_list pos:start="89:25" pos:end="89:63">(<argument pos:start="89:26" pos:end="89:38"><expr pos:start="89:26" pos:end="89:38"><name pos:start="89:26" pos:end="89:28">buf</name><operator pos:start="89:29" pos:end="89:29">+</operator><name pos:start="89:30" pos:end="89:38">total_len</name></expr></argument>, <argument pos:start="89:41" pos:end="89:43"><expr pos:start="89:41" pos:end="89:43"><name pos:start="89:41" pos:end="89:43">ass</name></expr></argument>, <argument pos:start="89:46" pos:end="89:62"><expr pos:start="89:46" pos:end="89:62"><name pos:start="89:46" pos:end="89:52">bufsize</name><operator pos:start="89:53" pos:end="89:53">-</operator><name pos:start="89:54" pos:end="89:62">total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:38">(<expr pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:15">len</name> <operator pos:start="93:17" pos:end="93:17">&gt;</operator> <name pos:start="93:19" pos:end="93:25">bufsize</name><operator pos:start="93:26" pos:end="93:26">-</operator><name pos:start="93:27" pos:end="93:35">total_len</name><operator pos:start="93:36" pos:end="93:36">-</operator><literal type="number" pos:start="93:37" pos:end="93:37">1</literal></expr>)</condition> <block pos:start="93:40" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:22">

            <expr_stmt pos:start="95:13" pos:end="95:77"><expr pos:start="95:13" pos:end="95:76"><call pos:start="95:13" pos:end="95:76"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="95:76">(<argument pos:start="95:20" pos:end="95:24"><expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">avctx</name></expr></argument>, <argument pos:start="95:27" pos:end="95:38"><expr pos:start="95:27" pos:end="95:38"><name pos:start="95:27" pos:end="95:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:41" pos:end="95:75"><expr pos:start="95:41" pos:end="95:75"><literal type="string" pos:start="95:41" pos:end="95:75">"Buffer too small for ASS event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:22">return <expr pos:start="97:20" pos:end="97:21"><operator pos:start="97:20" pos:end="97:20">-</operator><literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:25"><expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:17">total_len</name> <operator pos:start="103:19" pos:end="103:20">+=</operator> <name pos:start="103:22" pos:end="103:24">len</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="109:5" pos:end="109:21">return <expr pos:start="109:12" pos:end="109:20"><name pos:start="109:12" pos:end="109:20">total_len</name></expr>;</return>

</block_content>}</block></function>
</unit>
