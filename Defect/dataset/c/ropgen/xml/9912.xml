<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9912.c" pos:tabs="8"><function pos:start="1:1" pos:end="84:15"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">CharDriverState</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:35">qemu_chr_open_opts</name><parameter_list pos:start="1:36" pos:end="3:76">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:44">QemuOpts</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">opts</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:75"><function_decl pos:start="3:37" pos:end="3:75"><type pos:start="3:37" pos:end="3:40"><name pos:start="3:37" pos:end="3:40">void</name></type> (<modifier pos:start="3:43" pos:end="3:43">*</modifier><name pos:start="3:44" pos:end="3:47">init</name>)<parameter_list pos:start="3:49" pos:end="3:75">(<parameter pos:start="3:50" pos:end="3:74"><decl pos:start="3:50" pos:end="3:74"><type pos:start="3:50" pos:end="3:74"><name pos:start="3:50" pos:end="3:71"><name pos:start="3:50" pos:end="3:55">struct</name> <name pos:start="3:57" pos:end="3:71">CharDriverState</name></name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:74">s</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="84:15">{<block_content pos:start="7:5" pos:end="84:15">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">CharDriverState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="84:15"><if pos:start="13:5" pos:end="84:15">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><call pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:20">qemu_opts_id</name><argument_list pos:start="13:21" pos:end="13:26">(<argument pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">opts</name></expr></argument>)</argument_list></call> <operator pos:start="13:28" pos:end="13:29">==</operator> <name pos:start="13:31" pos:end="13:34">NULL</name></expr>)</condition> <block pos:start="13:37" pos:end="84:15">{<block_content pos:start="15:9" pos:end="84:15">

        <expr_stmt pos:start="15:9" pos:end="15:54"><expr pos:start="15:9" pos:end="15:53"><call pos:start="15:9" pos:end="15:53"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:53">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:52"><expr pos:start="15:25" pos:end="15:52"><literal type="string" pos:start="15:25" pos:end="15:52">"chardev: no id specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










    <for pos:start="26:5" pos:end="84:15">for <control pos:start="26:9" pos:end="26:51">(<init pos:start="26:10" pos:end="26:15"><expr pos:start="26:10" pos:end="26:14"><name pos:start="26:10" pos:end="26:10">i</name> <operator pos:start="26:12" pos:end="26:12">=</operator> <literal type="number" pos:start="26:14" pos:end="26:14">0</literal></expr>;</init> <condition pos:start="26:17" pos:end="26:46"><expr pos:start="26:17" pos:end="26:45"><name pos:start="26:17" pos:end="26:17">i</name> <operator pos:start="26:19" pos:end="26:19">&lt;</operator> <call pos:start="26:21" pos:end="26:45"><name pos:start="26:21" pos:end="26:30">ARRAY_SIZE</name><argument_list pos:start="26:31" pos:end="26:45">(<argument pos:start="26:32" pos:end="26:44"><expr pos:start="26:32" pos:end="26:44"><name pos:start="26:32" pos:end="26:44">backend_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="26:48" pos:end="26:50"><expr pos:start="26:48" pos:end="26:50"><name pos:start="26:48" pos:end="26:48">i</name><operator pos:start="26:49" pos:end="26:50">++</operator></expr></incr>)</control> <block pos:start="26:53" pos:end="84:15">{<block_content pos:start="28:9" pos:end="84:15">

        <if_stmt pos:start="28:9" pos:end="30:18"><if pos:start="28:9" pos:end="30:18">if <condition pos:start="28:12" pos:end="28:78">(<expr pos:start="28:13" pos:end="28:77"><call pos:start="28:13" pos:end="28:72"><name pos:start="28:13" pos:end="28:18">strcmp</name><argument_list pos:start="28:19" pos:end="28:72">(<argument pos:start="28:20" pos:end="28:40"><expr pos:start="28:20" pos:end="28:40"><name pos:start="28:20" pos:end="28:35"><name pos:start="28:20" pos:end="28:32">backend_table</name><index pos:start="28:33" pos:end="28:35">[<expr pos:start="28:34" pos:end="28:34"><name pos:start="28:34" pos:end="28:34">i</name></expr>]</index></name><operator pos:start="28:36" pos:end="28:36">.</operator><name pos:start="28:37" pos:end="28:40">name</name></expr></argument>, <argument pos:start="28:43" pos:end="28:71"><expr pos:start="28:43" pos:end="28:71"><call pos:start="28:43" pos:end="28:71"><name pos:start="28:43" pos:end="28:54">qemu_opt_get</name><argument_list pos:start="28:55" pos:end="28:71">(<argument pos:start="28:56" pos:end="28:59"><expr pos:start="28:56" pos:end="28:59"><name pos:start="28:56" pos:end="28:59">opts</name></expr></argument>, <argument pos:start="28:62" pos:end="28:70"><expr pos:start="28:62" pos:end="28:70"><literal type="string" pos:start="28:62" pos:end="28:70">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="28:74" pos:end="28:75">==</operator> <literal type="number" pos:start="28:77" pos:end="28:77">0</literal></expr>)</condition><block type="pseudo" pos:start="30:13" pos:end="30:18"><block_content pos:start="30:13" pos:end="30:18">

            <break pos:start="30:13" pos:end="30:18">break;</break></block_content></block></if></if_stmt>


    <if_stmt pos:start="33:5" pos:end="84:15"><if pos:start="33:5" pos:end="84:15">if <condition pos:start="33:8" pos:end="33:39">(<expr pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:9">i</name> <operator pos:start="33:11" pos:end="33:12">==</operator> <call pos:start="33:14" pos:end="33:38"><name pos:start="33:14" pos:end="33:23">ARRAY_SIZE</name><argument_list pos:start="33:24" pos:end="33:38">(<argument pos:start="33:25" pos:end="33:37"><expr pos:start="33:25" pos:end="33:37"><name pos:start="33:25" pos:end="33:37">backend_table</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:41" pos:end="84:15">{<block_content pos:start="35:9" pos:end="84:15">

        <expr_stmt pos:start="35:9" pos:end="37:47"><expr pos:start="35:9" pos:end="37:46"><call pos:start="35:9" pos:end="37:46"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="37:46">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:61"><expr pos:start="35:25" pos:end="35:61"><literal type="string" pos:start="35:25" pos:end="35:61">"chardev: backend \"%s\" not found\n"</literal></expr></argument>,

                <argument pos:start="37:17" pos:end="37:45"><expr pos:start="37:17" pos:end="37:45"><call pos:start="37:17" pos:end="37:45"><name pos:start="37:17" pos:end="37:28">qemu_opt_get</name><argument_list pos:start="37:29" pos:end="37:45">(<argument pos:start="37:30" pos:end="37:33"><expr pos:start="37:30" pos:end="37:33"><name pos:start="37:30" pos:end="37:33">opts</name></expr></argument>, <argument pos:start="37:36" pos:end="37:44"><expr pos:start="37:36" pos:end="37:44"><literal type="string" pos:start="37:36" pos:end="37:44">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:7">chr</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <name pos:start="43:11" pos:end="43:26"><name pos:start="43:11" pos:end="43:23">backend_table</name><index pos:start="43:24" pos:end="43:26">[<expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">i</name></expr>]</index></name><operator pos:start="43:27" pos:end="43:27">.</operator><call pos:start="43:28" pos:end="43:37"><name pos:start="43:28" pos:end="43:31">open</name><argument_list pos:start="43:32" pos:end="43:37">(<argument pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:36"><name pos:start="43:33" pos:end="43:36">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="84:15"><if pos:start="45:5" pos:end="84:15">if <condition pos:start="45:8" pos:end="45:13">(<expr pos:start="45:9" pos:end="45:12"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:12">chr</name></expr>)</condition> <block pos:start="45:15" pos:end="84:15">{<block_content pos:start="47:9" pos:end="84:15">

        <expr_stmt pos:start="47:9" pos:end="49:47"><expr pos:start="47:9" pos:end="49:46"><call pos:start="47:9" pos:end="49:46"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="49:46">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:66"><expr pos:start="47:25" pos:end="47:66"><literal type="string" pos:start="47:25" pos:end="47:66">"chardev: opening backend \"%s\" failed\n"</literal></expr></argument>,

                <argument pos:start="49:17" pos:end="49:45"><expr pos:start="49:17" pos:end="49:45"><call pos:start="49:17" pos:end="49:45"><name pos:start="49:17" pos:end="49:28">qemu_opt_get</name><argument_list pos:start="49:29" pos:end="49:45">(<argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">opts</name></expr></argument>, <argument pos:start="49:36" pos:end="49:44"><expr pos:start="49:36" pos:end="49:44"><literal type="string" pos:start="49:36" pos:end="49:44">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="55:5" pos:end="57:67"><if pos:start="55:5" pos:end="57:67">if <condition pos:start="55:8" pos:end="55:23">(<expr pos:start="55:9" pos:end="55:22"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:22"><name pos:start="55:10" pos:end="55:12">chr</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:22">filename</name></name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:67"><block_content pos:start="57:9" pos:end="57:67">

        <expr_stmt pos:start="57:9" pos:end="57:67"><expr pos:start="57:9" pos:end="57:66"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:11">chr</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:21">filename</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:66"><name pos:start="57:25" pos:end="57:35">qemu_strdup</name><argument_list pos:start="57:36" pos:end="57:66">(<argument pos:start="57:37" pos:end="57:65"><expr pos:start="57:37" pos:end="57:65"><call pos:start="57:37" pos:end="57:65"><name pos:start="57:37" pos:end="57:48">qemu_opt_get</name><argument_list pos:start="57:49" pos:end="57:65">(<argument pos:start="57:50" pos:end="57:53"><expr pos:start="57:50" pos:end="57:53"><name pos:start="57:50" pos:end="57:53">opts</name></expr></argument>, <argument pos:start="57:56" pos:end="57:64"><expr pos:start="57:56" pos:end="57:64"><literal type="string" pos:start="57:56" pos:end="57:64">"backend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:13"><name pos:start="59:5" pos:end="59:7">chr</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:13">init</name></name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:20">init</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><call pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="61:23" pos:end="61:44">(<argument pos:start="61:24" pos:end="61:32"><expr pos:start="61:24" pos:end="61:32"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:32">chardevs</name></expr></argument>, <argument pos:start="61:35" pos:end="61:37"><expr pos:start="61:35" pos:end="61:37"><name pos:start="61:35" pos:end="61:37">chr</name></expr></argument>, <argument pos:start="61:40" pos:end="61:43"><expr pos:start="61:40" pos:end="61:43"><name pos:start="61:40" pos:end="61:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="84:15"><if pos:start="65:5" pos:end="84:15">if <condition pos:start="65:8" pos:end="65:42">(<expr pos:start="65:9" pos:end="65:41"><call pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:25">qemu_opt_get_bool</name><argument_list pos:start="65:26" pos:end="65:41">(<argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><name pos:start="65:27" pos:end="65:30">opts</name></expr></argument>, <argument pos:start="65:33" pos:end="65:37"><expr pos:start="65:33" pos:end="65:37"><literal type="string" pos:start="65:33" pos:end="65:37">"mux"</literal></expr></argument>, <argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><literal type="number" pos:start="65:40" pos:end="65:40">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:44" pos:end="84:15">{<block_content pos:start="67:9" pos:end="84:15">

        <decl_stmt pos:start="67:9" pos:end="67:36"><decl pos:start="67:9" pos:end="67:35"><type pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:23">CharDriverState</name> <modifier pos:start="67:25" pos:end="67:25">*</modifier></type><name pos:start="67:26" pos:end="67:29">base</name> <init pos:start="67:31" pos:end="67:35">= <expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:35">chr</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:49"><decl pos:start="69:9" pos:end="69:48"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:15">len</name> <init pos:start="69:17" pos:end="69:48">= <expr pos:start="69:19" pos:end="69:48"><call pos:start="69:19" pos:end="69:44"><name pos:start="69:19" pos:end="69:24">strlen</name><argument_list pos:start="69:25" pos:end="69:44">(<argument pos:start="69:26" pos:end="69:43"><expr pos:start="69:26" pos:end="69:43"><call pos:start="69:26" pos:end="69:43"><name pos:start="69:26" pos:end="69:37">qemu_opts_id</name><argument_list pos:start="69:38" pos:end="69:43">(<argument pos:start="69:39" pos:end="69:42"><expr pos:start="69:39" pos:end="69:42"><name pos:start="69:39" pos:end="69:42">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="69:46" pos:end="69:46">+</operator> <literal type="number" pos:start="69:48" pos:end="69:48">6</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:12">base</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:19">label</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:38"><name pos:start="71:23" pos:end="71:33">qemu_malloc</name><argument_list pos:start="71:34" pos:end="71:38">(<argument pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:66"><expr pos:start="73:9" pos:end="73:65"><call pos:start="73:9" pos:end="73:65"><name pos:start="73:9" pos:end="73:16">snprintf</name><argument_list pos:start="73:17" pos:end="73:65">(<argument pos:start="73:18" pos:end="73:28"><expr pos:start="73:18" pos:end="73:28"><name pos:start="73:18" pos:end="73:28"><name pos:start="73:18" pos:end="73:21">base</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:28">label</name></name></expr></argument>, <argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">len</name></expr></argument>, <argument pos:start="73:36" pos:end="73:44"><expr pos:start="73:36" pos:end="73:44"><literal type="string" pos:start="73:36" pos:end="73:44">"%s-base"</literal></expr></argument>, <argument pos:start="73:47" pos:end="73:64"><expr pos:start="73:47" pos:end="73:64"><call pos:start="73:47" pos:end="73:64"><name pos:start="73:47" pos:end="73:58">qemu_opts_id</name><argument_list pos:start="73:59" pos:end="73:64">(<argument pos:start="73:60" pos:end="73:63"><expr pos:start="73:60" pos:end="73:63"><name pos:start="73:60" pos:end="73:63">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:11">chr</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:37"><name pos:start="75:15" pos:end="75:31">qemu_chr_open_mux</name><argument_list pos:start="75:32" pos:end="75:37">(<argument pos:start="75:33" pos:end="75:36"><expr pos:start="75:33" pos:end="75:36"><name pos:start="75:33" pos:end="75:36">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">chr</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:21">filename</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:38"><name pos:start="77:25" pos:end="77:28">base</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:38">filename</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><call pos:start="79:9" pos:end="79:48"><name pos:start="79:9" pos:end="79:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="79:27" pos:end="79:48">(<argument pos:start="79:28" pos:end="79:36"><expr pos:start="79:28" pos:end="79:36"><operator pos:start="79:28" pos:end="79:28">&amp;</operator><name pos:start="79:29" pos:end="79:36">chardevs</name></expr></argument>, <argument pos:start="79:39" pos:end="79:41"><expr pos:start="79:39" pos:end="79:41"><name pos:start="79:39" pos:end="79:41">chr</name></expr></argument>, <argument pos:start="79:44" pos:end="79:47"><expr pos:start="79:44" pos:end="79:47"><name pos:start="79:44" pos:end="79:47">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="82:5" pos:end="82:49"><expr pos:start="82:5" pos:end="82:48"><name pos:start="82:5" pos:end="82:14"><name pos:start="82:5" pos:end="82:7">chr</name><operator pos:start="82:8" pos:end="82:9">-&gt;</operator><name pos:start="82:10" pos:end="82:14">label</name></name> <operator pos:start="82:16" pos:end="82:16">=</operator> <call pos:start="82:18" pos:end="82:48"><name pos:start="82:18" pos:end="82:28">qemu_strdup</name><argument_list pos:start="82:29" pos:end="82:48">(<argument pos:start="82:30" pos:end="82:47"><expr pos:start="82:30" pos:end="82:47"><call pos:start="82:30" pos:end="82:47"><name pos:start="82:30" pos:end="82:41">qemu_opts_id</name><argument_list pos:start="82:42" pos:end="82:47">(<argument pos:start="82:43" pos:end="82:46"><expr pos:start="82:43" pos:end="82:46"><name pos:start="82:43" pos:end="82:46">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="84:5" pos:end="84:15">return <expr pos:start="84:12" pos:end="84:14"><name pos:start="84:12" pos:end="84:14">chr</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function>
</unit>
