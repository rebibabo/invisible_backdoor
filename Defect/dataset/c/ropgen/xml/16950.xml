<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16950.c" pos:tabs="8"><function pos:start="1:1" pos:end="435:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">cpu_ppc_handle_mmu_fault</name> <parameter_list pos:start="1:30" pos:end="3:58">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:57">target_ulong</name></type> <name pos:start="1:59" pos:end="1:65">address</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:73"><decl pos:start="1:68" pos:end="1:73"><type pos:start="1:68" pos:end="1:73"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:73">rw</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:41"><decl pos:start="3:31" pos:end="3:41"><type pos:start="3:31" pos:end="3:41"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:41">is_user</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:57"><decl pos:start="3:44" pos:end="3:57"><type pos:start="3:44" pos:end="3:57"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:57">is_softmmu</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="435:1">{<block_content pos:start="7:5" pos:end="433:15">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">mmu_ctx_t</name></type> <name pos:start="7:15" pos:end="7:17">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">exception</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>, <decl pos:start="9:24" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:33">error_code</name> <init pos:start="9:35" pos:end="9:37">= <expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">access_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="37:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:10">rw</name> <operator pos:start="17:12" pos:end="17:13">==</operator> <literal type="number" pos:start="17:15" pos:end="17:15">2</literal></expr>)</condition> <block pos:start="17:18" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:34">

        <comment type="block" pos:start="19:9" pos:end="19:25">/* code access */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:15"><expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:10">rw</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:34"><expr pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:19">access_type</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:33">ACCESS_CODE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="37:5">else <block pos:start="25:12" pos:end="37:5">{<block_content pos:start="33:9" pos:end="33:33">

        <comment type="block" pos:start="27:9" pos:end="27:25">/* data access */</comment>

        <comment type="block" pos:start="29:9" pos:end="31:23">/* XXX: put correct access by using cpu_restore_state()

           correctly */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:19">access_type</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:32">ACCESS_INT</name></expr>;</expr_stmt>

        <comment type="line" pos:start="35:9" pos:end="35:49">//        access_type = env-&gt;access_type;</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:71"><expr pos:start="39:5" pos:end="39:70"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:70"><name pos:start="39:11" pos:end="39:30">get_physical_address</name><argument_list pos:start="39:31" pos:end="39:70">(<argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:34">env</name></expr></argument>, <argument pos:start="39:37" pos:end="39:40"><expr pos:start="39:37" pos:end="39:40"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:40">ctx</name></expr></argument>, <argument pos:start="39:43" pos:end="39:49"><expr pos:start="39:43" pos:end="39:49"><name pos:start="39:43" pos:end="39:49">address</name></expr></argument>, <argument pos:start="39:52" pos:end="39:53"><expr pos:start="39:52" pos:end="39:53"><name pos:start="39:52" pos:end="39:53">rw</name></expr></argument>, <argument pos:start="39:56" pos:end="39:66"><expr pos:start="39:56" pos:end="39:66"><name pos:start="39:56" pos:end="39:66">access_type</name></expr></argument>, <argument pos:start="39:69" pos:end="39:69"><expr pos:start="39:69" pos:end="39:69"><literal type="number" pos:start="39:69" pos:end="39:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="429:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:17">(<expr pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>)</condition> <block pos:start="41:19" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:48">

        <expr_stmt pos:start="43:9" pos:end="47:48"><expr pos:start="43:9" pos:end="47:47"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="47:47"><name pos:start="43:15" pos:end="43:26">tlb_set_page</name><argument_list pos:start="43:27" pos:end="47:47">(<argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">env</name></expr></argument>, <argument pos:start="43:33" pos:end="43:58"><expr pos:start="43:33" pos:end="43:58"><name pos:start="43:33" pos:end="43:39">address</name> <operator pos:start="43:41" pos:end="43:41">&amp;</operator> <name pos:start="43:43" pos:end="43:58">TARGET_PAGE_MASK</name></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:55"><expr pos:start="45:28" pos:end="45:55"><name pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:30">ctx</name><operator pos:start="45:31" pos:end="45:31">.</operator><name pos:start="45:32" pos:end="45:36">raddr</name></name> <operator pos:start="45:38" pos:end="45:38">&amp;</operator> <name pos:start="45:40" pos:end="45:55">TARGET_PAGE_MASK</name></expr></argument>, <argument pos:start="45:58" pos:end="45:65"><expr pos:start="45:58" pos:end="45:65"><name pos:start="45:58" pos:end="45:65"><name pos:start="45:58" pos:end="45:60">ctx</name><operator pos:start="45:61" pos:end="45:61">.</operator><name pos:start="45:62" pos:end="45:65">prot</name></name></expr></argument>,

                           <argument pos:start="47:28" pos:end="47:34"><expr pos:start="47:28" pos:end="47:34"><name pos:start="47:28" pos:end="47:34">is_user</name></expr></argument>, <argument pos:start="47:37" pos:end="47:46"><expr pos:start="47:37" pos:end="47:46"><name pos:start="47:37" pos:end="47:46">is_softmmu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="429:5">else if <condition pos:start="49:15" pos:end="49:23">(<expr pos:start="49:16" pos:end="49:22"><name pos:start="49:16" pos:end="49:18">ret</name> <operator pos:start="49:20" pos:end="49:20">&lt;</operator> <literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>)</condition> <block pos:start="49:25" pos:end="429:5">{<block_content pos:start="53:9" pos:end="427:16">

<cpp:if pos:start="51:1" pos:end="51:23">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:23"><call pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:11">defined</name> <argument_list pos:start="51:13" pos:end="51:23">(<argument pos:start="51:14" pos:end="51:22"><expr pos:start="51:14" pos:end="51:22"><name pos:start="51:14" pos:end="51:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="53:9" pos:end="58:0"><if pos:start="53:9" pos:end="58:0">if <condition pos:start="53:12" pos:end="53:26">(<expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:20">loglevel</name> <operator pos:start="53:22" pos:end="53:23">!=</operator> <literal type="number" pos:start="53:25" pos:end="53:25">0</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="58:0"><block_content pos:start="55:13" pos:end="58:0">

            <expr_stmt pos:start="55:13" pos:end="58:0"><expr pos:start="55:13" pos:end="55:52"><call pos:start="55:13" pos:end="55:52"><name pos:start="55:13" pos:end="55:26">cpu_dump_state</name><argument_list pos:start="55:27" pos:end="55:52">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">env</name></expr></argument>, <argument pos:start="55:33" pos:end="55:39"><expr pos:start="55:33" pos:end="55:39"><name pos:start="55:33" pos:end="55:39">logfile</name></expr></argument>, <argument pos:start="55:42" pos:end="55:48"><expr pos:start="55:42" pos:end="55:48"><name pos:start="55:42" pos:end="55:48">fprintf</name></expr></argument>, <argument pos:start="55:51" pos:end="55:51"><expr pos:start="55:51" pos:end="55:51"><literal type="number" pos:start="55:51" pos:end="55:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="59:9" pos:end="411:9"><if pos:start="59:9" pos:end="203:9">if <condition pos:start="59:12" pos:end="59:39">(<expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:23">access_type</name> <operator pos:start="59:25" pos:end="59:26">==</operator> <name pos:start="59:28" pos:end="59:38">ACCESS_CODE</name></expr>)</condition> <block pos:start="59:41" pos:end="203:9">{<block_content pos:start="61:13" pos:end="201:13">

            <expr_stmt pos:start="61:13" pos:end="61:33"><expr pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:21">exception</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:32">EXCP_ISI</name></expr>;</expr_stmt>

            <switch pos:start="63:13" pos:end="201:13">switch <condition pos:start="63:20" pos:end="63:24">(<expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">ret</name></expr>)</condition> <block pos:start="63:26" pos:end="201:13">{<block_content pos:start="65:13" pos:end="199:22">

            <case pos:start="65:13" pos:end="65:20">case <expr pos:start="65:18" pos:end="65:19"><operator pos:start="65:18" pos:end="65:18">-</operator><literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr>:</case>

                <comment type="block" pos:start="67:17" pos:end="67:54">/* No matches in page tables or TLB */</comment>

                <switch pos:start="69:17" pos:end="161:17">switch <condition pos:start="69:24" pos:end="69:39">(<expr pos:start="69:25" pos:end="69:38"><name pos:start="69:25" pos:end="69:38"><name pos:start="69:25" pos:end="69:27">env</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:38">mmu_model</name></name></expr>)</condition> <block pos:start="69:41" pos:end="161:17">{<block_content pos:start="71:17" pos:end="159:30">

                <case pos:start="71:17" pos:end="71:42">case <expr pos:start="71:22" pos:end="71:41"><name pos:start="71:22" pos:end="71:41">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

                    <expr_stmt pos:start="73:21" pos:end="73:47"><expr pos:start="73:21" pos:end="73:46"><name pos:start="73:21" pos:end="73:29">exception</name> <operator pos:start="73:31" pos:end="73:31">=</operator> <name pos:start="73:33" pos:end="73:46">EXCP_I_TLBMISS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:50"><expr pos:start="75:21" pos:end="75:49"><name pos:start="75:21" pos:end="75:39"><name pos:start="75:21" pos:end="75:23">env</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:28">spr</name><index pos:start="75:29" pos:end="75:39">[<expr pos:start="75:30" pos:end="75:38"><name pos:start="75:30" pos:end="75:38">SPR_IMISS</name></expr>]</index></name> <operator pos:start="75:41" pos:end="75:41">=</operator> <name pos:start="75:43" pos:end="75:49">address</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:63"><expr pos:start="77:21" pos:end="77:62"><name pos:start="77:21" pos:end="77:38"><name pos:start="77:21" pos:end="77:23">env</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:28">spr</name><index pos:start="77:29" pos:end="77:38">[<expr pos:start="77:30" pos:end="77:37"><name pos:start="77:30" pos:end="77:37">SPR_ICMP</name></expr>]</index></name> <operator pos:start="77:40" pos:end="77:40">=</operator> <literal type="number" pos:start="77:42" pos:end="77:51">0x80000000</literal> <operator pos:start="77:53" pos:end="77:53">|</operator> <name pos:start="77:55" pos:end="77:62"><name pos:start="77:55" pos:end="77:57">ctx</name><operator pos:start="77:58" pos:end="77:58">.</operator><name pos:start="77:59" pos:end="77:62">ptem</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:41"><expr pos:start="79:21" pos:end="79:40"><name pos:start="79:21" pos:end="79:30">error_code</name> <operator pos:start="79:32" pos:end="79:32">=</operator> <literal type="number" pos:start="79:34" pos:end="79:34">1</literal> <operator pos:start="79:36" pos:end="79:37">&lt;&lt;</operator> <literal type="number" pos:start="79:39" pos:end="79:40">18</literal></expr>;</expr_stmt>

                    <goto pos:start="81:21" pos:end="81:34">goto <name pos:start="81:26" pos:end="81:33">tlb_miss</name>;</goto>

                <case pos:start="83:17" pos:end="83:42">case <expr pos:start="83:22" pos:end="83:41"><name pos:start="83:22" pos:end="83:41">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

                <case pos:start="85:17" pos:end="85:44">case <expr pos:start="85:22" pos:end="85:43"><name pos:start="85:22" pos:end="85:43">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

                    <expr_stmt pos:start="87:21" pos:end="87:50"><expr pos:start="87:21" pos:end="87:49"><name pos:start="87:21" pos:end="87:29">exception</name> <operator pos:start="87:31" pos:end="87:31">=</operator> <name pos:start="87:33" pos:end="87:49">EXCP_40x_ITLBMISS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:35"><expr pos:start="89:21" pos:end="89:34"><name pos:start="89:21" pos:end="89:30">error_code</name> <operator pos:start="89:32" pos:end="89:32">=</operator> <literal type="number" pos:start="89:34" pos:end="89:34">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:53"><expr pos:start="91:21" pos:end="91:52"><name pos:start="91:21" pos:end="91:42"><name pos:start="91:21" pos:end="91:23">env</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:28">spr</name><index pos:start="91:29" pos:end="91:42">[<expr pos:start="91:30" pos:end="91:41"><name pos:start="91:30" pos:end="91:41">SPR_40x_DEAR</name></expr>]</index></name> <operator pos:start="91:44" pos:end="91:44">=</operator> <name pos:start="91:46" pos:end="91:52">address</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:55"><expr pos:start="93:21" pos:end="93:54"><name pos:start="93:21" pos:end="93:41"><name pos:start="93:21" pos:end="93:23">env</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:28">spr</name><index pos:start="93:29" pos:end="93:41">[<expr pos:start="93:30" pos:end="93:40"><name pos:start="93:30" pos:end="93:40">SPR_40x_ESR</name></expr>]</index></name> <operator pos:start="93:43" pos:end="93:43">=</operator> <literal type="number" pos:start="93:45" pos:end="93:54">0x00000000</literal></expr>;</expr_stmt>

                    <break pos:start="95:21" pos:end="95:26">break;</break>

                <case pos:start="97:17" pos:end="97:37">case <expr pos:start="97:22" pos:end="97:36"><name pos:start="97:22" pos:end="97:36">POWERPC_MMU_32B</name></expr>:</case>

                    <expr_stmt pos:start="99:21" pos:end="99:44"><expr pos:start="99:21" pos:end="99:43"><name pos:start="99:21" pos:end="99:30">error_code</name> <operator pos:start="99:32" pos:end="99:32">=</operator> <literal type="number" pos:start="99:34" pos:end="99:43">0x40000000</literal></expr>;</expr_stmt>

                    <break pos:start="101:21" pos:end="104:0">break;</break>

<cpp:if pos:start="103:1" pos:end="103:25">#<cpp:directive pos:start="103:2" pos:end="103:3">if</cpp:directive> <expr pos:start="103:5" pos:end="103:25"><call pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:11">defined</name><argument_list pos:start="103:12" pos:end="103:25">(<argument pos:start="103:13" pos:end="103:24"><expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="105:17" pos:end="105:37">case <expr pos:start="105:22" pos:end="105:36"><name pos:start="105:22" pos:end="105:36">POWERPC_MMU_64B</name></expr>:</case>

                    <comment type="block" pos:start="107:21" pos:end="107:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="109:21" pos:end="109:66"><expr pos:start="109:21" pos:end="109:65"><call pos:start="109:21" pos:end="109:65"><name pos:start="109:21" pos:end="109:29">cpu_abort</name><argument_list pos:start="109:30" pos:end="109:65">(<argument pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:33">env</name></expr></argument>, <argument pos:start="109:36" pos:end="109:64"><expr pos:start="109:36" pos:end="109:64"><literal type="string" pos:start="109:36" pos:end="109:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="111:21" pos:end="111:30">return <expr pos:start="111:28" pos:end="111:29"><operator pos:start="111:28" pos:end="111:28">-</operator><literal type="number" pos:start="111:29" pos:end="111:29">1</literal></expr>;</return>

                <case pos:start="113:17" pos:end="113:42">case <expr pos:start="113:22" pos:end="113:41"><name pos:start="113:22" pos:end="113:41">POWERPC_MMU_64BRIDGE</name></expr>:</case>

                    <comment type="block" pos:start="115:21" pos:end="115:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="117:21" pos:end="117:66"><expr pos:start="117:21" pos:end="117:65"><call pos:start="117:21" pos:end="117:65"><name pos:start="117:21" pos:end="117:29">cpu_abort</name><argument_list pos:start="117:30" pos:end="117:65">(<argument pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:33">env</name></expr></argument>, <argument pos:start="117:36" pos:end="117:64"><expr pos:start="117:36" pos:end="117:64"><literal type="string" pos:start="117:36" pos:end="117:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="119:21" pos:end="122:0">return <expr pos:start="119:28" pos:end="119:29"><operator pos:start="119:28" pos:end="119:28">-</operator><literal type="number" pos:start="119:29" pos:end="119:29">1</literal></expr>;</return>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

                <case pos:start="123:17" pos:end="123:37">case <expr pos:start="123:22" pos:end="123:36"><name pos:start="123:22" pos:end="123:36">POWERPC_MMU_601</name></expr>:</case>

                    <comment type="block" pos:start="125:21" pos:end="125:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="127:21" pos:end="127:66"><expr pos:start="127:21" pos:end="127:65"><call pos:start="127:21" pos:end="127:65"><name pos:start="127:21" pos:end="127:29">cpu_abort</name><argument_list pos:start="127:30" pos:end="127:65">(<argument pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><name pos:start="127:31" pos:end="127:33">env</name></expr></argument>, <argument pos:start="127:36" pos:end="127:64"><expr pos:start="127:36" pos:end="127:64"><literal type="string" pos:start="127:36" pos:end="127:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="129:21" pos:end="129:30">return <expr pos:start="129:28" pos:end="129:29"><operator pos:start="129:28" pos:end="129:28">-</operator><literal type="number" pos:start="129:29" pos:end="129:29">1</literal></expr>;</return>

                <case pos:start="131:17" pos:end="131:39">case <expr pos:start="131:22" pos:end="131:38"><name pos:start="131:22" pos:end="131:38">POWERPC_MMU_BOOKE</name></expr>:</case>

                    <comment type="block" pos:start="133:21" pos:end="133:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="135:21" pos:end="135:66"><expr pos:start="135:21" pos:end="135:65"><call pos:start="135:21" pos:end="135:65"><name pos:start="135:21" pos:end="135:29">cpu_abort</name><argument_list pos:start="135:30" pos:end="135:65">(<argument pos:start="135:31" pos:end="135:33"><expr pos:start="135:31" pos:end="135:33"><name pos:start="135:31" pos:end="135:33">env</name></expr></argument>, <argument pos:start="135:36" pos:end="135:64"><expr pos:start="135:36" pos:end="135:64"><literal type="string" pos:start="135:36" pos:end="135:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="137:21" pos:end="137:30">return <expr pos:start="137:28" pos:end="137:29"><operator pos:start="137:28" pos:end="137:28">-</operator><literal type="number" pos:start="137:29" pos:end="137:29">1</literal></expr>;</return>

                <case pos:start="139:17" pos:end="139:43">case <expr pos:start="139:22" pos:end="139:42"><name pos:start="139:22" pos:end="139:42">POWERPC_MMU_BOOKE_FSL</name></expr>:</case>

                    <comment type="block" pos:start="141:21" pos:end="141:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="143:21" pos:end="143:66"><expr pos:start="143:21" pos:end="143:65"><call pos:start="143:21" pos:end="143:65"><name pos:start="143:21" pos:end="143:29">cpu_abort</name><argument_list pos:start="143:30" pos:end="143:65">(<argument pos:start="143:31" pos:end="143:33"><expr pos:start="143:31" pos:end="143:33"><name pos:start="143:31" pos:end="143:33">env</name></expr></argument>, <argument pos:start="143:36" pos:end="143:64"><expr pos:start="143:36" pos:end="143:64"><literal type="string" pos:start="143:36" pos:end="143:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="145:21" pos:end="145:30">return <expr pos:start="145:28" pos:end="145:29"><operator pos:start="145:28" pos:end="145:28">-</operator><literal type="number" pos:start="145:29" pos:end="145:29">1</literal></expr>;</return>

                <case pos:start="147:17" pos:end="147:42">case <expr pos:start="147:22" pos:end="147:41"><name pos:start="147:22" pos:end="147:41">POWERPC_MMU_REAL_4xx</name></expr>:</case>

                    <expr_stmt pos:start="149:21" pos:end="151:46"><expr pos:start="149:21" pos:end="151:45"><call pos:start="149:21" pos:end="151:45"><name pos:start="149:21" pos:end="149:29">cpu_abort</name><argument_list pos:start="149:30" pos:end="151:45">(<argument pos:start="149:31" pos:end="149:33"><expr pos:start="149:31" pos:end="149:33"><name pos:start="149:31" pos:end="149:33">env</name></expr></argument>, <argument pos:start="149:36" pos:end="151:44"><expr pos:start="149:36" pos:end="151:44"><literal type="string" pos:start="149:36" pos:end="149:76">"PowerPC 401 should never raise any MMU "</literal>

                              <literal type="string" pos:start="151:31" pos:end="151:44">"exceptions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="153:21" pos:end="153:30">return <expr pos:start="153:28" pos:end="153:29"><operator pos:start="153:28" pos:end="153:28">-</operator><literal type="number" pos:start="153:29" pos:end="153:29">1</literal></expr>;</return>

                <default pos:start="155:17" pos:end="155:24">default:</default>

                    <expr_stmt pos:start="157:21" pos:end="157:69"><expr pos:start="157:21" pos:end="157:68"><call pos:start="157:21" pos:end="157:68"><name pos:start="157:21" pos:end="157:29">cpu_abort</name><argument_list pos:start="157:30" pos:end="157:68">(<argument pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:33">env</name></expr></argument>, <argument pos:start="157:36" pos:end="157:67"><expr pos:start="157:36" pos:end="157:67"><literal type="string" pos:start="157:36" pos:end="157:67">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="159:21" pos:end="159:30">return <expr pos:start="159:28" pos:end="159:29"><operator pos:start="159:28" pos:end="159:28">-</operator><literal type="number" pos:start="159:29" pos:end="159:29">1</literal></expr>;</return>

                </block_content>}</block></switch>

                <break pos:start="163:17" pos:end="163:22">break;</break>

            <case pos:start="165:13" pos:end="165:20">case <expr pos:start="165:18" pos:end="165:19"><operator pos:start="165:18" pos:end="165:18">-</operator><literal type="number" pos:start="165:19" pos:end="165:19">2</literal></expr>:</case>

                <comment type="block" pos:start="167:17" pos:end="167:45">/* Access rights violation */</comment>

                <expr_stmt pos:start="169:17" pos:end="169:40"><expr pos:start="169:17" pos:end="169:39"><name pos:start="169:17" pos:end="169:26">error_code</name> <operator pos:start="169:28" pos:end="169:28">=</operator> <literal type="number" pos:start="169:30" pos:end="169:39">0x08000000</literal></expr>;</expr_stmt>

                <break pos:start="171:17" pos:end="171:22">break;</break>

            <case pos:start="173:13" pos:end="173:20">case <expr pos:start="173:18" pos:end="173:19"><operator pos:start="173:18" pos:end="173:18">-</operator><literal type="number" pos:start="173:19" pos:end="173:19">3</literal></expr>:</case>

                <comment type="block" pos:start="175:17" pos:end="175:53">/* No execute protection violation */</comment>

                <expr_stmt pos:start="177:17" pos:end="177:40"><expr pos:start="177:17" pos:end="177:39"><name pos:start="177:17" pos:end="177:26">error_code</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <literal type="number" pos:start="177:30" pos:end="177:39">0x10000000</literal></expr>;</expr_stmt>

                <break pos:start="179:17" pos:end="179:22">break;</break>

            <case pos:start="181:13" pos:end="181:20">case <expr pos:start="181:18" pos:end="181:19"><operator pos:start="181:18" pos:end="181:18">-</operator><literal type="number" pos:start="181:19" pos:end="181:19">4</literal></expr>:</case>

                <comment type="block" pos:start="183:17" pos:end="183:44">/* Direct store exception */</comment>

                <comment type="block" pos:start="185:17" pos:end="185:68">/* No code fetch is allowed in direct-store areas */</comment>

                <expr_stmt pos:start="187:17" pos:end="187:40"><expr pos:start="187:17" pos:end="187:39"><name pos:start="187:17" pos:end="187:26">error_code</name> <operator pos:start="187:28" pos:end="187:28">=</operator> <literal type="number" pos:start="187:30" pos:end="187:39">0x10000000</literal></expr>;</expr_stmt>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            <case pos:start="191:13" pos:end="191:20">case <expr pos:start="191:18" pos:end="191:19"><operator pos:start="191:18" pos:end="191:18">-</operator><literal type="number" pos:start="191:19" pos:end="191:19">5</literal></expr>:</case>

                <comment type="block" pos:start="193:17" pos:end="193:47">/* No match in segment table */</comment>

                <expr_stmt pos:start="195:17" pos:end="195:38"><expr pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:25">exception</name> <operator pos:start="195:27" pos:end="195:27">=</operator> <name pos:start="195:29" pos:end="195:37">EXCP_ISEG</name></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:31"><expr pos:start="197:17" pos:end="197:30"><name pos:start="197:17" pos:end="197:26">error_code</name> <operator pos:start="197:28" pos:end="197:28">=</operator> <literal type="number" pos:start="197:30" pos:end="197:30">0</literal></expr>;</expr_stmt>

                <break pos:start="199:17" pos:end="199:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="203:11" pos:end="411:9">else <block pos:start="203:16" pos:end="411:9">{<block_content pos:start="205:13" pos:end="409:45">

            <expr_stmt pos:start="205:13" pos:end="205:33"><expr pos:start="205:13" pos:end="205:32"><name pos:start="205:13" pos:end="205:21">exception</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <name pos:start="205:25" pos:end="205:32">EXCP_DSI</name></expr>;</expr_stmt>

            <switch pos:start="207:13" pos:end="399:13">switch <condition pos:start="207:20" pos:end="207:24">(<expr pos:start="207:21" pos:end="207:23"><name pos:start="207:21" pos:end="207:23">ret</name></expr>)</condition> <block pos:start="207:26" pos:end="399:13">{<block_content pos:start="209:13" pos:end="397:22">

            <case pos:start="209:13" pos:end="209:20">case <expr pos:start="209:18" pos:end="209:19"><operator pos:start="209:18" pos:end="209:18">-</operator><literal type="number" pos:start="209:19" pos:end="209:19">1</literal></expr>:</case>

                <comment type="block" pos:start="211:17" pos:end="211:54">/* No matches in page tables or TLB */</comment>

                <switch pos:start="213:17" pos:end="331:17">switch <condition pos:start="213:24" pos:end="213:39">(<expr pos:start="213:25" pos:end="213:38"><name pos:start="213:25" pos:end="213:38"><name pos:start="213:25" pos:end="213:27">env</name><operator pos:start="213:28" pos:end="213:29">-&gt;</operator><name pos:start="213:30" pos:end="213:38">mmu_model</name></name></expr>)</condition> <block pos:start="213:41" pos:end="331:17">{<block_content pos:start="215:17" pos:end="329:30">

                <case pos:start="215:17" pos:end="215:42">case <expr pos:start="215:22" pos:end="215:41"><name pos:start="215:22" pos:end="215:41">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

                    <if_stmt pos:start="217:21" pos:end="229:21"><if pos:start="217:21" pos:end="223:21">if <condition pos:start="217:24" pos:end="217:32">(<expr pos:start="217:25" pos:end="217:31"><name pos:start="217:25" pos:end="217:26">rw</name> <operator pos:start="217:28" pos:end="217:29">==</operator> <literal type="number" pos:start="217:31" pos:end="217:31">1</literal></expr>)</condition> <block pos:start="217:34" pos:end="223:21">{<block_content pos:start="219:25" pos:end="221:45">

                        <expr_stmt pos:start="219:25" pos:end="219:52"><expr pos:start="219:25" pos:end="219:51"><name pos:start="219:25" pos:end="219:33">exception</name> <operator pos:start="219:35" pos:end="219:35">=</operator> <name pos:start="219:37" pos:end="219:51">EXCP_DS_TLBMISS</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="221:25" pos:end="221:45"><expr pos:start="221:25" pos:end="221:44"><name pos:start="221:25" pos:end="221:34">error_code</name> <operator pos:start="221:36" pos:end="221:36">=</operator> <literal type="number" pos:start="221:38" pos:end="221:38">1</literal> <operator pos:start="221:40" pos:end="221:41">&lt;&lt;</operator> <literal type="number" pos:start="221:43" pos:end="221:44">16</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="223:23" pos:end="229:21">else <block pos:start="223:28" pos:end="229:21">{<block_content pos:start="225:25" pos:end="227:39">

                        <expr_stmt pos:start="225:25" pos:end="225:52"><expr pos:start="225:25" pos:end="225:51"><name pos:start="225:25" pos:end="225:33">exception</name> <operator pos:start="225:35" pos:end="225:35">=</operator> <name pos:start="225:37" pos:end="225:51">EXCP_DL_TLBMISS</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="227:25" pos:end="227:39"><expr pos:start="227:25" pos:end="227:38"><name pos:start="227:25" pos:end="227:34">error_code</name> <operator pos:start="227:36" pos:end="227:36">=</operator> <literal type="number" pos:start="227:38" pos:end="227:38">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="231:21" pos:end="231:50"><expr pos:start="231:21" pos:end="231:49"><name pos:start="231:21" pos:end="231:39"><name pos:start="231:21" pos:end="231:23">env</name><operator pos:start="231:24" pos:end="231:25">-&gt;</operator><name pos:start="231:26" pos:end="231:28">spr</name><index pos:start="231:29" pos:end="231:39">[<expr pos:start="231:30" pos:end="231:38"><name pos:start="231:30" pos:end="231:38">SPR_DMISS</name></expr>]</index></name> <operator pos:start="231:41" pos:end="231:41">=</operator> <name pos:start="231:43" pos:end="231:49">address</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:63"><expr pos:start="233:21" pos:end="233:62"><name pos:start="233:21" pos:end="233:38"><name pos:start="233:21" pos:end="233:23">env</name><operator pos:start="233:24" pos:end="233:25">-&gt;</operator><name pos:start="233:26" pos:end="233:28">spr</name><index pos:start="233:29" pos:end="233:38">[<expr pos:start="233:30" pos:end="233:37"><name pos:start="233:30" pos:end="233:37">SPR_DCMP</name></expr>]</index></name> <operator pos:start="233:40" pos:end="233:40">=</operator> <literal type="number" pos:start="233:42" pos:end="233:51">0x80000000</literal> <operator pos:start="233:53" pos:end="233:53">|</operator> <name pos:start="233:55" pos:end="233:62"><name pos:start="233:55" pos:end="233:57">ctx</name><operator pos:start="233:58" pos:end="233:58">.</operator><name pos:start="233:59" pos:end="233:62">ptem</name></name></expr>;</expr_stmt>

                <label pos:start="235:17" pos:end="235:25"><name pos:start="235:17" pos:end="235:24">tlb_miss</name>:</label>

                    <expr_stmt pos:start="237:21" pos:end="237:48"><expr pos:start="237:21" pos:end="237:47"><name pos:start="237:21" pos:end="237:30">error_code</name> <operator pos:start="237:32" pos:end="237:33">|=</operator> <name pos:start="237:35" pos:end="237:41"><name pos:start="237:35" pos:end="237:37">ctx</name><operator pos:start="237:38" pos:end="237:38">.</operator><name pos:start="237:39" pos:end="237:41">key</name></name> <operator pos:start="237:43" pos:end="237:44">&lt;&lt;</operator> <literal type="number" pos:start="237:46" pos:end="237:47">19</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="239:21" pos:end="239:57"><expr pos:start="239:21" pos:end="239:56"><name pos:start="239:21" pos:end="239:39"><name pos:start="239:21" pos:end="239:23">env</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:28">spr</name><index pos:start="239:29" pos:end="239:39">[<expr pos:start="239:30" pos:end="239:38"><name pos:start="239:30" pos:end="239:38">SPR_HASH1</name></expr>]</index></name> <operator pos:start="239:41" pos:end="239:41">=</operator> <name pos:start="239:43" pos:end="239:56"><name pos:start="239:43" pos:end="239:45">ctx</name><operator pos:start="239:46" pos:end="239:46">.</operator><name pos:start="239:47" pos:end="239:53">pg_addr</name><index pos:start="239:54" pos:end="239:56">[<expr pos:start="239:55" pos:end="239:55"><literal type="number" pos:start="239:55" pos:end="239:55">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="241:21" pos:end="241:57"><expr pos:start="241:21" pos:end="241:56"><name pos:start="241:21" pos:end="241:39"><name pos:start="241:21" pos:end="241:23">env</name><operator pos:start="241:24" pos:end="241:25">-&gt;</operator><name pos:start="241:26" pos:end="241:28">spr</name><index pos:start="241:29" pos:end="241:39">[<expr pos:start="241:30" pos:end="241:38"><name pos:start="241:30" pos:end="241:38">SPR_HASH2</name></expr>]</index></name> <operator pos:start="241:41" pos:end="241:41">=</operator> <name pos:start="241:43" pos:end="241:56"><name pos:start="241:43" pos:end="241:45">ctx</name><operator pos:start="241:46" pos:end="241:46">.</operator><name pos:start="241:47" pos:end="241:53">pg_addr</name><index pos:start="241:54" pos:end="241:56">[<expr pos:start="241:55" pos:end="241:55"><literal type="number" pos:start="241:55" pos:end="241:55">1</literal></expr>]</index></name></expr>;</expr_stmt>

                    <comment type="block" pos:start="243:21" pos:end="243:52">/* Do not alter DAR nor DSISR */</comment>

                    <goto pos:start="245:21" pos:end="245:29">goto <name pos:start="245:26" pos:end="245:28">out</name>;</goto>

                <case pos:start="247:17" pos:end="247:42">case <expr pos:start="247:22" pos:end="247:41"><name pos:start="247:22" pos:end="247:41">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

                <case pos:start="249:17" pos:end="249:44">case <expr pos:start="249:22" pos:end="249:43"><name pos:start="249:22" pos:end="249:43">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

                    <expr_stmt pos:start="251:21" pos:end="251:50"><expr pos:start="251:21" pos:end="251:49"><name pos:start="251:21" pos:end="251:29">exception</name> <operator pos:start="251:31" pos:end="251:31">=</operator> <name pos:start="251:33" pos:end="251:49">EXCP_40x_DTLBMISS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="253:21" pos:end="253:35"><expr pos:start="253:21" pos:end="253:34"><name pos:start="253:21" pos:end="253:30">error_code</name> <operator pos:start="253:32" pos:end="253:32">=</operator> <literal type="number" pos:start="253:34" pos:end="253:34">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="255:21" pos:end="255:53"><expr pos:start="255:21" pos:end="255:52"><name pos:start="255:21" pos:end="255:42"><name pos:start="255:21" pos:end="255:23">env</name><operator pos:start="255:24" pos:end="255:25">-&gt;</operator><name pos:start="255:26" pos:end="255:28">spr</name><index pos:start="255:29" pos:end="255:42">[<expr pos:start="255:30" pos:end="255:41"><name pos:start="255:30" pos:end="255:41">SPR_40x_DEAR</name></expr>]</index></name> <operator pos:start="255:44" pos:end="255:44">=</operator> <name pos:start="255:46" pos:end="255:52">address</name></expr>;</expr_stmt>

                    <if_stmt pos:start="257:21" pos:end="263:59"><if pos:start="257:21" pos:end="259:59">if <condition pos:start="257:24" pos:end="257:27">(<expr pos:start="257:25" pos:end="257:26"><name pos:start="257:25" pos:end="257:26">rw</name></expr>)</condition><block type="pseudo" pos:start="259:25" pos:end="259:59"><block_content pos:start="259:25" pos:end="259:59">

                        <expr_stmt pos:start="259:25" pos:end="259:59"><expr pos:start="259:25" pos:end="259:58"><name pos:start="259:25" pos:end="259:45"><name pos:start="259:25" pos:end="259:27">env</name><operator pos:start="259:28" pos:end="259:29">-&gt;</operator><name pos:start="259:30" pos:end="259:32">spr</name><index pos:start="259:33" pos:end="259:45">[<expr pos:start="259:34" pos:end="259:44"><name pos:start="259:34" pos:end="259:44">SPR_40x_ESR</name></expr>]</index></name> <operator pos:start="259:47" pos:end="259:47">=</operator> <literal type="number" pos:start="259:49" pos:end="259:58">0x00800000</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="261:21" pos:end="263:59">else<block type="pseudo" pos:start="263:25" pos:end="263:59"><block_content pos:start="263:25" pos:end="263:59">

                        <expr_stmt pos:start="263:25" pos:end="263:59"><expr pos:start="263:25" pos:end="263:58"><name pos:start="263:25" pos:end="263:45"><name pos:start="263:25" pos:end="263:27">env</name><operator pos:start="263:28" pos:end="263:29">-&gt;</operator><name pos:start="263:30" pos:end="263:32">spr</name><index pos:start="263:33" pos:end="263:45">[<expr pos:start="263:34" pos:end="263:44"><name pos:start="263:34" pos:end="263:44">SPR_40x_ESR</name></expr>]</index></name> <operator pos:start="263:47" pos:end="263:47">=</operator> <literal type="number" pos:start="263:49" pos:end="263:58">0x00000000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="265:21" pos:end="265:26">break;</break>

                <case pos:start="267:17" pos:end="267:37">case <expr pos:start="267:22" pos:end="267:36"><name pos:start="267:22" pos:end="267:36">POWERPC_MMU_32B</name></expr>:</case>

                    <expr_stmt pos:start="269:21" pos:end="269:44"><expr pos:start="269:21" pos:end="269:43"><name pos:start="269:21" pos:end="269:30">error_code</name> <operator pos:start="269:32" pos:end="269:32">=</operator> <literal type="number" pos:start="269:34" pos:end="269:43">0x40000000</literal></expr>;</expr_stmt>

                    <break pos:start="271:21" pos:end="274:0">break;</break>

<cpp:if pos:start="273:1" pos:end="273:25">#<cpp:directive pos:start="273:2" pos:end="273:3">if</cpp:directive> <expr pos:start="273:5" pos:end="273:25"><call pos:start="273:5" pos:end="273:25"><name pos:start="273:5" pos:end="273:11">defined</name><argument_list pos:start="273:12" pos:end="273:25">(<argument pos:start="273:13" pos:end="273:24"><expr pos:start="273:13" pos:end="273:24"><name pos:start="273:13" pos:end="273:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="275:17" pos:end="275:37">case <expr pos:start="275:22" pos:end="275:36"><name pos:start="275:22" pos:end="275:36">POWERPC_MMU_64B</name></expr>:</case>

                    <comment type="block" pos:start="277:21" pos:end="277:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="279:21" pos:end="279:66"><expr pos:start="279:21" pos:end="279:65"><call pos:start="279:21" pos:end="279:65"><name pos:start="279:21" pos:end="279:29">cpu_abort</name><argument_list pos:start="279:30" pos:end="279:65">(<argument pos:start="279:31" pos:end="279:33"><expr pos:start="279:31" pos:end="279:33"><name pos:start="279:31" pos:end="279:33">env</name></expr></argument>, <argument pos:start="279:36" pos:end="279:64"><expr pos:start="279:36" pos:end="279:64"><literal type="string" pos:start="279:36" pos:end="279:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="281:21" pos:end="281:30">return <expr pos:start="281:28" pos:end="281:29"><operator pos:start="281:28" pos:end="281:28">-</operator><literal type="number" pos:start="281:29" pos:end="281:29">1</literal></expr>;</return>

                <case pos:start="283:17" pos:end="283:42">case <expr pos:start="283:22" pos:end="283:41"><name pos:start="283:22" pos:end="283:41">POWERPC_MMU_64BRIDGE</name></expr>:</case>

                    <comment type="block" pos:start="285:21" pos:end="285:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="287:21" pos:end="287:66"><expr pos:start="287:21" pos:end="287:65"><call pos:start="287:21" pos:end="287:65"><name pos:start="287:21" pos:end="287:29">cpu_abort</name><argument_list pos:start="287:30" pos:end="287:65">(<argument pos:start="287:31" pos:end="287:33"><expr pos:start="287:31" pos:end="287:33"><name pos:start="287:31" pos:end="287:33">env</name></expr></argument>, <argument pos:start="287:36" pos:end="287:64"><expr pos:start="287:36" pos:end="287:64"><literal type="string" pos:start="287:36" pos:end="287:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="289:21" pos:end="292:0">return <expr pos:start="289:28" pos:end="289:29"><operator pos:start="289:28" pos:end="289:28">-</operator><literal type="number" pos:start="289:29" pos:end="289:29">1</literal></expr>;</return>

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>

                <case pos:start="293:17" pos:end="293:37">case <expr pos:start="293:22" pos:end="293:36"><name pos:start="293:22" pos:end="293:36">POWERPC_MMU_601</name></expr>:</case>

                    <comment type="block" pos:start="295:21" pos:end="295:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="297:21" pos:end="297:66"><expr pos:start="297:21" pos:end="297:65"><call pos:start="297:21" pos:end="297:65"><name pos:start="297:21" pos:end="297:29">cpu_abort</name><argument_list pos:start="297:30" pos:end="297:65">(<argument pos:start="297:31" pos:end="297:33"><expr pos:start="297:31" pos:end="297:33"><name pos:start="297:31" pos:end="297:33">env</name></expr></argument>, <argument pos:start="297:36" pos:end="297:64"><expr pos:start="297:36" pos:end="297:64"><literal type="string" pos:start="297:36" pos:end="297:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="299:21" pos:end="299:30">return <expr pos:start="299:28" pos:end="299:29"><operator pos:start="299:28" pos:end="299:28">-</operator><literal type="number" pos:start="299:29" pos:end="299:29">1</literal></expr>;</return>

                <case pos:start="301:17" pos:end="301:39">case <expr pos:start="301:22" pos:end="301:38"><name pos:start="301:22" pos:end="301:38">POWERPC_MMU_BOOKE</name></expr>:</case>

                    <comment type="block" pos:start="303:21" pos:end="303:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="305:21" pos:end="305:66"><expr pos:start="305:21" pos:end="305:65"><call pos:start="305:21" pos:end="305:65"><name pos:start="305:21" pos:end="305:29">cpu_abort</name><argument_list pos:start="305:30" pos:end="305:65">(<argument pos:start="305:31" pos:end="305:33"><expr pos:start="305:31" pos:end="305:33"><name pos:start="305:31" pos:end="305:33">env</name></expr></argument>, <argument pos:start="305:36" pos:end="305:64"><expr pos:start="305:36" pos:end="305:64"><literal type="string" pos:start="305:36" pos:end="305:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="307:21" pos:end="307:30">return <expr pos:start="307:28" pos:end="307:29"><operator pos:start="307:28" pos:end="307:28">-</operator><literal type="number" pos:start="307:29" pos:end="307:29">1</literal></expr>;</return>

                <case pos:start="309:17" pos:end="309:43">case <expr pos:start="309:22" pos:end="309:42"><name pos:start="309:22" pos:end="309:42">POWERPC_MMU_BOOKE_FSL</name></expr>:</case>

                    <comment type="block" pos:start="311:21" pos:end="311:35">/* XXX: TODO */</comment>

                    <expr_stmt pos:start="313:21" pos:end="313:66"><expr pos:start="313:21" pos:end="313:65"><call pos:start="313:21" pos:end="313:65"><name pos:start="313:21" pos:end="313:29">cpu_abort</name><argument_list pos:start="313:30" pos:end="313:65">(<argument pos:start="313:31" pos:end="313:33"><expr pos:start="313:31" pos:end="313:33"><name pos:start="313:31" pos:end="313:33">env</name></expr></argument>, <argument pos:start="313:36" pos:end="313:64"><expr pos:start="313:36" pos:end="313:64"><literal type="string" pos:start="313:36" pos:end="313:64">"MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="315:21" pos:end="315:30">return <expr pos:start="315:28" pos:end="315:29"><operator pos:start="315:28" pos:end="315:28">-</operator><literal type="number" pos:start="315:29" pos:end="315:29">1</literal></expr>;</return>

                <case pos:start="317:17" pos:end="317:42">case <expr pos:start="317:22" pos:end="317:41"><name pos:start="317:22" pos:end="317:41">POWERPC_MMU_REAL_4xx</name></expr>:</case>

                    <expr_stmt pos:start="319:21" pos:end="321:46"><expr pos:start="319:21" pos:end="321:45"><call pos:start="319:21" pos:end="321:45"><name pos:start="319:21" pos:end="319:29">cpu_abort</name><argument_list pos:start="319:30" pos:end="321:45">(<argument pos:start="319:31" pos:end="319:33"><expr pos:start="319:31" pos:end="319:33"><name pos:start="319:31" pos:end="319:33">env</name></expr></argument>, <argument pos:start="319:36" pos:end="321:44"><expr pos:start="319:36" pos:end="321:44"><literal type="string" pos:start="319:36" pos:end="319:76">"PowerPC 401 should never raise any MMU "</literal>

                              <literal type="string" pos:start="321:31" pos:end="321:44">"exceptions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="323:21" pos:end="323:30">return <expr pos:start="323:28" pos:end="323:29"><operator pos:start="323:28" pos:end="323:28">-</operator><literal type="number" pos:start="323:29" pos:end="323:29">1</literal></expr>;</return>

                <default pos:start="325:17" pos:end="325:24">default:</default>

                    <expr_stmt pos:start="327:21" pos:end="327:69"><expr pos:start="327:21" pos:end="327:68"><call pos:start="327:21" pos:end="327:68"><name pos:start="327:21" pos:end="327:29">cpu_abort</name><argument_list pos:start="327:30" pos:end="327:68">(<argument pos:start="327:31" pos:end="327:33"><expr pos:start="327:31" pos:end="327:33"><name pos:start="327:31" pos:end="327:33">env</name></expr></argument>, <argument pos:start="327:36" pos:end="327:67"><expr pos:start="327:36" pos:end="327:67"><literal type="string" pos:start="327:36" pos:end="327:67">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="329:21" pos:end="329:30">return <expr pos:start="329:28" pos:end="329:29"><operator pos:start="329:28" pos:end="329:28">-</operator><literal type="number" pos:start="329:29" pos:end="329:29">1</literal></expr>;</return>

                </block_content>}</block></switch>

                <break pos:start="333:17" pos:end="333:22">break;</break>

            <case pos:start="335:13" pos:end="335:20">case <expr pos:start="335:18" pos:end="335:19"><operator pos:start="335:18" pos:end="335:18">-</operator><literal type="number" pos:start="335:19" pos:end="335:19">2</literal></expr>:</case>

                <comment type="block" pos:start="337:17" pos:end="337:45">/* Access rights violation */</comment>

                <expr_stmt pos:start="339:17" pos:end="339:40"><expr pos:start="339:17" pos:end="339:39"><name pos:start="339:17" pos:end="339:26">error_code</name> <operator pos:start="339:28" pos:end="339:28">=</operator> <literal type="number" pos:start="339:30" pos:end="339:39">0x08000000</literal></expr>;</expr_stmt>

                <break pos:start="341:17" pos:end="341:22">break;</break>

            <case pos:start="343:13" pos:end="343:20">case <expr pos:start="343:18" pos:end="343:19"><operator pos:start="343:18" pos:end="343:18">-</operator><literal type="number" pos:start="343:19" pos:end="343:19">4</literal></expr>:</case>

                <comment type="block" pos:start="345:17" pos:end="345:44">/* Direct store exception */</comment>

                <switch pos:start="347:17" pos:end="385:17">switch <condition pos:start="347:24" pos:end="347:36">(<expr pos:start="347:25" pos:end="347:35"><name pos:start="347:25" pos:end="347:35">access_type</name></expr>)</condition> <block pos:start="347:38" pos:end="385:17">{<block_content pos:start="349:17" pos:end="383:26">

                <case pos:start="349:17" pos:end="349:34">case <expr pos:start="349:22" pos:end="349:33"><name pos:start="349:22" pos:end="349:33">ACCESS_FLOAT</name></expr>:</case>

                    <comment type="block" pos:start="351:21" pos:end="351:51">/* Floating point load/store */</comment>

                    <expr_stmt pos:start="353:21" pos:end="353:43"><expr pos:start="353:21" pos:end="353:42"><name pos:start="353:21" pos:end="353:29">exception</name> <operator pos:start="353:31" pos:end="353:31">=</operator> <name pos:start="353:33" pos:end="353:42">EXCP_ALIGN</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:47"><expr pos:start="355:21" pos:end="355:46"><name pos:start="355:21" pos:end="355:30">error_code</name> <operator pos:start="355:32" pos:end="355:32">=</operator> <name pos:start="355:34" pos:end="355:46">EXCP_ALIGN_FP</name></expr>;</expr_stmt>

                    <break pos:start="357:21" pos:end="357:26">break;</break>

                <case pos:start="359:17" pos:end="359:32">case <expr pos:start="359:22" pos:end="359:31"><name pos:start="359:22" pos:end="359:31">ACCESS_RES</name></expr>:</case>

                    <comment type="block" pos:start="361:21" pos:end="361:48">/* lwarx, ldarx or srwcx. */</comment>

                    <expr_stmt pos:start="363:21" pos:end="363:44"><expr pos:start="363:21" pos:end="363:43"><name pos:start="363:21" pos:end="363:30">error_code</name> <operator pos:start="363:32" pos:end="363:32">=</operator> <literal type="number" pos:start="363:34" pos:end="363:43">0x04000000</literal></expr>;</expr_stmt>

                    <break pos:start="365:21" pos:end="365:26">break;</break>

                <case pos:start="367:17" pos:end="367:32">case <expr pos:start="367:22" pos:end="367:31"><name pos:start="367:22" pos:end="367:31">ACCESS_EXT</name></expr>:</case>

                    <comment type="block" pos:start="369:21" pos:end="369:40">/* eciwx or ecowx */</comment>

                    <expr_stmt pos:start="371:21" pos:end="371:44"><expr pos:start="371:21" pos:end="371:43"><name pos:start="371:21" pos:end="371:30">error_code</name> <operator pos:start="371:32" pos:end="371:32">=</operator> <literal type="number" pos:start="371:34" pos:end="371:43">0x04100000</literal></expr>;</expr_stmt>

                    <break pos:start="373:21" pos:end="373:26">break;</break>

                <default pos:start="375:17" pos:end="375:24">default:</default>

                    <expr_stmt pos:start="377:21" pos:end="377:65"><expr pos:start="377:21" pos:end="377:64"><call pos:start="377:21" pos:end="377:64"><name pos:start="377:21" pos:end="377:26">printf</name><argument_list pos:start="377:27" pos:end="377:64">(<argument pos:start="377:28" pos:end="377:58"><expr pos:start="377:28" pos:end="377:58"><literal type="string" pos:start="377:28" pos:end="377:58">"DSI: invalid exception (%d)\n"</literal></expr></argument>, <argument pos:start="377:61" pos:end="377:63"><expr pos:start="377:61" pos:end="377:63"><name pos:start="377:61" pos:end="377:63">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:45"><expr pos:start="379:21" pos:end="379:44"><name pos:start="379:21" pos:end="379:29">exception</name> <operator pos:start="379:31" pos:end="379:31">=</operator> <name pos:start="379:33" pos:end="379:44">EXCP_PROGRAM</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="381:21" pos:end="381:63"><expr pos:start="381:21" pos:end="381:62"><name pos:start="381:21" pos:end="381:30">error_code</name> <operator pos:start="381:32" pos:end="381:32">=</operator> <name pos:start="381:34" pos:end="381:43">EXCP_INVAL</name> <operator pos:start="381:45" pos:end="381:45">|</operator> <name pos:start="381:47" pos:end="381:62">EXCP_INVAL_INVAL</name></expr>;</expr_stmt>

                    <break pos:start="383:21" pos:end="383:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="387:17" pos:end="387:22">break;</break>

            <case pos:start="389:13" pos:end="389:20">case <expr pos:start="389:18" pos:end="389:19"><operator pos:start="389:18" pos:end="389:18">-</operator><literal type="number" pos:start="389:19" pos:end="389:19">5</literal></expr>:</case>

                <comment type="block" pos:start="391:17" pos:end="391:47">/* No match in segment table */</comment>

                <expr_stmt pos:start="393:17" pos:end="393:38"><expr pos:start="393:17" pos:end="393:37"><name pos:start="393:17" pos:end="393:25">exception</name> <operator pos:start="393:27" pos:end="393:27">=</operator> <name pos:start="393:29" pos:end="393:37">EXCP_DSEG</name></expr>;</expr_stmt>

                <expr_stmt pos:start="395:17" pos:end="395:31"><expr pos:start="395:17" pos:end="395:30"><name pos:start="395:17" pos:end="395:26">error_code</name> <operator pos:start="395:28" pos:end="395:28">=</operator> <literal type="number" pos:start="395:30" pos:end="395:30">0</literal></expr>;</expr_stmt>

                <break pos:start="397:17" pos:end="397:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="401:13" pos:end="403:41"><if pos:start="401:13" pos:end="403:41">if <condition pos:start="401:16" pos:end="401:49">(<expr pos:start="401:17" pos:end="401:48"><name pos:start="401:17" pos:end="401:25">exception</name> <operator pos:start="401:27" pos:end="401:28">==</operator> <name pos:start="401:30" pos:end="401:37">EXCP_DSI</name> <operator pos:start="401:39" pos:end="401:40">&amp;&amp;</operator> <name pos:start="401:42" pos:end="401:43">rw</name> <operator pos:start="401:45" pos:end="401:46">==</operator> <literal type="number" pos:start="401:48" pos:end="401:48">1</literal></expr>)</condition><block type="pseudo" pos:start="403:17" pos:end="403:41"><block_content pos:start="403:17" pos:end="403:41">

                <expr_stmt pos:start="403:17" pos:end="403:41"><expr pos:start="403:17" pos:end="403:40"><name pos:start="403:17" pos:end="403:26">error_code</name> <operator pos:start="403:28" pos:end="403:29">|=</operator> <literal type="number" pos:start="403:31" pos:end="403:40">0x02000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="405:13" pos:end="405:37">/* Store fault address */</comment>

            <expr_stmt pos:start="407:13" pos:end="407:40"><expr pos:start="407:13" pos:end="407:39"><name pos:start="407:13" pos:end="407:29"><name pos:start="407:13" pos:end="407:15">env</name><operator pos:start="407:16" pos:end="407:17">-&gt;</operator><name pos:start="407:18" pos:end="407:20">spr</name><index pos:start="407:21" pos:end="407:29">[<expr pos:start="407:22" pos:end="407:28"><name pos:start="407:22" pos:end="407:28">SPR_DAR</name></expr>]</index></name> <operator pos:start="407:31" pos:end="407:31">=</operator> <name pos:start="407:33" pos:end="407:39">address</name></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:45"><expr pos:start="409:13" pos:end="409:44"><name pos:start="409:13" pos:end="409:31"><name pos:start="409:13" pos:end="409:15">env</name><operator pos:start="409:16" pos:end="409:17">-&gt;</operator><name pos:start="409:18" pos:end="409:20">spr</name><index pos:start="409:21" pos:end="409:31">[<expr pos:start="409:22" pos:end="409:30"><name pos:start="409:22" pos:end="409:30">SPR_DSISR</name></expr>]</index></name> <operator pos:start="409:33" pos:end="409:33">=</operator> <name pos:start="409:35" pos:end="409:44">error_code</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <label pos:start="413:5" pos:end="422:0"><name pos:start="413:5" pos:end="413:7">out</name>:</label>

<cpp:if pos:start="415:1" pos:end="415:5">#<cpp:directive pos:start="415:2" pos:end="415:3">if</cpp:directive> <expr pos:start="415:5" pos:end="415:5"><literal type="number" pos:start="415:5" pos:end="415:5">0</literal></expr></cpp:if>

        printf("%s: set exception to %d %02x\n",

               __func__, exception, error_code);

<cpp:endif pos:start="421:1" pos:end="421:6">#<cpp:directive pos:start="421:2" pos:end="421:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="423:9" pos:end="423:41"><expr pos:start="423:9" pos:end="423:40"><name pos:start="423:9" pos:end="423:28"><name pos:start="423:9" pos:end="423:11">env</name><operator pos:start="423:12" pos:end="423:13">-&gt;</operator><name pos:start="423:14" pos:end="423:28">exception_index</name></name> <operator pos:start="423:30" pos:end="423:30">=</operator> <name pos:start="423:32" pos:end="423:40">exception</name></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:37"><expr pos:start="425:9" pos:end="425:36"><name pos:start="425:9" pos:end="425:23"><name pos:start="425:9" pos:end="425:11">env</name><operator pos:start="425:12" pos:end="425:13">-&gt;</operator><name pos:start="425:14" pos:end="425:23">error_code</name></name> <operator pos:start="425:25" pos:end="425:25">=</operator> <name pos:start="425:27" pos:end="425:36">error_code</name></expr>;</expr_stmt>

        <expr_stmt pos:start="427:9" pos:end="427:16"><expr pos:start="427:9" pos:end="427:15"><name pos:start="427:9" pos:end="427:11">ret</name> <operator pos:start="427:13" pos:end="427:13">=</operator> <literal type="number" pos:start="427:15" pos:end="427:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="433:5" pos:end="433:15">return <expr pos:start="433:12" pos:end="433:14"><name pos:start="433:12" pos:end="433:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
