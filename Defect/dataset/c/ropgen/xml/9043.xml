<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9043.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">pc_cpus_init</name><parameter_list pos:start="1:18" pos:end="1:39">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:34"><name pos:start="1:19" pos:end="1:32">PCMachineState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">pcms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:76">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">ObjectClass</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">typename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:9">gchar</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier><modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:24">model_pieces</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">X86CPU</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:15">cpu</name> <init pos:start="15:17" pos:end="15:22">= <expr pos:start="15:19" pos:end="15:22"><name pos:start="15:19" pos:end="15:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MachineState</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:25">machine</name> <init pos:start="17:27" pos:end="17:41">= <expr pos:start="17:29" pos:end="17:41"><call pos:start="17:29" pos:end="17:41"><name pos:start="17:29" pos:end="17:35">MACHINE</name><argument_list pos:start="17:36" pos:end="17:41">(<argument pos:start="17:37" pos:end="17:40"><expr pos:start="17:37" pos:end="17:40"><name pos:start="17:37" pos:end="17:40">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:19">/* init CPUs */</comment>

    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:35">(<expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:15">machine</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:26">cpu_model</name></name> <operator pos:start="23:28" pos:end="23:29">==</operator> <name pos:start="23:31" pos:end="23:34">NULL</name></expr>)</condition> <block pos:start="23:37" pos:end="35:5">{<block_content pos:start="27:9" pos:end="34:0">

<cpp:ifdef pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:20">TARGET_X86_64</name></cpp:ifdef>

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:15">machine</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:26">cpu_model</name></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <literal type="string" pos:start="27:30" pos:end="27:37">"qemu64"</literal></expr>;</expr_stmt>

<cpp:else pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="31:9" pos:end="34:0"><expr pos:start="31:9" pos:end="31:37"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:15">machine</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:26">cpu_model</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <literal type="string" pos:start="31:30" pos:end="31:37">"qemu32"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:58"><expr pos:start="39:5" pos:end="39:57"><name pos:start="39:5" pos:end="39:16">model_pieces</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:57"><name pos:start="39:20" pos:end="39:29">g_strsplit</name><argument_list pos:start="39:30" pos:end="39:57">(<argument pos:start="39:31" pos:end="39:48"><expr pos:start="39:31" pos:end="39:48"><name pos:start="39:31" pos:end="39:48"><name pos:start="39:31" pos:end="39:37">machine</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:48">cpu_model</name></name></expr></argument>, <argument pos:start="39:51" pos:end="39:53"><expr pos:start="39:51" pos:end="39:53"><literal type="string" pos:start="39:51" pos:end="39:53">","</literal></expr></argument>, <argument pos:start="39:56" pos:end="39:56"><expr pos:start="39:56" pos:end="39:56"><literal type="number" pos:start="39:56" pos:end="39:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:21">model_pieces</name><index pos:start="41:22" pos:end="41:24">[<expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="41:27" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:16">

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><call pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:20">error_report</name><argument_list pos:start="43:21" pos:end="43:52">(<argument pos:start="43:22" pos:end="43:51"><expr pos:start="43:22" pos:end="43:51"><literal type="string" pos:start="43:22" pos:end="43:51">"Invalid/empty CPU model name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><call pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:12">exit</name><argument_list pos:start="45:13" pos:end="45:15">(<argument pos:start="45:14" pos:end="45:14"><expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:58"><expr pos:start="51:5" pos:end="51:57"><name pos:start="51:5" pos:end="51:6">oc</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:57"><name pos:start="51:10" pos:end="51:26">cpu_class_by_name</name><argument_list pos:start="51:27" pos:end="51:57">(<argument pos:start="51:28" pos:end="51:39"><expr pos:start="51:28" pos:end="51:39"><name pos:start="51:28" pos:end="51:39">TYPE_X86_CPU</name></expr></argument>, <argument pos:start="51:42" pos:end="51:56"><expr pos:start="51:42" pos:end="51:56"><name pos:start="51:42" pos:end="51:56"><name pos:start="51:42" pos:end="51:53">model_pieces</name><index pos:start="51:54" pos:end="51:56">[<expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:19">(<expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:10">oc</name> <operator pos:start="53:12" pos:end="53:13">==</operator> <name pos:start="53:15" pos:end="53:18">NULL</name></expr>)</condition> <block pos:start="53:21" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:75"><expr pos:start="55:9" pos:end="55:74"><call pos:start="55:9" pos:end="55:74"><name pos:start="55:9" pos:end="55:20">error_report</name><argument_list pos:start="55:21" pos:end="55:74">(<argument pos:start="55:22" pos:end="55:56"><expr pos:start="55:22" pos:end="55:56"><literal type="string" pos:start="55:22" pos:end="55:56">"Unable to find CPU definition: %s"</literal></expr></argument>, <argument pos:start="55:59" pos:end="55:73"><expr pos:start="55:59" pos:end="55:73"><name pos:start="55:59" pos:end="55:73"><name pos:start="55:59" pos:end="55:70">model_pieces</name><index pos:start="55:71" pos:end="55:73">[<expr pos:start="55:72" pos:end="55:72"><literal type="number" pos:start="55:72" pos:end="55:72">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:12">typename</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:40"><name pos:start="61:16" pos:end="61:36">object_class_get_name</name><argument_list pos:start="61:37" pos:end="61:40">(<argument pos:start="61:38" pos:end="61:39"><expr pos:start="61:38" pos:end="61:39"><name pos:start="61:38" pos:end="61:39">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:23"><expr pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:6">cc</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <call pos:start="63:10" pos:end="63:22"><name pos:start="63:10" pos:end="63:18">CPU_CLASS</name><argument_list pos:start="63:19" pos:end="63:22">(<argument pos:start="63:20" pos:end="63:21"><expr pos:start="63:20" pos:end="63:21"><name pos:start="63:20" pos:end="63:21">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:64"><expr pos:start="65:5" pos:end="65:63"><call pos:start="65:5" pos:end="65:63"><name pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:6">cc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:22">parse_features</name></name><argument_list pos:start="65:23" pos:end="65:63">(<argument pos:start="65:24" pos:end="65:31"><expr pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:31">typename</name></expr></argument>, <argument pos:start="65:34" pos:end="65:48"><expr pos:start="65:34" pos:end="65:48"><name pos:start="65:34" pos:end="65:48"><name pos:start="65:34" pos:end="65:45">model_pieces</name><index pos:start="65:46" pos:end="65:48">[<expr pos:start="65:47" pos:end="65:47"><literal type="number" pos:start="65:47" pos:end="65:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="65:51" pos:end="65:62"><expr pos:start="65:51" pos:end="65:62"><operator pos:start="65:51" pos:end="65:51">&amp;</operator><name pos:start="65:52" pos:end="65:62">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:29"><expr pos:start="67:5" pos:end="67:28"><call pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:14">g_strfreev</name><argument_list pos:start="67:15" pos:end="67:28">(<argument pos:start="67:16" pos:end="67:27"><expr pos:start="67:16" pos:end="67:27"><name pos:start="67:16" pos:end="67:27">model_pieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="83:7">/* Calculates the limit to CPU APIC ID values

     *

     * Limit for the APIC ID value, so that all

     * CPU APIC IDs are &lt; pcms-&gt;apic_id_limit.

     *

     * This is used for FW_CFG_MAX_CPUS. See comments on bochs_bios_init().

     */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:71"><expr pos:start="85:5" pos:end="85:70"><name pos:start="85:5" pos:end="85:23"><name pos:start="85:5" pos:end="85:8">pcms</name><operator pos:start="85:9" pos:end="85:10">-&gt;</operator><name pos:start="85:11" pos:end="85:23">apic_id_limit</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="85:66"><name pos:start="85:27" pos:end="85:52">x86_cpu_apic_id_from_index</name><argument_list pos:start="85:53" pos:end="85:66">(<argument pos:start="85:54" pos:end="85:65"><expr pos:start="85:54" pos:end="85:65"><name pos:start="85:54" pos:end="85:61">max_cpus</name> <operator pos:start="85:63" pos:end="85:63">-</operator> <literal type="number" pos:start="85:65" pos:end="85:65">1</literal></expr></argument>)</argument_list></call> <operator pos:start="85:68" pos:end="85:68">+</operator> <literal type="number" pos:start="85:70" pos:end="85:70">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:56">(<expr pos:start="87:9" pos:end="87:55"><name pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:12">pcms</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:27">apic_id_limit</name></name> <operator pos:start="87:29" pos:end="87:29">&gt;</operator> <name pos:start="87:31" pos:end="87:55">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr>)</condition> <block pos:start="87:58" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:16">

        <expr_stmt pos:start="89:9" pos:end="91:46"><expr pos:start="89:9" pos:end="91:45"><call pos:start="89:9" pos:end="91:45"><name pos:start="89:9" pos:end="89:20">error_report</name><argument_list pos:start="89:21" pos:end="91:45">(<argument pos:start="89:22" pos:end="89:71"><expr pos:start="89:22" pos:end="89:71"><literal type="string" pos:start="89:22" pos:end="89:71">"max_cpus is too large. APIC ID of last CPU is %u"</literal></expr></argument>,

                     <argument pos:start="91:22" pos:end="91:44"><expr pos:start="91:22" pos:end="91:44"><name pos:start="91:22" pos:end="91:40"><name pos:start="91:22" pos:end="91:25">pcms</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:40">apic_id_limit</name></name> <operator pos:start="91:42" pos:end="91:42">-</operator> <literal type="number" pos:start="91:44" pos:end="91:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:16"><expr pos:start="93:9" pos:end="93:15"><call pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:12">exit</name><argument_list pos:start="93:13" pos:end="93:15">(<argument pos:start="93:14" pos:end="93:14"><expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="101:66"><expr pos:start="99:5" pos:end="101:65"><name pos:start="99:5" pos:end="99:23"><name pos:start="99:5" pos:end="99:8">pcms</name><operator pos:start="99:9" pos:end="99:10">-&gt;</operator><name pos:start="99:11" pos:end="99:23">possible_cpus</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <call pos:start="99:27" pos:end="101:65"><name pos:start="99:27" pos:end="99:35">g_malloc0</name><argument_list pos:start="99:36" pos:end="101:65">(<argument pos:start="99:37" pos:end="101:64"><expr pos:start="99:37" pos:end="101:64"><sizeof pos:start="99:37" pos:end="99:57">sizeof<argument_list pos:start="99:43" pos:end="99:57">(<argument pos:start="99:44" pos:end="99:56"><expr pos:start="99:44" pos:end="99:56"><name pos:start="99:44" pos:end="99:56">CPUArchIdList</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:59" pos:end="99:59">+</operator>

                                    <sizeof pos:start="101:37" pos:end="101:53">sizeof<argument_list pos:start="101:43" pos:end="101:53">(<argument pos:start="101:44" pos:end="101:52"><expr pos:start="101:44" pos:end="101:52"><name pos:start="101:44" pos:end="101:52">CPUArchId</name></expr></argument>)</argument_list></sizeof> <operator pos:start="101:55" pos:end="101:55">*</operator> <name pos:start="101:57" pos:end="101:64">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="103:5" pos:end="119:5">for <control pos:start="103:9" pos:end="103:34">(<init pos:start="103:10" pos:end="103:15"><expr pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">i</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:29"><expr pos:start="103:17" pos:end="103:28"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <name pos:start="103:21" pos:end="103:28">max_cpus</name></expr>;</condition> <incr pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:31">i</name><operator pos:start="103:32" pos:end="103:33">++</operator></expr></incr>)</control> <block pos:start="103:36" pos:end="119:5">{<block_content pos:start="105:9" pos:end="117:9">

        <expr_stmt pos:start="105:9" pos:end="105:77"><expr pos:start="105:9" pos:end="105:76"><name pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:12">pcms</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:27">possible_cpus</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:33">cpus</name><index pos:start="105:34" pos:end="105:36">[<expr pos:start="105:35" pos:end="105:35"><name pos:start="105:35" pos:end="105:35">i</name></expr>]</index></name><operator pos:start="105:37" pos:end="105:37">.</operator><name pos:start="105:38" pos:end="105:44">arch_id</name> <operator pos:start="105:46" pos:end="105:46">=</operator> <call pos:start="105:48" pos:end="105:76"><name pos:start="105:48" pos:end="105:73">x86_cpu_apic_id_from_index</name><argument_list pos:start="105:74" pos:end="105:76">(<argument pos:start="105:75" pos:end="105:75"><expr pos:start="105:75" pos:end="105:75"><name pos:start="105:75" pos:end="105:75">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:35"><expr pos:start="107:9" pos:end="107:34"><name pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:12">pcms</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:27">possible_cpus</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:32">len</name></name><operator pos:start="107:33" pos:end="107:34">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="117:9"><if pos:start="109:9" pos:end="117:9">if <condition pos:start="109:12" pos:end="109:25">(<expr pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:13">i</name> <operator pos:start="109:15" pos:end="109:15">&lt;</operator> <name pos:start="109:17" pos:end="109:24">smp_cpus</name></expr>)</condition> <block pos:start="109:27" pos:end="117:9">{<block_content pos:start="111:13" pos:end="115:38">

            <expr_stmt pos:start="111:13" pos:end="113:43"><expr pos:start="111:13" pos:end="113:42"><name pos:start="111:13" pos:end="111:15">cpu</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="113:42"><name pos:start="111:19" pos:end="111:28">pc_new_cpu</name><argument_list pos:start="111:29" pos:end="113:42">(<argument pos:start="111:30" pos:end="111:37"><expr pos:start="111:30" pos:end="111:37"><name pos:start="111:30" pos:end="111:37">typename</name></expr></argument>, <argument pos:start="111:40" pos:end="111:68"><expr pos:start="111:40" pos:end="111:68"><call pos:start="111:40" pos:end="111:68"><name pos:start="111:40" pos:end="111:65">x86_cpu_apic_id_from_index</name><argument_list pos:start="111:66" pos:end="111:68">(<argument pos:start="111:67" pos:end="111:67"><expr pos:start="111:67" pos:end="111:67"><name pos:start="111:67" pos:end="111:67">i</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="113:30" pos:end="113:41"><expr pos:start="113:30" pos:end="113:41"><operator pos:start="113:30" pos:end="113:30">&amp;</operator><name pos:start="113:31" pos:end="113:41">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:38"><expr pos:start="115:13" pos:end="115:37"><call pos:start="115:13" pos:end="115:37"><name pos:start="115:13" pos:end="115:24">object_unref</name><argument_list pos:start="115:25" pos:end="115:37">(<argument pos:start="115:26" pos:end="115:36"><expr pos:start="115:26" pos:end="115:36"><call pos:start="115:26" pos:end="115:36"><name pos:start="115:26" pos:end="115:31">OBJECT</name><argument_list pos:start="115:32" pos:end="115:36">(<argument pos:start="115:33" pos:end="115:35"><expr pos:start="115:33" pos:end="115:35"><name pos:start="115:33" pos:end="115:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="123:5" pos:end="123:54">/* tell smbios about cpuid version and features */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:76"><expr pos:start="125:5" pos:end="125:75"><call pos:start="125:5" pos:end="125:75"><name pos:start="125:5" pos:end="125:20">smbios_set_cpuid</name><argument_list pos:start="125:21" pos:end="125:75">(<argument pos:start="125:22" pos:end="125:43"><expr pos:start="125:22" pos:end="125:43"><name pos:start="125:22" pos:end="125:43"><name pos:start="125:22" pos:end="125:24">cpu</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:29">env</name><operator pos:start="125:30" pos:end="125:30">.</operator><name pos:start="125:31" pos:end="125:43">cpuid_version</name></name></expr></argument>, <argument pos:start="125:46" pos:end="125:74"><expr pos:start="125:46" pos:end="125:74"><name pos:start="125:46" pos:end="125:74"><name pos:start="125:46" pos:end="125:48">cpu</name><operator pos:start="125:49" pos:end="125:50">-&gt;</operator><name pos:start="125:51" pos:end="125:53">env</name><operator pos:start="125:54" pos:end="125:54">.</operator><name pos:start="125:55" pos:end="125:62">features</name><index pos:start="125:63" pos:end="125:74">[<expr pos:start="125:64" pos:end="125:73"><name pos:start="125:64" pos:end="125:73">FEAT_1_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
