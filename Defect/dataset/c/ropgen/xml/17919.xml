<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17919.c" pos:tabs="8"><function pos:start="1:1" pos:end="989:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_mb_cavlc</name><parameter_list pos:start="1:27" pos:end="1:42">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">H264Context</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">h</name></decl></parameter>)</parameter_list><block pos:start="1:43" pos:end="989:1">{<block_content pos:start="3:5" pos:end="987:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">mb_xy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">partition_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:24">mb_type</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:27" pos:end="9:29">cbp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">dct8x8_allowed</name><init pos:start="11:23" pos:end="11:49">= <expr pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:25">h</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:30">pps</name><operator pos:start="11:31" pos:end="11:31">.</operator><name pos:start="11:32" pos:end="11:49">transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:54"><expr pos:start="15:5" pos:end="15:53"><name pos:start="15:5" pos:end="15:9">mb_xy</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:13">h</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:20">mb_xy</name></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:30">mb_x</name></name> <operator pos:start="15:32" pos:end="15:32">+</operator> <name pos:start="15:34" pos:end="15:40"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:40">mb_y</name></name><operator pos:start="15:41" pos:end="15:41">*</operator><name pos:start="15:42" pos:end="15:53"><name pos:start="15:42" pos:end="15:42">s</name><operator pos:start="15:43" pos:end="15:44">-&gt;</operator><name pos:start="15:45" pos:end="15:53">mb_stride</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><call pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:10">dsp</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:23">clear_blocks</name></name><argument_list pos:start="19:24" pos:end="19:30">(<argument pos:start="19:25" pos:end="19:29"><expr pos:start="19:25" pos:end="19:29"><name pos:start="19:25" pos:end="19:29"><name pos:start="19:25" pos:end="19:25">h</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:29">mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="19:33" pos:end="19:89">//FIXME avoid if already clear (move after skip handlong?</comment>



    <expr_stmt pos:start="23:5" pos:end="23:75"><expr pos:start="23:5" pos:end="23:74"><call pos:start="23:5" pos:end="23:74"><name pos:start="23:5" pos:end="23:11">tprintf</name><argument_list pos:start="23:12" pos:end="23:74">(<argument pos:start="23:13" pos:end="23:20"><expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:20">avctx</name></name></expr></argument>, <argument pos:start="23:23" pos:end="23:41"><expr pos:start="23:23" pos:end="23:41"><literal type="string" pos:start="23:23" pos:end="23:41">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument pos:start="23:44" pos:end="23:55"><expr pos:start="23:44" pos:end="23:55"><name pos:start="23:44" pos:end="23:55"><name pos:start="23:44" pos:end="23:44">h</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:55">frame_num</name></name></expr></argument>, <argument pos:start="23:58" pos:end="23:64"><expr pos:start="23:58" pos:end="23:64"><name pos:start="23:58" pos:end="23:64"><name pos:start="23:58" pos:end="23:58">s</name><operator pos:start="23:59" pos:end="23:60">-&gt;</operator><name pos:start="23:61" pos:end="23:64">mb_x</name></name></expr></argument>, <argument pos:start="23:67" pos:end="23:73"><expr pos:start="23:67" pos:end="23:73"><name pos:start="23:67" pos:end="23:73"><name pos:start="23:67" pos:end="23:67">s</name><operator pos:start="23:68" pos:end="23:69">-&gt;</operator><name pos:start="23:70" pos:end="23:73">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:12"><expr pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">cbp</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <literal type="number" pos:start="25:11" pos:end="25:11">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="25:14" pos:end="27:32">/* avoid warning. FIXME: find a solution without slowing

                down the code */</comment>

    <if_stmt pos:start="29:5" pos:end="57:5"><if pos:start="29:5" pos:end="57:5">if<condition pos:start="29:7" pos:end="29:38">(<expr pos:start="29:8" pos:end="29:37"><name pos:start="29:8" pos:end="29:24"><name pos:start="29:8" pos:end="29:8">h</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:24">slice_type_nos</name></name> <operator pos:start="29:26" pos:end="29:27">!=</operator> <name pos:start="29:29" pos:end="29:37">FF_I_TYPE</name></expr>)</condition><block pos:start="29:39" pos:end="57:5">{<block_content pos:start="31:9" pos:end="55:9">

        <if_stmt pos:start="31:9" pos:end="33:50"><if pos:start="31:9" pos:end="33:50">if<condition pos:start="31:11" pos:end="31:30">(<expr pos:start="31:12" pos:end="31:29"><name pos:start="31:12" pos:end="31:25"><name pos:start="31:12" pos:end="31:12">s</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:25">mb_skip_run</name></name><operator pos:start="31:26" pos:end="31:27">==</operator><operator pos:start="31:28" pos:end="31:28">-</operator><literal type="number" pos:start="31:29" pos:end="31:29">1</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:50"><block_content pos:start="33:13" pos:end="33:50">

            <expr_stmt pos:start="33:13" pos:end="33:50"><expr pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:26">mb_skip_run</name></name><operator pos:start="33:27" pos:end="33:27">=</operator> <call pos:start="33:29" pos:end="33:49"><name pos:start="33:29" pos:end="33:41">get_ue_golomb</name><argument_list pos:start="33:42" pos:end="33:49">(<argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><operator pos:start="33:43" pos:end="33:43">&amp;</operator><name pos:start="33:44" pos:end="33:48"><name pos:start="33:44" pos:end="33:44">s</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="55:9"><if pos:start="37:9" pos:end="55:9">if <condition pos:start="37:12" pos:end="37:29">(<expr pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:26">mb_skip_run</name></name><operator pos:start="37:27" pos:end="37:28">--</operator></expr>)</condition> <block pos:start="37:31" pos:end="55:9">{<block_content pos:start="39:13" pos:end="53:21">

            <if_stmt pos:start="39:13" pos:end="49:13"><if pos:start="39:13" pos:end="49:13">if<condition pos:start="39:15" pos:end="39:47">(<expr pos:start="39:16" pos:end="39:46"><name pos:start="39:16" pos:end="39:26">FRAME_MBAFF</name> <operator pos:start="39:28" pos:end="39:29">&amp;&amp;</operator> <operator pos:start="39:31" pos:end="39:31">(</operator><name pos:start="39:32" pos:end="39:38"><name pos:start="39:32" pos:end="39:32">s</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:38">mb_y</name></name><operator pos:start="39:39" pos:end="39:39">&amp;</operator><literal type="number" pos:start="39:40" pos:end="39:40">1</literal><operator pos:start="39:41" pos:end="39:41">)</operator> <operator pos:start="39:43" pos:end="39:44">==</operator> <literal type="number" pos:start="39:46" pos:end="39:46">0</literal></expr>)</condition><block pos:start="39:48" pos:end="49:13">{<block_content pos:start="41:17" pos:end="47:51">

                <if_stmt pos:start="41:17" pos:end="47:51"><if pos:start="41:17" pos:end="43:80">if<condition pos:start="41:19" pos:end="41:37">(<expr pos:start="41:20" pos:end="41:36"><name pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">mb_skip_run</name></name><operator pos:start="41:34" pos:end="41:35">==</operator><literal type="number" pos:start="41:36" pos:end="41:36">0</literal></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:80"><block_content pos:start="43:21" pos:end="43:80">

                    <expr_stmt pos:start="43:21" pos:end="43:80"><expr pos:start="43:21" pos:end="43:79"><name pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:21">h</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:31">mb_mbaff</name></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <name pos:start="43:35" pos:end="43:59"><name pos:start="43:35" pos:end="43:35">h</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:59">mb_field_decoding_flag</name></name> <operator pos:start="43:61" pos:end="43:61">=</operator> <call pos:start="43:63" pos:end="43:79"><name pos:start="43:63" pos:end="43:71">get_bits1</name><argument_list pos:start="43:72" pos:end="43:79">(<argument pos:start="43:73" pos:end="43:78"><expr pos:start="43:73" pos:end="43:78"><operator pos:start="43:73" pos:end="43:73">&amp;</operator><name pos:start="43:74" pos:end="43:78"><name pos:start="43:74" pos:end="43:74">s</name><operator pos:start="43:75" pos:end="43:76">-&gt;</operator><name pos:start="43:77" pos:end="43:78">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="45:17" pos:end="47:51">else<block type="pseudo" pos:start="47:21" pos:end="47:51"><block_content pos:start="47:21" pos:end="47:51">

                    <expr_stmt pos:start="47:21" pos:end="47:51"><expr pos:start="47:21" pos:end="47:50"><call pos:start="47:21" pos:end="47:50"><name pos:start="47:21" pos:end="47:47">predict_field_decoding_flag</name><argument_list pos:start="47:48" pos:end="47:50">(<argument pos:start="47:49" pos:end="47:49"><expr pos:start="47:49" pos:end="47:49"><name pos:start="47:49" pos:end="47:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><call pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:26">decode_mb_skip</name><argument_list pos:start="51:27" pos:end="51:29">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:21">return <expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="67:70"><if pos:start="59:5" pos:end="65:5">if<condition pos:start="59:7" pos:end="59:19">(<expr pos:start="59:8" pos:end="59:18"><name pos:start="59:8" pos:end="59:18">FRAME_MBAFF</name></expr>)</condition><block pos:start="59:20" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:72">

        <if_stmt pos:start="61:9" pos:end="63:72"><if pos:start="61:9" pos:end="63:72">if<condition pos:start="61:11" pos:end="61:30">( <expr pos:start="61:13" pos:end="61:28"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:20"><name pos:start="61:14" pos:end="61:14">s</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:20">mb_y</name></name><operator pos:start="61:21" pos:end="61:21">&amp;</operator><literal type="number" pos:start="61:22" pos:end="61:22">1</literal><operator pos:start="61:23" pos:end="61:23">)</operator> <operator pos:start="61:25" pos:end="61:26">==</operator> <literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr> )</condition><block type="pseudo" pos:start="63:13" pos:end="63:72"><block_content pos:start="63:13" pos:end="63:72">

            <expr_stmt pos:start="63:13" pos:end="63:72"><expr pos:start="63:13" pos:end="63:71"><name pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:13">h</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:23">mb_mbaff</name></name> <operator pos:start="63:25" pos:end="63:25">=</operator> <name pos:start="63:27" pos:end="63:51"><name pos:start="63:27" pos:end="63:27">h</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:51">mb_field_decoding_flag</name></name> <operator pos:start="63:53" pos:end="63:53">=</operator> <call pos:start="63:55" pos:end="63:71"><name pos:start="63:55" pos:end="63:63">get_bits1</name><argument_list pos:start="63:64" pos:end="63:71">(<argument pos:start="63:65" pos:end="63:70"><expr pos:start="63:65" pos:end="63:70"><operator pos:start="63:65" pos:end="63:65">&amp;</operator><name pos:start="63:66" pos:end="63:70"><name pos:start="63:66" pos:end="63:66">s</name><operator pos:start="63:67" pos:end="63:68">-&gt;</operator><name pos:start="63:69" pos:end="63:70">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if><else pos:start="65:6" pos:end="67:70">else<block type="pseudo" pos:start="67:9" pos:end="67:70"><block_content pos:start="67:9" pos:end="67:70">

        <expr_stmt pos:start="67:9" pos:end="67:70"><expr pos:start="67:9" pos:end="67:69"><name pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:9">h</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:33">mb_field_decoding_flag</name></name><operator pos:start="67:34" pos:end="67:34">=</operator> <operator pos:start="67:36" pos:end="67:36">(</operator><name pos:start="67:37" pos:end="67:56"><name pos:start="67:37" pos:end="67:37">s</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:56">picture_structure</name></name><operator pos:start="67:57" pos:end="67:58">!=</operator><name pos:start="67:59" pos:end="67:68">PICT_FRAME</name><operator pos:start="67:69" pos:end="67:69">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:5">h</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:22">prev_mb_skipped</name></name><operator pos:start="71:23" pos:end="71:23">=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:35"><expr pos:start="75:5" pos:end="75:34"><name pos:start="75:5" pos:end="75:11">mb_type</name><operator pos:start="75:12" pos:end="75:12">=</operator> <call pos:start="75:14" pos:end="75:34"><name pos:start="75:14" pos:end="75:26">get_ue_golomb</name><argument_list pos:start="75:27" pos:end="75:34">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><operator pos:start="75:28" pos:end="75:28">&amp;</operator><name pos:start="75:29" pos:end="75:33"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="135:5"><if pos:start="77:5" pos:end="93:5">if<condition pos:start="77:7" pos:end="77:38">(<expr pos:start="77:8" pos:end="77:37"><name pos:start="77:8" pos:end="77:24"><name pos:start="77:8" pos:end="77:8">h</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:24">slice_type_nos</name></name> <operator pos:start="77:26" pos:end="77:27">==</operator> <name pos:start="77:29" pos:end="77:37">FF_B_TYPE</name></expr>)</condition><block pos:start="77:39" pos:end="93:5">{<block_content pos:start="79:9" pos:end="91:9">

        <if_stmt pos:start="79:9" pos:end="91:9"><if pos:start="79:9" pos:end="85:9">if<condition pos:start="79:11" pos:end="79:24">(<expr pos:start="79:12" pos:end="79:23"><name pos:start="79:12" pos:end="79:18">mb_type</name> <operator pos:start="79:20" pos:end="79:20">&lt;</operator> <literal type="number" pos:start="79:22" pos:end="79:23">23</literal></expr>)</condition><block pos:start="79:25" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:58">

            <expr_stmt pos:start="81:13" pos:end="81:69"><expr pos:start="81:13" pos:end="81:68"><name pos:start="81:13" pos:end="81:27">partition_count</name><operator pos:start="81:28" pos:end="81:28">=</operator> <name pos:start="81:30" pos:end="81:52"><name pos:start="81:30" pos:end="81:43">b_mb_type_info</name><index pos:start="81:44" pos:end="81:52">[<expr pos:start="81:45" pos:end="81:51"><name pos:start="81:45" pos:end="81:51">mb_type</name></expr>]</index></name><operator pos:start="81:53" pos:end="81:53">.</operator><name pos:start="81:54" pos:end="81:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:58"><expr pos:start="83:13" pos:end="83:57"><name pos:start="83:13" pos:end="83:19">mb_type</name><operator pos:start="83:20" pos:end="83:20">=</operator>         <name pos:start="83:30" pos:end="83:52"><name pos:start="83:30" pos:end="83:43">b_mb_type_info</name><index pos:start="83:44" pos:end="83:52">[<expr pos:start="83:45" pos:end="83:51"><name pos:start="83:45" pos:end="83:51">mb_type</name></expr>]</index></name><operator pos:start="83:53" pos:end="83:53">.</operator><name pos:start="83:54" pos:end="83:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="85:10" pos:end="91:9">else<block pos:start="85:14" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:33">

            <expr_stmt pos:start="87:13" pos:end="87:26"><expr pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:19">mb_type</name> <operator pos:start="87:21" pos:end="87:22">-=</operator> <literal type="number" pos:start="87:24" pos:end="87:25">23</literal></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="89:33">goto <name pos:start="89:18" pos:end="89:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="93:6" pos:end="109:5">else if<condition pos:start="93:13" pos:end="93:44">(<expr pos:start="93:14" pos:end="93:43"><name pos:start="93:14" pos:end="93:30"><name pos:start="93:14" pos:end="93:14">h</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:30">slice_type_nos</name></name> <operator pos:start="93:32" pos:end="93:33">==</operator> <name pos:start="93:35" pos:end="93:43">FF_P_TYPE</name></expr>)</condition><block pos:start="93:45" pos:end="109:5">{<block_content pos:start="95:9" pos:end="107:9">

        <if_stmt pos:start="95:9" pos:end="107:9"><if pos:start="95:9" pos:end="101:9">if<condition pos:start="95:11" pos:end="95:23">(<expr pos:start="95:12" pos:end="95:22"><name pos:start="95:12" pos:end="95:18">mb_type</name> <operator pos:start="95:20" pos:end="95:20">&lt;</operator> <literal type="number" pos:start="95:22" pos:end="95:22">5</literal></expr>)</condition><block pos:start="95:24" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:58">

            <expr_stmt pos:start="97:13" pos:end="97:69"><expr pos:start="97:13" pos:end="97:68"><name pos:start="97:13" pos:end="97:27">partition_count</name><operator pos:start="97:28" pos:end="97:28">=</operator> <name pos:start="97:30" pos:end="97:52"><name pos:start="97:30" pos:end="97:43">p_mb_type_info</name><index pos:start="97:44" pos:end="97:52">[<expr pos:start="97:45" pos:end="97:51"><name pos:start="97:45" pos:end="97:51">mb_type</name></expr>]</index></name><operator pos:start="97:53" pos:end="97:53">.</operator><name pos:start="97:54" pos:end="97:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:19">mb_type</name><operator pos:start="99:20" pos:end="99:20">=</operator>         <name pos:start="99:30" pos:end="99:52"><name pos:start="99:30" pos:end="99:43">p_mb_type_info</name><index pos:start="99:44" pos:end="99:52">[<expr pos:start="99:45" pos:end="99:51"><name pos:start="99:45" pos:end="99:51">mb_type</name></expr>]</index></name><operator pos:start="99:53" pos:end="99:53">.</operator><name pos:start="99:54" pos:end="99:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="101:10" pos:end="107:9">else<block pos:start="101:14" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:33">

            <expr_stmt pos:start="103:13" pos:end="103:25"><expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:19">mb_type</name> <operator pos:start="103:21" pos:end="103:22">-=</operator> <literal type="number" pos:start="103:24" pos:end="103:24">5</literal></expr>;</expr_stmt>

            <goto pos:start="105:13" pos:end="105:33">goto <name pos:start="105:18" pos:end="105:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="109:6" pos:end="135:5">else<block pos:start="109:10" pos:end="135:5">{<block_content pos:start="111:8" pos:end="133:46">

       <expr_stmt pos:start="111:8" pos:end="111:46"><expr pos:start="111:8" pos:end="111:45"><call pos:start="111:8" pos:end="111:45"><name pos:start="111:8" pos:end="111:13">assert</name><argument_list pos:start="111:14" pos:end="111:45">(<argument pos:start="111:15" pos:end="111:44"><expr pos:start="111:15" pos:end="111:44"><name pos:start="111:15" pos:end="111:31"><name pos:start="111:15" pos:end="111:15">h</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:31">slice_type_nos</name></name> <operator pos:start="111:33" pos:end="111:34">==</operator> <name pos:start="111:36" pos:end="111:44">FF_I_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="115:22"><if pos:start="113:9" pos:end="115:22">if<condition pos:start="113:11" pos:end="113:50">(<expr pos:start="113:12" pos:end="113:49"><name pos:start="113:12" pos:end="113:24"><name pos:start="113:12" pos:end="113:12">h</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:24">slice_type</name></name> <operator pos:start="113:26" pos:end="113:27">==</operator> <name pos:start="113:29" pos:end="113:38">FF_SI_TYPE</name> <operator pos:start="113:40" pos:end="113:41">&amp;&amp;</operator> <name pos:start="113:43" pos:end="113:49">mb_type</name></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:22"><block_content pos:start="115:13" pos:end="115:22">

            <expr_stmt pos:start="115:13" pos:end="115:22"><expr pos:start="115:13" pos:end="115:21"><name pos:start="115:13" pos:end="115:19">mb_type</name><operator pos:start="115:20" pos:end="115:21">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="117:1" pos:end="117:16"><name pos:start="117:1" pos:end="117:15">decode_intra_mb</name>:</label>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if<condition pos:start="119:11" pos:end="119:24">(<expr pos:start="119:12" pos:end="119:23"><name pos:start="119:12" pos:end="119:18">mb_type</name> <operator pos:start="119:20" pos:end="119:20">&gt;</operator> <literal type="number" pos:start="119:22" pos:end="119:23">25</literal></expr>)</condition><block pos:start="119:25" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:22">

            <expr_stmt pos:start="121:13" pos:end="121:157"><expr pos:start="121:13" pos:end="121:156"><call pos:start="121:13" pos:end="121:156"><name pos:start="121:13" pos:end="121:18">av_log</name><argument_list pos:start="121:19" pos:end="121:156">(<argument pos:start="121:20" pos:end="121:29"><expr pos:start="121:20" pos:end="121:29"><name pos:start="121:20" pos:end="121:29"><name pos:start="121:20" pos:end="121:20">h</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:23">s</name><operator pos:start="121:24" pos:end="121:24">.</operator><name pos:start="121:25" pos:end="121:29">avctx</name></name></expr></argument>, <argument pos:start="121:32" pos:end="121:43"><expr pos:start="121:32" pos:end="121:43"><name pos:start="121:32" pos:end="121:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:46" pos:end="121:90"><expr pos:start="121:46" pos:end="121:90"><literal type="string" pos:start="121:46" pos:end="121:90">"mb_type %d in %c slice too large at %d %d\n"</literal></expr></argument>, <argument pos:start="121:93" pos:end="121:99"><expr pos:start="121:93" pos:end="121:99"><name pos:start="121:93" pos:end="121:99">mb_type</name></expr></argument>, <argument pos:start="121:102" pos:end="121:137"><expr pos:start="121:102" pos:end="121:137"><call pos:start="121:102" pos:end="121:137"><name pos:start="121:102" pos:end="121:122">av_get_pict_type_char</name><argument_list pos:start="121:123" pos:end="121:137">(<argument pos:start="121:124" pos:end="121:136"><expr pos:start="121:124" pos:end="121:136"><name pos:start="121:124" pos:end="121:136"><name pos:start="121:124" pos:end="121:124">h</name><operator pos:start="121:125" pos:end="121:126">-&gt;</operator><name pos:start="121:127" pos:end="121:136">slice_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:140" pos:end="121:146"><expr pos:start="121:140" pos:end="121:146"><name pos:start="121:140" pos:end="121:146"><name pos:start="121:140" pos:end="121:140">s</name><operator pos:start="121:141" pos:end="121:142">-&gt;</operator><name pos:start="121:143" pos:end="121:146">mb_x</name></name></expr></argument>, <argument pos:start="121:149" pos:end="121:155"><expr pos:start="121:149" pos:end="121:155"><name pos:start="121:149" pos:end="121:155"><name pos:start="121:149" pos:end="121:149">s</name><operator pos:start="121:150" pos:end="121:151">-&gt;</operator><name pos:start="121:152" pos:end="121:155">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:23">partition_count</name><operator pos:start="127:24" pos:end="127:24">=</operator><literal type="number" pos:start="127:25" pos:end="127:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:41"><expr pos:start="129:9" pos:end="129:40"><name pos:start="129:9" pos:end="129:11">cbp</name><operator pos:start="129:12" pos:end="129:12">=</operator> <name pos:start="129:14" pos:end="129:36"><name pos:start="129:14" pos:end="129:27">i_mb_type_info</name><index pos:start="129:28" pos:end="129:36">[<expr pos:start="129:29" pos:end="129:35"><name pos:start="129:29" pos:end="129:35">mb_type</name></expr>]</index></name><operator pos:start="129:37" pos:end="129:37">.</operator><name pos:start="129:38" pos:end="129:40">cbp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:67"><expr pos:start="131:9" pos:end="131:66"><name pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:9">h</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:31">intra16x16_pred_mode</name></name><operator pos:start="131:32" pos:end="131:32">=</operator> <name pos:start="131:34" pos:end="131:56"><name pos:start="131:34" pos:end="131:47">i_mb_type_info</name><index pos:start="131:48" pos:end="131:56">[<expr pos:start="131:49" pos:end="131:55"><name pos:start="131:49" pos:end="131:55">mb_type</name></expr>]</index></name><operator pos:start="131:57" pos:end="131:57">.</operator><name pos:start="131:58" pos:end="131:66">pred_mode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:46"><expr pos:start="133:9" pos:end="133:45"><name pos:start="133:9" pos:end="133:15">mb_type</name><operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:40"><name pos:start="133:18" pos:end="133:31">i_mb_type_info</name><index pos:start="133:32" pos:end="133:40">[<expr pos:start="133:33" pos:end="133:39"><name pos:start="133:33" pos:end="133:39">mb_type</name></expr>]</index></name><operator pos:start="133:41" pos:end="133:41">.</operator><name pos:start="133:42" pos:end="133:45">type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="139:5" pos:end="141:38"><if pos:start="139:5" pos:end="141:38">if<condition pos:start="139:7" pos:end="139:16">(<expr pos:start="139:8" pos:end="139:15"><name pos:start="139:8" pos:end="139:15">MB_FIELD</name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:38"><block_content pos:start="141:9" pos:end="141:38">

        <expr_stmt pos:start="141:9" pos:end="141:38"><expr pos:start="141:9" pos:end="141:37"><name pos:start="141:9" pos:end="141:15">mb_type</name> <operator pos:start="141:17" pos:end="141:18">|=</operator> <name pos:start="141:20" pos:end="141:37">MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:42"><expr pos:start="145:5" pos:end="145:41"><name pos:start="145:5" pos:end="145:27"><name pos:start="145:5" pos:end="145:5">h</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:18">slice_table</name><index pos:start="145:19" pos:end="145:27">[ <expr pos:start="145:21" pos:end="145:25"><name pos:start="145:21" pos:end="145:25">mb_xy</name></expr> ]</index></name><operator pos:start="145:28" pos:end="145:28">=</operator> <name pos:start="145:30" pos:end="145:41"><name pos:start="145:30" pos:end="145:30">h</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:41">slice_num</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="221:5"><if pos:start="149:5" pos:end="221:5">if<condition pos:start="149:7" pos:end="149:29">(<expr pos:start="149:8" pos:end="149:28"><call pos:start="149:8" pos:end="149:28"><name pos:start="149:8" pos:end="149:19">IS_INTRA_PCM</name><argument_list pos:start="149:20" pos:end="149:28">(<argument pos:start="149:21" pos:end="149:27"><expr pos:start="149:21" pos:end="149:27"><name pos:start="149:21" pos:end="149:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="149:30" pos:end="221:5">{<block_content pos:start="151:9" pos:end="219:17">

        <decl_stmt pos:start="151:9" pos:end="151:26"><decl pos:start="151:9" pos:end="151:22"><type pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:16">unsigned</name> <name pos:start="151:18" pos:end="151:20">int</name></type> <name pos:start="151:22" pos:end="151:22">x</name></decl>, <decl pos:start="151:25" pos:end="151:25"><type ref="prev" pos:start="151:9" pos:end="151:20"/><name pos:start="151:25" pos:end="151:25">y</name></decl>;</decl_stmt>



        <comment type="line" pos:start="155:9" pos:end="155:73">// We assume these blocks are very rare so we do not optimize it.</comment>

        <expr_stmt pos:start="157:9" pos:end="157:31"><expr pos:start="157:9" pos:end="157:30"><call pos:start="157:9" pos:end="157:30"><name pos:start="157:9" pos:end="157:22">align_get_bits</name><argument_list pos:start="157:23" pos:end="157:30">(<argument pos:start="157:24" pos:end="157:29"><expr pos:start="157:24" pos:end="157:29"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:29"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="161:9" pos:end="161:76">// The pixels are stored in the same order as levels in h-&gt;mb array.</comment>

        <for pos:start="163:9" pos:end="175:9">for<control pos:start="163:12" pos:end="163:27">(<init pos:start="163:13" pos:end="163:16"><expr pos:start="163:13" pos:end="163:15"><name pos:start="163:13" pos:end="163:13">y</name><operator pos:start="163:14" pos:end="163:14">=</operator><literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>;</init> <condition pos:start="163:18" pos:end="163:22"><expr pos:start="163:18" pos:end="163:21"><name pos:start="163:18" pos:end="163:18">y</name><operator pos:start="163:19" pos:end="163:19">&lt;</operator><literal type="number" pos:start="163:20" pos:end="163:21">16</literal></expr>;</condition> <incr pos:start="163:24" pos:end="163:26"><expr pos:start="163:24" pos:end="163:26"><name pos:start="163:24" pos:end="163:24">y</name><operator pos:start="163:25" pos:end="163:26">++</operator></expr></incr>)</control><block pos:start="163:28" pos:end="175:9">{<block_content pos:start="165:13" pos:end="173:13">

            <decl_stmt pos:start="165:13" pos:end="165:66"><decl pos:start="165:13" pos:end="165:65"><type pos:start="165:13" pos:end="165:21"><specifier pos:start="165:13" pos:end="165:17">const</specifier> <name pos:start="165:19" pos:end="165:21">int</name></type> <name pos:start="165:23" pos:end="165:27">index</name><init pos:start="165:28" pos:end="165:65">= <expr pos:start="165:30" pos:end="165:65"><literal type="number" pos:start="165:30" pos:end="165:30">4</literal><operator pos:start="165:31" pos:end="165:31">*</operator><operator pos:start="165:32" pos:end="165:32">(</operator><name pos:start="165:33" pos:end="165:33">y</name><operator pos:start="165:34" pos:end="165:34">&amp;</operator><literal type="number" pos:start="165:35" pos:end="165:35">3</literal><operator pos:start="165:36" pos:end="165:36">)</operator> <operator pos:start="165:38" pos:end="165:38">+</operator> <literal type="number" pos:start="165:40" pos:end="165:41">32</literal><operator pos:start="165:42" pos:end="165:42">*</operator><operator pos:start="165:43" pos:end="165:43">(</operator><operator pos:start="165:44" pos:end="165:44">(</operator><name pos:start="165:45" pos:end="165:45">y</name><operator pos:start="165:46" pos:end="165:47">&gt;&gt;</operator><literal type="number" pos:start="165:48" pos:end="165:48">2</literal><operator pos:start="165:49" pos:end="165:49">)</operator><operator pos:start="165:50" pos:end="165:50">&amp;</operator><literal type="number" pos:start="165:51" pos:end="165:51">1</literal><operator pos:start="165:52" pos:end="165:52">)</operator> <operator pos:start="165:54" pos:end="165:54">+</operator> <literal type="number" pos:start="165:56" pos:end="165:58">128</literal><operator pos:start="165:59" pos:end="165:59">*</operator><operator pos:start="165:60" pos:end="165:60">(</operator><name pos:start="165:61" pos:end="165:61">y</name><operator pos:start="165:62" pos:end="165:63">&gt;&gt;</operator><literal type="number" pos:start="165:64" pos:end="165:64">3</literal><operator pos:start="165:65" pos:end="165:65">)</operator></expr></init></decl>;</decl_stmt>

            <for pos:start="167:13" pos:end="173:13">for<control pos:start="167:16" pos:end="167:31">(<init pos:start="167:17" pos:end="167:20"><expr pos:start="167:17" pos:end="167:19"><name pos:start="167:17" pos:end="167:17">x</name><operator pos:start="167:18" pos:end="167:18">=</operator><literal type="number" pos:start="167:19" pos:end="167:19">0</literal></expr>;</init> <condition pos:start="167:22" pos:end="167:26"><expr pos:start="167:22" pos:end="167:25"><name pos:start="167:22" pos:end="167:22">x</name><operator pos:start="167:23" pos:end="167:23">&lt;</operator><literal type="number" pos:start="167:24" pos:end="167:25">16</literal></expr>;</condition> <incr pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:28">x</name><operator pos:start="167:29" pos:end="167:30">++</operator></expr></incr>)</control><block pos:start="167:32" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:86">

                <expr_stmt pos:start="169:17" pos:end="169:83"><expr pos:start="169:17" pos:end="169:82"><call pos:start="169:17" pos:end="169:82"><name pos:start="169:17" pos:end="169:23">tprintf</name><argument_list pos:start="169:24" pos:end="169:82">(<argument pos:start="169:25" pos:end="169:32"><expr pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:32"><name pos:start="169:25" pos:end="169:25">s</name><operator pos:start="169:26" pos:end="169:27">-&gt;</operator><name pos:start="169:28" pos:end="169:32">avctx</name></name></expr></argument>, <argument pos:start="169:35" pos:end="169:59"><expr pos:start="169:35" pos:end="169:59"><literal type="string" pos:start="169:35" pos:end="169:59">"LUMA ICPM LEVEL (%3d)\n"</literal></expr></argument>, <argument pos:start="169:62" pos:end="169:81"><expr pos:start="169:62" pos:end="169:81"><call pos:start="169:62" pos:end="169:81"><name pos:start="169:62" pos:end="169:70">show_bits</name><argument_list pos:start="169:71" pos:end="169:81">(<argument pos:start="169:72" pos:end="169:77"><expr pos:start="169:72" pos:end="169:77"><operator pos:start="169:72" pos:end="169:72">&amp;</operator><name pos:start="169:73" pos:end="169:77"><name pos:start="169:73" pos:end="169:73">s</name><operator pos:start="169:74" pos:end="169:75">-&gt;</operator><name pos:start="169:76" pos:end="169:77">gb</name></name></expr></argument>, <argument pos:start="169:80" pos:end="169:80"><expr pos:start="169:80" pos:end="169:80"><literal type="number" pos:start="169:80" pos:end="169:80">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:86"><expr pos:start="171:17" pos:end="171:85"><name pos:start="171:17" pos:end="171:64"><name pos:start="171:17" pos:end="171:17">h</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:21">mb</name><index pos:start="171:22" pos:end="171:64">[<expr pos:start="171:23" pos:end="171:63"><name pos:start="171:23" pos:end="171:27">index</name> <operator pos:start="171:29" pos:end="171:29">+</operator> <operator pos:start="171:31" pos:end="171:31">(</operator><name pos:start="171:32" pos:end="171:32">x</name><operator pos:start="171:33" pos:end="171:33">&amp;</operator><literal type="number" pos:start="171:34" pos:end="171:34">3</literal><operator pos:start="171:35" pos:end="171:35">)</operator> <operator pos:start="171:37" pos:end="171:37">+</operator> <literal type="number" pos:start="171:39" pos:end="171:40">16</literal><operator pos:start="171:41" pos:end="171:41">*</operator><operator pos:start="171:42" pos:end="171:42">(</operator><operator pos:start="171:43" pos:end="171:43">(</operator><name pos:start="171:44" pos:end="171:44">x</name><operator pos:start="171:45" pos:end="171:46">&gt;&gt;</operator><literal type="number" pos:start="171:47" pos:end="171:47">2</literal><operator pos:start="171:48" pos:end="171:48">)</operator><operator pos:start="171:49" pos:end="171:49">&amp;</operator><literal type="number" pos:start="171:50" pos:end="171:50">1</literal><operator pos:start="171:51" pos:end="171:51">)</operator> <operator pos:start="171:53" pos:end="171:53">+</operator> <literal type="number" pos:start="171:55" pos:end="171:56">64</literal><operator pos:start="171:57" pos:end="171:57">*</operator><operator pos:start="171:58" pos:end="171:58">(</operator><name pos:start="171:59" pos:end="171:59">x</name><operator pos:start="171:60" pos:end="171:61">&gt;&gt;</operator><literal type="number" pos:start="171:62" pos:end="171:62">3</literal><operator pos:start="171:63" pos:end="171:63">)</operator></expr>]</index></name><operator pos:start="171:65" pos:end="171:65">=</operator> <call pos:start="171:67" pos:end="171:85"><name pos:start="171:67" pos:end="171:74">get_bits</name><argument_list pos:start="171:75" pos:end="171:85">(<argument pos:start="171:76" pos:end="171:81"><expr pos:start="171:76" pos:end="171:81"><operator pos:start="171:76" pos:end="171:76">&amp;</operator><name pos:start="171:77" pos:end="171:81"><name pos:start="171:77" pos:end="171:77">s</name><operator pos:start="171:78" pos:end="171:79">-&gt;</operator><name pos:start="171:80" pos:end="171:81">gb</name></name></expr></argument>, <argument pos:start="171:84" pos:end="171:84"><expr pos:start="171:84" pos:end="171:84"><literal type="number" pos:start="171:84" pos:end="171:84">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <for pos:start="177:9" pos:end="189:9">for<control pos:start="177:12" pos:end="177:26">(<init pos:start="177:13" pos:end="177:16"><expr pos:start="177:13" pos:end="177:15"><name pos:start="177:13" pos:end="177:13">y</name><operator pos:start="177:14" pos:end="177:14">=</operator><literal type="number" pos:start="177:15" pos:end="177:15">0</literal></expr>;</init> <condition pos:start="177:18" pos:end="177:21"><expr pos:start="177:18" pos:end="177:20"><name pos:start="177:18" pos:end="177:18">y</name><operator pos:start="177:19" pos:end="177:19">&lt;</operator><literal type="number" pos:start="177:20" pos:end="177:20">8</literal></expr>;</condition> <incr pos:start="177:23" pos:end="177:25"><expr pos:start="177:23" pos:end="177:25"><name pos:start="177:23" pos:end="177:23">y</name><operator pos:start="177:24" pos:end="177:25">++</operator></expr></incr>)</control><block pos:start="177:27" pos:end="189:9">{<block_content pos:start="179:13" pos:end="187:13">

            <decl_stmt pos:start="179:13" pos:end="179:55"><decl pos:start="179:13" pos:end="179:54"><type pos:start="179:13" pos:end="179:21"><specifier pos:start="179:13" pos:end="179:17">const</specifier> <name pos:start="179:19" pos:end="179:21">int</name></type> <name pos:start="179:23" pos:end="179:27">index</name><init pos:start="179:28" pos:end="179:54">= <expr pos:start="179:30" pos:end="179:54"><literal type="number" pos:start="179:30" pos:end="179:34">256</literal> <operator pos:start="179:34" pos:end="179:34">+</operator> <literal type="number" pos:start="179:36" pos:end="179:36">4</literal><operator pos:start="179:37" pos:end="179:37">*</operator><operator pos:start="179:38" pos:end="179:38">(</operator><name pos:start="179:39" pos:end="179:39">y</name><operator pos:start="179:40" pos:end="179:40">&amp;</operator><literal type="number" pos:start="179:41" pos:end="179:41">3</literal><operator pos:start="179:42" pos:end="179:42">)</operator> <operator pos:start="179:44" pos:end="179:44">+</operator> <literal type="number" pos:start="179:46" pos:end="179:47">32</literal><operator pos:start="179:48" pos:end="179:48">*</operator><operator pos:start="179:49" pos:end="179:49">(</operator><name pos:start="179:50" pos:end="179:50">y</name><operator pos:start="179:51" pos:end="179:52">&gt;&gt;</operator><literal type="number" pos:start="179:53" pos:end="179:53">2</literal><operator pos:start="179:54" pos:end="179:54">)</operator></expr></init></decl>;</decl_stmt>

            <for pos:start="181:13" pos:end="187:13">for<control pos:start="181:16" pos:end="181:30">(<init pos:start="181:17" pos:end="181:20"><expr pos:start="181:17" pos:end="181:19"><name pos:start="181:17" pos:end="181:17">x</name><operator pos:start="181:18" pos:end="181:18">=</operator><literal type="number" pos:start="181:19" pos:end="181:19">0</literal></expr>;</init> <condition pos:start="181:22" pos:end="181:25"><expr pos:start="181:22" pos:end="181:24"><name pos:start="181:22" pos:end="181:22">x</name><operator pos:start="181:23" pos:end="181:23">&lt;</operator><literal type="number" pos:start="181:24" pos:end="181:24">8</literal></expr>;</condition> <incr pos:start="181:27" pos:end="181:29"><expr pos:start="181:27" pos:end="181:29"><name pos:start="181:27" pos:end="181:27">x</name><operator pos:start="181:28" pos:end="181:29">++</operator></expr></incr>)</control><block pos:start="181:31" pos:end="187:13">{<block_content pos:start="183:17" pos:end="185:70">

                <expr_stmt pos:start="183:17" pos:end="183:87"><expr pos:start="183:17" pos:end="183:86"><call pos:start="183:17" pos:end="183:86"><name pos:start="183:17" pos:end="183:23">tprintf</name><argument_list pos:start="183:24" pos:end="183:86">(<argument pos:start="183:25" pos:end="183:32"><expr pos:start="183:25" pos:end="183:32"><name pos:start="183:25" pos:end="183:32"><name pos:start="183:25" pos:end="183:25">s</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:32">avctx</name></name></expr></argument>, <argument pos:start="183:35" pos:end="183:63"><expr pos:start="183:35" pos:end="183:63"><literal type="string" pos:start="183:35" pos:end="183:63">"CHROMA U ICPM LEVEL (%3d)\n"</literal></expr></argument>, <argument pos:start="183:66" pos:end="183:85"><expr pos:start="183:66" pos:end="183:85"><call pos:start="183:66" pos:end="183:85"><name pos:start="183:66" pos:end="183:74">show_bits</name><argument_list pos:start="183:75" pos:end="183:85">(<argument pos:start="183:76" pos:end="183:81"><expr pos:start="183:76" pos:end="183:81"><operator pos:start="183:76" pos:end="183:76">&amp;</operator><name pos:start="183:77" pos:end="183:81"><name pos:start="183:77" pos:end="183:77">s</name><operator pos:start="183:78" pos:end="183:79">-&gt;</operator><name pos:start="183:80" pos:end="183:81">gb</name></name></expr></argument>, <argument pos:start="183:84" pos:end="183:84"><expr pos:start="183:84" pos:end="183:84"><literal type="number" pos:start="183:84" pos:end="183:84">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:70"><expr pos:start="185:17" pos:end="185:69"><name pos:start="185:17" pos:end="185:48"><name pos:start="185:17" pos:end="185:17">h</name><operator pos:start="185:18" pos:end="185:19">-&gt;</operator><name pos:start="185:20" pos:end="185:21">mb</name><index pos:start="185:22" pos:end="185:48">[<expr pos:start="185:23" pos:end="185:47"><name pos:start="185:23" pos:end="185:27">index</name> <operator pos:start="185:29" pos:end="185:29">+</operator> <operator pos:start="185:31" pos:end="185:31">(</operator><name pos:start="185:32" pos:end="185:32">x</name><operator pos:start="185:33" pos:end="185:33">&amp;</operator><literal type="number" pos:start="185:34" pos:end="185:34">3</literal><operator pos:start="185:35" pos:end="185:35">)</operator> <operator pos:start="185:37" pos:end="185:37">+</operator> <literal type="number" pos:start="185:39" pos:end="185:40">16</literal><operator pos:start="185:41" pos:end="185:41">*</operator><operator pos:start="185:42" pos:end="185:42">(</operator><name pos:start="185:43" pos:end="185:43">x</name><operator pos:start="185:44" pos:end="185:45">&gt;&gt;</operator><literal type="number" pos:start="185:46" pos:end="185:46">2</literal><operator pos:start="185:47" pos:end="185:47">)</operator></expr>]</index></name><operator pos:start="185:49" pos:end="185:49">=</operator> <call pos:start="185:51" pos:end="185:69"><name pos:start="185:51" pos:end="185:58">get_bits</name><argument_list pos:start="185:59" pos:end="185:69">(<argument pos:start="185:60" pos:end="185:65"><expr pos:start="185:60" pos:end="185:65"><operator pos:start="185:60" pos:end="185:60">&amp;</operator><name pos:start="185:61" pos:end="185:65"><name pos:start="185:61" pos:end="185:61">s</name><operator pos:start="185:62" pos:end="185:63">-&gt;</operator><name pos:start="185:64" pos:end="185:65">gb</name></name></expr></argument>, <argument pos:start="185:68" pos:end="185:68"><expr pos:start="185:68" pos:end="185:68"><literal type="number" pos:start="185:68" pos:end="185:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <for pos:start="191:9" pos:end="203:9">for<control pos:start="191:12" pos:end="191:26">(<init pos:start="191:13" pos:end="191:16"><expr pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:13">y</name><operator pos:start="191:14" pos:end="191:14">=</operator><literal type="number" pos:start="191:15" pos:end="191:15">0</literal></expr>;</init> <condition pos:start="191:18" pos:end="191:21"><expr pos:start="191:18" pos:end="191:20"><name pos:start="191:18" pos:end="191:18">y</name><operator pos:start="191:19" pos:end="191:19">&lt;</operator><literal type="number" pos:start="191:20" pos:end="191:20">8</literal></expr>;</condition> <incr pos:start="191:23" pos:end="191:25"><expr pos:start="191:23" pos:end="191:25"><name pos:start="191:23" pos:end="191:23">y</name><operator pos:start="191:24" pos:end="191:25">++</operator></expr></incr>)</control><block pos:start="191:27" pos:end="203:9">{<block_content pos:start="193:13" pos:end="201:13">

            <decl_stmt pos:start="193:13" pos:end="193:60"><decl pos:start="193:13" pos:end="193:59"><type pos:start="193:13" pos:end="193:21"><specifier pos:start="193:13" pos:end="193:17">const</specifier> <name pos:start="193:19" pos:end="193:21">int</name></type> <name pos:start="193:23" pos:end="193:27">index</name><init pos:start="193:28" pos:end="193:59">= <expr pos:start="193:30" pos:end="193:59"><literal type="number" pos:start="193:30" pos:end="193:34">256</literal> <operator pos:start="193:34" pos:end="193:34">+</operator> <literal type="number" pos:start="193:36" pos:end="193:39">64</literal> <operator pos:start="193:39" pos:end="193:39">+</operator> <literal type="number" pos:start="193:41" pos:end="193:41">4</literal><operator pos:start="193:42" pos:end="193:42">*</operator><operator pos:start="193:43" pos:end="193:43">(</operator><name pos:start="193:44" pos:end="193:44">y</name><operator pos:start="193:45" pos:end="193:45">&amp;</operator><literal type="number" pos:start="193:46" pos:end="193:46">3</literal><operator pos:start="193:47" pos:end="193:47">)</operator> <operator pos:start="193:49" pos:end="193:49">+</operator> <literal type="number" pos:start="193:51" pos:end="193:52">32</literal><operator pos:start="193:53" pos:end="193:53">*</operator><operator pos:start="193:54" pos:end="193:54">(</operator><name pos:start="193:55" pos:end="193:55">y</name><operator pos:start="193:56" pos:end="193:57">&gt;&gt;</operator><literal type="number" pos:start="193:58" pos:end="193:58">2</literal><operator pos:start="193:59" pos:end="193:59">)</operator></expr></init></decl>;</decl_stmt>

            <for pos:start="195:13" pos:end="201:13">for<control pos:start="195:16" pos:end="195:30">(<init pos:start="195:17" pos:end="195:20"><expr pos:start="195:17" pos:end="195:19"><name pos:start="195:17" pos:end="195:17">x</name><operator pos:start="195:18" pos:end="195:18">=</operator><literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>;</init> <condition pos:start="195:22" pos:end="195:25"><expr pos:start="195:22" pos:end="195:24"><name pos:start="195:22" pos:end="195:22">x</name><operator pos:start="195:23" pos:end="195:23">&lt;</operator><literal type="number" pos:start="195:24" pos:end="195:24">8</literal></expr>;</condition> <incr pos:start="195:27" pos:end="195:29"><expr pos:start="195:27" pos:end="195:29"><name pos:start="195:27" pos:end="195:27">x</name><operator pos:start="195:28" pos:end="195:29">++</operator></expr></incr>)</control><block pos:start="195:31" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:70">

                <expr_stmt pos:start="197:17" pos:end="197:87"><expr pos:start="197:17" pos:end="197:86"><call pos:start="197:17" pos:end="197:86"><name pos:start="197:17" pos:end="197:23">tprintf</name><argument_list pos:start="197:24" pos:end="197:86">(<argument pos:start="197:25" pos:end="197:32"><expr pos:start="197:25" pos:end="197:32"><name pos:start="197:25" pos:end="197:32"><name pos:start="197:25" pos:end="197:25">s</name><operator pos:start="197:26" pos:end="197:27">-&gt;</operator><name pos:start="197:28" pos:end="197:32">avctx</name></name></expr></argument>, <argument pos:start="197:35" pos:end="197:63"><expr pos:start="197:35" pos:end="197:63"><literal type="string" pos:start="197:35" pos:end="197:63">"CHROMA V ICPM LEVEL (%3d)\n"</literal></expr></argument>, <argument pos:start="197:66" pos:end="197:85"><expr pos:start="197:66" pos:end="197:85"><call pos:start="197:66" pos:end="197:85"><name pos:start="197:66" pos:end="197:74">show_bits</name><argument_list pos:start="197:75" pos:end="197:85">(<argument pos:start="197:76" pos:end="197:81"><expr pos:start="197:76" pos:end="197:81"><operator pos:start="197:76" pos:end="197:76">&amp;</operator><name pos:start="197:77" pos:end="197:81"><name pos:start="197:77" pos:end="197:77">s</name><operator pos:start="197:78" pos:end="197:79">-&gt;</operator><name pos:start="197:80" pos:end="197:81">gb</name></name></expr></argument>, <argument pos:start="197:84" pos:end="197:84"><expr pos:start="197:84" pos:end="197:84"><literal type="number" pos:start="197:84" pos:end="197:84">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:70"><expr pos:start="199:17" pos:end="199:69"><name pos:start="199:17" pos:end="199:48"><name pos:start="199:17" pos:end="199:17">h</name><operator pos:start="199:18" pos:end="199:19">-&gt;</operator><name pos:start="199:20" pos:end="199:21">mb</name><index pos:start="199:22" pos:end="199:48">[<expr pos:start="199:23" pos:end="199:47"><name pos:start="199:23" pos:end="199:27">index</name> <operator pos:start="199:29" pos:end="199:29">+</operator> <operator pos:start="199:31" pos:end="199:31">(</operator><name pos:start="199:32" pos:end="199:32">x</name><operator pos:start="199:33" pos:end="199:33">&amp;</operator><literal type="number" pos:start="199:34" pos:end="199:34">3</literal><operator pos:start="199:35" pos:end="199:35">)</operator> <operator pos:start="199:37" pos:end="199:37">+</operator> <literal type="number" pos:start="199:39" pos:end="199:40">16</literal><operator pos:start="199:41" pos:end="199:41">*</operator><operator pos:start="199:42" pos:end="199:42">(</operator><name pos:start="199:43" pos:end="199:43">x</name><operator pos:start="199:44" pos:end="199:45">&gt;&gt;</operator><literal type="number" pos:start="199:46" pos:end="199:46">2</literal><operator pos:start="199:47" pos:end="199:47">)</operator></expr>]</index></name><operator pos:start="199:49" pos:end="199:49">=</operator> <call pos:start="199:51" pos:end="199:69"><name pos:start="199:51" pos:end="199:58">get_bits</name><argument_list pos:start="199:59" pos:end="199:69">(<argument pos:start="199:60" pos:end="199:65"><expr pos:start="199:60" pos:end="199:65"><operator pos:start="199:60" pos:end="199:60">&amp;</operator><name pos:start="199:61" pos:end="199:65"><name pos:start="199:61" pos:end="199:61">s</name><operator pos:start="199:62" pos:end="199:63">-&gt;</operator><name pos:start="199:64" pos:end="199:65">gb</name></name></expr></argument>, <argument pos:start="199:68" pos:end="199:68"><expr pos:start="199:68" pos:end="199:68"><literal type="number" pos:start="199:68" pos:end="199:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="line" pos:start="207:9" pos:end="207:44">// In deblocking, the quantizer is 0</comment>

        <expr_stmt pos:start="209:9" pos:end="209:50"><expr pos:start="209:9" pos:end="209:49"><name pos:start="209:9" pos:end="209:46"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:26">current_picture</name><operator pos:start="209:27" pos:end="209:27">.</operator><name pos:start="209:28" pos:end="209:39">qscale_table</name><index pos:start="209:40" pos:end="209:46">[<expr pos:start="209:41" pos:end="209:45"><name pos:start="209:41" pos:end="209:45">mb_xy</name></expr>]</index></name><operator pos:start="209:47" pos:end="209:47">=</operator> <literal type="number" pos:start="209:49" pos:end="209:49">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="211:9" pos:end="211:33">// All coeffs are present</comment>

        <expr_stmt pos:start="213:9" pos:end="213:49"><expr pos:start="213:9" pos:end="213:48"><call pos:start="213:9" pos:end="213:48"><name pos:start="213:9" pos:end="213:14">memset</name><argument_list pos:start="213:15" pos:end="213:48">(<argument pos:start="213:16" pos:end="213:39"><expr pos:start="213:16" pos:end="213:39"><name pos:start="213:16" pos:end="213:39"><name pos:start="213:16" pos:end="213:16">h</name><operator pos:start="213:17" pos:end="213:18">-&gt;</operator><name pos:start="213:19" pos:end="213:32">non_zero_count</name><index pos:start="213:33" pos:end="213:39">[<expr pos:start="213:34" pos:end="213:38"><name pos:start="213:34" pos:end="213:38">mb_xy</name></expr>]</index></name></expr></argument>, <argument pos:start="213:42" pos:end="213:43"><expr pos:start="213:42" pos:end="213:43"><literal type="number" pos:start="213:42" pos:end="213:43">16</literal></expr></argument>, <argument pos:start="213:46" pos:end="213:47"><expr pos:start="213:46" pos:end="213:47"><literal type="number" pos:start="213:46" pos:end="213:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:51"><expr pos:start="217:9" pos:end="217:50"><name pos:start="217:9" pos:end="217:41"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:26">current_picture</name><operator pos:start="217:27" pos:end="217:27">.</operator><name pos:start="217:28" pos:end="217:34">mb_type</name><index pos:start="217:35" pos:end="217:41">[<expr pos:start="217:36" pos:end="217:40"><name pos:start="217:36" pos:end="217:40">mb_xy</name></expr>]</index></name><operator pos:start="217:42" pos:end="217:42">=</operator> <name pos:start="217:44" pos:end="217:50">mb_type</name></expr>;</expr_stmt>

        <return pos:start="219:9" pos:end="219:17">return <expr pos:start="219:16" pos:end="219:16"><literal type="number" pos:start="219:16" pos:end="219:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if<condition pos:start="225:7" pos:end="225:16">(<expr pos:start="225:8" pos:end="225:15"><name pos:start="225:8" pos:end="225:15">MB_MBAFF</name></expr>)</condition><block pos:start="225:17" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:30">

        <expr_stmt pos:start="227:9" pos:end="227:30"><expr pos:start="227:9" pos:end="227:29"><name pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:9">h</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:20">ref_count</name><index pos:start="227:21" pos:end="227:23">[<expr pos:start="227:22" pos:end="227:22"><literal type="number" pos:start="227:22" pos:end="227:22">0</literal></expr>]</index></name> <operator pos:start="227:25" pos:end="227:27">&lt;&lt;=</operator> <literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:30"><expr pos:start="229:9" pos:end="229:29"><name pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:9">h</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:20">ref_count</name><index pos:start="229:21" pos:end="229:23">[<expr pos:start="229:22" pos:end="229:22"><literal type="number" pos:start="229:22" pos:end="229:22">1</literal></expr>]</index></name> <operator pos:start="229:25" pos:end="229:27">&lt;&lt;=</operator> <literal type="number" pos:start="229:29" pos:end="229:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:31"><expr pos:start="235:5" pos:end="235:30"><call pos:start="235:5" pos:end="235:30"><name pos:start="235:5" pos:end="235:15">fill_caches</name><argument_list pos:start="235:16" pos:end="235:30">(<argument pos:start="235:17" pos:end="235:17"><expr pos:start="235:17" pos:end="235:17"><name pos:start="235:17" pos:end="235:17">h</name></expr></argument>, <argument pos:start="235:20" pos:end="235:26"><expr pos:start="235:20" pos:end="235:26"><name pos:start="235:20" pos:end="235:26">mb_type</name></expr></argument>, <argument pos:start="235:29" pos:end="235:29"><expr pos:start="235:29" pos:end="235:29"><literal type="number" pos:start="235:29" pos:end="235:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="239:5" pos:end="239:13">//mb_pred</comment>

    <if_stmt pos:start="241:5" pos:end="703:5"><if pos:start="241:5" pos:end="317:5">if<condition pos:start="241:7" pos:end="241:25">(<expr pos:start="241:8" pos:end="241:24"><call pos:start="241:8" pos:end="241:24"><name pos:start="241:8" pos:end="241:15">IS_INTRA</name><argument_list pos:start="241:16" pos:end="241:24">(<argument pos:start="241:17" pos:end="241:23"><expr pos:start="241:17" pos:end="241:23"><name pos:start="241:17" pos:end="241:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="241:26" pos:end="317:5">{<block_content pos:start="243:13" pos:end="315:43">

            <decl_stmt pos:start="243:13" pos:end="243:26"><decl pos:start="243:13" pos:end="243:25"><type pos:start="243:13" pos:end="243:15"><name pos:start="243:13" pos:end="243:15">int</name></type> <name pos:start="243:17" pos:end="243:25">pred_mode</name></decl>;</decl_stmt>

<comment type="line" pos:start="245:1" pos:end="245:44">//            init_top_left_availability(h);</comment>

            <if_stmt pos:start="247:13" pos:end="305:13"><if pos:start="247:13" pos:end="297:13">if<condition pos:start="247:15" pos:end="247:36">(<expr pos:start="247:16" pos:end="247:35"><call pos:start="247:16" pos:end="247:35"><name pos:start="247:16" pos:end="247:26">IS_INTRA4x4</name><argument_list pos:start="247:27" pos:end="247:35">(<argument pos:start="247:28" pos:end="247:34"><expr pos:start="247:28" pos:end="247:34"><name pos:start="247:28" pos:end="247:34">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="247:37" pos:end="297:13">{<block_content pos:start="249:17" pos:end="295:30">

                <decl_stmt pos:start="249:17" pos:end="249:22"><decl pos:start="249:17" pos:end="249:21"><type pos:start="249:17" pos:end="249:19"><name pos:start="249:17" pos:end="249:19">int</name></type> <name pos:start="249:21" pos:end="249:21">i</name></decl>;</decl_stmt>

                <decl_stmt pos:start="251:17" pos:end="251:27"><decl pos:start="251:17" pos:end="251:26"><type pos:start="251:17" pos:end="251:19"><name pos:start="251:17" pos:end="251:19">int</name></type> <name pos:start="251:21" pos:end="251:22">di</name> <init pos:start="251:24" pos:end="251:26">= <expr pos:start="251:26" pos:end="251:26"><literal type="number" pos:start="251:26" pos:end="251:26">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="253:17" pos:end="259:17"><if pos:start="253:17" pos:end="259:17">if<condition pos:start="253:19" pos:end="253:55">(<expr pos:start="253:20" pos:end="253:54"><name pos:start="253:20" pos:end="253:33">dct8x8_allowed</name> <operator pos:start="253:35" pos:end="253:36">&amp;&amp;</operator> <call pos:start="253:38" pos:end="253:54"><name pos:start="253:38" pos:end="253:46">get_bits1</name><argument_list pos:start="253:47" pos:end="253:54">(<argument pos:start="253:48" pos:end="253:53"><expr pos:start="253:48" pos:end="253:53"><operator pos:start="253:48" pos:end="253:48">&amp;</operator><name pos:start="253:49" pos:end="253:53"><name pos:start="253:49" pos:end="253:49">s</name><operator pos:start="253:50" pos:end="253:51">-&gt;</operator><name pos:start="253:52" pos:end="253:53">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="253:56" pos:end="259:17">{<block_content pos:start="255:21" pos:end="257:27">

                    <expr_stmt pos:start="255:21" pos:end="255:46"><expr pos:start="255:21" pos:end="255:45"><name pos:start="255:21" pos:end="255:27">mb_type</name> <operator pos:start="255:29" pos:end="255:30">|=</operator> <name pos:start="255:32" pos:end="255:45">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="257:21" pos:end="257:27"><expr pos:start="257:21" pos:end="257:26"><name pos:start="257:21" pos:end="257:22">di</name> <operator pos:start="257:24" pos:end="257:24">=</operator> <literal type="number" pos:start="257:26" pos:end="257:26">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="263:1" pos:end="263:46">//                fill_intra4x4_pred_table(h);</comment>

                <for pos:start="265:17" pos:end="289:17">for<control pos:start="265:20" pos:end="265:37">(<init pos:start="265:21" pos:end="265:24"><expr pos:start="265:21" pos:end="265:23"><name pos:start="265:21" pos:end="265:21">i</name><operator pos:start="265:22" pos:end="265:22">=</operator><literal type="number" pos:start="265:23" pos:end="265:23">0</literal></expr>;</init> <condition pos:start="265:26" pos:end="265:30"><expr pos:start="265:26" pos:end="265:29"><name pos:start="265:26" pos:end="265:26">i</name><operator pos:start="265:27" pos:end="265:27">&lt;</operator><literal type="number" pos:start="265:28" pos:end="265:29">16</literal></expr>;</condition> <incr pos:start="265:32" pos:end="265:36"><expr pos:start="265:32" pos:end="265:36"><name pos:start="265:32" pos:end="265:32">i</name><operator pos:start="265:33" pos:end="265:34">+=</operator><name pos:start="265:35" pos:end="265:36">di</name></expr></incr>)</control><block pos:start="265:38" pos:end="289:17">{<block_content pos:start="267:21" pos:end="287:71">

                    <decl_stmt pos:start="267:21" pos:end="267:52"><decl pos:start="267:21" pos:end="267:51"><type pos:start="267:21" pos:end="267:23"><name pos:start="267:21" pos:end="267:23">int</name></type> <name pos:start="267:25" pos:end="267:28">mode</name><init pos:start="267:29" pos:end="267:51">= <expr pos:start="267:31" pos:end="267:51"><call pos:start="267:31" pos:end="267:51"><name pos:start="267:31" pos:end="267:45">pred_intra_mode</name><argument_list pos:start="267:46" pos:end="267:51">(<argument pos:start="267:47" pos:end="267:47"><expr pos:start="267:47" pos:end="267:47"><name pos:start="267:47" pos:end="267:47">h</name></expr></argument>, <argument pos:start="267:50" pos:end="267:50"><expr pos:start="267:50" pos:end="267:50"><name pos:start="267:50" pos:end="267:50">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="271:21" pos:end="277:21"><if pos:start="271:21" pos:end="277:21">if<condition pos:start="271:23" pos:end="271:42">(<expr pos:start="271:24" pos:end="271:41"><operator pos:start="271:24" pos:end="271:24">!</operator><call pos:start="271:25" pos:end="271:41"><name pos:start="271:25" pos:end="271:33">get_bits1</name><argument_list pos:start="271:34" pos:end="271:41">(<argument pos:start="271:35" pos:end="271:40"><expr pos:start="271:35" pos:end="271:40"><operator pos:start="271:35" pos:end="271:35">&amp;</operator><name pos:start="271:36" pos:end="271:40"><name pos:start="271:36" pos:end="271:36">s</name><operator pos:start="271:37" pos:end="271:38">-&gt;</operator><name pos:start="271:39" pos:end="271:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="271:43" pos:end="277:21">{<block_content pos:start="273:25" pos:end="275:61">

                        <decl_stmt pos:start="273:25" pos:end="273:64"><decl pos:start="273:25" pos:end="273:63"><type pos:start="273:25" pos:end="273:33"><specifier pos:start="273:25" pos:end="273:29">const</specifier> <name pos:start="273:31" pos:end="273:33">int</name></type> <name pos:start="273:35" pos:end="273:42">rem_mode</name><init pos:start="273:43" pos:end="273:63">= <expr pos:start="273:45" pos:end="273:63"><call pos:start="273:45" pos:end="273:63"><name pos:start="273:45" pos:end="273:52">get_bits</name><argument_list pos:start="273:53" pos:end="273:63">(<argument pos:start="273:54" pos:end="273:59"><expr pos:start="273:54" pos:end="273:59"><operator pos:start="273:54" pos:end="273:54">&amp;</operator><name pos:start="273:55" pos:end="273:59"><name pos:start="273:55" pos:end="273:55">s</name><operator pos:start="273:56" pos:end="273:57">-&gt;</operator><name pos:start="273:58" pos:end="273:59">gb</name></name></expr></argument>, <argument pos:start="273:62" pos:end="273:62"><expr pos:start="273:62" pos:end="273:62"><literal type="number" pos:start="273:62" pos:end="273:62">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="275:25" pos:end="275:61"><expr pos:start="275:25" pos:end="275:60"><name pos:start="275:25" pos:end="275:28">mode</name> <operator pos:start="275:30" pos:end="275:30">=</operator> <name pos:start="275:32" pos:end="275:39">rem_mode</name> <operator pos:start="275:41" pos:end="275:41">+</operator> <operator pos:start="275:43" pos:end="275:43">(</operator><name pos:start="275:44" pos:end="275:51">rem_mode</name> <operator pos:start="275:53" pos:end="275:54">&gt;=</operator> <name pos:start="275:56" pos:end="275:59">mode</name><operator pos:start="275:60" pos:end="275:60">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="281:21" pos:end="287:71"><if pos:start="281:21" pos:end="283:101">if<condition pos:start="281:23" pos:end="281:29">(<expr pos:start="281:24" pos:end="281:28"><name pos:start="281:24" pos:end="281:25">di</name><operator pos:start="281:26" pos:end="281:27">==</operator><literal type="number" pos:start="281:28" pos:end="281:28">4</literal></expr>)</condition><block type="pseudo" pos:start="283:25" pos:end="283:101"><block_content pos:start="283:25" pos:end="283:101">

                        <expr_stmt pos:start="283:25" pos:end="283:101"><expr pos:start="283:25" pos:end="283:100"><call pos:start="283:25" pos:end="283:100"><name pos:start="283:25" pos:end="283:38">fill_rectangle</name><argument_list pos:start="283:39" pos:end="283:100">( <argument pos:start="283:41" pos:end="283:80"><expr pos:start="283:41" pos:end="283:80"><operator pos:start="283:41" pos:end="283:41">&amp;</operator><name pos:start="283:42" pos:end="283:80"><name pos:start="283:42" pos:end="283:42">h</name><operator pos:start="283:43" pos:end="283:44">-&gt;</operator><name pos:start="283:45" pos:end="283:68">intra4x4_pred_mode_cache</name><index pos:start="283:69" pos:end="283:80">[ <expr pos:start="283:71" pos:end="283:78"><name pos:start="283:71" pos:end="283:78"><name pos:start="283:71" pos:end="283:75">scan8</name><index pos:start="283:76" pos:end="283:78">[<expr pos:start="283:77" pos:end="283:77"><name pos:start="283:77" pos:end="283:77">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="283:83" pos:end="283:83"><expr pos:start="283:83" pos:end="283:83"><literal type="number" pos:start="283:83" pos:end="283:83">2</literal></expr></argument>, <argument pos:start="283:86" pos:end="283:86"><expr pos:start="283:86" pos:end="283:86"><literal type="number" pos:start="283:86" pos:end="283:86">2</literal></expr></argument>, <argument pos:start="283:89" pos:end="283:89"><expr pos:start="283:89" pos:end="283:89"><literal type="number" pos:start="283:89" pos:end="283:89">8</literal></expr></argument>, <argument pos:start="283:92" pos:end="283:95"><expr pos:start="283:92" pos:end="283:95"><name pos:start="283:92" pos:end="283:95">mode</name></expr></argument>, <argument pos:start="283:98" pos:end="283:98"><expr pos:start="283:98" pos:end="283:98"><literal type="number" pos:start="283:98" pos:end="283:98">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="285:21" pos:end="287:71">else<block type="pseudo" pos:start="287:25" pos:end="287:71"><block_content pos:start="287:25" pos:end="287:71">

                        <expr_stmt pos:start="287:25" pos:end="287:71"><expr pos:start="287:25" pos:end="287:70"><name pos:start="287:25" pos:end="287:63"><name pos:start="287:25" pos:end="287:25">h</name><operator pos:start="287:26" pos:end="287:27">-&gt;</operator><name pos:start="287:28" pos:end="287:51">intra4x4_pred_mode_cache</name><index pos:start="287:52" pos:end="287:63">[ <expr pos:start="287:54" pos:end="287:61"><name pos:start="287:54" pos:end="287:61"><name pos:start="287:54" pos:end="287:58">scan8</name><index pos:start="287:59" pos:end="287:61">[<expr pos:start="287:60" pos:end="287:60"><name pos:start="287:60" pos:end="287:60">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="287:65" pos:end="287:65">=</operator> <name pos:start="287:67" pos:end="287:70">mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="291:17" pos:end="291:46"><expr pos:start="291:17" pos:end="291:45"><call pos:start="291:17" pos:end="291:45"><name pos:start="291:17" pos:end="291:42">write_back_intra_pred_mode</name><argument_list pos:start="291:43" pos:end="291:45">(<argument pos:start="291:44" pos:end="291:44"><expr pos:start="291:44" pos:end="291:44"><name pos:start="291:44" pos:end="291:44">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="293:17" pos:end="295:30"><if pos:start="293:17" pos:end="295:30">if<condition pos:start="293:19" pos:end="293:52">( <expr pos:start="293:21" pos:end="293:51"><call pos:start="293:21" pos:end="293:47"><name pos:start="293:21" pos:end="293:44">check_intra4x4_pred_mode</name><argument_list pos:start="293:45" pos:end="293:47">(<argument pos:start="293:46" pos:end="293:46"><expr pos:start="293:46" pos:end="293:46"><name pos:start="293:46" pos:end="293:46">h</name></expr></argument>)</argument_list></call> <operator pos:start="293:49" pos:end="293:49">&lt;</operator> <literal type="number" pos:start="293:51" pos:end="293:51">0</literal></expr>)</condition><block type="pseudo" pos:start="295:21" pos:end="295:30"><block_content pos:start="295:21" pos:end="295:30">

                    <return pos:start="295:21" pos:end="295:30">return <expr pos:start="295:28" pos:end="295:29"><operator pos:start="295:28" pos:end="295:28">-</operator><literal type="number" pos:start="295:29" pos:end="295:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if><else pos:start="297:14" pos:end="305:13">else<block pos:start="297:18" pos:end="305:13">{<block_content pos:start="299:17" pos:end="303:30">

                <expr_stmt pos:start="299:17" pos:end="299:91"><expr pos:start="299:17" pos:end="299:90"><name pos:start="299:17" pos:end="299:39"><name pos:start="299:17" pos:end="299:17">h</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:39">intra16x16_pred_mode</name></name><operator pos:start="299:40" pos:end="299:40">=</operator> <call pos:start="299:42" pos:end="299:90"><name pos:start="299:42" pos:end="299:62">check_intra_pred_mode</name><argument_list pos:start="299:63" pos:end="299:90">(<argument pos:start="299:64" pos:end="299:64"><expr pos:start="299:64" pos:end="299:64"><name pos:start="299:64" pos:end="299:64">h</name></expr></argument>, <argument pos:start="299:67" pos:end="299:89"><expr pos:start="299:67" pos:end="299:89"><name pos:start="299:67" pos:end="299:89"><name pos:start="299:67" pos:end="299:67">h</name><operator pos:start="299:68" pos:end="299:69">-&gt;</operator><name pos:start="299:70" pos:end="299:89">intra16x16_pred_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="301:17" pos:end="303:30"><if pos:start="301:17" pos:end="303:30">if<condition pos:start="301:19" pos:end="301:47">(<expr pos:start="301:20" pos:end="301:46"><name pos:start="301:20" pos:end="301:42"><name pos:start="301:20" pos:end="301:20">h</name><operator pos:start="301:21" pos:end="301:22">-&gt;</operator><name pos:start="301:23" pos:end="301:42">intra16x16_pred_mode</name></name> <operator pos:start="301:44" pos:end="301:44">&lt;</operator> <literal type="number" pos:start="301:46" pos:end="301:46">0</literal></expr>)</condition><block type="pseudo" pos:start="303:21" pos:end="303:30"><block_content pos:start="303:21" pos:end="303:30">

                    <return pos:start="303:21" pos:end="303:30">return <expr pos:start="303:28" pos:end="303:29"><operator pos:start="303:28" pos:end="303:28">-</operator><literal type="number" pos:start="303:29" pos:end="303:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="309:13" pos:end="309:71"><expr pos:start="309:13" pos:end="309:70"><name pos:start="309:13" pos:end="309:21">pred_mode</name><operator pos:start="309:22" pos:end="309:22">=</operator> <call pos:start="309:24" pos:end="309:70"><name pos:start="309:24" pos:end="309:44">check_intra_pred_mode</name><argument_list pos:start="309:45" pos:end="309:70">(<argument pos:start="309:46" pos:end="309:46"><expr pos:start="309:46" pos:end="309:46"><name pos:start="309:46" pos:end="309:46">h</name></expr></argument>, <argument pos:start="309:49" pos:end="309:69"><expr pos:start="309:49" pos:end="309:69"><call pos:start="309:49" pos:end="309:69"><name pos:start="309:49" pos:end="309:61">get_ue_golomb</name><argument_list pos:start="309:62" pos:end="309:69">(<argument pos:start="309:63" pos:end="309:68"><expr pos:start="309:63" pos:end="309:68"><operator pos:start="309:63" pos:end="309:63">&amp;</operator><name pos:start="309:64" pos:end="309:68"><name pos:start="309:64" pos:end="309:64">s</name><operator pos:start="309:65" pos:end="309:66">-&gt;</operator><name pos:start="309:67" pos:end="309:68">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="311:13" pos:end="313:26"><if pos:start="311:13" pos:end="313:26">if<condition pos:start="311:15" pos:end="311:29">(<expr pos:start="311:16" pos:end="311:28"><name pos:start="311:16" pos:end="311:24">pred_mode</name> <operator pos:start="311:26" pos:end="311:26">&lt;</operator> <literal type="number" pos:start="311:28" pos:end="311:28">0</literal></expr>)</condition><block type="pseudo" pos:start="313:17" pos:end="313:26"><block_content pos:start="313:17" pos:end="313:26">

                <return pos:start="313:17" pos:end="313:26">return <expr pos:start="313:24" pos:end="313:25"><operator pos:start="313:24" pos:end="313:24">-</operator><literal type="number" pos:start="313:25" pos:end="313:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:43"><expr pos:start="315:13" pos:end="315:42"><name pos:start="315:13" pos:end="315:31"><name pos:start="315:13" pos:end="315:13">h</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:31">chroma_pred_mode</name></name><operator pos:start="315:32" pos:end="315:32">=</operator> <name pos:start="315:34" pos:end="315:42">pred_mode</name></expr>;</expr_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="317:6" pos:end="513:5">else if<condition pos:start="317:13" pos:end="317:32">(<expr pos:start="317:14" pos:end="317:31"><name pos:start="317:14" pos:end="317:28">partition_count</name><operator pos:start="317:29" pos:end="317:30">==</operator><literal type="number" pos:start="317:31" pos:end="317:31">4</literal></expr>)</condition><block pos:start="317:33" pos:end="513:5">{<block_content pos:start="319:9" pos:end="511:9">

        <decl_stmt pos:start="319:9" pos:end="319:58"><decl pos:start="319:9" pos:end="319:13"><type pos:start="319:9" pos:end="319:11"><name pos:start="319:9" pos:end="319:11">int</name></type> <name pos:start="319:13" pos:end="319:13">i</name></decl>, <decl pos:start="319:16" pos:end="319:16"><type ref="prev" pos:start="319:9" pos:end="319:11"/><name pos:start="319:16" pos:end="319:16">j</name></decl>, <decl pos:start="319:19" pos:end="319:40"><type ref="prev" pos:start="319:9" pos:end="319:11"/><name pos:start="319:19" pos:end="319:40"><name pos:start="319:19" pos:end="319:37">sub_partition_count</name><index pos:start="319:38" pos:end="319:40">[<expr pos:start="319:39" pos:end="319:39"><literal type="number" pos:start="319:39" pos:end="319:39">4</literal></expr>]</index></name></decl>, <decl pos:start="319:43" pos:end="319:46"><type ref="prev" pos:start="319:9" pos:end="319:11"/><name pos:start="319:43" pos:end="319:46">list</name></decl>, <decl pos:start="319:49" pos:end="319:57"><type ref="prev" pos:start="319:9" pos:end="319:11"/><name pos:start="319:49" pos:end="319:57"><name pos:start="319:49" pos:end="319:51">ref</name><index pos:start="319:52" pos:end="319:54">[<expr pos:start="319:53" pos:end="319:53"><literal type="number" pos:start="319:53" pos:end="319:53">2</literal></expr>]</index><index pos:start="319:55" pos:end="319:57">[<expr pos:start="319:56" pos:end="319:56"><literal type="number" pos:start="319:56" pos:end="319:56">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="323:9" pos:end="381:9"><if pos:start="323:9" pos:end="359:9">if<condition pos:start="323:11" pos:end="323:42">(<expr pos:start="323:12" pos:end="323:41"><name pos:start="323:12" pos:end="323:28"><name pos:start="323:12" pos:end="323:12">h</name><operator pos:start="323:13" pos:end="323:14">-&gt;</operator><name pos:start="323:15" pos:end="323:28">slice_type_nos</name></name> <operator pos:start="323:30" pos:end="323:31">==</operator> <name pos:start="323:33" pos:end="323:41">FF_B_TYPE</name></expr>)</condition><block pos:start="323:43" pos:end="359:9">{<block_content pos:start="325:13" pos:end="357:13">

            <for pos:start="325:13" pos:end="341:13">for<control pos:start="325:16" pos:end="325:30">(<init pos:start="325:17" pos:end="325:20"><expr pos:start="325:17" pos:end="325:19"><name pos:start="325:17" pos:end="325:17">i</name><operator pos:start="325:18" pos:end="325:18">=</operator><literal type="number" pos:start="325:19" pos:end="325:19">0</literal></expr>;</init> <condition pos:start="325:22" pos:end="325:25"><expr pos:start="325:22" pos:end="325:24"><name pos:start="325:22" pos:end="325:22">i</name><operator pos:start="325:23" pos:end="325:23">&lt;</operator><literal type="number" pos:start="325:24" pos:end="325:24">4</literal></expr>;</condition> <incr pos:start="325:27" pos:end="325:29"><expr pos:start="325:27" pos:end="325:29"><name pos:start="325:27" pos:end="325:27">i</name><operator pos:start="325:28" pos:end="325:29">++</operator></expr></incr>)</control><block pos:start="325:31" pos:end="341:13">{<block_content pos:start="327:17" pos:end="339:85">

                <expr_stmt pos:start="327:17" pos:end="327:57"><expr pos:start="327:17" pos:end="327:56"><name pos:start="327:17" pos:end="327:33"><name pos:start="327:17" pos:end="327:17">h</name><operator pos:start="327:18" pos:end="327:19">-&gt;</operator><name pos:start="327:20" pos:end="327:30">sub_mb_type</name><index pos:start="327:31" pos:end="327:33">[<expr pos:start="327:32" pos:end="327:32"><name pos:start="327:32" pos:end="327:32">i</name></expr>]</index></name><operator pos:start="327:34" pos:end="327:34">=</operator> <call pos:start="327:36" pos:end="327:56"><name pos:start="327:36" pos:end="327:48">get_ue_golomb</name><argument_list pos:start="327:49" pos:end="327:56">(<argument pos:start="327:50" pos:end="327:55"><expr pos:start="327:50" pos:end="327:55"><operator pos:start="327:50" pos:end="327:50">&amp;</operator><name pos:start="327:51" pos:end="327:55"><name pos:start="327:51" pos:end="327:51">s</name><operator pos:start="327:52" pos:end="327:53">-&gt;</operator><name pos:start="327:54" pos:end="327:55">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="329:17" pos:end="335:17"><if pos:start="329:17" pos:end="335:17">if<condition pos:start="329:19" pos:end="329:42">(<expr pos:start="329:20" pos:end="329:41"><name pos:start="329:20" pos:end="329:36"><name pos:start="329:20" pos:end="329:20">h</name><operator pos:start="329:21" pos:end="329:22">-&gt;</operator><name pos:start="329:23" pos:end="329:33">sub_mb_type</name><index pos:start="329:34" pos:end="329:36">[<expr pos:start="329:35" pos:end="329:35"><name pos:start="329:35" pos:end="329:35">i</name></expr>]</index></name> <operator pos:start="329:38" pos:end="329:39">&gt;=</operator><literal type="number" pos:start="329:40" pos:end="329:41">13</literal></expr>)</condition><block pos:start="329:43" pos:end="335:17">{<block_content pos:start="331:21" pos:end="333:30">

                    <expr_stmt pos:start="331:21" pos:end="331:134"><expr pos:start="331:21" pos:end="331:133"><call pos:start="331:21" pos:end="331:133"><name pos:start="331:21" pos:end="331:26">av_log</name><argument_list pos:start="331:27" pos:end="331:133">(<argument pos:start="331:28" pos:end="331:37"><expr pos:start="331:28" pos:end="331:37"><name pos:start="331:28" pos:end="331:37"><name pos:start="331:28" pos:end="331:28">h</name><operator pos:start="331:29" pos:end="331:30">-&gt;</operator><name pos:start="331:31" pos:end="331:31">s</name><operator pos:start="331:32" pos:end="331:32">.</operator><name pos:start="331:33" pos:end="331:37">avctx</name></name></expr></argument>, <argument pos:start="331:40" pos:end="331:51"><expr pos:start="331:40" pos:end="331:51"><name pos:start="331:40" pos:end="331:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="331:54" pos:end="331:95"><expr pos:start="331:54" pos:end="331:95"><literal type="string" pos:start="331:54" pos:end="331:95">"B sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="331:98" pos:end="331:114"><expr pos:start="331:98" pos:end="331:114"><name pos:start="331:98" pos:end="331:114"><name pos:start="331:98" pos:end="331:98">h</name><operator pos:start="331:99" pos:end="331:100">-&gt;</operator><name pos:start="331:101" pos:end="331:111">sub_mb_type</name><index pos:start="331:112" pos:end="331:114">[<expr pos:start="331:113" pos:end="331:113"><name pos:start="331:113" pos:end="331:113">i</name></expr>]</index></name></expr></argument>, <argument pos:start="331:117" pos:end="331:123"><expr pos:start="331:117" pos:end="331:123"><name pos:start="331:117" pos:end="331:123"><name pos:start="331:117" pos:end="331:117">s</name><operator pos:start="331:118" pos:end="331:119">-&gt;</operator><name pos:start="331:120" pos:end="331:123">mb_x</name></name></expr></argument>, <argument pos:start="331:126" pos:end="331:132"><expr pos:start="331:126" pos:end="331:132"><name pos:start="331:126" pos:end="331:132"><name pos:start="331:126" pos:end="331:126">s</name><operator pos:start="331:127" pos:end="331:128">-&gt;</operator><name pos:start="331:129" pos:end="331:132">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="333:21" pos:end="333:30">return <expr pos:start="333:28" pos:end="333:29"><operator pos:start="333:28" pos:end="333:28">-</operator><literal type="number" pos:start="333:29" pos:end="333:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:96"><expr pos:start="337:17" pos:end="337:95"><name pos:start="337:17" pos:end="337:38"><name pos:start="337:17" pos:end="337:35">sub_partition_count</name><index pos:start="337:36" pos:end="337:38">[<expr pos:start="337:37" pos:end="337:37"><name pos:start="337:37" pos:end="337:37">i</name></expr>]</index></name><operator pos:start="337:39" pos:end="337:39">=</operator> <name pos:start="337:41" pos:end="337:79"><name pos:start="337:41" pos:end="337:58">b_sub_mb_type_info</name><index pos:start="337:59" pos:end="337:79">[ <expr pos:start="337:61" pos:end="337:77"><name pos:start="337:61" pos:end="337:77"><name pos:start="337:61" pos:end="337:61">h</name><operator pos:start="337:62" pos:end="337:63">-&gt;</operator><name pos:start="337:64" pos:end="337:74">sub_mb_type</name><index pos:start="337:75" pos:end="337:77">[<expr pos:start="337:76" pos:end="337:76"><name pos:start="337:76" pos:end="337:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="337:80" pos:end="337:80">.</operator><name pos:start="337:81" pos:end="337:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:85"><expr pos:start="339:17" pos:end="339:84"><name pos:start="339:17" pos:end="339:33"><name pos:start="339:17" pos:end="339:17">h</name><operator pos:start="339:18" pos:end="339:19">-&gt;</operator><name pos:start="339:20" pos:end="339:30">sub_mb_type</name><index pos:start="339:31" pos:end="339:33">[<expr pos:start="339:32" pos:end="339:32"><name pos:start="339:32" pos:end="339:32">i</name></expr>]</index></name><operator pos:start="339:34" pos:end="339:34">=</operator>      <name pos:start="339:41" pos:end="339:79"><name pos:start="339:41" pos:end="339:58">b_sub_mb_type_info</name><index pos:start="339:59" pos:end="339:79">[ <expr pos:start="339:61" pos:end="339:77"><name pos:start="339:61" pos:end="339:77"><name pos:start="339:61" pos:end="339:61">h</name><operator pos:start="339:62" pos:end="339:63">-&gt;</operator><name pos:start="339:64" pos:end="339:74">sub_mb_type</name><index pos:start="339:75" pos:end="339:77">[<expr pos:start="339:76" pos:end="339:76"><name pos:start="339:76" pos:end="339:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="339:80" pos:end="339:80">.</operator><name pos:start="339:81" pos:end="339:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="343:13" pos:end="357:13"><if pos:start="343:13" pos:end="357:13">if<condition pos:start="343:15" pos:end="345:79">(   <expr pos:start="343:19" pos:end="345:78"><call pos:start="343:19" pos:end="343:46"><name pos:start="343:19" pos:end="343:27">IS_DIRECT</name><argument_list pos:start="343:28" pos:end="343:46">(<argument pos:start="343:29" pos:end="343:45"><expr pos:start="343:29" pos:end="343:45"><name pos:start="343:29" pos:end="343:45"><name pos:start="343:29" pos:end="343:29">h</name><operator pos:start="343:30" pos:end="343:31">-&gt;</operator><name pos:start="343:32" pos:end="343:42">sub_mb_type</name><index pos:start="343:43" pos:end="343:45">[<expr pos:start="343:44" pos:end="343:44"><literal type="number" pos:start="343:44" pos:end="343:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="343:48" pos:end="343:49">||</operator> <call pos:start="343:51" pos:end="343:78"><name pos:start="343:51" pos:end="343:59">IS_DIRECT</name><argument_list pos:start="343:60" pos:end="343:78">(<argument pos:start="343:61" pos:end="343:77"><expr pos:start="343:61" pos:end="343:77"><name pos:start="343:61" pos:end="343:77"><name pos:start="343:61" pos:end="343:61">h</name><operator pos:start="343:62" pos:end="343:63">-&gt;</operator><name pos:start="343:64" pos:end="343:74">sub_mb_type</name><index pos:start="343:75" pos:end="343:77">[<expr pos:start="343:76" pos:end="343:76"><literal type="number" pos:start="343:76" pos:end="343:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

               <operator pos:start="345:16" pos:end="345:17">||</operator> <call pos:start="345:19" pos:end="345:46"><name pos:start="345:19" pos:end="345:27">IS_DIRECT</name><argument_list pos:start="345:28" pos:end="345:46">(<argument pos:start="345:29" pos:end="345:45"><expr pos:start="345:29" pos:end="345:45"><name pos:start="345:29" pos:end="345:45"><name pos:start="345:29" pos:end="345:29">h</name><operator pos:start="345:30" pos:end="345:31">-&gt;</operator><name pos:start="345:32" pos:end="345:42">sub_mb_type</name><index pos:start="345:43" pos:end="345:45">[<expr pos:start="345:44" pos:end="345:44"><literal type="number" pos:start="345:44" pos:end="345:44">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="345:48" pos:end="345:49">||</operator> <call pos:start="345:51" pos:end="345:78"><name pos:start="345:51" pos:end="345:59">IS_DIRECT</name><argument_list pos:start="345:60" pos:end="345:78">(<argument pos:start="345:61" pos:end="345:77"><expr pos:start="345:61" pos:end="345:77"><name pos:start="345:61" pos:end="345:77"><name pos:start="345:61" pos:end="345:61">h</name><operator pos:start="345:62" pos:end="345:63">-&gt;</operator><name pos:start="345:64" pos:end="345:74">sub_mb_type</name><index pos:start="345:75" pos:end="345:77">[<expr pos:start="345:76" pos:end="345:76"><literal type="number" pos:start="345:76" pos:end="345:76">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="345:81" pos:end="357:13">{<block_content pos:start="347:17" pos:end="355:64">

                <expr_stmt pos:start="347:17" pos:end="347:48"><expr pos:start="347:17" pos:end="347:47"><call pos:start="347:17" pos:end="347:47"><name pos:start="347:17" pos:end="347:34">pred_direct_motion</name><argument_list pos:start="347:35" pos:end="347:47">(<argument pos:start="347:36" pos:end="347:36"><expr pos:start="347:36" pos:end="347:36"><name pos:start="347:36" pos:end="347:36">h</name></expr></argument>, <argument pos:start="347:39" pos:end="347:46"><expr pos:start="347:39" pos:end="347:46"><operator pos:start="347:39" pos:end="347:39">&amp;</operator><name pos:start="347:40" pos:end="347:46">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="355:64"><expr pos:start="349:17" pos:end="355:63"><name pos:start="349:17" pos:end="349:41"><name pos:start="349:17" pos:end="349:17">h</name><operator pos:start="349:18" pos:end="349:19">-&gt;</operator><name pos:start="349:20" pos:end="349:28">ref_cache</name><index pos:start="349:29" pos:end="349:31">[<expr pos:start="349:30" pos:end="349:30"><literal type="number" pos:start="349:30" pos:end="349:30">0</literal></expr>]</index><index pos:start="349:32" pos:end="349:41">[<expr pos:start="349:33" pos:end="349:40"><name pos:start="349:33" pos:end="349:40"><name pos:start="349:33" pos:end="349:37">scan8</name><index pos:start="349:38" pos:end="349:40">[<expr pos:start="349:39" pos:end="349:39"><literal type="number" pos:start="349:39" pos:end="349:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="349:43" pos:end="349:43">=</operator>

                <name pos:start="351:17" pos:end="351:41"><name pos:start="351:17" pos:end="351:17">h</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:28">ref_cache</name><index pos:start="351:29" pos:end="351:31">[<expr pos:start="351:30" pos:end="351:30"><literal type="number" pos:start="351:30" pos:end="351:30">1</literal></expr>]</index><index pos:start="351:32" pos:end="351:41">[<expr pos:start="351:33" pos:end="351:40"><name pos:start="351:33" pos:end="351:40"><name pos:start="351:33" pos:end="351:37">scan8</name><index pos:start="351:38" pos:end="351:40">[<expr pos:start="351:39" pos:end="351:39"><literal type="number" pos:start="351:39" pos:end="351:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="351:43" pos:end="351:43">=</operator>

                <name pos:start="353:17" pos:end="353:42"><name pos:start="353:17" pos:end="353:17">h</name><operator pos:start="353:18" pos:end="353:19">-&gt;</operator><name pos:start="353:20" pos:end="353:28">ref_cache</name><index pos:start="353:29" pos:end="353:31">[<expr pos:start="353:30" pos:end="353:30"><literal type="number" pos:start="353:30" pos:end="353:30">0</literal></expr>]</index><index pos:start="353:32" pos:end="353:42">[<expr pos:start="353:33" pos:end="353:41"><name pos:start="353:33" pos:end="353:41"><name pos:start="353:33" pos:end="353:37">scan8</name><index pos:start="353:38" pos:end="353:41">[<expr pos:start="353:39" pos:end="353:40"><literal type="number" pos:start="353:39" pos:end="353:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="353:44" pos:end="353:44">=</operator>

                <name pos:start="355:17" pos:end="355:42"><name pos:start="355:17" pos:end="355:17">h</name><operator pos:start="355:18" pos:end="355:19">-&gt;</operator><name pos:start="355:20" pos:end="355:28">ref_cache</name><index pos:start="355:29" pos:end="355:31">[<expr pos:start="355:30" pos:end="355:30"><literal type="number" pos:start="355:30" pos:end="355:30">1</literal></expr>]</index><index pos:start="355:32" pos:end="355:42">[<expr pos:start="355:33" pos:end="355:41"><name pos:start="355:33" pos:end="355:41"><name pos:start="355:33" pos:end="355:37">scan8</name><index pos:start="355:38" pos:end="355:41">[<expr pos:start="355:39" pos:end="355:40"><literal type="number" pos:start="355:39" pos:end="355:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="355:44" pos:end="355:44">=</operator> <name pos:start="355:46" pos:end="355:63">PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if><else pos:start="359:10" pos:end="381:9">else<block pos:start="359:14" pos:end="381:9">{<block_content pos:start="361:13" pos:end="379:13">

            <expr_stmt pos:start="361:13" pos:end="361:51"><expr pos:start="361:13" pos:end="361:50"><call pos:start="361:13" pos:end="361:50"><name pos:start="361:13" pos:end="361:18">assert</name><argument_list pos:start="361:19" pos:end="361:50">(<argument pos:start="361:20" pos:end="361:49"><expr pos:start="361:20" pos:end="361:49"><name pos:start="361:20" pos:end="361:36"><name pos:start="361:20" pos:end="361:20">h</name><operator pos:start="361:21" pos:end="361:22">-&gt;</operator><name pos:start="361:23" pos:end="361:36">slice_type_nos</name></name> <operator pos:start="361:38" pos:end="361:39">==</operator> <name pos:start="361:41" pos:end="361:49">FF_P_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="361:53" pos:end="361:72">//FIXME SP correct ?</comment>

            <for pos:start="363:13" pos:end="379:13">for<control pos:start="363:16" pos:end="363:30">(<init pos:start="363:17" pos:end="363:20"><expr pos:start="363:17" pos:end="363:19"><name pos:start="363:17" pos:end="363:17">i</name><operator pos:start="363:18" pos:end="363:18">=</operator><literal type="number" pos:start="363:19" pos:end="363:19">0</literal></expr>;</init> <condition pos:start="363:22" pos:end="363:25"><expr pos:start="363:22" pos:end="363:24"><name pos:start="363:22" pos:end="363:22">i</name><operator pos:start="363:23" pos:end="363:23">&lt;</operator><literal type="number" pos:start="363:24" pos:end="363:24">4</literal></expr>;</condition> <incr pos:start="363:27" pos:end="363:29"><expr pos:start="363:27" pos:end="363:29"><name pos:start="363:27" pos:end="363:27">i</name><operator pos:start="363:28" pos:end="363:29">++</operator></expr></incr>)</control><block pos:start="363:31" pos:end="379:13">{<block_content pos:start="365:17" pos:end="377:85">

                <expr_stmt pos:start="365:17" pos:end="365:57"><expr pos:start="365:17" pos:end="365:56"><name pos:start="365:17" pos:end="365:33"><name pos:start="365:17" pos:end="365:17">h</name><operator pos:start="365:18" pos:end="365:19">-&gt;</operator><name pos:start="365:20" pos:end="365:30">sub_mb_type</name><index pos:start="365:31" pos:end="365:33">[<expr pos:start="365:32" pos:end="365:32"><name pos:start="365:32" pos:end="365:32">i</name></expr>]</index></name><operator pos:start="365:34" pos:end="365:34">=</operator> <call pos:start="365:36" pos:end="365:56"><name pos:start="365:36" pos:end="365:48">get_ue_golomb</name><argument_list pos:start="365:49" pos:end="365:56">(<argument pos:start="365:50" pos:end="365:55"><expr pos:start="365:50" pos:end="365:55"><operator pos:start="365:50" pos:end="365:50">&amp;</operator><name pos:start="365:51" pos:end="365:55"><name pos:start="365:51" pos:end="365:51">s</name><operator pos:start="365:52" pos:end="365:53">-&gt;</operator><name pos:start="365:54" pos:end="365:55">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="367:17" pos:end="373:17"><if pos:start="367:17" pos:end="373:17">if<condition pos:start="367:19" pos:end="367:41">(<expr pos:start="367:20" pos:end="367:40"><name pos:start="367:20" pos:end="367:36"><name pos:start="367:20" pos:end="367:20">h</name><operator pos:start="367:21" pos:end="367:22">-&gt;</operator><name pos:start="367:23" pos:end="367:33">sub_mb_type</name><index pos:start="367:34" pos:end="367:36">[<expr pos:start="367:35" pos:end="367:35"><name pos:start="367:35" pos:end="367:35">i</name></expr>]</index></name> <operator pos:start="367:38" pos:end="367:39">&gt;=</operator><literal type="number" pos:start="367:40" pos:end="367:40">4</literal></expr>)</condition><block pos:start="367:42" pos:end="373:17">{<block_content pos:start="369:21" pos:end="371:30">

                    <expr_stmt pos:start="369:21" pos:end="369:134"><expr pos:start="369:21" pos:end="369:133"><call pos:start="369:21" pos:end="369:133"><name pos:start="369:21" pos:end="369:26">av_log</name><argument_list pos:start="369:27" pos:end="369:133">(<argument pos:start="369:28" pos:end="369:37"><expr pos:start="369:28" pos:end="369:37"><name pos:start="369:28" pos:end="369:37"><name pos:start="369:28" pos:end="369:28">h</name><operator pos:start="369:29" pos:end="369:30">-&gt;</operator><name pos:start="369:31" pos:end="369:31">s</name><operator pos:start="369:32" pos:end="369:32">.</operator><name pos:start="369:33" pos:end="369:37">avctx</name></name></expr></argument>, <argument pos:start="369:40" pos:end="369:51"><expr pos:start="369:40" pos:end="369:51"><name pos:start="369:40" pos:end="369:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="369:54" pos:end="369:95"><expr pos:start="369:54" pos:end="369:95"><literal type="string" pos:start="369:54" pos:end="369:95">"P sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="369:98" pos:end="369:114"><expr pos:start="369:98" pos:end="369:114"><name pos:start="369:98" pos:end="369:114"><name pos:start="369:98" pos:end="369:98">h</name><operator pos:start="369:99" pos:end="369:100">-&gt;</operator><name pos:start="369:101" pos:end="369:111">sub_mb_type</name><index pos:start="369:112" pos:end="369:114">[<expr pos:start="369:113" pos:end="369:113"><name pos:start="369:113" pos:end="369:113">i</name></expr>]</index></name></expr></argument>, <argument pos:start="369:117" pos:end="369:123"><expr pos:start="369:117" pos:end="369:123"><name pos:start="369:117" pos:end="369:123"><name pos:start="369:117" pos:end="369:117">s</name><operator pos:start="369:118" pos:end="369:119">-&gt;</operator><name pos:start="369:120" pos:end="369:123">mb_x</name></name></expr></argument>, <argument pos:start="369:126" pos:end="369:132"><expr pos:start="369:126" pos:end="369:132"><name pos:start="369:126" pos:end="369:132"><name pos:start="369:126" pos:end="369:126">s</name><operator pos:start="369:127" pos:end="369:128">-&gt;</operator><name pos:start="369:129" pos:end="369:132">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="371:21" pos:end="371:30">return <expr pos:start="371:28" pos:end="371:29"><operator pos:start="371:28" pos:end="371:28">-</operator><literal type="number" pos:start="371:29" pos:end="371:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:96"><expr pos:start="375:17" pos:end="375:95"><name pos:start="375:17" pos:end="375:38"><name pos:start="375:17" pos:end="375:35">sub_partition_count</name><index pos:start="375:36" pos:end="375:38">[<expr pos:start="375:37" pos:end="375:37"><name pos:start="375:37" pos:end="375:37">i</name></expr>]</index></name><operator pos:start="375:39" pos:end="375:39">=</operator> <name pos:start="375:41" pos:end="375:79"><name pos:start="375:41" pos:end="375:58">p_sub_mb_type_info</name><index pos:start="375:59" pos:end="375:79">[ <expr pos:start="375:61" pos:end="375:77"><name pos:start="375:61" pos:end="375:77"><name pos:start="375:61" pos:end="375:61">h</name><operator pos:start="375:62" pos:end="375:63">-&gt;</operator><name pos:start="375:64" pos:end="375:74">sub_mb_type</name><index pos:start="375:75" pos:end="375:77">[<expr pos:start="375:76" pos:end="375:76"><name pos:start="375:76" pos:end="375:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="375:80" pos:end="375:80">.</operator><name pos:start="375:81" pos:end="375:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:85"><expr pos:start="377:17" pos:end="377:84"><name pos:start="377:17" pos:end="377:33"><name pos:start="377:17" pos:end="377:17">h</name><operator pos:start="377:18" pos:end="377:19">-&gt;</operator><name pos:start="377:20" pos:end="377:30">sub_mb_type</name><index pos:start="377:31" pos:end="377:33">[<expr pos:start="377:32" pos:end="377:32"><name pos:start="377:32" pos:end="377:32">i</name></expr>]</index></name><operator pos:start="377:34" pos:end="377:34">=</operator>      <name pos:start="377:41" pos:end="377:79"><name pos:start="377:41" pos:end="377:58">p_sub_mb_type_info</name><index pos:start="377:59" pos:end="377:79">[ <expr pos:start="377:61" pos:end="377:77"><name pos:start="377:61" pos:end="377:77"><name pos:start="377:61" pos:end="377:61">h</name><operator pos:start="377:62" pos:end="377:63">-&gt;</operator><name pos:start="377:64" pos:end="377:74">sub_mb_type</name><index pos:start="377:75" pos:end="377:77">[<expr pos:start="377:76" pos:end="377:76"><name pos:start="377:76" pos:end="377:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="377:80" pos:end="377:80">.</operator><name pos:start="377:81" pos:end="377:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <for pos:start="385:9" pos:end="417:9">for<control pos:start="385:12" pos:end="385:47">(<init pos:start="385:13" pos:end="385:19"><expr pos:start="385:13" pos:end="385:18"><name pos:start="385:13" pos:end="385:16">list</name><operator pos:start="385:17" pos:end="385:17">=</operator><literal type="number" pos:start="385:18" pos:end="385:18">0</literal></expr>;</init> <condition pos:start="385:21" pos:end="385:39"><expr pos:start="385:21" pos:end="385:38"><name pos:start="385:21" pos:end="385:24">list</name><operator pos:start="385:25" pos:end="385:25">&lt;</operator><name pos:start="385:26" pos:end="385:38"><name pos:start="385:26" pos:end="385:26">h</name><operator pos:start="385:27" pos:end="385:28">-&gt;</operator><name pos:start="385:29" pos:end="385:38">list_count</name></name></expr>;</condition> <incr pos:start="385:41" pos:end="385:46"><expr pos:start="385:41" pos:end="385:46"><name pos:start="385:41" pos:end="385:44">list</name><operator pos:start="385:45" pos:end="385:46">++</operator></expr></incr>)</control><block pos:start="385:48" pos:end="417:9">{<block_content pos:start="387:13" pos:end="415:13">

            <decl_stmt pos:start="387:13" pos:end="387:69"><decl pos:start="387:13" pos:end="387:68"><type pos:start="387:13" pos:end="387:15"><name pos:start="387:13" pos:end="387:15">int</name></type> <name pos:start="387:17" pos:end="387:25">ref_count</name><init pos:start="387:26" pos:end="387:68">= <expr pos:start="387:28" pos:end="387:68"><ternary pos:start="387:28" pos:end="387:68"><condition pos:start="387:28" pos:end="387:45"><expr pos:start="387:28" pos:end="387:43"><call pos:start="387:28" pos:end="387:43"><name pos:start="387:28" pos:end="387:34">IS_REF0</name><argument_list pos:start="387:35" pos:end="387:43">(<argument pos:start="387:36" pos:end="387:42"><expr pos:start="387:36" pos:end="387:42"><name pos:start="387:36" pos:end="387:42">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="387:47" pos:end="387:47"> <expr pos:start="387:47" pos:end="387:47"><literal type="number" pos:start="387:47" pos:end="387:47">1</literal></expr> </then><else pos:start="387:49" pos:end="387:68">: <expr pos:start="387:51" pos:end="387:68"><name pos:start="387:51" pos:end="387:68"><name pos:start="387:51" pos:end="387:51">h</name><operator pos:start="387:52" pos:end="387:53">-&gt;</operator><name pos:start="387:54" pos:end="387:62">ref_count</name><index pos:start="387:63" pos:end="387:68">[<expr pos:start="387:64" pos:end="387:67"><name pos:start="387:64" pos:end="387:67">list</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for pos:start="389:13" pos:end="415:13">for<control pos:start="389:16" pos:end="389:30">(<init pos:start="389:17" pos:end="389:20"><expr pos:start="389:17" pos:end="389:19"><name pos:start="389:17" pos:end="389:17">i</name><operator pos:start="389:18" pos:end="389:18">=</operator><literal type="number" pos:start="389:19" pos:end="389:19">0</literal></expr>;</init> <condition pos:start="389:22" pos:end="389:25"><expr pos:start="389:22" pos:end="389:24"><name pos:start="389:22" pos:end="389:22">i</name><operator pos:start="389:23" pos:end="389:23">&lt;</operator><literal type="number" pos:start="389:24" pos:end="389:24">4</literal></expr>;</condition> <incr pos:start="389:27" pos:end="389:29"><expr pos:start="389:27" pos:end="389:29"><name pos:start="389:27" pos:end="389:27">i</name><operator pos:start="389:28" pos:end="389:29">++</operator></expr></incr>)</control><block pos:start="389:31" pos:end="415:13">{<block_content pos:start="391:17" pos:end="413:17">

                <if_stmt pos:start="391:17" pos:end="391:58"><if pos:start="391:17" pos:end="391:58">if<condition pos:start="391:19" pos:end="391:48">(<expr pos:start="391:20" pos:end="391:47"><call pos:start="391:20" pos:end="391:47"><name pos:start="391:20" pos:end="391:28">IS_DIRECT</name><argument_list pos:start="391:29" pos:end="391:47">(<argument pos:start="391:30" pos:end="391:46"><expr pos:start="391:30" pos:end="391:46"><name pos:start="391:30" pos:end="391:46"><name pos:start="391:30" pos:end="391:30">h</name><operator pos:start="391:31" pos:end="391:32">-&gt;</operator><name pos:start="391:33" pos:end="391:43">sub_mb_type</name><index pos:start="391:44" pos:end="391:46">[<expr pos:start="391:45" pos:end="391:45"><name pos:start="391:45" pos:end="391:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="391:50" pos:end="391:58"><block_content pos:start="391:50" pos:end="391:58"> <continue pos:start="391:50" pos:end="391:58">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="393:17" pos:end="413:17"><if pos:start="393:17" pos:end="407:17">if<condition pos:start="393:19" pos:end="393:54">(<expr pos:start="393:20" pos:end="393:53"><call pos:start="393:20" pos:end="393:53"><name pos:start="393:20" pos:end="393:25">IS_DIR</name><argument_list pos:start="393:26" pos:end="393:53">(<argument pos:start="393:27" pos:end="393:43"><expr pos:start="393:27" pos:end="393:43"><name pos:start="393:27" pos:end="393:43"><name pos:start="393:27" pos:end="393:27">h</name><operator pos:start="393:28" pos:end="393:29">-&gt;</operator><name pos:start="393:30" pos:end="393:40">sub_mb_type</name><index pos:start="393:41" pos:end="393:43">[<expr pos:start="393:42" pos:end="393:42"><name pos:start="393:42" pos:end="393:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="393:46" pos:end="393:46"><expr pos:start="393:46" pos:end="393:46"><literal type="number" pos:start="393:46" pos:end="393:46">0</literal></expr></argument>, <argument pos:start="393:49" pos:end="393:52"><expr pos:start="393:49" pos:end="393:52"><name pos:start="393:49" pos:end="393:52">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="393:55" pos:end="407:17">{<block_content pos:start="395:21" pos:end="405:38">

                    <decl_stmt pos:start="395:21" pos:end="395:73"><decl pos:start="395:21" pos:end="395:72"><type pos:start="395:21" pos:end="395:32"><name pos:start="395:21" pos:end="395:28">unsigned</name> <name pos:start="395:30" pos:end="395:32">int</name></type> <name pos:start="395:34" pos:end="395:36">tmp</name> <init pos:start="395:38" pos:end="395:72">= <expr pos:start="395:40" pos:end="395:72"><call pos:start="395:40" pos:end="395:72"><name pos:start="395:40" pos:end="395:53">get_te0_golomb</name><argument_list pos:start="395:54" pos:end="395:72">(<argument pos:start="395:55" pos:end="395:60"><expr pos:start="395:55" pos:end="395:60"><operator pos:start="395:55" pos:end="395:55">&amp;</operator><name pos:start="395:56" pos:end="395:60"><name pos:start="395:56" pos:end="395:56">s</name><operator pos:start="395:57" pos:end="395:58">-&gt;</operator><name pos:start="395:59" pos:end="395:60">gb</name></name></expr></argument>, <argument pos:start="395:63" pos:end="395:71"><expr pos:start="395:63" pos:end="395:71"><name pos:start="395:63" pos:end="395:71">ref_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="395:75" pos:end="395:108">//FIXME init to 0 before and skip?</comment>

                    <if_stmt pos:start="397:21" pos:end="403:21"><if pos:start="397:21" pos:end="403:21">if<condition pos:start="397:23" pos:end="397:38">(<expr pos:start="397:24" pos:end="397:37"><name pos:start="397:24" pos:end="397:26">tmp</name><operator pos:start="397:27" pos:end="397:28">&gt;=</operator><name pos:start="397:29" pos:end="397:37">ref_count</name></expr>)</condition><block pos:start="397:39" pos:end="403:21">{<block_content pos:start="399:25" pos:end="401:34">

                        <expr_stmt pos:start="399:25" pos:end="399:83"><expr pos:start="399:25" pos:end="399:82"><call pos:start="399:25" pos:end="399:82"><name pos:start="399:25" pos:end="399:30">av_log</name><argument_list pos:start="399:31" pos:end="399:82">(<argument pos:start="399:32" pos:end="399:41"><expr pos:start="399:32" pos:end="399:41"><name pos:start="399:32" pos:end="399:41"><name pos:start="399:32" pos:end="399:32">h</name><operator pos:start="399:33" pos:end="399:34">-&gt;</operator><name pos:start="399:35" pos:end="399:35">s</name><operator pos:start="399:36" pos:end="399:36">.</operator><name pos:start="399:37" pos:end="399:41">avctx</name></name></expr></argument>, <argument pos:start="399:44" pos:end="399:55"><expr pos:start="399:44" pos:end="399:55"><name pos:start="399:44" pos:end="399:55">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="399:58" pos:end="399:76"><expr pos:start="399:58" pos:end="399:76"><literal type="string" pos:start="399:58" pos:end="399:76">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="399:79" pos:end="399:81"><expr pos:start="399:79" pos:end="399:81"><name pos:start="399:79" pos:end="399:81">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="401:25" pos:end="401:34">return <expr pos:start="401:32" pos:end="401:33"><operator pos:start="401:32" pos:end="401:32">-</operator><literal type="number" pos:start="401:33" pos:end="401:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="405:21" pos:end="405:38"><expr pos:start="405:21" pos:end="405:37"><name pos:start="405:21" pos:end="405:32"><name pos:start="405:21" pos:end="405:23">ref</name><index pos:start="405:24" pos:end="405:29">[<expr pos:start="405:25" pos:end="405:28"><name pos:start="405:25" pos:end="405:28">list</name></expr>]</index><index pos:start="405:30" pos:end="405:32">[<expr pos:start="405:31" pos:end="405:31"><name pos:start="405:31" pos:end="405:31">i</name></expr>]</index></name><operator pos:start="405:33" pos:end="405:33">=</operator> <name pos:start="405:35" pos:end="405:37">tmp</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="407:18" pos:end="413:17">else<block pos:start="407:22" pos:end="413:17">{<block_content pos:start="411:21" pos:end="411:38">

                 <comment type="line" pos:start="409:18" pos:end="409:24">//FIXME</comment>

                    <expr_stmt pos:start="411:21" pos:end="411:38"><expr pos:start="411:21" pos:end="411:37"><name pos:start="411:21" pos:end="411:32"><name pos:start="411:21" pos:end="411:23">ref</name><index pos:start="411:24" pos:end="411:29">[<expr pos:start="411:25" pos:end="411:28"><name pos:start="411:25" pos:end="411:28">list</name></expr>]</index><index pos:start="411:30" pos:end="411:32">[<expr pos:start="411:31" pos:end="411:31"><name pos:start="411:31" pos:end="411:31">i</name></expr>]</index></name> <operator pos:start="411:34" pos:end="411:34">=</operator> <operator pos:start="411:36" pos:end="411:36">-</operator><literal type="number" pos:start="411:37" pos:end="411:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="421:9" pos:end="423:51"><if pos:start="421:9" pos:end="423:51">if<condition pos:start="421:11" pos:end="421:26">(<expr pos:start="421:12" pos:end="421:25"><name pos:start="421:12" pos:end="421:25">dct8x8_allowed</name></expr>)</condition><block type="pseudo" pos:start="423:13" pos:end="423:51"><block_content pos:start="423:13" pos:end="423:51">

            <expr_stmt pos:start="423:13" pos:end="423:51"><expr pos:start="423:13" pos:end="423:50"><name pos:start="423:13" pos:end="423:26">dct8x8_allowed</name> <operator pos:start="423:28" pos:end="423:28">=</operator> <call pos:start="423:30" pos:end="423:50"><name pos:start="423:30" pos:end="423:47">get_dct8x8_allowed</name><argument_list pos:start="423:48" pos:end="423:50">(<argument pos:start="423:49" pos:end="423:49"><expr pos:start="423:49" pos:end="423:49"><name pos:start="423:49" pos:end="423:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="427:9" pos:end="511:9">for<control pos:start="427:12" pos:end="427:47">(<init pos:start="427:13" pos:end="427:19"><expr pos:start="427:13" pos:end="427:18"><name pos:start="427:13" pos:end="427:16">list</name><operator pos:start="427:17" pos:end="427:17">=</operator><literal type="number" pos:start="427:18" pos:end="427:18">0</literal></expr>;</init> <condition pos:start="427:21" pos:end="427:39"><expr pos:start="427:21" pos:end="427:38"><name pos:start="427:21" pos:end="427:24">list</name><operator pos:start="427:25" pos:end="427:25">&lt;</operator><name pos:start="427:26" pos:end="427:38"><name pos:start="427:26" pos:end="427:26">h</name><operator pos:start="427:27" pos:end="427:28">-&gt;</operator><name pos:start="427:29" pos:end="427:38">list_count</name></name></expr>;</condition> <incr pos:start="427:41" pos:end="427:46"><expr pos:start="427:41" pos:end="427:46"><name pos:start="427:41" pos:end="427:44">list</name><operator pos:start="427:45" pos:end="427:46">++</operator></expr></incr>)</control><block pos:start="427:48" pos:end="511:9">{<block_content pos:start="429:13" pos:end="509:13">

            <for pos:start="429:13" pos:end="509:13">for<control pos:start="429:16" pos:end="429:30">(<init pos:start="429:17" pos:end="429:20"><expr pos:start="429:17" pos:end="429:19"><name pos:start="429:17" pos:end="429:17">i</name><operator pos:start="429:18" pos:end="429:18">=</operator><literal type="number" pos:start="429:19" pos:end="429:19">0</literal></expr>;</init> <condition pos:start="429:22" pos:end="429:25"><expr pos:start="429:22" pos:end="429:24"><name pos:start="429:22" pos:end="429:22">i</name><operator pos:start="429:23" pos:end="429:23">&lt;</operator><literal type="number" pos:start="429:24" pos:end="429:24">4</literal></expr>;</condition> <incr pos:start="429:27" pos:end="429:29"><expr pos:start="429:27" pos:end="429:29"><name pos:start="429:27" pos:end="429:27">i</name><operator pos:start="429:28" pos:end="429:29">++</operator></expr></incr>)</control><block pos:start="429:31" pos:end="509:13">{<block_content pos:start="431:17" pos:end="507:17">

                <if_stmt pos:start="431:17" pos:end="437:17"><if pos:start="431:17" pos:end="437:17">if<condition pos:start="431:19" pos:end="431:48">(<expr pos:start="431:20" pos:end="431:47"><call pos:start="431:20" pos:end="431:47"><name pos:start="431:20" pos:end="431:28">IS_DIRECT</name><argument_list pos:start="431:29" pos:end="431:47">(<argument pos:start="431:30" pos:end="431:46"><expr pos:start="431:30" pos:end="431:46"><name pos:start="431:30" pos:end="431:46"><name pos:start="431:30" pos:end="431:30">h</name><operator pos:start="431:31" pos:end="431:32">-&gt;</operator><name pos:start="431:33" pos:end="431:43">sub_mb_type</name><index pos:start="431:44" pos:end="431:46">[<expr pos:start="431:45" pos:end="431:45"><name pos:start="431:45" pos:end="431:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="431:50" pos:end="437:17">{<block_content pos:start="433:21" pos:end="435:29">

                    <expr_stmt pos:start="433:21" pos:end="433:90"><expr pos:start="433:21" pos:end="433:89"><name pos:start="433:21" pos:end="433:52"><name pos:start="433:21" pos:end="433:21">h</name><operator pos:start="433:22" pos:end="433:23">-&gt;</operator><name pos:start="433:24" pos:end="433:32">ref_cache</name><index pos:start="433:33" pos:end="433:38">[<expr pos:start="433:34" pos:end="433:37"><name pos:start="433:34" pos:end="433:37">list</name></expr>]</index><index pos:start="433:39" pos:end="433:52">[ <expr pos:start="433:41" pos:end="433:50"><name pos:start="433:41" pos:end="433:50"><name pos:start="433:41" pos:end="433:45">scan8</name><index pos:start="433:46" pos:end="433:50">[<expr pos:start="433:47" pos:end="433:49"><literal type="number" pos:start="433:47" pos:end="433:47">4</literal><operator pos:start="433:48" pos:end="433:48">*</operator><name pos:start="433:49" pos:end="433:49">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="433:54" pos:end="433:54">=</operator> <name pos:start="433:56" pos:end="433:89"><name pos:start="433:56" pos:end="433:56">h</name><operator pos:start="433:57" pos:end="433:58">-&gt;</operator><name pos:start="433:59" pos:end="433:67">ref_cache</name><index pos:start="433:68" pos:end="433:73">[<expr pos:start="433:69" pos:end="433:72"><name pos:start="433:69" pos:end="433:72">list</name></expr>]</index><index pos:start="433:74" pos:end="433:89">[ <expr pos:start="433:76" pos:end="433:87"><name pos:start="433:76" pos:end="433:85"><name pos:start="433:76" pos:end="433:80">scan8</name><index pos:start="433:81" pos:end="433:85">[<expr pos:start="433:82" pos:end="433:84"><literal type="number" pos:start="433:82" pos:end="433:82">4</literal><operator pos:start="433:83" pos:end="433:83">*</operator><name pos:start="433:84" pos:end="433:84">i</name></expr>]</index></name><operator pos:start="433:86" pos:end="433:86">+</operator><literal type="number" pos:start="433:87" pos:end="433:87">1</literal></expr> ]</index></name></expr>;</expr_stmt>

                    <continue pos:start="435:21" pos:end="435:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="439:17" pos:end="441:100"><expr pos:start="439:17" pos:end="441:99"><name pos:start="439:17" pos:end="439:50"><name pos:start="439:17" pos:end="439:17">h</name><operator pos:start="439:18" pos:end="439:19">-&gt;</operator><name pos:start="439:20" pos:end="439:28">ref_cache</name><index pos:start="439:29" pos:end="439:34">[<expr pos:start="439:30" pos:end="439:33"><name pos:start="439:30" pos:end="439:33">list</name></expr>]</index><index pos:start="439:35" pos:end="439:50">[ <expr pos:start="439:37" pos:end="439:46"><name pos:start="439:37" pos:end="439:46"><name pos:start="439:37" pos:end="439:41">scan8</name><index pos:start="439:42" pos:end="439:46">[<expr pos:start="439:43" pos:end="439:45"><literal type="number" pos:start="439:43" pos:end="439:43">4</literal><operator pos:start="439:44" pos:end="439:44">*</operator><name pos:start="439:45" pos:end="439:45">i</name></expr>]</index></name></expr>   ]</index></name><operator pos:start="439:51" pos:end="439:51">=</operator><name pos:start="439:52" pos:end="439:85"><name pos:start="439:52" pos:end="439:52">h</name><operator pos:start="439:53" pos:end="439:54">-&gt;</operator><name pos:start="439:55" pos:end="439:63">ref_cache</name><index pos:start="439:64" pos:end="439:69">[<expr pos:start="439:65" pos:end="439:68"><name pos:start="439:65" pos:end="439:68">list</name></expr>]</index><index pos:start="439:70" pos:end="439:85">[ <expr pos:start="439:72" pos:end="439:83"><name pos:start="439:72" pos:end="439:81"><name pos:start="439:72" pos:end="439:76">scan8</name><index pos:start="439:77" pos:end="439:81">[<expr pos:start="439:78" pos:end="439:80"><literal type="number" pos:start="439:78" pos:end="439:78">4</literal><operator pos:start="439:79" pos:end="439:79">*</operator><name pos:start="439:80" pos:end="439:80">i</name></expr>]</index></name><operator pos:start="439:82" pos:end="439:82">+</operator><literal type="number" pos:start="439:83" pos:end="439:83">1</literal></expr> ]</index></name><operator pos:start="439:86" pos:end="439:86">=</operator>

                <name pos:start="441:17" pos:end="441:50"><name pos:start="441:17" pos:end="441:17">h</name><operator pos:start="441:18" pos:end="441:19">-&gt;</operator><name pos:start="441:20" pos:end="441:28">ref_cache</name><index pos:start="441:29" pos:end="441:34">[<expr pos:start="441:30" pos:end="441:33"><name pos:start="441:30" pos:end="441:33">list</name></expr>]</index><index pos:start="441:35" pos:end="441:50">[ <expr pos:start="441:37" pos:end="441:48"><name pos:start="441:37" pos:end="441:46"><name pos:start="441:37" pos:end="441:41">scan8</name><index pos:start="441:42" pos:end="441:46">[<expr pos:start="441:43" pos:end="441:45"><literal type="number" pos:start="441:43" pos:end="441:43">4</literal><operator pos:start="441:44" pos:end="441:44">*</operator><name pos:start="441:45" pos:end="441:45">i</name></expr>]</index></name><operator pos:start="441:47" pos:end="441:47">+</operator><literal type="number" pos:start="441:48" pos:end="441:48">8</literal></expr> ]</index></name><operator pos:start="441:51" pos:end="441:51">=</operator><name pos:start="441:52" pos:end="441:85"><name pos:start="441:52" pos:end="441:52">h</name><operator pos:start="441:53" pos:end="441:54">-&gt;</operator><name pos:start="441:55" pos:end="441:63">ref_cache</name><index pos:start="441:64" pos:end="441:69">[<expr pos:start="441:65" pos:end="441:68"><name pos:start="441:65" pos:end="441:68">list</name></expr>]</index><index pos:start="441:70" pos:end="441:85">[ <expr pos:start="441:72" pos:end="441:83"><name pos:start="441:72" pos:end="441:81"><name pos:start="441:72" pos:end="441:76">scan8</name><index pos:start="441:77" pos:end="441:81">[<expr pos:start="441:78" pos:end="441:80"><literal type="number" pos:start="441:78" pos:end="441:78">4</literal><operator pos:start="441:79" pos:end="441:79">*</operator><name pos:start="441:80" pos:end="441:80">i</name></expr>]</index></name><operator pos:start="441:82" pos:end="441:82">+</operator><literal type="number" pos:start="441:83" pos:end="441:83">9</literal></expr> ]</index></name><operator pos:start="441:86" pos:end="441:86">=</operator> <name pos:start="441:88" pos:end="441:99"><name pos:start="441:88" pos:end="441:90">ref</name><index pos:start="441:91" pos:end="441:96">[<expr pos:start="441:92" pos:end="441:95"><name pos:start="441:92" pos:end="441:95">list</name></expr>]</index><index pos:start="441:97" pos:end="441:99">[<expr pos:start="441:98" pos:end="441:98"><name pos:start="441:98" pos:end="441:98">i</name></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="445:17" pos:end="507:17"><if pos:start="445:17" pos:end="499:17">if<condition pos:start="445:19" pos:end="445:54">(<expr pos:start="445:20" pos:end="445:53"><call pos:start="445:20" pos:end="445:53"><name pos:start="445:20" pos:end="445:25">IS_DIR</name><argument_list pos:start="445:26" pos:end="445:53">(<argument pos:start="445:27" pos:end="445:43"><expr pos:start="445:27" pos:end="445:43"><name pos:start="445:27" pos:end="445:43"><name pos:start="445:27" pos:end="445:27">h</name><operator pos:start="445:28" pos:end="445:29">-&gt;</operator><name pos:start="445:30" pos:end="445:40">sub_mb_type</name><index pos:start="445:41" pos:end="445:43">[<expr pos:start="445:42" pos:end="445:42"><name pos:start="445:42" pos:end="445:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="445:46" pos:end="445:46"><expr pos:start="445:46" pos:end="445:46"><literal type="number" pos:start="445:46" pos:end="445:46">0</literal></expr></argument>, <argument pos:start="445:49" pos:end="445:52"><expr pos:start="445:49" pos:end="445:52"><name pos:start="445:49" pos:end="445:52">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="445:55" pos:end="499:17">{<block_content pos:start="447:21" pos:end="497:21">

                    <decl_stmt pos:start="447:21" pos:end="447:61"><decl pos:start="447:21" pos:end="447:60"><type pos:start="447:21" pos:end="447:29"><specifier pos:start="447:21" pos:end="447:25">const</specifier> <name pos:start="447:27" pos:end="447:29">int</name></type> <name pos:start="447:31" pos:end="447:41">sub_mb_type</name><init pos:start="447:42" pos:end="447:60">= <expr pos:start="447:44" pos:end="447:60"><name pos:start="447:44" pos:end="447:60"><name pos:start="447:44" pos:end="447:44">h</name><operator pos:start="447:45" pos:end="447:46">-&gt;</operator><name pos:start="447:47" pos:end="447:57">sub_mb_type</name><index pos:start="447:58" pos:end="447:60">[<expr pos:start="447:59" pos:end="447:59"><name pos:start="447:59" pos:end="447:59">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="449:21" pos:end="449:96"><decl pos:start="449:21" pos:end="449:95"><type pos:start="449:21" pos:end="449:29"><specifier pos:start="449:21" pos:end="449:25">const</specifier> <name pos:start="449:27" pos:end="449:29">int</name></type> <name pos:start="449:31" pos:end="449:41">block_width</name><init pos:start="449:42" pos:end="449:95">= <expr pos:start="449:44" pos:end="449:95"><ternary pos:start="449:44" pos:end="449:95"><condition pos:start="449:44" pos:end="449:89"><expr pos:start="449:44" pos:end="449:87"><operator pos:start="449:44" pos:end="449:44">(</operator><name pos:start="449:45" pos:end="449:55">sub_mb_type</name> <operator pos:start="449:57" pos:end="449:57">&amp;</operator> <operator pos:start="449:59" pos:end="449:59">(</operator><name pos:start="449:60" pos:end="449:72">MB_TYPE_16x16</name><operator pos:start="449:73" pos:end="449:73">|</operator><name pos:start="449:74" pos:end="449:85">MB_TYPE_16x8</name><operator pos:start="449:86" pos:end="449:86">)</operator><operator pos:start="449:87" pos:end="449:87">)</operator></expr> ?</condition><then pos:start="449:91" pos:end="449:91"> <expr pos:start="449:91" pos:end="449:91"><literal type="number" pos:start="449:91" pos:end="449:91">2</literal></expr> </then><else pos:start="449:93" pos:end="449:95">: <expr pos:start="449:95" pos:end="449:95"><literal type="number" pos:start="449:95" pos:end="449:95">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for pos:start="451:21" pos:end="497:21">for<control pos:start="451:24" pos:end="451:59">(<init pos:start="451:25" pos:end="451:28"><expr pos:start="451:25" pos:end="451:27"><name pos:start="451:25" pos:end="451:25">j</name><operator pos:start="451:26" pos:end="451:26">=</operator><literal type="number" pos:start="451:27" pos:end="451:27">0</literal></expr>;</init> <condition pos:start="451:30" pos:end="451:54"><expr pos:start="451:30" pos:end="451:53"><name pos:start="451:30" pos:end="451:30">j</name><operator pos:start="451:31" pos:end="451:31">&lt;</operator><name pos:start="451:32" pos:end="451:53"><name pos:start="451:32" pos:end="451:50">sub_partition_count</name><index pos:start="451:51" pos:end="451:53">[<expr pos:start="451:52" pos:end="451:52"><name pos:start="451:52" pos:end="451:52">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="451:56" pos:end="451:58"><expr pos:start="451:56" pos:end="451:58"><name pos:start="451:56" pos:end="451:56">j</name><operator pos:start="451:57" pos:end="451:58">++</operator></expr></incr>)</control><block pos:start="451:60" pos:end="497:21">{<block_content pos:start="453:25" pos:end="495:45">

                        <decl_stmt pos:start="453:25" pos:end="453:35"><decl pos:start="453:25" pos:end="453:30"><type pos:start="453:25" pos:end="453:27"><name pos:start="453:25" pos:end="453:27">int</name></type> <name pos:start="453:29" pos:end="453:30">mx</name></decl>, <decl pos:start="453:33" pos:end="453:34"><type ref="prev" pos:start="453:25" pos:end="453:27"/><name pos:start="453:33" pos:end="453:34">my</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="455:25" pos:end="455:61"><decl pos:start="455:25" pos:end="455:60"><type pos:start="455:25" pos:end="455:33"><specifier pos:start="455:25" pos:end="455:29">const</specifier> <name pos:start="455:31" pos:end="455:33">int</name></type> <name pos:start="455:35" pos:end="455:39">index</name><init pos:start="455:40" pos:end="455:60">= <expr pos:start="455:42" pos:end="455:60"><literal type="number" pos:start="455:42" pos:end="455:42">4</literal><operator pos:start="455:43" pos:end="455:43">*</operator><name pos:start="455:44" pos:end="455:44">i</name> <operator pos:start="455:46" pos:end="455:46">+</operator> <name pos:start="455:48" pos:end="455:58">block_width</name><operator pos:start="455:59" pos:end="455:59">*</operator><name pos:start="455:60" pos:end="455:60">j</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="457:25" pos:end="457:84"><expr pos:start="457:25" pos:end="457:83"><call pos:start="457:25" pos:end="457:44"><name pos:start="457:25" pos:end="457:31">int16_t</name> <argument_list pos:start="457:33" pos:end="457:44">(<argument pos:start="457:34" pos:end="457:43"><expr pos:start="457:34" pos:end="457:43"><operator pos:start="457:34" pos:end="457:34">*</operator> <name pos:start="457:36" pos:end="457:43">mv_cache</name></expr></argument>)</argument_list></call><index pos:start="457:45" pos:end="457:47">[<expr pos:start="457:46" pos:end="457:46"><literal type="number" pos:start="457:46" pos:end="457:46">2</literal></expr>]</index><operator pos:start="457:48" pos:end="457:48">=</operator> <operator pos:start="457:50" pos:end="457:50">&amp;</operator><name pos:start="457:51" pos:end="457:83"><name pos:start="457:51" pos:end="457:51">h</name><operator pos:start="457:52" pos:end="457:53">-&gt;</operator><name pos:start="457:54" pos:end="457:61">mv_cache</name><index pos:start="457:62" pos:end="457:67">[<expr pos:start="457:63" pos:end="457:66"><name pos:start="457:63" pos:end="457:66">list</name></expr>]</index><index pos:start="457:68" pos:end="457:83">[ <expr pos:start="457:70" pos:end="457:81"><name pos:start="457:70" pos:end="457:81"><name pos:start="457:70" pos:end="457:74">scan8</name><index pos:start="457:75" pos:end="457:81">[<expr pos:start="457:76" pos:end="457:80"><name pos:start="457:76" pos:end="457:80">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="459:25" pos:end="459:111"><expr pos:start="459:25" pos:end="459:110"><call pos:start="459:25" pos:end="459:110"><name pos:start="459:25" pos:end="459:35">pred_motion</name><argument_list pos:start="459:36" pos:end="459:110">(<argument pos:start="459:37" pos:end="459:37"><expr pos:start="459:37" pos:end="459:37"><name pos:start="459:37" pos:end="459:37">h</name></expr></argument>, <argument pos:start="459:40" pos:end="459:44"><expr pos:start="459:40" pos:end="459:44"><name pos:start="459:40" pos:end="459:44">index</name></expr></argument>, <argument pos:start="459:47" pos:end="459:57"><expr pos:start="459:47" pos:end="459:57"><name pos:start="459:47" pos:end="459:57">block_width</name></expr></argument>, <argument pos:start="459:60" pos:end="459:63"><expr pos:start="459:60" pos:end="459:63"><name pos:start="459:60" pos:end="459:63">list</name></expr></argument>, <argument pos:start="459:66" pos:end="459:99"><expr pos:start="459:66" pos:end="459:99"><name pos:start="459:66" pos:end="459:99"><name pos:start="459:66" pos:end="459:66">h</name><operator pos:start="459:67" pos:end="459:68">-&gt;</operator><name pos:start="459:69" pos:end="459:77">ref_cache</name><index pos:start="459:78" pos:end="459:83">[<expr pos:start="459:79" pos:end="459:82"><name pos:start="459:79" pos:end="459:82">list</name></expr>]</index><index pos:start="459:84" pos:end="459:99">[ <expr pos:start="459:86" pos:end="459:97"><name pos:start="459:86" pos:end="459:97"><name pos:start="459:86" pos:end="459:90">scan8</name><index pos:start="459:91" pos:end="459:97">[<expr pos:start="459:92" pos:end="459:96"><name pos:start="459:92" pos:end="459:96">index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="459:102" pos:end="459:104"><expr pos:start="459:102" pos:end="459:104"><operator pos:start="459:102" pos:end="459:102">&amp;</operator><name pos:start="459:103" pos:end="459:104">mx</name></expr></argument>, <argument pos:start="459:107" pos:end="459:109"><expr pos:start="459:107" pos:end="459:109"><operator pos:start="459:107" pos:end="459:107">&amp;</operator><name pos:start="459:108" pos:end="459:109">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="461:25" pos:end="461:52"><expr pos:start="461:25" pos:end="461:51"><name pos:start="461:25" pos:end="461:26">mx</name> <operator pos:start="461:28" pos:end="461:29">+=</operator> <call pos:start="461:31" pos:end="461:51"><name pos:start="461:31" pos:end="461:43">get_se_golomb</name><argument_list pos:start="461:44" pos:end="461:51">(<argument pos:start="461:45" pos:end="461:50"><expr pos:start="461:45" pos:end="461:50"><operator pos:start="461:45" pos:end="461:45">&amp;</operator><name pos:start="461:46" pos:end="461:50"><name pos:start="461:46" pos:end="461:46">s</name><operator pos:start="461:47" pos:end="461:48">-&gt;</operator><name pos:start="461:49" pos:end="461:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="463:25" pos:end="463:52"><expr pos:start="463:25" pos:end="463:51"><name pos:start="463:25" pos:end="463:26">my</name> <operator pos:start="463:28" pos:end="463:29">+=</operator> <call pos:start="463:31" pos:end="463:51"><name pos:start="463:31" pos:end="463:43">get_se_golomb</name><argument_list pos:start="463:44" pos:end="463:51">(<argument pos:start="463:45" pos:end="463:50"><expr pos:start="463:45" pos:end="463:50"><operator pos:start="463:45" pos:end="463:45">&amp;</operator><name pos:start="463:46" pos:end="463:50"><name pos:start="463:46" pos:end="463:46">s</name><operator pos:start="463:47" pos:end="463:48">-&gt;</operator><name pos:start="463:49" pos:end="463:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="465:25" pos:end="465:70"><expr pos:start="465:25" pos:end="465:69"><call pos:start="465:25" pos:end="465:69"><name pos:start="465:25" pos:end="465:31">tprintf</name><argument_list pos:start="465:32" pos:end="465:69">(<argument pos:start="465:33" pos:end="465:40"><expr pos:start="465:33" pos:end="465:40"><name pos:start="465:33" pos:end="465:40"><name pos:start="465:33" pos:end="465:33">s</name><operator pos:start="465:34" pos:end="465:35">-&gt;</operator><name pos:start="465:36" pos:end="465:40">avctx</name></name></expr></argument>, <argument pos:start="465:43" pos:end="465:60"><expr pos:start="465:43" pos:end="465:60"><literal type="string" pos:start="465:43" pos:end="465:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="465:63" pos:end="465:64"><expr pos:start="465:63" pos:end="465:64"><name pos:start="465:63" pos:end="465:64">mx</name></expr></argument>, <argument pos:start="465:67" pos:end="465:68"><expr pos:start="465:67" pos:end="465:68"><name pos:start="465:67" pos:end="465:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="469:25" pos:end="491:25"><if pos:start="469:25" pos:end="479:25">if<condition pos:start="469:27" pos:end="469:51">(<expr pos:start="469:28" pos:end="469:50"><call pos:start="469:28" pos:end="469:50"><name pos:start="469:28" pos:end="469:37">IS_SUB_8X8</name><argument_list pos:start="469:38" pos:end="469:50">(<argument pos:start="469:39" pos:end="469:49"><expr pos:start="469:39" pos:end="469:49"><name pos:start="469:39" pos:end="469:49">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="469:52" pos:end="479:25">{<block_content pos:start="471:29" pos:end="477:67">

                            <expr_stmt pos:start="471:29" pos:end="473:67"><expr pos:start="471:29" pos:end="473:66"><name pos:start="471:29" pos:end="471:44"><name pos:start="471:29" pos:end="471:36">mv_cache</name><index pos:start="471:37" pos:end="471:41">[ <expr pos:start="471:39" pos:end="471:39"><literal type="number" pos:start="471:39" pos:end="471:39">1</literal></expr> ]</index><index pos:start="471:42" pos:end="471:44">[<expr pos:start="471:43" pos:end="471:43"><literal type="number" pos:start="471:43" pos:end="471:43">0</literal></expr>]</index></name><operator pos:start="471:45" pos:end="471:45">=</operator>

                            <name pos:start="473:29" pos:end="473:44"><name pos:start="473:29" pos:end="473:36">mv_cache</name><index pos:start="473:37" pos:end="473:41">[ <expr pos:start="473:39" pos:end="473:39"><literal type="number" pos:start="473:39" pos:end="473:39">8</literal></expr> ]</index><index pos:start="473:42" pos:end="473:44">[<expr pos:start="473:43" pos:end="473:43"><literal type="number" pos:start="473:43" pos:end="473:43">0</literal></expr>]</index></name><operator pos:start="473:45" pos:end="473:45">=</operator> <name pos:start="473:47" pos:end="473:62"><name pos:start="473:47" pos:end="473:54">mv_cache</name><index pos:start="473:55" pos:end="473:59">[ <expr pos:start="473:57" pos:end="473:57"><literal type="number" pos:start="473:57" pos:end="473:57">9</literal></expr> ]</index><index pos:start="473:60" pos:end="473:62">[<expr pos:start="473:61" pos:end="473:61"><literal type="number" pos:start="473:61" pos:end="473:61">0</literal></expr>]</index></name><operator pos:start="473:63" pos:end="473:63">=</operator> <name pos:start="473:65" pos:end="473:66">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="475:29" pos:end="477:67"><expr pos:start="475:29" pos:end="477:66"><name pos:start="475:29" pos:end="475:44"><name pos:start="475:29" pos:end="475:36">mv_cache</name><index pos:start="475:37" pos:end="475:41">[ <expr pos:start="475:39" pos:end="475:39"><literal type="number" pos:start="475:39" pos:end="475:39">1</literal></expr> ]</index><index pos:start="475:42" pos:end="475:44">[<expr pos:start="475:43" pos:end="475:43"><literal type="number" pos:start="475:43" pos:end="475:43">1</literal></expr>]</index></name><operator pos:start="475:45" pos:end="475:45">=</operator>

                            <name pos:start="477:29" pos:end="477:44"><name pos:start="477:29" pos:end="477:36">mv_cache</name><index pos:start="477:37" pos:end="477:41">[ <expr pos:start="477:39" pos:end="477:39"><literal type="number" pos:start="477:39" pos:end="477:39">8</literal></expr> ]</index><index pos:start="477:42" pos:end="477:44">[<expr pos:start="477:43" pos:end="477:43"><literal type="number" pos:start="477:43" pos:end="477:43">1</literal></expr>]</index></name><operator pos:start="477:45" pos:end="477:45">=</operator> <name pos:start="477:47" pos:end="477:62"><name pos:start="477:47" pos:end="477:54">mv_cache</name><index pos:start="477:55" pos:end="477:59">[ <expr pos:start="477:57" pos:end="477:57"><literal type="number" pos:start="477:57" pos:end="477:57">9</literal></expr> ]</index><index pos:start="477:60" pos:end="477:62">[<expr pos:start="477:61" pos:end="477:61"><literal type="number" pos:start="477:61" pos:end="477:61">1</literal></expr>]</index></name><operator pos:start="477:63" pos:end="477:63">=</operator> <name pos:start="477:65" pos:end="477:66">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="479:26" pos:end="485:25">else if<condition pos:start="479:33" pos:end="479:57">(<expr pos:start="479:34" pos:end="479:56"><call pos:start="479:34" pos:end="479:56"><name pos:start="479:34" pos:end="479:43">IS_SUB_8X4</name><argument_list pos:start="479:44" pos:end="479:56">(<argument pos:start="479:45" pos:end="479:55"><expr pos:start="479:45" pos:end="479:55"><name pos:start="479:45" pos:end="479:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="479:58" pos:end="485:25">{<block_content pos:start="481:29" pos:end="483:49">

                            <expr_stmt pos:start="481:29" pos:end="481:49"><expr pos:start="481:29" pos:end="481:48"><name pos:start="481:29" pos:end="481:44"><name pos:start="481:29" pos:end="481:36">mv_cache</name><index pos:start="481:37" pos:end="481:41">[ <expr pos:start="481:39" pos:end="481:39"><literal type="number" pos:start="481:39" pos:end="481:39">1</literal></expr> ]</index><index pos:start="481:42" pos:end="481:44">[<expr pos:start="481:43" pos:end="481:43"><literal type="number" pos:start="481:43" pos:end="481:43">0</literal></expr>]</index></name><operator pos:start="481:45" pos:end="481:45">=</operator> <name pos:start="481:47" pos:end="481:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="483:29" pos:end="483:49"><expr pos:start="483:29" pos:end="483:48"><name pos:start="483:29" pos:end="483:44"><name pos:start="483:29" pos:end="483:36">mv_cache</name><index pos:start="483:37" pos:end="483:41">[ <expr pos:start="483:39" pos:end="483:39"><literal type="number" pos:start="483:39" pos:end="483:39">1</literal></expr> ]</index><index pos:start="483:42" pos:end="483:44">[<expr pos:start="483:43" pos:end="483:43"><literal type="number" pos:start="483:43" pos:end="483:43">1</literal></expr>]</index></name><operator pos:start="483:45" pos:end="483:45">=</operator> <name pos:start="483:47" pos:end="483:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="485:26" pos:end="491:25">else if<condition pos:start="485:33" pos:end="485:57">(<expr pos:start="485:34" pos:end="485:56"><call pos:start="485:34" pos:end="485:56"><name pos:start="485:34" pos:end="485:43">IS_SUB_4X8</name><argument_list pos:start="485:44" pos:end="485:56">(<argument pos:start="485:45" pos:end="485:55"><expr pos:start="485:45" pos:end="485:55"><name pos:start="485:45" pos:end="485:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="485:58" pos:end="491:25">{<block_content pos:start="487:29" pos:end="489:49">

                            <expr_stmt pos:start="487:29" pos:end="487:49"><expr pos:start="487:29" pos:end="487:48"><name pos:start="487:29" pos:end="487:44"><name pos:start="487:29" pos:end="487:36">mv_cache</name><index pos:start="487:37" pos:end="487:41">[ <expr pos:start="487:39" pos:end="487:39"><literal type="number" pos:start="487:39" pos:end="487:39">8</literal></expr> ]</index><index pos:start="487:42" pos:end="487:44">[<expr pos:start="487:43" pos:end="487:43"><literal type="number" pos:start="487:43" pos:end="487:43">0</literal></expr>]</index></name><operator pos:start="487:45" pos:end="487:45">=</operator> <name pos:start="487:47" pos:end="487:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="489:29" pos:end="489:49"><expr pos:start="489:29" pos:end="489:48"><name pos:start="489:29" pos:end="489:44"><name pos:start="489:29" pos:end="489:36">mv_cache</name><index pos:start="489:37" pos:end="489:41">[ <expr pos:start="489:39" pos:end="489:39"><literal type="number" pos:start="489:39" pos:end="489:39">8</literal></expr> ]</index><index pos:start="489:42" pos:end="489:44">[<expr pos:start="489:43" pos:end="489:43"><literal type="number" pos:start="489:43" pos:end="489:43">1</literal></expr>]</index></name><operator pos:start="489:45" pos:end="489:45">=</operator> <name pos:start="489:47" pos:end="489:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="493:25" pos:end="493:45"><expr pos:start="493:25" pos:end="493:44"><name pos:start="493:25" pos:end="493:40"><name pos:start="493:25" pos:end="493:32">mv_cache</name><index pos:start="493:33" pos:end="493:37">[ <expr pos:start="493:35" pos:end="493:35"><literal type="number" pos:start="493:35" pos:end="493:35">0</literal></expr> ]</index><index pos:start="493:38" pos:end="493:40">[<expr pos:start="493:39" pos:end="493:39"><literal type="number" pos:start="493:39" pos:end="493:39">0</literal></expr>]</index></name><operator pos:start="493:41" pos:end="493:41">=</operator> <name pos:start="493:43" pos:end="493:44">mx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="495:25" pos:end="495:45"><expr pos:start="495:25" pos:end="495:44"><name pos:start="495:25" pos:end="495:40"><name pos:start="495:25" pos:end="495:32">mv_cache</name><index pos:start="495:33" pos:end="495:37">[ <expr pos:start="495:35" pos:end="495:35"><literal type="number" pos:start="495:35" pos:end="495:35">0</literal></expr> ]</index><index pos:start="495:38" pos:end="495:40">[<expr pos:start="495:39" pos:end="495:39"><literal type="number" pos:start="495:39" pos:end="495:39">1</literal></expr>]</index></name><operator pos:start="495:41" pos:end="495:41">=</operator> <name pos:start="495:43" pos:end="495:44">my</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="499:18" pos:end="507:17">else<block pos:start="499:22" pos:end="507:17">{<block_content pos:start="501:21" pos:end="505:35">

                    <decl_stmt pos:start="501:21" pos:end="501:81"><decl pos:start="501:21" pos:end="501:80"><type pos:start="501:21" pos:end="501:30"><name pos:start="501:21" pos:end="501:28">uint32_t</name> <modifier pos:start="501:30" pos:end="501:30">*</modifier></type><name pos:start="501:31" pos:end="501:31">p</name><init pos:start="501:32" pos:end="501:80">= <expr pos:start="501:34" pos:end="501:80"><operator pos:start="501:34" pos:end="501:34">(</operator><name pos:start="501:35" pos:end="501:42">uint32_t</name> <operator pos:start="501:44" pos:end="501:44">*</operator><operator pos:start="501:45" pos:end="501:45">)</operator><operator pos:start="501:46" pos:end="501:46">&amp;</operator><name pos:start="501:47" pos:end="501:80"><name pos:start="501:47" pos:end="501:47">h</name><operator pos:start="501:48" pos:end="501:49">-&gt;</operator><name pos:start="501:50" pos:end="501:57">mv_cache</name><index pos:start="501:58" pos:end="501:63">[<expr pos:start="501:59" pos:end="501:62"><name pos:start="501:59" pos:end="501:62">list</name></expr>]</index><index pos:start="501:64" pos:end="501:77">[ <expr pos:start="501:66" pos:end="501:75"><name pos:start="501:66" pos:end="501:75"><name pos:start="501:66" pos:end="501:70">scan8</name><index pos:start="501:71" pos:end="501:75">[<expr pos:start="501:72" pos:end="501:74"><literal type="number" pos:start="501:72" pos:end="501:72">4</literal><operator pos:start="501:73" pos:end="501:73">*</operator><name pos:start="501:74" pos:end="501:74">i</name></expr>]</index></name></expr> ]</index><index pos:start="501:78" pos:end="501:80">[<expr pos:start="501:79" pos:end="501:79"><literal type="number" pos:start="501:79" pos:end="501:79">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="503:21" pos:end="505:35"><expr pos:start="503:21" pos:end="505:34"><name pos:start="503:21" pos:end="503:24"><name pos:start="503:21" pos:end="503:21">p</name><index pos:start="503:22" pos:end="503:24">[<expr pos:start="503:23" pos:end="503:23"><literal type="number" pos:start="503:23" pos:end="503:23">0</literal></expr>]</index></name> <operator pos:start="503:26" pos:end="503:26">=</operator> <name pos:start="503:28" pos:end="503:31"><name pos:start="503:28" pos:end="503:28">p</name><index pos:start="503:29" pos:end="503:31">[<expr pos:start="503:30" pos:end="503:30"><literal type="number" pos:start="503:30" pos:end="503:30">1</literal></expr>]</index></name><operator pos:start="503:32" pos:end="503:32">=</operator>

                    <name pos:start="505:21" pos:end="505:24"><name pos:start="505:21" pos:end="505:21">p</name><index pos:start="505:22" pos:end="505:24">[<expr pos:start="505:23" pos:end="505:23"><literal type="number" pos:start="505:23" pos:end="505:23">8</literal></expr>]</index></name> <operator pos:start="505:26" pos:end="505:26">=</operator> <name pos:start="505:28" pos:end="505:31"><name pos:start="505:28" pos:end="505:28">p</name><index pos:start="505:29" pos:end="505:31">[<expr pos:start="505:30" pos:end="505:30"><literal type="number" pos:start="505:30" pos:end="505:30">9</literal></expr>]</index></name><operator pos:start="505:32" pos:end="505:32">=</operator> <literal type="number" pos:start="505:34" pos:end="505:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if><if type="elseif" pos:start="513:6" pos:end="519:5">else if<condition pos:start="513:13" pos:end="513:32">(<expr pos:start="513:14" pos:end="513:31"><call pos:start="513:14" pos:end="513:31"><name pos:start="513:14" pos:end="513:22">IS_DIRECT</name><argument_list pos:start="513:23" pos:end="513:31">(<argument pos:start="513:24" pos:end="513:30"><expr pos:start="513:24" pos:end="513:30"><name pos:start="513:24" pos:end="513:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="513:33" pos:end="519:5">{<block_content pos:start="515:9" pos:end="517:59">

        <expr_stmt pos:start="515:9" pos:end="515:40"><expr pos:start="515:9" pos:end="515:39"><call pos:start="515:9" pos:end="515:39"><name pos:start="515:9" pos:end="515:26">pred_direct_motion</name><argument_list pos:start="515:27" pos:end="515:39">(<argument pos:start="515:28" pos:end="515:28"><expr pos:start="515:28" pos:end="515:28"><name pos:start="515:28" pos:end="515:28">h</name></expr></argument>, <argument pos:start="515:31" pos:end="515:38"><expr pos:start="515:31" pos:end="515:38"><operator pos:start="515:31" pos:end="515:31">&amp;</operator><name pos:start="515:32" pos:end="515:38">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:59"><expr pos:start="517:9" pos:end="517:58"><name pos:start="517:9" pos:end="517:22">dct8x8_allowed</name> <operator pos:start="517:24" pos:end="517:25">&amp;=</operator> <name pos:start="517:27" pos:end="517:58"><name pos:start="517:27" pos:end="517:27">h</name><operator pos:start="517:28" pos:end="517:29">-&gt;</operator><name pos:start="517:30" pos:end="517:32">sps</name><operator pos:start="517:33" pos:end="517:33">.</operator><name pos:start="517:34" pos:end="517:58">direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="519:6" pos:end="703:5">else<block pos:start="519:10" pos:end="703:5">{<block_content pos:start="521:9" pos:end="701:9">

        <decl_stmt pos:start="521:9" pos:end="521:28"><decl pos:start="521:9" pos:end="521:16"><type pos:start="521:9" pos:end="521:11"><name pos:start="521:9" pos:end="521:11">int</name></type> <name pos:start="521:13" pos:end="521:16">list</name></decl>, <decl pos:start="521:19" pos:end="521:20"><type ref="prev" pos:start="521:9" pos:end="521:11"/><name pos:start="521:19" pos:end="521:20">mx</name></decl>, <decl pos:start="521:23" pos:end="521:24"><type ref="prev" pos:start="521:9" pos:end="521:11"/><name pos:start="521:23" pos:end="521:24">my</name></decl>, <decl pos:start="521:27" pos:end="521:27"><type ref="prev" pos:start="521:9" pos:end="521:11"/><name pos:start="521:27" pos:end="521:27">i</name></decl>;</decl_stmt>

         <comment type="line" pos:start="523:10" pos:end="523:71">//FIXME we should set ref_idx_l? to 0 if we use that later ...</comment>

        <if_stmt pos:start="525:9" pos:end="701:9"><if pos:start="525:9" pos:end="577:9">if<condition pos:start="525:11" pos:end="525:29">(<expr pos:start="525:12" pos:end="525:28"><call pos:start="525:12" pos:end="525:28"><name pos:start="525:12" pos:end="525:19">IS_16X16</name><argument_list pos:start="525:20" pos:end="525:28">(<argument pos:start="525:21" pos:end="525:27"><expr pos:start="525:21" pos:end="525:27"><name pos:start="525:21" pos:end="525:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="525:30" pos:end="577:9">{<block_content pos:start="527:13" pos:end="575:13">

            <for pos:start="527:13" pos:end="549:13">for<control pos:start="527:16" pos:end="527:51">(<init pos:start="527:17" pos:end="527:23"><expr pos:start="527:17" pos:end="527:22"><name pos:start="527:17" pos:end="527:20">list</name><operator pos:start="527:21" pos:end="527:21">=</operator><literal type="number" pos:start="527:22" pos:end="527:22">0</literal></expr>;</init> <condition pos:start="527:25" pos:end="527:43"><expr pos:start="527:25" pos:end="527:42"><name pos:start="527:25" pos:end="527:28">list</name><operator pos:start="527:29" pos:end="527:29">&lt;</operator><name pos:start="527:30" pos:end="527:42"><name pos:start="527:30" pos:end="527:30">h</name><operator pos:start="527:31" pos:end="527:32">-&gt;</operator><name pos:start="527:33" pos:end="527:42">list_count</name></name></expr>;</condition> <incr pos:start="527:45" pos:end="527:50"><expr pos:start="527:45" pos:end="527:50"><name pos:start="527:45" pos:end="527:48">list</name><operator pos:start="527:49" pos:end="527:50">++</operator></expr></incr>)</control><block pos:start="527:52" pos:end="549:13">{<block_content pos:start="529:21" pos:end="547:85">

                    <decl_stmt pos:start="529:21" pos:end="529:37"><decl pos:start="529:21" pos:end="529:36"><type pos:start="529:21" pos:end="529:32"><name pos:start="529:21" pos:end="529:28">unsigned</name> <name pos:start="529:30" pos:end="529:32">int</name></type> <name pos:start="529:34" pos:end="529:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="531:21" pos:end="545:48"><if pos:start="531:21" pos:end="543:21">if<condition pos:start="531:23" pos:end="531:48">(<expr pos:start="531:24" pos:end="531:47"><call pos:start="531:24" pos:end="531:47"><name pos:start="531:24" pos:end="531:29">IS_DIR</name><argument_list pos:start="531:30" pos:end="531:47">(<argument pos:start="531:31" pos:end="531:37"><expr pos:start="531:31" pos:end="531:37"><name pos:start="531:31" pos:end="531:37">mb_type</name></expr></argument>, <argument pos:start="531:40" pos:end="531:40"><expr pos:start="531:40" pos:end="531:40"><literal type="number" pos:start="531:40" pos:end="531:40">0</literal></expr></argument>, <argument pos:start="531:43" pos:end="531:46"><expr pos:start="531:43" pos:end="531:46"><name pos:start="531:43" pos:end="531:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="531:49" pos:end="543:21">{<block_content pos:start="533:25" pos:end="541:25">

                        <expr_stmt pos:start="533:25" pos:end="533:72"><expr pos:start="533:25" pos:end="533:71"><name pos:start="533:25" pos:end="533:27">val</name><operator pos:start="533:28" pos:end="533:28">=</operator> <call pos:start="533:30" pos:end="533:71"><name pos:start="533:30" pos:end="533:43">get_te0_golomb</name><argument_list pos:start="533:44" pos:end="533:71">(<argument pos:start="533:45" pos:end="533:50"><expr pos:start="533:45" pos:end="533:50"><operator pos:start="533:45" pos:end="533:45">&amp;</operator><name pos:start="533:46" pos:end="533:50"><name pos:start="533:46" pos:end="533:46">s</name><operator pos:start="533:47" pos:end="533:48">-&gt;</operator><name pos:start="533:49" pos:end="533:50">gb</name></name></expr></argument>, <argument pos:start="533:53" pos:end="533:70"><expr pos:start="533:53" pos:end="533:70"><name pos:start="533:53" pos:end="533:70"><name pos:start="533:53" pos:end="533:53">h</name><operator pos:start="533:54" pos:end="533:55">-&gt;</operator><name pos:start="533:56" pos:end="533:64">ref_count</name><index pos:start="533:65" pos:end="533:70">[<expr pos:start="533:66" pos:end="533:69"><name pos:start="533:66" pos:end="533:69">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="535:25" pos:end="541:25"><if pos:start="535:25" pos:end="541:25">if<condition pos:start="535:27" pos:end="535:53">(<expr pos:start="535:28" pos:end="535:52"><name pos:start="535:28" pos:end="535:30">val</name> <operator pos:start="535:32" pos:end="535:33">&gt;=</operator> <name pos:start="535:35" pos:end="535:52"><name pos:start="535:35" pos:end="535:35">h</name><operator pos:start="535:36" pos:end="535:37">-&gt;</operator><name pos:start="535:38" pos:end="535:46">ref_count</name><index pos:start="535:47" pos:end="535:52">[<expr pos:start="535:48" pos:end="535:51"><name pos:start="535:48" pos:end="535:51">list</name></expr>]</index></name></expr>)</condition><block pos:start="535:54" pos:end="541:25">{<block_content pos:start="537:29" pos:end="539:38">

                            <expr_stmt pos:start="537:29" pos:end="537:87"><expr pos:start="537:29" pos:end="537:86"><call pos:start="537:29" pos:end="537:86"><name pos:start="537:29" pos:end="537:34">av_log</name><argument_list pos:start="537:35" pos:end="537:86">(<argument pos:start="537:36" pos:end="537:45"><expr pos:start="537:36" pos:end="537:45"><name pos:start="537:36" pos:end="537:45"><name pos:start="537:36" pos:end="537:36">h</name><operator pos:start="537:37" pos:end="537:38">-&gt;</operator><name pos:start="537:39" pos:end="537:39">s</name><operator pos:start="537:40" pos:end="537:40">.</operator><name pos:start="537:41" pos:end="537:45">avctx</name></name></expr></argument>, <argument pos:start="537:48" pos:end="537:59"><expr pos:start="537:48" pos:end="537:59"><name pos:start="537:48" pos:end="537:59">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="537:62" pos:end="537:80"><expr pos:start="537:62" pos:end="537:80"><literal type="string" pos:start="537:62" pos:end="537:80">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="537:83" pos:end="537:85"><expr pos:start="537:83" pos:end="537:85"><name pos:start="537:83" pos:end="537:85">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="539:29" pos:end="539:38">return <expr pos:start="539:36" pos:end="539:37"><operator pos:start="539:36" pos:end="539:36">-</operator><literal type="number" pos:start="539:37" pos:end="539:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if><else pos:start="543:22" pos:end="545:48">else<block type="pseudo" pos:start="545:25" pos:end="545:48"><block_content pos:start="545:25" pos:end="545:48">

                        <expr_stmt pos:start="545:25" pos:end="545:48"><expr pos:start="545:25" pos:end="545:47"><name pos:start="545:25" pos:end="545:27">val</name><operator pos:start="545:28" pos:end="545:28">=</operator> <name pos:start="545:30" pos:end="545:42">LIST_NOT_USED</name><operator pos:start="545:43" pos:end="545:43">&amp;</operator><literal type="number" pos:start="545:44" pos:end="545:47">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="547:21" pos:end="547:85"><expr pos:start="547:21" pos:end="547:84"><call pos:start="547:21" pos:end="547:84"><name pos:start="547:21" pos:end="547:34">fill_rectangle</name><argument_list pos:start="547:35" pos:end="547:84">(<argument pos:start="547:36" pos:end="547:66"><expr pos:start="547:36" pos:end="547:66"><operator pos:start="547:36" pos:end="547:36">&amp;</operator><name pos:start="547:37" pos:end="547:66"><name pos:start="547:37" pos:end="547:37">h</name><operator pos:start="547:38" pos:end="547:39">-&gt;</operator><name pos:start="547:40" pos:end="547:48">ref_cache</name><index pos:start="547:49" pos:end="547:54">[<expr pos:start="547:50" pos:end="547:53"><name pos:start="547:50" pos:end="547:53">list</name></expr>]</index><index pos:start="547:55" pos:end="547:66">[ <expr pos:start="547:57" pos:end="547:64"><name pos:start="547:57" pos:end="547:64"><name pos:start="547:57" pos:end="547:61">scan8</name><index pos:start="547:62" pos:end="547:64">[<expr pos:start="547:63" pos:end="547:63"><literal type="number" pos:start="547:63" pos:end="547:63">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="547:69" pos:end="547:69"><expr pos:start="547:69" pos:end="547:69"><literal type="number" pos:start="547:69" pos:end="547:69">4</literal></expr></argument>, <argument pos:start="547:72" pos:end="547:72"><expr pos:start="547:72" pos:end="547:72"><literal type="number" pos:start="547:72" pos:end="547:72">4</literal></expr></argument>, <argument pos:start="547:75" pos:end="547:75"><expr pos:start="547:75" pos:end="547:75"><literal type="number" pos:start="547:75" pos:end="547:75">8</literal></expr></argument>, <argument pos:start="547:78" pos:end="547:80"><expr pos:start="547:78" pos:end="547:80"><name pos:start="547:78" pos:end="547:80">val</name></expr></argument>, <argument pos:start="547:83" pos:end="547:83"><expr pos:start="547:83" pos:end="547:83"><literal type="number" pos:start="547:83" pos:end="547:83">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="551:13" pos:end="575:13">for<control pos:start="551:16" pos:end="551:51">(<init pos:start="551:17" pos:end="551:23"><expr pos:start="551:17" pos:end="551:22"><name pos:start="551:17" pos:end="551:20">list</name><operator pos:start="551:21" pos:end="551:21">=</operator><literal type="number" pos:start="551:22" pos:end="551:22">0</literal></expr>;</init> <condition pos:start="551:25" pos:end="551:43"><expr pos:start="551:25" pos:end="551:42"><name pos:start="551:25" pos:end="551:28">list</name><operator pos:start="551:29" pos:end="551:29">&lt;</operator><name pos:start="551:30" pos:end="551:42"><name pos:start="551:30" pos:end="551:30">h</name><operator pos:start="551:31" pos:end="551:32">-&gt;</operator><name pos:start="551:33" pos:end="551:42">list_count</name></name></expr>;</condition> <incr pos:start="551:45" pos:end="551:50"><expr pos:start="551:45" pos:end="551:50"><name pos:start="551:45" pos:end="551:48">list</name><operator pos:start="551:49" pos:end="551:50">++</operator></expr></incr>)</control><block pos:start="551:52" pos:end="575:13">{<block_content pos:start="553:17" pos:end="573:79">

                <decl_stmt pos:start="553:17" pos:end="553:33"><decl pos:start="553:17" pos:end="553:32"><type pos:start="553:17" pos:end="553:28"><name pos:start="553:17" pos:end="553:24">unsigned</name> <name pos:start="553:26" pos:end="553:28">int</name></type> <name pos:start="553:30" pos:end="553:32">val</name></decl>;</decl_stmt>

                <if_stmt pos:start="555:17" pos:end="571:26"><if pos:start="555:17" pos:end="569:17">if<condition pos:start="555:19" pos:end="555:44">(<expr pos:start="555:20" pos:end="555:43"><call pos:start="555:20" pos:end="555:43"><name pos:start="555:20" pos:end="555:25">IS_DIR</name><argument_list pos:start="555:26" pos:end="555:43">(<argument pos:start="555:27" pos:end="555:33"><expr pos:start="555:27" pos:end="555:33"><name pos:start="555:27" pos:end="555:33">mb_type</name></expr></argument>, <argument pos:start="555:36" pos:end="555:36"><expr pos:start="555:36" pos:end="555:36"><literal type="number" pos:start="555:36" pos:end="555:36">0</literal></expr></argument>, <argument pos:start="555:39" pos:end="555:42"><expr pos:start="555:39" pos:end="555:42"><name pos:start="555:39" pos:end="555:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="555:45" pos:end="569:17">{<block_content pos:start="557:21" pos:end="567:43">

                    <expr_stmt pos:start="557:21" pos:end="557:89"><expr pos:start="557:21" pos:end="557:88"><call pos:start="557:21" pos:end="557:88"><name pos:start="557:21" pos:end="557:31">pred_motion</name><argument_list pos:start="557:32" pos:end="557:88">(<argument pos:start="557:33" pos:end="557:33"><expr pos:start="557:33" pos:end="557:33"><name pos:start="557:33" pos:end="557:33">h</name></expr></argument>, <argument pos:start="557:36" pos:end="557:36"><expr pos:start="557:36" pos:end="557:36"><literal type="number" pos:start="557:36" pos:end="557:36">0</literal></expr></argument>, <argument pos:start="557:39" pos:end="557:39"><expr pos:start="557:39" pos:end="557:39"><literal type="number" pos:start="557:39" pos:end="557:39">4</literal></expr></argument>, <argument pos:start="557:42" pos:end="557:45"><expr pos:start="557:42" pos:end="557:45"><name pos:start="557:42" pos:end="557:45">list</name></expr></argument>, <argument pos:start="557:48" pos:end="557:77"><expr pos:start="557:48" pos:end="557:77"><name pos:start="557:48" pos:end="557:77"><name pos:start="557:48" pos:end="557:48">h</name><operator pos:start="557:49" pos:end="557:50">-&gt;</operator><name pos:start="557:51" pos:end="557:59">ref_cache</name><index pos:start="557:60" pos:end="557:65">[<expr pos:start="557:61" pos:end="557:64"><name pos:start="557:61" pos:end="557:64">list</name></expr>]</index><index pos:start="557:66" pos:end="557:77">[ <expr pos:start="557:68" pos:end="557:75"><name pos:start="557:68" pos:end="557:75"><name pos:start="557:68" pos:end="557:72">scan8</name><index pos:start="557:73" pos:end="557:75">[<expr pos:start="557:74" pos:end="557:74"><literal type="number" pos:start="557:74" pos:end="557:74">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="557:80" pos:end="557:82"><expr pos:start="557:80" pos:end="557:82"><operator pos:start="557:80" pos:end="557:80">&amp;</operator><name pos:start="557:81" pos:end="557:82">mx</name></expr></argument>, <argument pos:start="557:85" pos:end="557:87"><expr pos:start="557:85" pos:end="557:87"><operator pos:start="557:85" pos:end="557:85">&amp;</operator><name pos:start="557:86" pos:end="557:87">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="559:21" pos:end="559:48"><expr pos:start="559:21" pos:end="559:47"><name pos:start="559:21" pos:end="559:22">mx</name> <operator pos:start="559:24" pos:end="559:25">+=</operator> <call pos:start="559:27" pos:end="559:47"><name pos:start="559:27" pos:end="559:39">get_se_golomb</name><argument_list pos:start="559:40" pos:end="559:47">(<argument pos:start="559:41" pos:end="559:46"><expr pos:start="559:41" pos:end="559:46"><operator pos:start="559:41" pos:end="559:41">&amp;</operator><name pos:start="559:42" pos:end="559:46"><name pos:start="559:42" pos:end="559:42">s</name><operator pos:start="559:43" pos:end="559:44">-&gt;</operator><name pos:start="559:45" pos:end="559:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="561:21" pos:end="561:48"><expr pos:start="561:21" pos:end="561:47"><name pos:start="561:21" pos:end="561:22">my</name> <operator pos:start="561:24" pos:end="561:25">+=</operator> <call pos:start="561:27" pos:end="561:47"><name pos:start="561:27" pos:end="561:39">get_se_golomb</name><argument_list pos:start="561:40" pos:end="561:47">(<argument pos:start="561:41" pos:end="561:46"><expr pos:start="561:41" pos:end="561:46"><operator pos:start="561:41" pos:end="561:41">&amp;</operator><name pos:start="561:42" pos:end="561:46"><name pos:start="561:42" pos:end="561:42">s</name><operator pos:start="561:43" pos:end="561:44">-&gt;</operator><name pos:start="561:45" pos:end="561:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="563:21" pos:end="563:66"><expr pos:start="563:21" pos:end="563:65"><call pos:start="563:21" pos:end="563:65"><name pos:start="563:21" pos:end="563:27">tprintf</name><argument_list pos:start="563:28" pos:end="563:65">(<argument pos:start="563:29" pos:end="563:36"><expr pos:start="563:29" pos:end="563:36"><name pos:start="563:29" pos:end="563:36"><name pos:start="563:29" pos:end="563:29">s</name><operator pos:start="563:30" pos:end="563:31">-&gt;</operator><name pos:start="563:32" pos:end="563:36">avctx</name></name></expr></argument>, <argument pos:start="563:39" pos:end="563:56"><expr pos:start="563:39" pos:end="563:56"><literal type="string" pos:start="563:39" pos:end="563:56">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="563:59" pos:end="563:60"><expr pos:start="563:59" pos:end="563:60"><name pos:start="563:59" pos:end="563:60">mx</name></expr></argument>, <argument pos:start="563:63" pos:end="563:64"><expr pos:start="563:63" pos:end="563:64"><name pos:start="563:63" pos:end="563:64">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="567:21" pos:end="567:43"><expr pos:start="567:21" pos:end="567:42"><name pos:start="567:21" pos:end="567:23">val</name><operator pos:start="567:24" pos:end="567:24">=</operator> <call pos:start="567:26" pos:end="567:42"><name pos:start="567:26" pos:end="567:35">pack16to32</name><argument_list pos:start="567:36" pos:end="567:42">(<argument pos:start="567:37" pos:end="567:38"><expr pos:start="567:37" pos:end="567:38"><name pos:start="567:37" pos:end="567:38">mx</name></expr></argument>,<argument pos:start="567:40" pos:end="567:41"><expr pos:start="567:40" pos:end="567:41"><name pos:start="567:40" pos:end="567:41">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="569:18" pos:end="571:26">else<block type="pseudo" pos:start="571:21" pos:end="571:26"><block_content pos:start="571:21" pos:end="571:26">

                    <expr_stmt pos:start="571:21" pos:end="571:26"><expr pos:start="571:21" pos:end="571:25"><name pos:start="571:21" pos:end="571:23">val</name><operator pos:start="571:24" pos:end="571:24">=</operator><literal type="number" pos:start="571:25" pos:end="571:25">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="573:17" pos:end="573:79"><expr pos:start="573:17" pos:end="573:78"><call pos:start="573:17" pos:end="573:78"><name pos:start="573:17" pos:end="573:30">fill_rectangle</name><argument_list pos:start="573:31" pos:end="573:78">(<argument pos:start="573:32" pos:end="573:60"><expr pos:start="573:32" pos:end="573:60"><name pos:start="573:32" pos:end="573:60"><name pos:start="573:32" pos:end="573:32">h</name><operator pos:start="573:33" pos:end="573:34">-&gt;</operator><name pos:start="573:35" pos:end="573:42">mv_cache</name><index pos:start="573:43" pos:end="573:48">[<expr pos:start="573:44" pos:end="573:47"><name pos:start="573:44" pos:end="573:47">list</name></expr>]</index><index pos:start="573:49" pos:end="573:60">[ <expr pos:start="573:51" pos:end="573:58"><name pos:start="573:51" pos:end="573:58"><name pos:start="573:51" pos:end="573:55">scan8</name><index pos:start="573:56" pos:end="573:58">[<expr pos:start="573:57" pos:end="573:57"><literal type="number" pos:start="573:57" pos:end="573:57">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="573:63" pos:end="573:63"><expr pos:start="573:63" pos:end="573:63"><literal type="number" pos:start="573:63" pos:end="573:63">4</literal></expr></argument>, <argument pos:start="573:66" pos:end="573:66"><expr pos:start="573:66" pos:end="573:66"><literal type="number" pos:start="573:66" pos:end="573:66">4</literal></expr></argument>, <argument pos:start="573:69" pos:end="573:69"><expr pos:start="573:69" pos:end="573:69"><literal type="number" pos:start="573:69" pos:end="573:69">8</literal></expr></argument>, <argument pos:start="573:72" pos:end="573:74"><expr pos:start="573:72" pos:end="573:74"><name pos:start="573:72" pos:end="573:74">val</name></expr></argument>, <argument pos:start="573:77" pos:end="573:77"><expr pos:start="573:77" pos:end="573:77"><literal type="number" pos:start="573:77" pos:end="573:77">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <if type="elseif" pos:start="579:9" pos:end="639:9">else if<condition pos:start="579:16" pos:end="579:33">(<expr pos:start="579:17" pos:end="579:32"><call pos:start="579:17" pos:end="579:32"><name pos:start="579:17" pos:end="579:23">IS_16X8</name><argument_list pos:start="579:24" pos:end="579:32">(<argument pos:start="579:25" pos:end="579:31"><expr pos:start="579:25" pos:end="579:31"><name pos:start="579:25" pos:end="579:31">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="579:34" pos:end="639:9">{<block_content pos:start="581:13" pos:end="637:13">

            <for pos:start="581:13" pos:end="607:13">for<control pos:start="581:16" pos:end="581:51">(<init pos:start="581:17" pos:end="581:23"><expr pos:start="581:17" pos:end="581:22"><name pos:start="581:17" pos:end="581:20">list</name><operator pos:start="581:21" pos:end="581:21">=</operator><literal type="number" pos:start="581:22" pos:end="581:22">0</literal></expr>;</init> <condition pos:start="581:25" pos:end="581:43"><expr pos:start="581:25" pos:end="581:42"><name pos:start="581:25" pos:end="581:28">list</name><operator pos:start="581:29" pos:end="581:29">&lt;</operator><name pos:start="581:30" pos:end="581:42"><name pos:start="581:30" pos:end="581:30">h</name><operator pos:start="581:31" pos:end="581:32">-&gt;</operator><name pos:start="581:33" pos:end="581:42">list_count</name></name></expr>;</condition> <incr pos:start="581:45" pos:end="581:50"><expr pos:start="581:45" pos:end="581:50"><name pos:start="581:45" pos:end="581:48">list</name><operator pos:start="581:49" pos:end="581:50">++</operator></expr></incr>)</control><block pos:start="581:52" pos:end="607:13">{<block_content pos:start="583:21" pos:end="605:21">

                    <for pos:start="583:21" pos:end="605:21">for<control pos:start="583:24" pos:end="583:38">(<init pos:start="583:25" pos:end="583:28"><expr pos:start="583:25" pos:end="583:27"><name pos:start="583:25" pos:end="583:25">i</name><operator pos:start="583:26" pos:end="583:26">=</operator><literal type="number" pos:start="583:27" pos:end="583:27">0</literal></expr>;</init> <condition pos:start="583:30" pos:end="583:33"><expr pos:start="583:30" pos:end="583:32"><name pos:start="583:30" pos:end="583:30">i</name><operator pos:start="583:31" pos:end="583:31">&lt;</operator><literal type="number" pos:start="583:32" pos:end="583:32">2</literal></expr>;</condition> <incr pos:start="583:35" pos:end="583:37"><expr pos:start="583:35" pos:end="583:37"><name pos:start="583:35" pos:end="583:35">i</name><operator pos:start="583:36" pos:end="583:37">++</operator></expr></incr>)</control><block pos:start="583:39" pos:end="605:21">{<block_content pos:start="585:25" pos:end="603:96">

                        <decl_stmt pos:start="585:25" pos:end="585:41"><decl pos:start="585:25" pos:end="585:40"><type pos:start="585:25" pos:end="585:36"><name pos:start="585:25" pos:end="585:32">unsigned</name> <name pos:start="585:34" pos:end="585:36">int</name></type> <name pos:start="585:38" pos:end="585:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="587:25" pos:end="601:52"><if pos:start="587:25" pos:end="599:25">if<condition pos:start="587:27" pos:end="587:52">(<expr pos:start="587:28" pos:end="587:51"><call pos:start="587:28" pos:end="587:51"><name pos:start="587:28" pos:end="587:33">IS_DIR</name><argument_list pos:start="587:34" pos:end="587:51">(<argument pos:start="587:35" pos:end="587:41"><expr pos:start="587:35" pos:end="587:41"><name pos:start="587:35" pos:end="587:41">mb_type</name></expr></argument>, <argument pos:start="587:44" pos:end="587:44"><expr pos:start="587:44" pos:end="587:44"><name pos:start="587:44" pos:end="587:44">i</name></expr></argument>, <argument pos:start="587:47" pos:end="587:50"><expr pos:start="587:47" pos:end="587:50"><name pos:start="587:47" pos:end="587:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="587:53" pos:end="599:25">{<block_content pos:start="589:29" pos:end="597:29">

                            <expr_stmt pos:start="589:29" pos:end="589:76"><expr pos:start="589:29" pos:end="589:75"><name pos:start="589:29" pos:end="589:31">val</name><operator pos:start="589:32" pos:end="589:32">=</operator> <call pos:start="589:34" pos:end="589:75"><name pos:start="589:34" pos:end="589:47">get_te0_golomb</name><argument_list pos:start="589:48" pos:end="589:75">(<argument pos:start="589:49" pos:end="589:54"><expr pos:start="589:49" pos:end="589:54"><operator pos:start="589:49" pos:end="589:49">&amp;</operator><name pos:start="589:50" pos:end="589:54"><name pos:start="589:50" pos:end="589:50">s</name><operator pos:start="589:51" pos:end="589:52">-&gt;</operator><name pos:start="589:53" pos:end="589:54">gb</name></name></expr></argument>, <argument pos:start="589:57" pos:end="589:74"><expr pos:start="589:57" pos:end="589:74"><name pos:start="589:57" pos:end="589:74"><name pos:start="589:57" pos:end="589:57">h</name><operator pos:start="589:58" pos:end="589:59">-&gt;</operator><name pos:start="589:60" pos:end="589:68">ref_count</name><index pos:start="589:69" pos:end="589:74">[<expr pos:start="589:70" pos:end="589:73"><name pos:start="589:70" pos:end="589:73">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="591:29" pos:end="597:29"><if pos:start="591:29" pos:end="597:29">if<condition pos:start="591:31" pos:end="591:57">(<expr pos:start="591:32" pos:end="591:56"><name pos:start="591:32" pos:end="591:34">val</name> <operator pos:start="591:36" pos:end="591:37">&gt;=</operator> <name pos:start="591:39" pos:end="591:56"><name pos:start="591:39" pos:end="591:39">h</name><operator pos:start="591:40" pos:end="591:41">-&gt;</operator><name pos:start="591:42" pos:end="591:50">ref_count</name><index pos:start="591:51" pos:end="591:56">[<expr pos:start="591:52" pos:end="591:55"><name pos:start="591:52" pos:end="591:55">list</name></expr>]</index></name></expr>)</condition><block pos:start="591:58" pos:end="597:29">{<block_content pos:start="593:33" pos:end="595:42">

                                <expr_stmt pos:start="593:33" pos:end="593:91"><expr pos:start="593:33" pos:end="593:90"><call pos:start="593:33" pos:end="593:90"><name pos:start="593:33" pos:end="593:38">av_log</name><argument_list pos:start="593:39" pos:end="593:90">(<argument pos:start="593:40" pos:end="593:49"><expr pos:start="593:40" pos:end="593:49"><name pos:start="593:40" pos:end="593:49"><name pos:start="593:40" pos:end="593:40">h</name><operator pos:start="593:41" pos:end="593:42">-&gt;</operator><name pos:start="593:43" pos:end="593:43">s</name><operator pos:start="593:44" pos:end="593:44">.</operator><name pos:start="593:45" pos:end="593:49">avctx</name></name></expr></argument>, <argument pos:start="593:52" pos:end="593:63"><expr pos:start="593:52" pos:end="593:63"><name pos:start="593:52" pos:end="593:63">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="593:66" pos:end="593:84"><expr pos:start="593:66" pos:end="593:84"><literal type="string" pos:start="593:66" pos:end="593:84">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="593:87" pos:end="593:89"><expr pos:start="593:87" pos:end="593:89"><name pos:start="593:87" pos:end="593:89">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="595:33" pos:end="595:42">return <expr pos:start="595:40" pos:end="595:41"><operator pos:start="595:40" pos:end="595:40">-</operator><literal type="number" pos:start="595:41" pos:end="595:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if><else pos:start="599:26" pos:end="601:52">else<block type="pseudo" pos:start="601:29" pos:end="601:52"><block_content pos:start="601:29" pos:end="601:52">

                            <expr_stmt pos:start="601:29" pos:end="601:52"><expr pos:start="601:29" pos:end="601:51"><name pos:start="601:29" pos:end="601:31">val</name><operator pos:start="601:32" pos:end="601:32">=</operator> <name pos:start="601:34" pos:end="601:46">LIST_NOT_USED</name><operator pos:start="601:47" pos:end="601:47">&amp;</operator><literal type="number" pos:start="601:48" pos:end="601:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="603:25" pos:end="603:96"><expr pos:start="603:25" pos:end="603:95"><call pos:start="603:25" pos:end="603:95"><name pos:start="603:25" pos:end="603:38">fill_rectangle</name><argument_list pos:start="603:39" pos:end="603:95">(<argument pos:start="603:40" pos:end="603:77"><expr pos:start="603:40" pos:end="603:77"><operator pos:start="603:40" pos:end="603:40">&amp;</operator><name pos:start="603:41" pos:end="603:77"><name pos:start="603:41" pos:end="603:41">h</name><operator pos:start="603:42" pos:end="603:43">-&gt;</operator><name pos:start="603:44" pos:end="603:52">ref_cache</name><index pos:start="603:53" pos:end="603:58">[<expr pos:start="603:54" pos:end="603:57"><name pos:start="603:54" pos:end="603:57">list</name></expr>]</index><index pos:start="603:59" pos:end="603:77">[ <expr pos:start="603:61" pos:end="603:75"><name pos:start="603:61" pos:end="603:68"><name pos:start="603:61" pos:end="603:65">scan8</name><index pos:start="603:66" pos:end="603:68">[<expr pos:start="603:67" pos:end="603:67"><literal type="number" pos:start="603:67" pos:end="603:67">0</literal></expr>]</index></name> <operator pos:start="603:70" pos:end="603:70">+</operator> <literal type="number" pos:start="603:72" pos:end="603:73">16</literal><operator pos:start="603:74" pos:end="603:74">*</operator><name pos:start="603:75" pos:end="603:75">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="603:80" pos:end="603:80"><expr pos:start="603:80" pos:end="603:80"><literal type="number" pos:start="603:80" pos:end="603:80">4</literal></expr></argument>, <argument pos:start="603:83" pos:end="603:83"><expr pos:start="603:83" pos:end="603:83"><literal type="number" pos:start="603:83" pos:end="603:83">2</literal></expr></argument>, <argument pos:start="603:86" pos:end="603:86"><expr pos:start="603:86" pos:end="603:86"><literal type="number" pos:start="603:86" pos:end="603:86">8</literal></expr></argument>, <argument pos:start="603:89" pos:end="603:91"><expr pos:start="603:89" pos:end="603:91"><name pos:start="603:89" pos:end="603:91">val</name></expr></argument>, <argument pos:start="603:94" pos:end="603:94"><expr pos:start="603:94" pos:end="603:94"><literal type="number" pos:start="603:94" pos:end="603:94">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="609:13" pos:end="637:13">for<control pos:start="609:16" pos:end="609:51">(<init pos:start="609:17" pos:end="609:23"><expr pos:start="609:17" pos:end="609:22"><name pos:start="609:17" pos:end="609:20">list</name><operator pos:start="609:21" pos:end="609:21">=</operator><literal type="number" pos:start="609:22" pos:end="609:22">0</literal></expr>;</init> <condition pos:start="609:25" pos:end="609:43"><expr pos:start="609:25" pos:end="609:42"><name pos:start="609:25" pos:end="609:28">list</name><operator pos:start="609:29" pos:end="609:29">&lt;</operator><name pos:start="609:30" pos:end="609:42"><name pos:start="609:30" pos:end="609:30">h</name><operator pos:start="609:31" pos:end="609:32">-&gt;</operator><name pos:start="609:33" pos:end="609:42">list_count</name></name></expr>;</condition> <incr pos:start="609:45" pos:end="609:50"><expr pos:start="609:45" pos:end="609:50"><name pos:start="609:45" pos:end="609:48">list</name><operator pos:start="609:49" pos:end="609:50">++</operator></expr></incr>)</control><block pos:start="609:52" pos:end="637:13">{<block_content pos:start="611:17" pos:end="635:17">

                <for pos:start="611:17" pos:end="635:17">for<control pos:start="611:20" pos:end="611:34">(<init pos:start="611:21" pos:end="611:24"><expr pos:start="611:21" pos:end="611:23"><name pos:start="611:21" pos:end="611:21">i</name><operator pos:start="611:22" pos:end="611:22">=</operator><literal type="number" pos:start="611:23" pos:end="611:23">0</literal></expr>;</init> <condition pos:start="611:26" pos:end="611:29"><expr pos:start="611:26" pos:end="611:28"><name pos:start="611:26" pos:end="611:26">i</name><operator pos:start="611:27" pos:end="611:27">&lt;</operator><literal type="number" pos:start="611:28" pos:end="611:28">2</literal></expr>;</condition> <incr pos:start="611:31" pos:end="611:33"><expr pos:start="611:31" pos:end="611:33"><name pos:start="611:31" pos:end="611:31">i</name><operator pos:start="611:32" pos:end="611:33">++</operator></expr></incr>)</control><block pos:start="611:35" pos:end="635:17">{<block_content pos:start="613:21" pos:end="633:90">

                    <decl_stmt pos:start="613:21" pos:end="613:37"><decl pos:start="613:21" pos:end="613:36"><type pos:start="613:21" pos:end="613:32"><name pos:start="613:21" pos:end="613:28">unsigned</name> <name pos:start="613:30" pos:end="613:32">int</name></type> <name pos:start="613:34" pos:end="613:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="615:21" pos:end="631:30"><if pos:start="615:21" pos:end="629:21">if<condition pos:start="615:23" pos:end="615:48">(<expr pos:start="615:24" pos:end="615:47"><call pos:start="615:24" pos:end="615:47"><name pos:start="615:24" pos:end="615:29">IS_DIR</name><argument_list pos:start="615:30" pos:end="615:47">(<argument pos:start="615:31" pos:end="615:37"><expr pos:start="615:31" pos:end="615:37"><name pos:start="615:31" pos:end="615:37">mb_type</name></expr></argument>, <argument pos:start="615:40" pos:end="615:40"><expr pos:start="615:40" pos:end="615:40"><name pos:start="615:40" pos:end="615:40">i</name></expr></argument>, <argument pos:start="615:43" pos:end="615:46"><expr pos:start="615:43" pos:end="615:46"><name pos:start="615:43" pos:end="615:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="615:49" pos:end="629:21">{<block_content pos:start="617:25" pos:end="627:47">

                        <expr_stmt pos:start="617:25" pos:end="617:102"><expr pos:start="617:25" pos:end="617:101"><call pos:start="617:25" pos:end="617:101"><name pos:start="617:25" pos:end="617:40">pred_16x8_motion</name><argument_list pos:start="617:41" pos:end="617:101">(<argument pos:start="617:42" pos:end="617:42"><expr pos:start="617:42" pos:end="617:42"><name pos:start="617:42" pos:end="617:42">h</name></expr></argument>, <argument pos:start="617:45" pos:end="617:47"><expr pos:start="617:45" pos:end="617:47"><literal type="number" pos:start="617:45" pos:end="617:45">8</literal><operator pos:start="617:46" pos:end="617:46">*</operator><name pos:start="617:47" pos:end="617:47">i</name></expr></argument>, <argument pos:start="617:50" pos:end="617:53"><expr pos:start="617:50" pos:end="617:53"><name pos:start="617:50" pos:end="617:53">list</name></expr></argument>, <argument pos:start="617:56" pos:end="617:90"><expr pos:start="617:56" pos:end="617:90"><name pos:start="617:56" pos:end="617:90"><name pos:start="617:56" pos:end="617:56">h</name><operator pos:start="617:57" pos:end="617:58">-&gt;</operator><name pos:start="617:59" pos:end="617:67">ref_cache</name><index pos:start="617:68" pos:end="617:73">[<expr pos:start="617:69" pos:end="617:72"><name pos:start="617:69" pos:end="617:72">list</name></expr>]</index><index pos:start="617:74" pos:end="617:90">[<expr pos:start="617:75" pos:end="617:89"><name pos:start="617:75" pos:end="617:82"><name pos:start="617:75" pos:end="617:79">scan8</name><index pos:start="617:80" pos:end="617:82">[<expr pos:start="617:81" pos:end="617:81"><literal type="number" pos:start="617:81" pos:end="617:81">0</literal></expr>]</index></name> <operator pos:start="617:84" pos:end="617:84">+</operator> <literal type="number" pos:start="617:86" pos:end="617:87">16</literal><operator pos:start="617:88" pos:end="617:88">*</operator><name pos:start="617:89" pos:end="617:89">i</name></expr>]</index></name></expr></argument>, <argument pos:start="617:93" pos:end="617:95"><expr pos:start="617:93" pos:end="617:95"><operator pos:start="617:93" pos:end="617:93">&amp;</operator><name pos:start="617:94" pos:end="617:95">mx</name></expr></argument>, <argument pos:start="617:98" pos:end="617:100"><expr pos:start="617:98" pos:end="617:100"><operator pos:start="617:98" pos:end="617:98">&amp;</operator><name pos:start="617:99" pos:end="617:100">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="619:25" pos:end="619:52"><expr pos:start="619:25" pos:end="619:51"><name pos:start="619:25" pos:end="619:26">mx</name> <operator pos:start="619:28" pos:end="619:29">+=</operator> <call pos:start="619:31" pos:end="619:51"><name pos:start="619:31" pos:end="619:43">get_se_golomb</name><argument_list pos:start="619:44" pos:end="619:51">(<argument pos:start="619:45" pos:end="619:50"><expr pos:start="619:45" pos:end="619:50"><operator pos:start="619:45" pos:end="619:45">&amp;</operator><name pos:start="619:46" pos:end="619:50"><name pos:start="619:46" pos:end="619:46">s</name><operator pos:start="619:47" pos:end="619:48">-&gt;</operator><name pos:start="619:49" pos:end="619:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="621:25" pos:end="621:52"><expr pos:start="621:25" pos:end="621:51"><name pos:start="621:25" pos:end="621:26">my</name> <operator pos:start="621:28" pos:end="621:29">+=</operator> <call pos:start="621:31" pos:end="621:51"><name pos:start="621:31" pos:end="621:43">get_se_golomb</name><argument_list pos:start="621:44" pos:end="621:51">(<argument pos:start="621:45" pos:end="621:50"><expr pos:start="621:45" pos:end="621:50"><operator pos:start="621:45" pos:end="621:45">&amp;</operator><name pos:start="621:46" pos:end="621:50"><name pos:start="621:46" pos:end="621:46">s</name><operator pos:start="621:47" pos:end="621:48">-&gt;</operator><name pos:start="621:49" pos:end="621:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="623:25" pos:end="623:70"><expr pos:start="623:25" pos:end="623:69"><call pos:start="623:25" pos:end="623:69"><name pos:start="623:25" pos:end="623:31">tprintf</name><argument_list pos:start="623:32" pos:end="623:69">(<argument pos:start="623:33" pos:end="623:40"><expr pos:start="623:33" pos:end="623:40"><name pos:start="623:33" pos:end="623:40"><name pos:start="623:33" pos:end="623:33">s</name><operator pos:start="623:34" pos:end="623:35">-&gt;</operator><name pos:start="623:36" pos:end="623:40">avctx</name></name></expr></argument>, <argument pos:start="623:43" pos:end="623:60"><expr pos:start="623:43" pos:end="623:60"><literal type="string" pos:start="623:43" pos:end="623:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="623:63" pos:end="623:64"><expr pos:start="623:63" pos:end="623:64"><name pos:start="623:63" pos:end="623:64">mx</name></expr></argument>, <argument pos:start="623:67" pos:end="623:68"><expr pos:start="623:67" pos:end="623:68"><name pos:start="623:67" pos:end="623:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="627:25" pos:end="627:47"><expr pos:start="627:25" pos:end="627:46"><name pos:start="627:25" pos:end="627:27">val</name><operator pos:start="627:28" pos:end="627:28">=</operator> <call pos:start="627:30" pos:end="627:46"><name pos:start="627:30" pos:end="627:39">pack16to32</name><argument_list pos:start="627:40" pos:end="627:46">(<argument pos:start="627:41" pos:end="627:42"><expr pos:start="627:41" pos:end="627:42"><name pos:start="627:41" pos:end="627:42">mx</name></expr></argument>,<argument pos:start="627:44" pos:end="627:45"><expr pos:start="627:44" pos:end="627:45"><name pos:start="627:44" pos:end="627:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="629:22" pos:end="631:30">else<block type="pseudo" pos:start="631:25" pos:end="631:30"><block_content pos:start="631:25" pos:end="631:30">

                        <expr_stmt pos:start="631:25" pos:end="631:30"><expr pos:start="631:25" pos:end="631:29"><name pos:start="631:25" pos:end="631:27">val</name><operator pos:start="631:28" pos:end="631:28">=</operator><literal type="number" pos:start="631:29" pos:end="631:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="633:21" pos:end="633:90"><expr pos:start="633:21" pos:end="633:89"><call pos:start="633:21" pos:end="633:89"><name pos:start="633:21" pos:end="633:34">fill_rectangle</name><argument_list pos:start="633:35" pos:end="633:89">(<argument pos:start="633:36" pos:end="633:71"><expr pos:start="633:36" pos:end="633:71"><name pos:start="633:36" pos:end="633:71"><name pos:start="633:36" pos:end="633:36">h</name><operator pos:start="633:37" pos:end="633:38">-&gt;</operator><name pos:start="633:39" pos:end="633:46">mv_cache</name><index pos:start="633:47" pos:end="633:52">[<expr pos:start="633:48" pos:end="633:51"><name pos:start="633:48" pos:end="633:51">list</name></expr>]</index><index pos:start="633:53" pos:end="633:71">[ <expr pos:start="633:55" pos:end="633:69"><name pos:start="633:55" pos:end="633:62"><name pos:start="633:55" pos:end="633:59">scan8</name><index pos:start="633:60" pos:end="633:62">[<expr pos:start="633:61" pos:end="633:61"><literal type="number" pos:start="633:61" pos:end="633:61">0</literal></expr>]</index></name> <operator pos:start="633:64" pos:end="633:64">+</operator> <literal type="number" pos:start="633:66" pos:end="633:67">16</literal><operator pos:start="633:68" pos:end="633:68">*</operator><name pos:start="633:69" pos:end="633:69">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="633:74" pos:end="633:74"><expr pos:start="633:74" pos:end="633:74"><literal type="number" pos:start="633:74" pos:end="633:74">4</literal></expr></argument>, <argument pos:start="633:77" pos:end="633:77"><expr pos:start="633:77" pos:end="633:77"><literal type="number" pos:start="633:77" pos:end="633:77">2</literal></expr></argument>, <argument pos:start="633:80" pos:end="633:80"><expr pos:start="633:80" pos:end="633:80"><literal type="number" pos:start="633:80" pos:end="633:80">8</literal></expr></argument>, <argument pos:start="633:83" pos:end="633:85"><expr pos:start="633:83" pos:end="633:85"><name pos:start="633:83" pos:end="633:85">val</name></expr></argument>, <argument pos:start="633:88" pos:end="633:88"><expr pos:start="633:88" pos:end="633:88"><literal type="number" pos:start="633:88" pos:end="633:88">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="639:10" pos:end="701:9">else<block pos:start="639:14" pos:end="701:9">{<block_content pos:start="641:13" pos:end="699:13">

            <expr_stmt pos:start="641:13" pos:end="641:37"><expr pos:start="641:13" pos:end="641:36"><call pos:start="641:13" pos:end="641:36"><name pos:start="641:13" pos:end="641:18">assert</name><argument_list pos:start="641:19" pos:end="641:36">(<argument pos:start="641:20" pos:end="641:35"><expr pos:start="641:20" pos:end="641:35"><call pos:start="641:20" pos:end="641:35"><name pos:start="641:20" pos:end="641:26">IS_8X16</name><argument_list pos:start="641:27" pos:end="641:35">(<argument pos:start="641:28" pos:end="641:34"><expr pos:start="641:28" pos:end="641:34"><name pos:start="641:28" pos:end="641:34">mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="643:13" pos:end="669:13">for<control pos:start="643:16" pos:end="643:51">(<init pos:start="643:17" pos:end="643:23"><expr pos:start="643:17" pos:end="643:22"><name pos:start="643:17" pos:end="643:20">list</name><operator pos:start="643:21" pos:end="643:21">=</operator><literal type="number" pos:start="643:22" pos:end="643:22">0</literal></expr>;</init> <condition pos:start="643:25" pos:end="643:43"><expr pos:start="643:25" pos:end="643:42"><name pos:start="643:25" pos:end="643:28">list</name><operator pos:start="643:29" pos:end="643:29">&lt;</operator><name pos:start="643:30" pos:end="643:42"><name pos:start="643:30" pos:end="643:30">h</name><operator pos:start="643:31" pos:end="643:32">-&gt;</operator><name pos:start="643:33" pos:end="643:42">list_count</name></name></expr>;</condition> <incr pos:start="643:45" pos:end="643:50"><expr pos:start="643:45" pos:end="643:50"><name pos:start="643:45" pos:end="643:48">list</name><operator pos:start="643:49" pos:end="643:50">++</operator></expr></incr>)</control><block pos:start="643:52" pos:end="669:13">{<block_content pos:start="645:21" pos:end="667:21">

                    <for pos:start="645:21" pos:end="667:21">for<control pos:start="645:24" pos:end="645:38">(<init pos:start="645:25" pos:end="645:28"><expr pos:start="645:25" pos:end="645:27"><name pos:start="645:25" pos:end="645:25">i</name><operator pos:start="645:26" pos:end="645:26">=</operator><literal type="number" pos:start="645:27" pos:end="645:27">0</literal></expr>;</init> <condition pos:start="645:30" pos:end="645:33"><expr pos:start="645:30" pos:end="645:32"><name pos:start="645:30" pos:end="645:30">i</name><operator pos:start="645:31" pos:end="645:31">&lt;</operator><literal type="number" pos:start="645:32" pos:end="645:32">2</literal></expr>;</condition> <incr pos:start="645:35" pos:end="645:37"><expr pos:start="645:35" pos:end="645:37"><name pos:start="645:35" pos:end="645:35">i</name><operator pos:start="645:36" pos:end="645:37">++</operator></expr></incr>)</control><block pos:start="645:39" pos:end="667:21">{<block_content pos:start="647:25" pos:end="665:95">

                        <decl_stmt pos:start="647:25" pos:end="647:41"><decl pos:start="647:25" pos:end="647:40"><type pos:start="647:25" pos:end="647:36"><name pos:start="647:25" pos:end="647:32">unsigned</name> <name pos:start="647:34" pos:end="647:36">int</name></type> <name pos:start="647:38" pos:end="647:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="649:25" pos:end="663:52"><if pos:start="649:25" pos:end="661:25">if<condition pos:start="649:27" pos:end="649:52">(<expr pos:start="649:28" pos:end="649:51"><call pos:start="649:28" pos:end="649:51"><name pos:start="649:28" pos:end="649:33">IS_DIR</name><argument_list pos:start="649:34" pos:end="649:51">(<argument pos:start="649:35" pos:end="649:41"><expr pos:start="649:35" pos:end="649:41"><name pos:start="649:35" pos:end="649:41">mb_type</name></expr></argument>, <argument pos:start="649:44" pos:end="649:44"><expr pos:start="649:44" pos:end="649:44"><name pos:start="649:44" pos:end="649:44">i</name></expr></argument>, <argument pos:start="649:47" pos:end="649:50"><expr pos:start="649:47" pos:end="649:50"><name pos:start="649:47" pos:end="649:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="649:53" pos:end="661:25">{<block_content pos:start="651:29" pos:end="659:29"> <comment type="line" pos:start="649:55" pos:end="649:70">//FIXME optimize</comment>

                            <expr_stmt pos:start="651:29" pos:end="651:76"><expr pos:start="651:29" pos:end="651:75"><name pos:start="651:29" pos:end="651:31">val</name><operator pos:start="651:32" pos:end="651:32">=</operator> <call pos:start="651:34" pos:end="651:75"><name pos:start="651:34" pos:end="651:47">get_te0_golomb</name><argument_list pos:start="651:48" pos:end="651:75">(<argument pos:start="651:49" pos:end="651:54"><expr pos:start="651:49" pos:end="651:54"><operator pos:start="651:49" pos:end="651:49">&amp;</operator><name pos:start="651:50" pos:end="651:54"><name pos:start="651:50" pos:end="651:50">s</name><operator pos:start="651:51" pos:end="651:52">-&gt;</operator><name pos:start="651:53" pos:end="651:54">gb</name></name></expr></argument>, <argument pos:start="651:57" pos:end="651:74"><expr pos:start="651:57" pos:end="651:74"><name pos:start="651:57" pos:end="651:74"><name pos:start="651:57" pos:end="651:57">h</name><operator pos:start="651:58" pos:end="651:59">-&gt;</operator><name pos:start="651:60" pos:end="651:68">ref_count</name><index pos:start="651:69" pos:end="651:74">[<expr pos:start="651:70" pos:end="651:73"><name pos:start="651:70" pos:end="651:73">list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="653:29" pos:end="659:29"><if pos:start="653:29" pos:end="659:29">if<condition pos:start="653:31" pos:end="653:57">(<expr pos:start="653:32" pos:end="653:56"><name pos:start="653:32" pos:end="653:34">val</name> <operator pos:start="653:36" pos:end="653:37">&gt;=</operator> <name pos:start="653:39" pos:end="653:56"><name pos:start="653:39" pos:end="653:39">h</name><operator pos:start="653:40" pos:end="653:41">-&gt;</operator><name pos:start="653:42" pos:end="653:50">ref_count</name><index pos:start="653:51" pos:end="653:56">[<expr pos:start="653:52" pos:end="653:55"><name pos:start="653:52" pos:end="653:55">list</name></expr>]</index></name></expr>)</condition><block pos:start="653:58" pos:end="659:29">{<block_content pos:start="655:33" pos:end="657:42">

                                <expr_stmt pos:start="655:33" pos:end="655:91"><expr pos:start="655:33" pos:end="655:90"><call pos:start="655:33" pos:end="655:90"><name pos:start="655:33" pos:end="655:38">av_log</name><argument_list pos:start="655:39" pos:end="655:90">(<argument pos:start="655:40" pos:end="655:49"><expr pos:start="655:40" pos:end="655:49"><name pos:start="655:40" pos:end="655:49"><name pos:start="655:40" pos:end="655:40">h</name><operator pos:start="655:41" pos:end="655:42">-&gt;</operator><name pos:start="655:43" pos:end="655:43">s</name><operator pos:start="655:44" pos:end="655:44">.</operator><name pos:start="655:45" pos:end="655:49">avctx</name></name></expr></argument>, <argument pos:start="655:52" pos:end="655:63"><expr pos:start="655:52" pos:end="655:63"><name pos:start="655:52" pos:end="655:63">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="655:66" pos:end="655:84"><expr pos:start="655:66" pos:end="655:84"><literal type="string" pos:start="655:66" pos:end="655:84">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="655:87" pos:end="655:89"><expr pos:start="655:87" pos:end="655:89"><name pos:start="655:87" pos:end="655:89">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="657:33" pos:end="657:42">return <expr pos:start="657:40" pos:end="657:41"><operator pos:start="657:40" pos:end="657:40">-</operator><literal type="number" pos:start="657:41" pos:end="657:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if><else pos:start="661:26" pos:end="663:52">else<block type="pseudo" pos:start="663:29" pos:end="663:52"><block_content pos:start="663:29" pos:end="663:52">

                            <expr_stmt pos:start="663:29" pos:end="663:52"><expr pos:start="663:29" pos:end="663:51"><name pos:start="663:29" pos:end="663:31">val</name><operator pos:start="663:32" pos:end="663:32">=</operator> <name pos:start="663:34" pos:end="663:46">LIST_NOT_USED</name><operator pos:start="663:47" pos:end="663:47">&amp;</operator><literal type="number" pos:start="663:48" pos:end="663:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="665:25" pos:end="665:95"><expr pos:start="665:25" pos:end="665:94"><call pos:start="665:25" pos:end="665:94"><name pos:start="665:25" pos:end="665:38">fill_rectangle</name><argument_list pos:start="665:39" pos:end="665:94">(<argument pos:start="665:40" pos:end="665:76"><expr pos:start="665:40" pos:end="665:76"><operator pos:start="665:40" pos:end="665:40">&amp;</operator><name pos:start="665:41" pos:end="665:76"><name pos:start="665:41" pos:end="665:41">h</name><operator pos:start="665:42" pos:end="665:43">-&gt;</operator><name pos:start="665:44" pos:end="665:52">ref_cache</name><index pos:start="665:53" pos:end="665:58">[<expr pos:start="665:54" pos:end="665:57"><name pos:start="665:54" pos:end="665:57">list</name></expr>]</index><index pos:start="665:59" pos:end="665:76">[ <expr pos:start="665:61" pos:end="665:74"><name pos:start="665:61" pos:end="665:68"><name pos:start="665:61" pos:end="665:65">scan8</name><index pos:start="665:66" pos:end="665:68">[<expr pos:start="665:67" pos:end="665:67"><literal type="number" pos:start="665:67" pos:end="665:67">0</literal></expr>]</index></name> <operator pos:start="665:70" pos:end="665:70">+</operator> <literal type="number" pos:start="665:72" pos:end="665:72">2</literal><operator pos:start="665:73" pos:end="665:73">*</operator><name pos:start="665:74" pos:end="665:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="665:79" pos:end="665:79"><expr pos:start="665:79" pos:end="665:79"><literal type="number" pos:start="665:79" pos:end="665:79">2</literal></expr></argument>, <argument pos:start="665:82" pos:end="665:82"><expr pos:start="665:82" pos:end="665:82"><literal type="number" pos:start="665:82" pos:end="665:82">4</literal></expr></argument>, <argument pos:start="665:85" pos:end="665:85"><expr pos:start="665:85" pos:end="665:85"><literal type="number" pos:start="665:85" pos:end="665:85">8</literal></expr></argument>, <argument pos:start="665:88" pos:end="665:90"><expr pos:start="665:88" pos:end="665:90"><name pos:start="665:88" pos:end="665:90">val</name></expr></argument>, <argument pos:start="665:93" pos:end="665:93"><expr pos:start="665:93" pos:end="665:93"><literal type="number" pos:start="665:93" pos:end="665:93">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="671:13" pos:end="699:13">for<control pos:start="671:16" pos:end="671:51">(<init pos:start="671:17" pos:end="671:23"><expr pos:start="671:17" pos:end="671:22"><name pos:start="671:17" pos:end="671:20">list</name><operator pos:start="671:21" pos:end="671:21">=</operator><literal type="number" pos:start="671:22" pos:end="671:22">0</literal></expr>;</init> <condition pos:start="671:25" pos:end="671:43"><expr pos:start="671:25" pos:end="671:42"><name pos:start="671:25" pos:end="671:28">list</name><operator pos:start="671:29" pos:end="671:29">&lt;</operator><name pos:start="671:30" pos:end="671:42"><name pos:start="671:30" pos:end="671:30">h</name><operator pos:start="671:31" pos:end="671:32">-&gt;</operator><name pos:start="671:33" pos:end="671:42">list_count</name></name></expr>;</condition> <incr pos:start="671:45" pos:end="671:50"><expr pos:start="671:45" pos:end="671:50"><name pos:start="671:45" pos:end="671:48">list</name><operator pos:start="671:49" pos:end="671:50">++</operator></expr></incr>)</control><block pos:start="671:52" pos:end="699:13">{<block_content pos:start="673:17" pos:end="697:17">

                <for pos:start="673:17" pos:end="697:17">for<control pos:start="673:20" pos:end="673:34">(<init pos:start="673:21" pos:end="673:24"><expr pos:start="673:21" pos:end="673:23"><name pos:start="673:21" pos:end="673:21">i</name><operator pos:start="673:22" pos:end="673:22">=</operator><literal type="number" pos:start="673:23" pos:end="673:23">0</literal></expr>;</init> <condition pos:start="673:26" pos:end="673:29"><expr pos:start="673:26" pos:end="673:28"><name pos:start="673:26" pos:end="673:26">i</name><operator pos:start="673:27" pos:end="673:27">&lt;</operator><literal type="number" pos:start="673:28" pos:end="673:28">2</literal></expr>;</condition> <incr pos:start="673:31" pos:end="673:33"><expr pos:start="673:31" pos:end="673:33"><name pos:start="673:31" pos:end="673:31">i</name><operator pos:start="673:32" pos:end="673:33">++</operator></expr></incr>)</control><block pos:start="673:35" pos:end="697:17">{<block_content pos:start="675:21" pos:end="695:89">

                    <decl_stmt pos:start="675:21" pos:end="675:37"><decl pos:start="675:21" pos:end="675:36"><type pos:start="675:21" pos:end="675:32"><name pos:start="675:21" pos:end="675:28">unsigned</name> <name pos:start="675:30" pos:end="675:32">int</name></type> <name pos:start="675:34" pos:end="675:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="677:21" pos:end="693:30"><if pos:start="677:21" pos:end="691:21">if<condition pos:start="677:23" pos:end="677:48">(<expr pos:start="677:24" pos:end="677:47"><call pos:start="677:24" pos:end="677:47"><name pos:start="677:24" pos:end="677:29">IS_DIR</name><argument_list pos:start="677:30" pos:end="677:47">(<argument pos:start="677:31" pos:end="677:37"><expr pos:start="677:31" pos:end="677:37"><name pos:start="677:31" pos:end="677:37">mb_type</name></expr></argument>, <argument pos:start="677:40" pos:end="677:40"><expr pos:start="677:40" pos:end="677:40"><name pos:start="677:40" pos:end="677:40">i</name></expr></argument>, <argument pos:start="677:43" pos:end="677:46"><expr pos:start="677:43" pos:end="677:46"><name pos:start="677:43" pos:end="677:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="677:49" pos:end="691:21">{<block_content pos:start="679:25" pos:end="689:47">

                        <expr_stmt pos:start="679:25" pos:end="679:103"><expr pos:start="679:25" pos:end="679:102"><call pos:start="679:25" pos:end="679:102"><name pos:start="679:25" pos:end="679:40">pred_8x16_motion</name><argument_list pos:start="679:41" pos:end="679:102">(<argument pos:start="679:42" pos:end="679:42"><expr pos:start="679:42" pos:end="679:42"><name pos:start="679:42" pos:end="679:42">h</name></expr></argument>, <argument pos:start="679:45" pos:end="679:47"><expr pos:start="679:45" pos:end="679:47"><name pos:start="679:45" pos:end="679:45">i</name><operator pos:start="679:46" pos:end="679:46">*</operator><literal type="number" pos:start="679:47" pos:end="679:47">4</literal></expr></argument>, <argument pos:start="679:50" pos:end="679:53"><expr pos:start="679:50" pos:end="679:53"><name pos:start="679:50" pos:end="679:53">list</name></expr></argument>, <argument pos:start="679:56" pos:end="679:91"><expr pos:start="679:56" pos:end="679:91"><name pos:start="679:56" pos:end="679:91"><name pos:start="679:56" pos:end="679:56">h</name><operator pos:start="679:57" pos:end="679:58">-&gt;</operator><name pos:start="679:59" pos:end="679:67">ref_cache</name><index pos:start="679:68" pos:end="679:73">[<expr pos:start="679:69" pos:end="679:72"><name pos:start="679:69" pos:end="679:72">list</name></expr>]</index><index pos:start="679:74" pos:end="679:91">[ <expr pos:start="679:76" pos:end="679:89"><name pos:start="679:76" pos:end="679:83"><name pos:start="679:76" pos:end="679:80">scan8</name><index pos:start="679:81" pos:end="679:83">[<expr pos:start="679:82" pos:end="679:82"><literal type="number" pos:start="679:82" pos:end="679:82">0</literal></expr>]</index></name> <operator pos:start="679:85" pos:end="679:85">+</operator> <literal type="number" pos:start="679:87" pos:end="679:87">2</literal><operator pos:start="679:88" pos:end="679:88">*</operator><name pos:start="679:89" pos:end="679:89">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="679:94" pos:end="679:96"><expr pos:start="679:94" pos:end="679:96"><operator pos:start="679:94" pos:end="679:94">&amp;</operator><name pos:start="679:95" pos:end="679:96">mx</name></expr></argument>, <argument pos:start="679:99" pos:end="679:101"><expr pos:start="679:99" pos:end="679:101"><operator pos:start="679:99" pos:end="679:99">&amp;</operator><name pos:start="679:100" pos:end="679:101">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="681:25" pos:end="681:52"><expr pos:start="681:25" pos:end="681:51"><name pos:start="681:25" pos:end="681:26">mx</name> <operator pos:start="681:28" pos:end="681:29">+=</operator> <call pos:start="681:31" pos:end="681:51"><name pos:start="681:31" pos:end="681:43">get_se_golomb</name><argument_list pos:start="681:44" pos:end="681:51">(<argument pos:start="681:45" pos:end="681:50"><expr pos:start="681:45" pos:end="681:50"><operator pos:start="681:45" pos:end="681:45">&amp;</operator><name pos:start="681:46" pos:end="681:50"><name pos:start="681:46" pos:end="681:46">s</name><operator pos:start="681:47" pos:end="681:48">-&gt;</operator><name pos:start="681:49" pos:end="681:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="683:25" pos:end="683:52"><expr pos:start="683:25" pos:end="683:51"><name pos:start="683:25" pos:end="683:26">my</name> <operator pos:start="683:28" pos:end="683:29">+=</operator> <call pos:start="683:31" pos:end="683:51"><name pos:start="683:31" pos:end="683:43">get_se_golomb</name><argument_list pos:start="683:44" pos:end="683:51">(<argument pos:start="683:45" pos:end="683:50"><expr pos:start="683:45" pos:end="683:50"><operator pos:start="683:45" pos:end="683:45">&amp;</operator><name pos:start="683:46" pos:end="683:50"><name pos:start="683:46" pos:end="683:46">s</name><operator pos:start="683:47" pos:end="683:48">-&gt;</operator><name pos:start="683:49" pos:end="683:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="685:25" pos:end="685:70"><expr pos:start="685:25" pos:end="685:69"><call pos:start="685:25" pos:end="685:69"><name pos:start="685:25" pos:end="685:31">tprintf</name><argument_list pos:start="685:32" pos:end="685:69">(<argument pos:start="685:33" pos:end="685:40"><expr pos:start="685:33" pos:end="685:40"><name pos:start="685:33" pos:end="685:40"><name pos:start="685:33" pos:end="685:33">s</name><operator pos:start="685:34" pos:end="685:35">-&gt;</operator><name pos:start="685:36" pos:end="685:40">avctx</name></name></expr></argument>, <argument pos:start="685:43" pos:end="685:60"><expr pos:start="685:43" pos:end="685:60"><literal type="string" pos:start="685:43" pos:end="685:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="685:63" pos:end="685:64"><expr pos:start="685:63" pos:end="685:64"><name pos:start="685:63" pos:end="685:64">mx</name></expr></argument>, <argument pos:start="685:67" pos:end="685:68"><expr pos:start="685:67" pos:end="685:68"><name pos:start="685:67" pos:end="685:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="689:25" pos:end="689:47"><expr pos:start="689:25" pos:end="689:46"><name pos:start="689:25" pos:end="689:27">val</name><operator pos:start="689:28" pos:end="689:28">=</operator> <call pos:start="689:30" pos:end="689:46"><name pos:start="689:30" pos:end="689:39">pack16to32</name><argument_list pos:start="689:40" pos:end="689:46">(<argument pos:start="689:41" pos:end="689:42"><expr pos:start="689:41" pos:end="689:42"><name pos:start="689:41" pos:end="689:42">mx</name></expr></argument>,<argument pos:start="689:44" pos:end="689:45"><expr pos:start="689:44" pos:end="689:45"><name pos:start="689:44" pos:end="689:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="691:22" pos:end="693:30">else<block type="pseudo" pos:start="693:25" pos:end="693:30"><block_content pos:start="693:25" pos:end="693:30">

                        <expr_stmt pos:start="693:25" pos:end="693:30"><expr pos:start="693:25" pos:end="693:29"><name pos:start="693:25" pos:end="693:27">val</name><operator pos:start="693:28" pos:end="693:28">=</operator><literal type="number" pos:start="693:29" pos:end="693:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="695:21" pos:end="695:89"><expr pos:start="695:21" pos:end="695:88"><call pos:start="695:21" pos:end="695:88"><name pos:start="695:21" pos:end="695:34">fill_rectangle</name><argument_list pos:start="695:35" pos:end="695:88">(<argument pos:start="695:36" pos:end="695:70"><expr pos:start="695:36" pos:end="695:70"><name pos:start="695:36" pos:end="695:70"><name pos:start="695:36" pos:end="695:36">h</name><operator pos:start="695:37" pos:end="695:38">-&gt;</operator><name pos:start="695:39" pos:end="695:46">mv_cache</name><index pos:start="695:47" pos:end="695:52">[<expr pos:start="695:48" pos:end="695:51"><name pos:start="695:48" pos:end="695:51">list</name></expr>]</index><index pos:start="695:53" pos:end="695:70">[ <expr pos:start="695:55" pos:end="695:68"><name pos:start="695:55" pos:end="695:62"><name pos:start="695:55" pos:end="695:59">scan8</name><index pos:start="695:60" pos:end="695:62">[<expr pos:start="695:61" pos:end="695:61"><literal type="number" pos:start="695:61" pos:end="695:61">0</literal></expr>]</index></name> <operator pos:start="695:64" pos:end="695:64">+</operator> <literal type="number" pos:start="695:66" pos:end="695:66">2</literal><operator pos:start="695:67" pos:end="695:67">*</operator><name pos:start="695:68" pos:end="695:68">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="695:73" pos:end="695:73"><expr pos:start="695:73" pos:end="695:73"><literal type="number" pos:start="695:73" pos:end="695:73">2</literal></expr></argument>, <argument pos:start="695:76" pos:end="695:76"><expr pos:start="695:76" pos:end="695:76"><literal type="number" pos:start="695:76" pos:end="695:76">4</literal></expr></argument>, <argument pos:start="695:79" pos:end="695:79"><expr pos:start="695:79" pos:end="695:79"><literal type="number" pos:start="695:79" pos:end="695:79">8</literal></expr></argument>, <argument pos:start="695:82" pos:end="695:84"><expr pos:start="695:82" pos:end="695:84"><name pos:start="695:82" pos:end="695:84">val</name></expr></argument>, <argument pos:start="695:87" pos:end="695:87"><expr pos:start="695:87" pos:end="695:87"><literal type="number" pos:start="695:87" pos:end="695:87">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="707:5" pos:end="709:38"><if pos:start="707:5" pos:end="709:38">if<condition pos:start="707:7" pos:end="707:25">(<expr pos:start="707:8" pos:end="707:24"><call pos:start="707:8" pos:end="707:24"><name pos:start="707:8" pos:end="707:15">IS_INTER</name><argument_list pos:start="707:16" pos:end="707:24">(<argument pos:start="707:17" pos:end="707:23"><expr pos:start="707:17" pos:end="707:23"><name pos:start="707:17" pos:end="707:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="709:9" pos:end="709:38"><block_content pos:start="709:9" pos:end="709:38">

        <expr_stmt pos:start="709:9" pos:end="709:38"><expr pos:start="709:9" pos:end="709:37"><call pos:start="709:9" pos:end="709:37"><name pos:start="709:9" pos:end="709:25">write_back_motion</name><argument_list pos:start="709:26" pos:end="709:37">(<argument pos:start="709:27" pos:end="709:27"><expr pos:start="709:27" pos:end="709:27"><name pos:start="709:27" pos:end="709:27">h</name></expr></argument>, <argument pos:start="709:30" pos:end="709:36"><expr pos:start="709:30" pos:end="709:36"><name pos:start="709:30" pos:end="709:36">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="713:5" pos:end="735:5"><if pos:start="713:5" pos:end="735:5">if<condition pos:start="713:7" pos:end="713:31">(<expr pos:start="713:8" pos:end="713:30"><operator pos:start="713:8" pos:end="713:8">!</operator><call pos:start="713:9" pos:end="713:30"><name pos:start="713:9" pos:end="713:21">IS_INTRA16x16</name><argument_list pos:start="713:22" pos:end="713:30">(<argument pos:start="713:23" pos:end="713:29"><expr pos:start="713:23" pos:end="713:29"><name pos:start="713:23" pos:end="713:29">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="713:32" pos:end="735:5">{<block_content pos:start="715:9" pos:end="733:42">

        <expr_stmt pos:start="715:9" pos:end="715:35"><expr pos:start="715:9" pos:end="715:34"><name pos:start="715:9" pos:end="715:11">cbp</name><operator pos:start="715:12" pos:end="715:12">=</operator> <call pos:start="715:14" pos:end="715:34"><name pos:start="715:14" pos:end="715:26">get_ue_golomb</name><argument_list pos:start="715:27" pos:end="715:34">(<argument pos:start="715:28" pos:end="715:33"><expr pos:start="715:28" pos:end="715:33"><operator pos:start="715:28" pos:end="715:28">&amp;</operator><name pos:start="715:29" pos:end="715:33"><name pos:start="715:29" pos:end="715:29">s</name><operator pos:start="715:30" pos:end="715:31">-&gt;</operator><name pos:start="715:32" pos:end="715:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="717:9" pos:end="723:9"><if pos:start="717:9" pos:end="723:9">if<condition pos:start="717:11" pos:end="717:20">(<expr pos:start="717:12" pos:end="717:19"><name pos:start="717:12" pos:end="717:14">cbp</name> <operator pos:start="717:16" pos:end="717:16">&gt;</operator> <literal type="number" pos:start="717:18" pos:end="717:19">47</literal></expr>)</condition><block pos:start="717:21" pos:end="723:9">{<block_content pos:start="719:13" pos:end="721:22">

            <expr_stmt pos:start="719:13" pos:end="719:101"><expr pos:start="719:13" pos:end="719:100"><call pos:start="719:13" pos:end="719:100"><name pos:start="719:13" pos:end="719:18">av_log</name><argument_list pos:start="719:19" pos:end="719:100">(<argument pos:start="719:20" pos:end="719:29"><expr pos:start="719:20" pos:end="719:29"><name pos:start="719:20" pos:end="719:29"><name pos:start="719:20" pos:end="719:20">h</name><operator pos:start="719:21" pos:end="719:22">-&gt;</operator><name pos:start="719:23" pos:end="719:23">s</name><operator pos:start="719:24" pos:end="719:24">.</operator><name pos:start="719:25" pos:end="719:29">avctx</name></name></expr></argument>, <argument pos:start="719:32" pos:end="719:43"><expr pos:start="719:32" pos:end="719:43"><name pos:start="719:32" pos:end="719:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="719:46" pos:end="719:76"><expr pos:start="719:46" pos:end="719:76"><literal type="string" pos:start="719:46" pos:end="719:76">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument pos:start="719:79" pos:end="719:81"><expr pos:start="719:79" pos:end="719:81"><name pos:start="719:79" pos:end="719:81">cbp</name></expr></argument>, <argument pos:start="719:84" pos:end="719:90"><expr pos:start="719:84" pos:end="719:90"><name pos:start="719:84" pos:end="719:90"><name pos:start="719:84" pos:end="719:84">s</name><operator pos:start="719:85" pos:end="719:86">-&gt;</operator><name pos:start="719:87" pos:end="719:90">mb_x</name></name></expr></argument>, <argument pos:start="719:93" pos:end="719:99"><expr pos:start="719:93" pos:end="719:99"><name pos:start="719:93" pos:end="719:99"><name pos:start="719:93" pos:end="719:93">s</name><operator pos:start="719:94" pos:end="719:95">-&gt;</operator><name pos:start="719:96" pos:end="719:99">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="721:13" pos:end="721:22">return <expr pos:start="721:20" pos:end="721:21"><operator pos:start="721:20" pos:end="721:20">-</operator><literal type="number" pos:start="721:21" pos:end="721:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="727:9" pos:end="733:42"><if pos:start="727:9" pos:end="729:45">if<condition pos:start="727:11" pos:end="727:32">(<expr pos:start="727:12" pos:end="727:31"><call pos:start="727:12" pos:end="727:31"><name pos:start="727:12" pos:end="727:22">IS_INTRA4x4</name><argument_list pos:start="727:23" pos:end="727:31">(<argument pos:start="727:24" pos:end="727:30"><expr pos:start="727:24" pos:end="727:30"><name pos:start="727:24" pos:end="727:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="729:13" pos:end="729:45"><block_content pos:start="729:13" pos:end="729:45">

            <expr_stmt pos:start="729:13" pos:end="729:45"><expr pos:start="729:13" pos:end="729:44"><name pos:start="729:13" pos:end="729:15">cbp</name><operator pos:start="729:16" pos:end="729:16">=</operator> <name pos:start="729:18" pos:end="729:44"><name pos:start="729:18" pos:end="729:39">golomb_to_intra4x4_cbp</name><index pos:start="729:40" pos:end="729:44">[<expr pos:start="729:41" pos:end="729:43"><name pos:start="729:41" pos:end="729:43">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="731:9" pos:end="733:42">else<block type="pseudo" pos:start="733:13" pos:end="733:42"><block_content pos:start="733:13" pos:end="733:42">

            <expr_stmt pos:start="733:13" pos:end="733:42"><expr pos:start="733:13" pos:end="733:41"><name pos:start="733:13" pos:end="733:15">cbp</name><operator pos:start="733:16" pos:end="733:16">=</operator> <name pos:start="733:18" pos:end="733:41"><name pos:start="733:18" pos:end="733:36">golomb_to_inter_cbp</name><index pos:start="733:37" pos:end="733:41">[<expr pos:start="733:38" pos:end="733:40"><name pos:start="733:38" pos:end="733:40">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="737:5" pos:end="737:17"><expr pos:start="737:5" pos:end="737:16"><name pos:start="737:5" pos:end="737:10"><name pos:start="737:5" pos:end="737:5">h</name><operator pos:start="737:6" pos:end="737:7">-&gt;</operator><name pos:start="737:8" pos:end="737:10">cbp</name></name> <operator pos:start="737:12" pos:end="737:12">=</operator> <name pos:start="737:14" pos:end="737:16">cbp</name></expr>;</expr_stmt>



    <if_stmt pos:start="741:5" pos:end="747:5"><if pos:start="741:5" pos:end="747:5">if<condition pos:start="741:7" pos:end="741:56">(<expr pos:start="741:8" pos:end="741:55"><name pos:start="741:8" pos:end="741:21">dct8x8_allowed</name> <operator pos:start="741:23" pos:end="741:24">&amp;&amp;</operator> <operator pos:start="741:26" pos:end="741:26">(</operator><name pos:start="741:27" pos:end="741:29">cbp</name><operator pos:start="741:30" pos:end="741:30">&amp;</operator><literal type="number" pos:start="741:31" pos:end="741:32">15</literal><operator pos:start="741:33" pos:end="741:33">)</operator> <operator pos:start="741:35" pos:end="741:36">&amp;&amp;</operator> <operator pos:start="741:38" pos:end="741:38">!</operator><call pos:start="741:39" pos:end="741:55"><name pos:start="741:39" pos:end="741:46">IS_INTRA</name><argument_list pos:start="741:47" pos:end="741:55">(<argument pos:start="741:48" pos:end="741:54"><expr pos:start="741:48" pos:end="741:54"><name pos:start="741:48" pos:end="741:54">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="741:57" pos:end="747:5">{<block_content pos:start="743:9" pos:end="745:38">

        <if_stmt pos:start="743:9" pos:end="745:38"><if pos:start="743:9" pos:end="745:38">if<condition pos:start="743:11" pos:end="743:29">(<expr pos:start="743:12" pos:end="743:28"><call pos:start="743:12" pos:end="743:28"><name pos:start="743:12" pos:end="743:20">get_bits1</name><argument_list pos:start="743:21" pos:end="743:28">(<argument pos:start="743:22" pos:end="743:27"><expr pos:start="743:22" pos:end="743:27"><operator pos:start="743:22" pos:end="743:22">&amp;</operator><name pos:start="743:23" pos:end="743:27"><name pos:start="743:23" pos:end="743:23">s</name><operator pos:start="743:24" pos:end="743:25">-&gt;</operator><name pos:start="743:26" pos:end="743:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="745:13" pos:end="745:38"><block_content pos:start="745:13" pos:end="745:38">

            <expr_stmt pos:start="745:13" pos:end="745:38"><expr pos:start="745:13" pos:end="745:37"><name pos:start="745:13" pos:end="745:19">mb_type</name> <operator pos:start="745:21" pos:end="745:22">|=</operator> <name pos:start="745:24" pos:end="745:37">MB_TYPE_8x8DCT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="749:5" pos:end="749:47"><expr pos:start="749:5" pos:end="749:46"><name pos:start="749:5" pos:end="749:37"><name pos:start="749:5" pos:end="749:5">s</name><operator pos:start="749:6" pos:end="749:7">-&gt;</operator><name pos:start="749:8" pos:end="749:22">current_picture</name><operator pos:start="749:23" pos:end="749:23">.</operator><name pos:start="749:24" pos:end="749:30">mb_type</name><index pos:start="749:31" pos:end="749:37">[<expr pos:start="749:32" pos:end="749:36"><name pos:start="749:32" pos:end="749:36">mb_xy</name></expr>]</index></name><operator pos:start="749:38" pos:end="749:38">=</operator> <name pos:start="749:40" pos:end="749:46">mb_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="753:5" pos:end="969:5"><if pos:start="753:5" pos:end="959:5">if<condition pos:start="753:7" pos:end="753:37">(<expr pos:start="753:8" pos:end="753:36"><name pos:start="753:8" pos:end="753:10">cbp</name> <operator pos:start="753:12" pos:end="753:13">||</operator> <call pos:start="753:15" pos:end="753:36"><name pos:start="753:15" pos:end="753:27">IS_INTRA16x16</name><argument_list pos:start="753:28" pos:end="753:36">(<argument pos:start="753:29" pos:end="753:35"><expr pos:start="753:29" pos:end="753:35"><name pos:start="753:29" pos:end="753:35">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="753:38" pos:end="959:5">{<block_content pos:start="755:9" pos:end="957:9">

        <decl_stmt pos:start="755:9" pos:end="755:35"><decl pos:start="755:9" pos:end="755:16"><type pos:start="755:9" pos:end="755:11"><name pos:start="755:9" pos:end="755:11">int</name></type> <name pos:start="755:13" pos:end="755:16">i8x8</name></decl>, <decl pos:start="755:19" pos:end="755:22"><type ref="prev" pos:start="755:9" pos:end="755:11"/><name pos:start="755:19" pos:end="755:22">i4x4</name></decl>, <decl pos:start="755:25" pos:end="755:34"><type ref="prev" pos:start="755:9" pos:end="755:11"/><name pos:start="755:25" pos:end="755:34">chroma_idx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="757:9" pos:end="757:19"><decl pos:start="757:9" pos:end="757:18"><type pos:start="757:9" pos:end="757:11"><name pos:start="757:9" pos:end="757:11">int</name></type> <name pos:start="757:13" pos:end="757:18">dquant</name></decl>;</decl_stmt>

        <decl_stmt pos:start="759:9" pos:end="759:81"><decl pos:start="759:9" pos:end="759:80"><type pos:start="759:9" pos:end="759:23"><name pos:start="759:9" pos:end="759:21">GetBitContext</name> <modifier pos:start="759:23" pos:end="759:23">*</modifier></type><name pos:start="759:24" pos:end="759:25">gb</name><init pos:start="759:26" pos:end="759:80">= <expr pos:start="759:28" pos:end="759:80"><ternary pos:start="759:28" pos:end="759:80"><condition pos:start="759:28" pos:end="759:46"><expr pos:start="759:28" pos:end="759:44"><call pos:start="759:28" pos:end="759:44"><name pos:start="759:28" pos:end="759:35">IS_INTRA</name><argument_list pos:start="759:36" pos:end="759:44">(<argument pos:start="759:37" pos:end="759:43"><expr pos:start="759:37" pos:end="759:43"><name pos:start="759:37" pos:end="759:43">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="759:48" pos:end="759:62"> <expr pos:start="759:48" pos:end="759:62"><name pos:start="759:48" pos:end="759:62"><name pos:start="759:48" pos:end="759:48">h</name><operator pos:start="759:49" pos:end="759:50">-&gt;</operator><name pos:start="759:51" pos:end="759:62">intra_gb_ptr</name></name></expr> </then><else pos:start="759:64" pos:end="759:80">: <expr pos:start="759:66" pos:end="759:80"><name pos:start="759:66" pos:end="759:80"><name pos:start="759:66" pos:end="759:66">h</name><operator pos:start="759:67" pos:end="759:68">-&gt;</operator><name pos:start="759:69" pos:end="759:80">inter_gb_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="761:9" pos:end="761:48"><decl pos:start="761:9" pos:end="761:27"><type pos:start="761:9" pos:end="761:23"><specifier pos:start="761:9" pos:end="761:13">const</specifier> <name pos:start="761:15" pos:end="761:21">uint8_t</name> <modifier pos:start="761:23" pos:end="761:23">*</modifier></type><name pos:start="761:24" pos:end="761:27">scan</name></decl>, <decl pos:start="761:30" pos:end="761:37"><type ref="prev" pos:start="761:9" pos:end="761:23"><modifier pos:start="761:30" pos:end="761:30">*</modifier></type><name pos:start="761:31" pos:end="761:37">scan8x8</name></decl>, <decl pos:start="761:40" pos:end="761:47"><type ref="prev" pos:start="761:9" pos:end="761:23"><modifier pos:start="761:40" pos:end="761:40">*</modifier></type><name pos:start="761:41" pos:end="761:47">dc_scan</name></decl>;</decl_stmt>



<comment type="line" pos:start="765:1" pos:end="765:39">//        fill_non_zero_count_cache(h);</comment>



        <if_stmt pos:start="769:9" pos:end="785:9"><if pos:start="769:9" pos:end="777:9">if<condition pos:start="769:11" pos:end="769:34">(<expr pos:start="769:12" pos:end="769:33"><call pos:start="769:12" pos:end="769:33"><name pos:start="769:12" pos:end="769:24">IS_INTERLACED</name><argument_list pos:start="769:25" pos:end="769:33">(<argument pos:start="769:26" pos:end="769:32"><expr pos:start="769:26" pos:end="769:32"><name pos:start="769:26" pos:end="769:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="769:35" pos:end="777:9">{<block_content pos:start="771:13" pos:end="775:40">

            <expr_stmt pos:start="771:13" pos:end="771:84"><expr pos:start="771:13" pos:end="771:83"><name pos:start="771:13" pos:end="771:19">scan8x8</name><operator pos:start="771:20" pos:end="771:20">=</operator> <ternary pos:start="771:22" pos:end="771:83"><condition pos:start="771:22" pos:end="771:32"><expr pos:start="771:22" pos:end="771:30"><name pos:start="771:22" pos:end="771:30"><name pos:start="771:22" pos:end="771:22">s</name><operator pos:start="771:23" pos:end="771:24">-&gt;</operator><name pos:start="771:25" pos:end="771:30">qscale</name></name></expr> ?</condition><then pos:start="771:34" pos:end="771:55"> <expr pos:start="771:34" pos:end="771:55"><name pos:start="771:34" pos:end="771:55"><name pos:start="771:34" pos:end="771:34">h</name><operator pos:start="771:35" pos:end="771:36">-&gt;</operator><name pos:start="771:37" pos:end="771:55">field_scan8x8_cavlc</name></name></expr> </then><else pos:start="771:57" pos:end="771:83">: <expr pos:start="771:59" pos:end="771:83"><name pos:start="771:59" pos:end="771:83"><name pos:start="771:59" pos:end="771:59">h</name><operator pos:start="771:60" pos:end="771:61">-&gt;</operator><name pos:start="771:62" pos:end="771:83">field_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:63"><expr pos:start="773:13" pos:end="773:62"><name pos:start="773:13" pos:end="773:16">scan</name><operator pos:start="773:17" pos:end="773:17">=</operator> <ternary pos:start="773:19" pos:end="773:62"><condition pos:start="773:19" pos:end="773:29"><expr pos:start="773:19" pos:end="773:27"><name pos:start="773:19" pos:end="773:27"><name pos:start="773:19" pos:end="773:19">s</name><operator pos:start="773:20" pos:end="773:21">-&gt;</operator><name pos:start="773:22" pos:end="773:27">qscale</name></name></expr> ?</condition><then pos:start="773:31" pos:end="773:43"> <expr pos:start="773:31" pos:end="773:43"><name pos:start="773:31" pos:end="773:43"><name pos:start="773:31" pos:end="773:31">h</name><operator pos:start="773:32" pos:end="773:33">-&gt;</operator><name pos:start="773:34" pos:end="773:43">field_scan</name></name></expr> </then><else pos:start="773:45" pos:end="773:62">: <expr pos:start="773:47" pos:end="773:62"><name pos:start="773:47" pos:end="773:62"><name pos:start="773:47" pos:end="773:47">h</name><operator pos:start="773:48" pos:end="773:49">-&gt;</operator><name pos:start="773:50" pos:end="773:62">field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:40"><expr pos:start="775:13" pos:end="775:39"><name pos:start="775:13" pos:end="775:19">dc_scan</name><operator pos:start="775:20" pos:end="775:20">=</operator> <name pos:start="775:22" pos:end="775:39">luma_dc_field_scan</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="777:10" pos:end="785:9">else<block pos:start="777:14" pos:end="785:9">{<block_content pos:start="779:13" pos:end="783:41">

            <expr_stmt pos:start="779:13" pos:end="779:86"><expr pos:start="779:13" pos:end="779:85"><name pos:start="779:13" pos:end="779:19">scan8x8</name><operator pos:start="779:20" pos:end="779:20">=</operator> <ternary pos:start="779:22" pos:end="779:85"><condition pos:start="779:22" pos:end="779:32"><expr pos:start="779:22" pos:end="779:30"><name pos:start="779:22" pos:end="779:30"><name pos:start="779:22" pos:end="779:22">s</name><operator pos:start="779:23" pos:end="779:24">-&gt;</operator><name pos:start="779:25" pos:end="779:30">qscale</name></name></expr> ?</condition><then pos:start="779:34" pos:end="779:56"> <expr pos:start="779:34" pos:end="779:56"><name pos:start="779:34" pos:end="779:56"><name pos:start="779:34" pos:end="779:34">h</name><operator pos:start="779:35" pos:end="779:36">-&gt;</operator><name pos:start="779:37" pos:end="779:56">zigzag_scan8x8_cavlc</name></name></expr> </then><else pos:start="779:58" pos:end="779:85">: <expr pos:start="779:60" pos:end="779:85"><name pos:start="779:60" pos:end="779:85"><name pos:start="779:60" pos:end="779:60">h</name><operator pos:start="779:61" pos:end="779:62">-&gt;</operator><name pos:start="779:63" pos:end="779:85">zigzag_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="781:13" pos:end="781:65"><expr pos:start="781:13" pos:end="781:64"><name pos:start="781:13" pos:end="781:16">scan</name><operator pos:start="781:17" pos:end="781:17">=</operator> <ternary pos:start="781:19" pos:end="781:64"><condition pos:start="781:19" pos:end="781:29"><expr pos:start="781:19" pos:end="781:27"><name pos:start="781:19" pos:end="781:27"><name pos:start="781:19" pos:end="781:19">s</name><operator pos:start="781:20" pos:end="781:21">-&gt;</operator><name pos:start="781:22" pos:end="781:27">qscale</name></name></expr> ?</condition><then pos:start="781:31" pos:end="781:44"> <expr pos:start="781:31" pos:end="781:44"><name pos:start="781:31" pos:end="781:44"><name pos:start="781:31" pos:end="781:31">h</name><operator pos:start="781:32" pos:end="781:33">-&gt;</operator><name pos:start="781:34" pos:end="781:44">zigzag_scan</name></name></expr> </then><else pos:start="781:46" pos:end="781:64">: <expr pos:start="781:48" pos:end="781:64"><name pos:start="781:48" pos:end="781:64"><name pos:start="781:48" pos:end="781:48">h</name><operator pos:start="781:49" pos:end="781:50">-&gt;</operator><name pos:start="781:51" pos:end="781:64">zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="783:13" pos:end="783:41"><expr pos:start="783:13" pos:end="783:40"><name pos:start="783:13" pos:end="783:19">dc_scan</name><operator pos:start="783:20" pos:end="783:20">=</operator> <name pos:start="783:22" pos:end="783:40">luma_dc_zigzag_scan</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="789:9" pos:end="789:38"><expr pos:start="789:9" pos:end="789:37"><name pos:start="789:9" pos:end="789:14">dquant</name><operator pos:start="789:15" pos:end="789:15">=</operator> <call pos:start="789:17" pos:end="789:37"><name pos:start="789:17" pos:end="789:29">get_se_golomb</name><argument_list pos:start="789:30" pos:end="789:37">(<argument pos:start="789:31" pos:end="789:36"><expr pos:start="789:31" pos:end="789:36"><operator pos:start="789:31" pos:end="789:31">&amp;</operator><name pos:start="789:32" pos:end="789:36"><name pos:start="789:32" pos:end="789:32">s</name><operator pos:start="789:33" pos:end="789:34">-&gt;</operator><name pos:start="789:35" pos:end="789:36">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="793:9" pos:end="799:9"><if pos:start="793:9" pos:end="799:9">if<condition pos:start="793:11" pos:end="793:41">( <expr pos:start="793:13" pos:end="793:39"><name pos:start="793:13" pos:end="793:18">dquant</name> <operator pos:start="793:20" pos:end="793:20">&gt;</operator> <literal type="number" pos:start="793:22" pos:end="793:23">25</literal> <operator pos:start="793:25" pos:end="793:26">||</operator> <name pos:start="793:28" pos:end="793:33">dquant</name> <operator pos:start="793:35" pos:end="793:35">&lt;</operator> <operator pos:start="793:37" pos:end="793:37">-</operator><literal type="number" pos:start="793:38" pos:end="793:39">26</literal></expr> )</condition><block pos:start="793:42" pos:end="799:9">{<block_content pos:start="795:13" pos:end="797:22">

            <expr_stmt pos:start="795:13" pos:end="795:110"><expr pos:start="795:13" pos:end="795:109"><call pos:start="795:13" pos:end="795:109"><name pos:start="795:13" pos:end="795:18">av_log</name><argument_list pos:start="795:19" pos:end="795:109">(<argument pos:start="795:20" pos:end="795:29"><expr pos:start="795:20" pos:end="795:29"><name pos:start="795:20" pos:end="795:29"><name pos:start="795:20" pos:end="795:20">h</name><operator pos:start="795:21" pos:end="795:22">-&gt;</operator><name pos:start="795:23" pos:end="795:23">s</name><operator pos:start="795:24" pos:end="795:24">.</operator><name pos:start="795:25" pos:end="795:29">avctx</name></name></expr></argument>, <argument pos:start="795:32" pos:end="795:43"><expr pos:start="795:32" pos:end="795:43"><name pos:start="795:32" pos:end="795:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="795:46" pos:end="795:82"><expr pos:start="795:46" pos:end="795:82"><literal type="string" pos:start="795:46" pos:end="795:82">"dquant out of range (%d) at %d %d\n"</literal></expr></argument>, <argument pos:start="795:85" pos:end="795:90"><expr pos:start="795:85" pos:end="795:90"><name pos:start="795:85" pos:end="795:90">dquant</name></expr></argument>, <argument pos:start="795:93" pos:end="795:99"><expr pos:start="795:93" pos:end="795:99"><name pos:start="795:93" pos:end="795:99"><name pos:start="795:93" pos:end="795:93">s</name><operator pos:start="795:94" pos:end="795:95">-&gt;</operator><name pos:start="795:96" pos:end="795:99">mb_x</name></name></expr></argument>, <argument pos:start="795:102" pos:end="795:108"><expr pos:start="795:102" pos:end="795:108"><name pos:start="795:102" pos:end="795:108"><name pos:start="795:102" pos:end="795:102">s</name><operator pos:start="795:103" pos:end="795:104">-&gt;</operator><name pos:start="795:105" pos:end="795:108">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="797:13" pos:end="797:22">return <expr pos:start="797:20" pos:end="797:21"><operator pos:start="797:20" pos:end="797:20">-</operator><literal type="number" pos:start="797:21" pos:end="797:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="803:9" pos:end="803:28"><expr pos:start="803:9" pos:end="803:27"><name pos:start="803:9" pos:end="803:17"><name pos:start="803:9" pos:end="803:9">s</name><operator pos:start="803:10" pos:end="803:11">-&gt;</operator><name pos:start="803:12" pos:end="803:17">qscale</name></name> <operator pos:start="803:19" pos:end="803:20">+=</operator> <name pos:start="803:22" pos:end="803:27">dquant</name></expr>;</expr_stmt>

        <if_stmt pos:start="805:9" pos:end="811:9"><if pos:start="805:9" pos:end="811:9">if<condition pos:start="805:11" pos:end="805:38">(<expr pos:start="805:12" pos:end="805:37"><operator pos:start="805:12" pos:end="805:12">(</operator><operator pos:start="805:13" pos:end="805:13">(</operator><name pos:start="805:14" pos:end="805:21">unsigned</name><operator pos:start="805:22" pos:end="805:22">)</operator><name pos:start="805:23" pos:end="805:31"><name pos:start="805:23" pos:end="805:23">s</name><operator pos:start="805:24" pos:end="805:25">-&gt;</operator><name pos:start="805:26" pos:end="805:31">qscale</name></name><operator pos:start="805:32" pos:end="805:32">)</operator> <operator pos:start="805:34" pos:end="805:34">&gt;</operator> <literal type="number" pos:start="805:36" pos:end="805:37">51</literal></expr>)</condition><block pos:start="805:39" pos:end="811:9">{<block_content pos:start="807:13" pos:end="809:43">

            <if_stmt pos:start="807:13" pos:end="809:43"><if pos:start="807:13" pos:end="807:43">if<condition pos:start="807:15" pos:end="807:27">(<expr pos:start="807:16" pos:end="807:26"><name pos:start="807:16" pos:end="807:24"><name pos:start="807:16" pos:end="807:16">s</name><operator pos:start="807:17" pos:end="807:18">-&gt;</operator><name pos:start="807:19" pos:end="807:24">qscale</name></name><operator pos:start="807:25" pos:end="807:25">&lt;</operator><literal type="number" pos:start="807:26" pos:end="807:26">0</literal></expr>)</condition><block type="pseudo" pos:start="807:29" pos:end="807:43"><block_content pos:start="807:29" pos:end="807:43"> <expr_stmt pos:start="807:29" pos:end="807:43"><expr pos:start="807:29" pos:end="807:42"><name pos:start="807:29" pos:end="807:37"><name pos:start="807:29" pos:end="807:29">s</name><operator pos:start="807:30" pos:end="807:31">-&gt;</operator><name pos:start="807:32" pos:end="807:37">qscale</name></name><operator pos:start="807:38" pos:end="807:39">+=</operator> <literal type="number" pos:start="807:41" pos:end="807:42">52</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="809:13" pos:end="809:43">else<block type="pseudo" pos:start="809:29" pos:end="809:43"><block_content pos:start="809:29" pos:end="809:43">            <expr_stmt pos:start="809:29" pos:end="809:43"><expr pos:start="809:29" pos:end="809:42"><name pos:start="809:29" pos:end="809:37"><name pos:start="809:29" pos:end="809:29">s</name><operator pos:start="809:30" pos:end="809:31">-&gt;</operator><name pos:start="809:32" pos:end="809:37">qscale</name></name><operator pos:start="809:38" pos:end="809:39">-=</operator> <literal type="number" pos:start="809:41" pos:end="809:42">52</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="815:9" pos:end="815:56"><expr pos:start="815:9" pos:end="815:55"><name pos:start="815:9" pos:end="815:23"><name pos:start="815:9" pos:end="815:9">h</name><operator pos:start="815:10" pos:end="815:11">-&gt;</operator><name pos:start="815:12" pos:end="815:20">chroma_qp</name><index pos:start="815:21" pos:end="815:23">[<expr pos:start="815:22" pos:end="815:22"><literal type="number" pos:start="815:22" pos:end="815:22">0</literal></expr>]</index></name><operator pos:start="815:24" pos:end="815:24">=</operator> <call pos:start="815:26" pos:end="815:55"><name pos:start="815:26" pos:end="815:38">get_chroma_qp</name><argument_list pos:start="815:39" pos:end="815:55">(<argument pos:start="815:40" pos:end="815:40"><expr pos:start="815:40" pos:end="815:40"><name pos:start="815:40" pos:end="815:40">h</name></expr></argument>, <argument pos:start="815:43" pos:end="815:43"><expr pos:start="815:43" pos:end="815:43"><literal type="number" pos:start="815:43" pos:end="815:43">0</literal></expr></argument>, <argument pos:start="815:46" pos:end="815:54"><expr pos:start="815:46" pos:end="815:54"><name pos:start="815:46" pos:end="815:54"><name pos:start="815:46" pos:end="815:46">s</name><operator pos:start="815:47" pos:end="815:48">-&gt;</operator><name pos:start="815:49" pos:end="815:54">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="817:9" pos:end="817:56"><expr pos:start="817:9" pos:end="817:55"><name pos:start="817:9" pos:end="817:23"><name pos:start="817:9" pos:end="817:9">h</name><operator pos:start="817:10" pos:end="817:11">-&gt;</operator><name pos:start="817:12" pos:end="817:20">chroma_qp</name><index pos:start="817:21" pos:end="817:23">[<expr pos:start="817:22" pos:end="817:22"><literal type="number" pos:start="817:22" pos:end="817:22">1</literal></expr>]</index></name><operator pos:start="817:24" pos:end="817:24">=</operator> <call pos:start="817:26" pos:end="817:55"><name pos:start="817:26" pos:end="817:38">get_chroma_qp</name><argument_list pos:start="817:39" pos:end="817:55">(<argument pos:start="817:40" pos:end="817:40"><expr pos:start="817:40" pos:end="817:40"><name pos:start="817:40" pos:end="817:40">h</name></expr></argument>, <argument pos:start="817:43" pos:end="817:43"><expr pos:start="817:43" pos:end="817:43"><literal type="number" pos:start="817:43" pos:end="817:43">1</literal></expr></argument>, <argument pos:start="817:46" pos:end="817:54"><expr pos:start="817:46" pos:end="817:54"><name pos:start="817:46" pos:end="817:54"><name pos:start="817:46" pos:end="817:46">s</name><operator pos:start="817:47" pos:end="817:48">-&gt;</operator><name pos:start="817:49" pos:end="817:54">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="819:9" pos:end="911:9"><if pos:start="819:9" pos:end="857:9">if<condition pos:start="819:11" pos:end="819:34">(<expr pos:start="819:12" pos:end="819:33"><call pos:start="819:12" pos:end="819:33"><name pos:start="819:12" pos:end="819:24">IS_INTRA16x16</name><argument_list pos:start="819:25" pos:end="819:33">(<argument pos:start="819:26" pos:end="819:32"><expr pos:start="819:26" pos:end="819:32"><name pos:start="819:26" pos:end="819:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="819:35" pos:end="857:9">{<block_content pos:start="821:13" pos:end="855:13">

            <if_stmt pos:start="821:13" pos:end="825:13"><if pos:start="821:13" pos:end="825:13">if<condition pos:start="821:15" pos:end="821:130">( <expr pos:start="821:17" pos:end="821:129"><call pos:start="821:17" pos:end="821:125"><name pos:start="821:17" pos:end="821:31">decode_residual</name><argument_list pos:start="821:32" pos:end="821:125">(<argument pos:start="821:33" pos:end="821:33"><expr pos:start="821:33" pos:end="821:33"><name pos:start="821:33" pos:end="821:33">h</name></expr></argument>, <argument pos:start="821:36" pos:end="821:50"><expr pos:start="821:36" pos:end="821:50"><name pos:start="821:36" pos:end="821:50"><name pos:start="821:36" pos:end="821:36">h</name><operator pos:start="821:37" pos:end="821:38">-&gt;</operator><name pos:start="821:39" pos:end="821:50">intra_gb_ptr</name></name></expr></argument>, <argument pos:start="821:53" pos:end="821:57"><expr pos:start="821:53" pos:end="821:57"><name pos:start="821:53" pos:end="821:57"><name pos:start="821:53" pos:end="821:53">h</name><operator pos:start="821:54" pos:end="821:55">-&gt;</operator><name pos:start="821:56" pos:end="821:57">mb</name></name></expr></argument>, <argument pos:start="821:60" pos:end="821:78"><expr pos:start="821:60" pos:end="821:78"><name pos:start="821:60" pos:end="821:78">LUMA_DC_BLOCK_INDEX</name></expr></argument>, <argument pos:start="821:81" pos:end="821:87"><expr pos:start="821:81" pos:end="821:87"><name pos:start="821:81" pos:end="821:87">dc_scan</name></expr></argument>, <argument pos:start="821:90" pos:end="821:120"><expr pos:start="821:90" pos:end="821:120"><name pos:start="821:90" pos:end="821:120"><name pos:start="821:90" pos:end="821:90">h</name><operator pos:start="821:91" pos:end="821:92">-&gt;</operator><name pos:start="821:93" pos:end="821:106">dequant4_coeff</name><index pos:start="821:107" pos:end="821:109">[<expr pos:start="821:108" pos:end="821:108"><literal type="number" pos:start="821:108" pos:end="821:108">0</literal></expr>]</index><index pos:start="821:110" pos:end="821:120">[<expr pos:start="821:111" pos:end="821:119"><name pos:start="821:111" pos:end="821:119"><name pos:start="821:111" pos:end="821:111">s</name><operator pos:start="821:112" pos:end="821:113">-&gt;</operator><name pos:start="821:114" pos:end="821:119">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="821:123" pos:end="821:124"><expr pos:start="821:123" pos:end="821:124"><literal type="number" pos:start="821:123" pos:end="821:124">16</literal></expr></argument>)</argument_list></call> <operator pos:start="821:127" pos:end="821:127">&lt;</operator> <literal type="number" pos:start="821:129" pos:end="821:129">0</literal></expr>)</condition><block pos:start="821:131" pos:end="825:13">{<block_content pos:start="823:17" pos:end="823:26">

                <return pos:start="823:17" pos:end="823:26">return <expr pos:start="823:24" pos:end="823:25"><operator pos:start="823:24" pos:end="823:24">-</operator><literal type="number" pos:start="823:25" pos:end="823:25">1</literal></expr>;</return> <comment type="line" pos:start="823:28" pos:end="823:82">//FIXME continue if partitioned and other return -1 too</comment>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="829:13" pos:end="829:52"><expr pos:start="829:13" pos:end="829:51"><call pos:start="829:13" pos:end="829:51"><name pos:start="829:13" pos:end="829:18">assert</name><argument_list pos:start="829:19" pos:end="829:51">(<argument pos:start="829:20" pos:end="829:50"><expr pos:start="829:20" pos:end="829:50"><operator pos:start="829:20" pos:end="829:20">(</operator><name pos:start="829:21" pos:end="829:23">cbp</name><operator pos:start="829:24" pos:end="829:24">&amp;</operator><literal type="number" pos:start="829:25" pos:end="829:26">15</literal><operator pos:start="829:27" pos:end="829:27">)</operator> <operator pos:start="829:29" pos:end="829:30">==</operator> <literal type="number" pos:start="829:32" pos:end="829:32">0</literal> <operator pos:start="829:34" pos:end="829:35">||</operator> <operator pos:start="829:37" pos:end="829:37">(</operator><name pos:start="829:38" pos:end="829:40">cbp</name><operator pos:start="829:41" pos:end="829:41">&amp;</operator><literal type="number" pos:start="829:42" pos:end="829:43">15</literal><operator pos:start="829:44" pos:end="829:44">)</operator> <operator pos:start="829:46" pos:end="829:47">==</operator> <literal type="number" pos:start="829:49" pos:end="829:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="833:13" pos:end="855:13"><if pos:start="833:13" pos:end="851:13">if<condition pos:start="833:15" pos:end="833:22">(<expr pos:start="833:16" pos:end="833:21"><name pos:start="833:16" pos:end="833:18">cbp</name><operator pos:start="833:19" pos:end="833:19">&amp;</operator><literal type="number" pos:start="833:20" pos:end="833:21">15</literal></expr>)</condition><block pos:start="833:23" pos:end="851:13">{<block_content pos:start="835:17" pos:end="849:17">

                <for pos:start="835:17" pos:end="849:17">for<control pos:start="835:20" pos:end="835:43">(<init pos:start="835:21" pos:end="835:27"><expr pos:start="835:21" pos:end="835:26"><name pos:start="835:21" pos:end="835:24">i8x8</name><operator pos:start="835:25" pos:end="835:25">=</operator><literal type="number" pos:start="835:26" pos:end="835:26">0</literal></expr>;</init> <condition pos:start="835:29" pos:end="835:35"><expr pos:start="835:29" pos:end="835:34"><name pos:start="835:29" pos:end="835:32">i8x8</name><operator pos:start="835:33" pos:end="835:33">&lt;</operator><literal type="number" pos:start="835:34" pos:end="835:34">4</literal></expr>;</condition> <incr pos:start="835:37" pos:end="835:42"><expr pos:start="835:37" pos:end="835:42"><name pos:start="835:37" pos:end="835:40">i8x8</name><operator pos:start="835:41" pos:end="835:42">++</operator></expr></incr>)</control><block pos:start="835:44" pos:end="849:17">{<block_content pos:start="837:21" pos:end="847:21">

                    <for pos:start="837:21" pos:end="847:21">for<control pos:start="837:24" pos:end="837:47">(<init pos:start="837:25" pos:end="837:31"><expr pos:start="837:25" pos:end="837:30"><name pos:start="837:25" pos:end="837:28">i4x4</name><operator pos:start="837:29" pos:end="837:29">=</operator><literal type="number" pos:start="837:30" pos:end="837:30">0</literal></expr>;</init> <condition pos:start="837:33" pos:end="837:39"><expr pos:start="837:33" pos:end="837:38"><name pos:start="837:33" pos:end="837:36">i4x4</name><operator pos:start="837:37" pos:end="837:37">&lt;</operator><literal type="number" pos:start="837:38" pos:end="837:38">4</literal></expr>;</condition> <incr pos:start="837:41" pos:end="837:46"><expr pos:start="837:41" pos:end="837:46"><name pos:start="837:41" pos:end="837:44">i4x4</name><operator pos:start="837:45" pos:end="837:46">++</operator></expr></incr>)</control><block pos:start="837:48" pos:end="847:21">{<block_content pos:start="839:25" pos:end="845:25">

                        <decl_stmt pos:start="839:25" pos:end="839:55"><decl pos:start="839:25" pos:end="839:54"><type pos:start="839:25" pos:end="839:33"><specifier pos:start="839:25" pos:end="839:29">const</specifier> <name pos:start="839:31" pos:end="839:33">int</name></type> <name pos:start="839:35" pos:end="839:39">index</name><init pos:start="839:40" pos:end="839:54">= <expr pos:start="839:42" pos:end="839:54"><name pos:start="839:42" pos:end="839:45">i4x4</name> <operator pos:start="839:47" pos:end="839:47">+</operator> <literal type="number" pos:start="839:49" pos:end="839:49">4</literal><operator pos:start="839:50" pos:end="839:50">*</operator><name pos:start="839:51" pos:end="839:54">i8x8</name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="841:25" pos:end="845:25"><if pos:start="841:25" pos:end="845:25">if<condition pos:start="841:27" pos:end="841:141">( <expr pos:start="841:29" pos:end="841:139"><call pos:start="841:29" pos:end="841:135"><name pos:start="841:29" pos:end="841:43">decode_residual</name><argument_list pos:start="841:44" pos:end="841:135">(<argument pos:start="841:45" pos:end="841:45"><expr pos:start="841:45" pos:end="841:45"><name pos:start="841:45" pos:end="841:45">h</name></expr></argument>, <argument pos:start="841:48" pos:end="841:62"><expr pos:start="841:48" pos:end="841:62"><name pos:start="841:48" pos:end="841:62"><name pos:start="841:48" pos:end="841:48">h</name><operator pos:start="841:49" pos:end="841:50">-&gt;</operator><name pos:start="841:51" pos:end="841:62">intra_gb_ptr</name></name></expr></argument>, <argument pos:start="841:65" pos:end="841:80"><expr pos:start="841:65" pos:end="841:80"><name pos:start="841:65" pos:end="841:69"><name pos:start="841:65" pos:end="841:65">h</name><operator pos:start="841:66" pos:end="841:67">-&gt;</operator><name pos:start="841:68" pos:end="841:69">mb</name></name> <operator pos:start="841:71" pos:end="841:71">+</operator> <literal type="number" pos:start="841:73" pos:end="841:74">16</literal><operator pos:start="841:75" pos:end="841:75">*</operator><name pos:start="841:76" pos:end="841:80">index</name></expr></argument>, <argument pos:start="841:83" pos:end="841:87"><expr pos:start="841:83" pos:end="841:87"><name pos:start="841:83" pos:end="841:87">index</name></expr></argument>, <argument pos:start="841:90" pos:end="841:97"><expr pos:start="841:90" pos:end="841:97"><name pos:start="841:90" pos:end="841:93">scan</name> <operator pos:start="841:95" pos:end="841:95">+</operator> <literal type="number" pos:start="841:97" pos:end="841:97">1</literal></expr></argument>, <argument pos:start="841:100" pos:end="841:130"><expr pos:start="841:100" pos:end="841:130"><name pos:start="841:100" pos:end="841:130"><name pos:start="841:100" pos:end="841:100">h</name><operator pos:start="841:101" pos:end="841:102">-&gt;</operator><name pos:start="841:103" pos:end="841:116">dequant4_coeff</name><index pos:start="841:117" pos:end="841:119">[<expr pos:start="841:118" pos:end="841:118"><literal type="number" pos:start="841:118" pos:end="841:118">0</literal></expr>]</index><index pos:start="841:120" pos:end="841:130">[<expr pos:start="841:121" pos:end="841:129"><name pos:start="841:121" pos:end="841:129"><name pos:start="841:121" pos:end="841:121">s</name><operator pos:start="841:122" pos:end="841:123">-&gt;</operator><name pos:start="841:124" pos:end="841:129">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="841:133" pos:end="841:134"><expr pos:start="841:133" pos:end="841:134"><literal type="number" pos:start="841:133" pos:end="841:134">15</literal></expr></argument>)</argument_list></call> <operator pos:start="841:137" pos:end="841:137">&lt;</operator> <literal type="number" pos:start="841:139" pos:end="841:139">0</literal></expr> )</condition><block pos:start="841:142" pos:end="845:25">{<block_content pos:start="843:29" pos:end="843:38">

                            <return pos:start="843:29" pos:end="843:38">return <expr pos:start="843:36" pos:end="843:37"><operator pos:start="843:36" pos:end="843:36">-</operator><literal type="number" pos:start="843:37" pos:end="843:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="851:14" pos:end="855:13">else<block pos:start="851:18" pos:end="855:13">{<block_content pos:start="853:17" pos:end="853:82">

                <expr_stmt pos:start="853:17" pos:end="853:82"><expr pos:start="853:17" pos:end="853:81"><call pos:start="853:17" pos:end="853:81"><name pos:start="853:17" pos:end="853:30">fill_rectangle</name><argument_list pos:start="853:31" pos:end="853:81">(<argument pos:start="853:32" pos:end="853:65"><expr pos:start="853:32" pos:end="853:65"><operator pos:start="853:32" pos:end="853:32">&amp;</operator><name pos:start="853:33" pos:end="853:65"><name pos:start="853:33" pos:end="853:33">h</name><operator pos:start="853:34" pos:end="853:35">-&gt;</operator><name pos:start="853:36" pos:end="853:55">non_zero_count_cache</name><index pos:start="853:56" pos:end="853:65">[<expr pos:start="853:57" pos:end="853:64"><name pos:start="853:57" pos:end="853:64"><name pos:start="853:57" pos:end="853:61">scan8</name><index pos:start="853:62" pos:end="853:64">[<expr pos:start="853:63" pos:end="853:63"><literal type="number" pos:start="853:63" pos:end="853:63">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="853:68" pos:end="853:68"><expr pos:start="853:68" pos:end="853:68"><literal type="number" pos:start="853:68" pos:end="853:68">4</literal></expr></argument>, <argument pos:start="853:71" pos:end="853:71"><expr pos:start="853:71" pos:end="853:71"><literal type="number" pos:start="853:71" pos:end="853:71">4</literal></expr></argument>, <argument pos:start="853:74" pos:end="853:74"><expr pos:start="853:74" pos:end="853:74"><literal type="number" pos:start="853:74" pos:end="853:74">8</literal></expr></argument>, <argument pos:start="853:77" pos:end="853:77"><expr pos:start="853:77" pos:end="853:77"><literal type="number" pos:start="853:77" pos:end="853:77">0</literal></expr></argument>, <argument pos:start="853:80" pos:end="853:80"><expr pos:start="853:80" pos:end="853:80"><literal type="number" pos:start="853:80" pos:end="853:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if><else pos:start="857:10" pos:end="911:9">else<block pos:start="857:14" pos:end="911:9">{<block_content pos:start="859:13" pos:end="909:13">

            <for pos:start="859:13" pos:end="909:13">for<control pos:start="859:16" pos:end="859:39">(<init pos:start="859:17" pos:end="859:23"><expr pos:start="859:17" pos:end="859:22"><name pos:start="859:17" pos:end="859:20">i8x8</name><operator pos:start="859:21" pos:end="859:21">=</operator><literal type="number" pos:start="859:22" pos:end="859:22">0</literal></expr>;</init> <condition pos:start="859:25" pos:end="859:31"><expr pos:start="859:25" pos:end="859:30"><name pos:start="859:25" pos:end="859:28">i8x8</name><operator pos:start="859:29" pos:end="859:29">&lt;</operator><literal type="number" pos:start="859:30" pos:end="859:30">4</literal></expr>;</condition> <incr pos:start="859:33" pos:end="859:38"><expr pos:start="859:33" pos:end="859:38"><name pos:start="859:33" pos:end="859:36">i8x8</name><operator pos:start="859:37" pos:end="859:38">++</operator></expr></incr>)</control><block pos:start="859:40" pos:end="909:13">{<block_content pos:start="861:17" pos:end="907:17">

                <if_stmt pos:start="861:17" pos:end="907:17"><if pos:start="861:17" pos:end="901:17">if<condition pos:start="861:19" pos:end="861:35">(<expr pos:start="861:20" pos:end="861:34"><name pos:start="861:20" pos:end="861:22">cbp</name> <operator pos:start="861:24" pos:end="861:24">&amp;</operator> <operator pos:start="861:26" pos:end="861:26">(</operator><literal type="number" pos:start="861:27" pos:end="861:27">1</literal><operator pos:start="861:28" pos:end="861:29">&lt;&lt;</operator><name pos:start="861:30" pos:end="861:33">i8x8</name><operator pos:start="861:34" pos:end="861:34">)</operator></expr>)</condition><block pos:start="861:36" pos:end="901:17">{<block_content pos:start="863:21" pos:end="899:21">

                    <if_stmt pos:start="863:21" pos:end="899:21"><if pos:start="863:21" pos:end="883:21">if<condition pos:start="863:23" pos:end="863:42">(<expr pos:start="863:24" pos:end="863:41"><call pos:start="863:24" pos:end="863:41"><name pos:start="863:24" pos:end="863:32">IS_8x8DCT</name><argument_list pos:start="863:33" pos:end="863:41">(<argument pos:start="863:34" pos:end="863:40"><expr pos:start="863:34" pos:end="863:40"><name pos:start="863:34" pos:end="863:40">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="863:43" pos:end="883:21">{<block_content pos:start="865:25" pos:end="881:59">

                        <decl_stmt pos:start="865:25" pos:end="865:55"><decl pos:start="865:25" pos:end="865:54"><type pos:start="865:25" pos:end="865:33"><name pos:start="865:25" pos:end="865:31">DCTELEM</name> <modifier pos:start="865:33" pos:end="865:33">*</modifier></type><name pos:start="865:34" pos:end="865:36">buf</name> <init pos:start="865:38" pos:end="865:54">= <expr pos:start="865:40" pos:end="865:54"><operator pos:start="865:40" pos:end="865:40">&amp;</operator><name pos:start="865:41" pos:end="865:54"><name pos:start="865:41" pos:end="865:41">h</name><operator pos:start="865:42" pos:end="865:43">-&gt;</operator><name pos:start="865:44" pos:end="865:45">mb</name><index pos:start="865:46" pos:end="865:54">[<expr pos:start="865:47" pos:end="865:53"><literal type="number" pos:start="865:47" pos:end="865:48">64</literal><operator pos:start="865:49" pos:end="865:49">*</operator><name pos:start="865:50" pos:end="865:53">i8x8</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="867:25" pos:end="867:37"><decl pos:start="867:25" pos:end="867:36"><type pos:start="867:25" pos:end="867:33"><name pos:start="867:25" pos:end="867:31">uint8_t</name> <modifier pos:start="867:33" pos:end="867:33">*</modifier></type><name pos:start="867:34" pos:end="867:36">nnz</name></decl>;</decl_stmt>

                        <for pos:start="869:25" pos:end="877:25">for<control pos:start="869:28" pos:end="869:51">(<init pos:start="869:29" pos:end="869:35"><expr pos:start="869:29" pos:end="869:34"><name pos:start="869:29" pos:end="869:32">i4x4</name><operator pos:start="869:33" pos:end="869:33">=</operator><literal type="number" pos:start="869:34" pos:end="869:34">0</literal></expr>;</init> <condition pos:start="869:37" pos:end="869:43"><expr pos:start="869:37" pos:end="869:42"><name pos:start="869:37" pos:end="869:40">i4x4</name><operator pos:start="869:41" pos:end="869:41">&lt;</operator><literal type="number" pos:start="869:42" pos:end="869:42">4</literal></expr>;</condition> <incr pos:start="869:45" pos:end="869:50"><expr pos:start="869:45" pos:end="869:50"><name pos:start="869:45" pos:end="869:48">i4x4</name><operator pos:start="869:49" pos:end="869:50">++</operator></expr></incr>)</control><block pos:start="869:52" pos:end="877:25">{<block_content pos:start="871:29" pos:end="875:42">

                            <if_stmt pos:start="871:29" pos:end="875:42"><if pos:start="871:29" pos:end="875:42">if<condition pos:start="871:31" pos:end="873:113">( <expr pos:start="871:33" pos:end="873:111"><call pos:start="871:33" pos:end="873:108"><name pos:start="871:33" pos:end="871:47">decode_residual</name><argument_list pos:start="871:48" pos:end="873:108">(<argument pos:start="871:49" pos:end="871:49"><expr pos:start="871:49" pos:end="871:49"><name pos:start="871:49" pos:end="871:49">h</name></expr></argument>, <argument pos:start="871:52" pos:end="871:53"><expr pos:start="871:52" pos:end="871:53"><name pos:start="871:52" pos:end="871:53">gb</name></expr></argument>, <argument pos:start="871:56" pos:end="871:58"><expr pos:start="871:56" pos:end="871:58"><name pos:start="871:56" pos:end="871:58">buf</name></expr></argument>, <argument pos:start="871:61" pos:end="871:71"><expr pos:start="871:61" pos:end="871:71"><name pos:start="871:61" pos:end="871:64">i4x4</name><operator pos:start="871:65" pos:end="871:65">+</operator><literal type="number" pos:start="871:66" pos:end="871:66">4</literal><operator pos:start="871:67" pos:end="871:67">*</operator><name pos:start="871:68" pos:end="871:71">i8x8</name></expr></argument>, <argument pos:start="871:74" pos:end="871:88"><expr pos:start="871:74" pos:end="871:88"><name pos:start="871:74" pos:end="871:80">scan8x8</name><operator pos:start="871:81" pos:end="871:81">+</operator><literal type="number" pos:start="871:82" pos:end="871:83">16</literal><operator pos:start="871:84" pos:end="871:84">*</operator><name pos:start="871:85" pos:end="871:88">i4x4</name></expr></argument>,

                                                <argument pos:start="873:49" pos:end="873:103"><expr pos:start="873:49" pos:end="873:103"><name pos:start="873:49" pos:end="873:103"><name pos:start="873:49" pos:end="873:49">h</name><operator pos:start="873:50" pos:end="873:51">-&gt;</operator><name pos:start="873:52" pos:end="873:65">dequant8_coeff</name><index pos:start="873:66" pos:end="873:92">[<expr pos:start="873:67" pos:end="873:91"><ternary pos:start="873:67" pos:end="873:91"><condition pos:start="873:67" pos:end="873:87"><expr pos:start="873:67" pos:end="873:85"><call pos:start="873:67" pos:end="873:85"><name pos:start="873:67" pos:end="873:74">IS_INTRA</name><argument_list pos:start="873:75" pos:end="873:85">( <argument pos:start="873:77" pos:end="873:83"><expr pos:start="873:77" pos:end="873:83"><name pos:start="873:77" pos:end="873:83">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="873:89" pos:end="873:89"> <expr pos:start="873:89" pos:end="873:89"><literal type="number" pos:start="873:89" pos:end="873:89">0</literal></expr></then><else pos:start="873:90" pos:end="873:91">:<expr pos:start="873:91" pos:end="873:91"><literal type="number" pos:start="873:91" pos:end="873:91">1</literal></expr></else></ternary></expr>]</index><index pos:start="873:93" pos:end="873:103">[<expr pos:start="873:94" pos:end="873:102"><name pos:start="873:94" pos:end="873:102"><name pos:start="873:94" pos:end="873:94">s</name><operator pos:start="873:95" pos:end="873:96">-&gt;</operator><name pos:start="873:97" pos:end="873:102">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="873:106" pos:end="873:107"><expr pos:start="873:106" pos:end="873:107"><literal type="number" pos:start="873:106" pos:end="873:107">16</literal></expr></argument>)</argument_list></call> <operator pos:start="873:110" pos:end="873:110">&lt;</operator><literal type="number" pos:start="873:111" pos:end="873:111">0</literal></expr> )</condition><block type="pseudo" pos:start="875:33" pos:end="875:42"><block_content pos:start="875:33" pos:end="875:42">

                                <return pos:start="875:33" pos:end="875:42">return <expr pos:start="875:40" pos:end="875:41"><operator pos:start="875:40" pos:end="875:40">-</operator><literal type="number" pos:start="875:41" pos:end="875:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="879:25" pos:end="879:71"><expr pos:start="879:25" pos:end="879:70"><name pos:start="879:25" pos:end="879:27">nnz</name><operator pos:start="879:28" pos:end="879:28">=</operator> <operator pos:start="879:30" pos:end="879:30">&amp;</operator><name pos:start="879:31" pos:end="879:70"><name pos:start="879:31" pos:end="879:31">h</name><operator pos:start="879:32" pos:end="879:33">-&gt;</operator><name pos:start="879:34" pos:end="879:53">non_zero_count_cache</name><index pos:start="879:54" pos:end="879:70">[ <expr pos:start="879:56" pos:end="879:68"><name pos:start="879:56" pos:end="879:68"><name pos:start="879:56" pos:end="879:60">scan8</name><index pos:start="879:61" pos:end="879:68">[<expr pos:start="879:62" pos:end="879:67"><literal type="number" pos:start="879:62" pos:end="879:62">4</literal><operator pos:start="879:63" pos:end="879:63">*</operator><name pos:start="879:64" pos:end="879:67">i8x8</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="881:25" pos:end="881:59"><expr pos:start="881:25" pos:end="881:58"><name pos:start="881:25" pos:end="881:30"><name pos:start="881:25" pos:end="881:27">nnz</name><index pos:start="881:28" pos:end="881:30">[<expr pos:start="881:29" pos:end="881:29"><literal type="number" pos:start="881:29" pos:end="881:29">0</literal></expr>]</index></name> <operator pos:start="881:32" pos:end="881:33">+=</operator> <name pos:start="881:35" pos:end="881:40"><name pos:start="881:35" pos:end="881:37">nnz</name><index pos:start="881:38" pos:end="881:40">[<expr pos:start="881:39" pos:end="881:39"><literal type="number" pos:start="881:39" pos:end="881:39">1</literal></expr>]</index></name> <operator pos:start="881:42" pos:end="881:42">+</operator> <name pos:start="881:44" pos:end="881:49"><name pos:start="881:44" pos:end="881:46">nnz</name><index pos:start="881:47" pos:end="881:49">[<expr pos:start="881:48" pos:end="881:48"><literal type="number" pos:start="881:48" pos:end="881:48">8</literal></expr>]</index></name> <operator pos:start="881:51" pos:end="881:51">+</operator> <name pos:start="881:53" pos:end="881:58"><name pos:start="881:53" pos:end="881:55">nnz</name><index pos:start="881:56" pos:end="881:58">[<expr pos:start="881:57" pos:end="881:57"><literal type="number" pos:start="881:57" pos:end="881:57">9</literal></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="883:22" pos:end="899:21">else<block pos:start="883:26" pos:end="899:21">{<block_content pos:start="885:25" pos:end="897:25">

                        <for pos:start="885:25" pos:end="897:25">for<control pos:start="885:28" pos:end="885:51">(<init pos:start="885:29" pos:end="885:35"><expr pos:start="885:29" pos:end="885:34"><name pos:start="885:29" pos:end="885:32">i4x4</name><operator pos:start="885:33" pos:end="885:33">=</operator><literal type="number" pos:start="885:34" pos:end="885:34">0</literal></expr>;</init> <condition pos:start="885:37" pos:end="885:43"><expr pos:start="885:37" pos:end="885:42"><name pos:start="885:37" pos:end="885:40">i4x4</name><operator pos:start="885:41" pos:end="885:41">&lt;</operator><literal type="number" pos:start="885:42" pos:end="885:42">4</literal></expr>;</condition> <incr pos:start="885:45" pos:end="885:50"><expr pos:start="885:45" pos:end="885:50"><name pos:start="885:45" pos:end="885:48">i4x4</name><operator pos:start="885:49" pos:end="885:50">++</operator></expr></incr>)</control><block pos:start="885:52" pos:end="897:25">{<block_content pos:start="887:29" pos:end="895:29">

                            <decl_stmt pos:start="887:29" pos:end="887:59"><decl pos:start="887:29" pos:end="887:58"><type pos:start="887:29" pos:end="887:37"><specifier pos:start="887:29" pos:end="887:33">const</specifier> <name pos:start="887:35" pos:end="887:37">int</name></type> <name pos:start="887:39" pos:end="887:43">index</name><init pos:start="887:44" pos:end="887:58">= <expr pos:start="887:46" pos:end="887:58"><name pos:start="887:46" pos:end="887:49">i4x4</name> <operator pos:start="887:51" pos:end="887:51">+</operator> <literal type="number" pos:start="887:53" pos:end="887:53">4</literal><operator pos:start="887:54" pos:end="887:54">*</operator><name pos:start="887:55" pos:end="887:58">i8x8</name></expr></init></decl>;</decl_stmt>



                            <if_stmt pos:start="891:29" pos:end="895:29"><if pos:start="891:29" pos:end="895:29">if<condition pos:start="891:31" pos:end="891:151">( <expr pos:start="891:33" pos:end="891:149"><call pos:start="891:33" pos:end="891:146"><name pos:start="891:33" pos:end="891:47">decode_residual</name><argument_list pos:start="891:48" pos:end="891:146">(<argument pos:start="891:49" pos:end="891:49"><expr pos:start="891:49" pos:end="891:49"><name pos:start="891:49" pos:end="891:49">h</name></expr></argument>, <argument pos:start="891:52" pos:end="891:53"><expr pos:start="891:52" pos:end="891:53"><name pos:start="891:52" pos:end="891:53">gb</name></expr></argument>, <argument pos:start="891:56" pos:end="891:71"><expr pos:start="891:56" pos:end="891:71"><name pos:start="891:56" pos:end="891:60"><name pos:start="891:56" pos:end="891:56">h</name><operator pos:start="891:57" pos:end="891:58">-&gt;</operator><name pos:start="891:59" pos:end="891:60">mb</name></name> <operator pos:start="891:62" pos:end="891:62">+</operator> <literal type="number" pos:start="891:64" pos:end="891:65">16</literal><operator pos:start="891:66" pos:end="891:66">*</operator><name pos:start="891:67" pos:end="891:71">index</name></expr></argument>, <argument pos:start="891:74" pos:end="891:78"><expr pos:start="891:74" pos:end="891:78"><name pos:start="891:74" pos:end="891:78">index</name></expr></argument>, <argument pos:start="891:81" pos:end="891:84"><expr pos:start="891:81" pos:end="891:84"><name pos:start="891:81" pos:end="891:84">scan</name></expr></argument>, <argument pos:start="891:87" pos:end="891:141"><expr pos:start="891:87" pos:end="891:141"><name pos:start="891:87" pos:end="891:141"><name pos:start="891:87" pos:end="891:87">h</name><operator pos:start="891:88" pos:end="891:89">-&gt;</operator><name pos:start="891:90" pos:end="891:103">dequant4_coeff</name><index pos:start="891:104" pos:end="891:130">[<expr pos:start="891:105" pos:end="891:129"><ternary pos:start="891:105" pos:end="891:129"><condition pos:start="891:105" pos:end="891:125"><expr pos:start="891:105" pos:end="891:123"><call pos:start="891:105" pos:end="891:123"><name pos:start="891:105" pos:end="891:112">IS_INTRA</name><argument_list pos:start="891:113" pos:end="891:123">( <argument pos:start="891:115" pos:end="891:121"><expr pos:start="891:115" pos:end="891:121"><name pos:start="891:115" pos:end="891:121">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="891:127" pos:end="891:127"> <expr pos:start="891:127" pos:end="891:127"><literal type="number" pos:start="891:127" pos:end="891:127">0</literal></expr></then><else pos:start="891:128" pos:end="891:129">:<expr pos:start="891:129" pos:end="891:129"><literal type="number" pos:start="891:129" pos:end="891:129">3</literal></expr></else></ternary></expr>]</index><index pos:start="891:131" pos:end="891:141">[<expr pos:start="891:132" pos:end="891:140"><name pos:start="891:132" pos:end="891:140"><name pos:start="891:132" pos:end="891:132">s</name><operator pos:start="891:133" pos:end="891:134">-&gt;</operator><name pos:start="891:135" pos:end="891:140">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="891:144" pos:end="891:145"><expr pos:start="891:144" pos:end="891:145"><literal type="number" pos:start="891:144" pos:end="891:145">16</literal></expr></argument>)</argument_list></call> <operator pos:start="891:148" pos:end="891:148">&lt;</operator><literal type="number" pos:start="891:149" pos:end="891:149">0</literal></expr> )</condition><block pos:start="891:152" pos:end="895:29">{<block_content pos:start="893:33" pos:end="893:42">

                                <return pos:start="893:33" pos:end="893:42">return <expr pos:start="893:40" pos:end="893:41"><operator pos:start="893:40" pos:end="893:40">-</operator><literal type="number" pos:start="893:41" pos:end="893:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if><else pos:start="901:18" pos:end="907:17">else<block pos:start="901:22" pos:end="907:17">{<block_content pos:start="903:21" pos:end="905:58">

                    <decl_stmt pos:start="903:21" pos:end="903:83"><decl pos:start="903:21" pos:end="903:82"><type pos:start="903:21" pos:end="903:35"><name pos:start="903:21" pos:end="903:27">uint8_t</name> <modifier pos:start="903:29" pos:end="903:29">*</modifier> <specifier pos:start="903:31" pos:end="903:35">const</specifier></type> <name pos:start="903:37" pos:end="903:39">nnz</name><init pos:start="903:40" pos:end="903:82">= <expr pos:start="903:42" pos:end="903:82"><operator pos:start="903:42" pos:end="903:42">&amp;</operator><name pos:start="903:43" pos:end="903:82"><name pos:start="903:43" pos:end="903:43">h</name><operator pos:start="903:44" pos:end="903:45">-&gt;</operator><name pos:start="903:46" pos:end="903:65">non_zero_count_cache</name><index pos:start="903:66" pos:end="903:82">[ <expr pos:start="903:68" pos:end="903:80"><name pos:start="903:68" pos:end="903:80"><name pos:start="903:68" pos:end="903:72">scan8</name><index pos:start="903:73" pos:end="903:80">[<expr pos:start="903:74" pos:end="903:79"><literal type="number" pos:start="903:74" pos:end="903:74">4</literal><operator pos:start="903:75" pos:end="903:75">*</operator><name pos:start="903:76" pos:end="903:79">i8x8</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="905:21" pos:end="905:58"><expr pos:start="905:21" pos:end="905:57"><name pos:start="905:21" pos:end="905:26"><name pos:start="905:21" pos:end="905:23">nnz</name><index pos:start="905:24" pos:end="905:26">[<expr pos:start="905:25" pos:end="905:25"><literal type="number" pos:start="905:25" pos:end="905:25">0</literal></expr>]</index></name> <operator pos:start="905:28" pos:end="905:28">=</operator> <name pos:start="905:30" pos:end="905:35"><name pos:start="905:30" pos:end="905:32">nnz</name><index pos:start="905:33" pos:end="905:35">[<expr pos:start="905:34" pos:end="905:34"><literal type="number" pos:start="905:34" pos:end="905:34">1</literal></expr>]</index></name> <operator pos:start="905:37" pos:end="905:37">=</operator> <name pos:start="905:39" pos:end="905:44"><name pos:start="905:39" pos:end="905:41">nnz</name><index pos:start="905:42" pos:end="905:44">[<expr pos:start="905:43" pos:end="905:43"><literal type="number" pos:start="905:43" pos:end="905:43">8</literal></expr>]</index></name> <operator pos:start="905:46" pos:end="905:46">=</operator> <name pos:start="905:48" pos:end="905:53"><name pos:start="905:48" pos:end="905:50">nnz</name><index pos:start="905:51" pos:end="905:53">[<expr pos:start="905:52" pos:end="905:52"><literal type="number" pos:start="905:52" pos:end="905:52">9</literal></expr>]</index></name> <operator pos:start="905:55" pos:end="905:55">=</operator> <literal type="number" pos:start="905:57" pos:end="905:57">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="915:9" pos:end="925:9"><if pos:start="915:9" pos:end="925:9">if<condition pos:start="915:11" pos:end="915:20">(<expr pos:start="915:12" pos:end="915:19"><name pos:start="915:12" pos:end="915:14">cbp</name><operator pos:start="915:15" pos:end="915:15">&amp;</operator><literal type="number" pos:start="915:16" pos:end="915:19">0x30</literal></expr>)</condition><block pos:start="915:21" pos:end="925:9">{<block_content pos:start="917:13" pos:end="923:17">

            <for pos:start="917:13" pos:end="923:17">for<control pos:start="917:16" pos:end="917:57">(<init pos:start="917:17" pos:end="917:29"><expr pos:start="917:17" pos:end="917:28"><name pos:start="917:17" pos:end="917:26">chroma_idx</name><operator pos:start="917:27" pos:end="917:27">=</operator><literal type="number" pos:start="917:28" pos:end="917:28">0</literal></expr>;</init> <condition pos:start="917:31" pos:end="917:43"><expr pos:start="917:31" pos:end="917:42"><name pos:start="917:31" pos:end="917:40">chroma_idx</name><operator pos:start="917:41" pos:end="917:41">&lt;</operator><literal type="number" pos:start="917:42" pos:end="917:42">2</literal></expr>;</condition> <incr pos:start="917:45" pos:end="917:56"><expr pos:start="917:45" pos:end="917:56"><name pos:start="917:45" pos:end="917:54">chroma_idx</name><operator pos:start="917:55" pos:end="917:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="919:17" pos:end="923:17"><block_content pos:start="919:17" pos:end="923:17">

                <if_stmt pos:start="919:17" pos:end="923:17"><if pos:start="919:17" pos:end="923:17">if<condition pos:start="919:19" pos:end="919:126">( <expr pos:start="919:21" pos:end="919:125"><call pos:start="919:21" pos:end="919:121"><name pos:start="919:21" pos:end="919:35">decode_residual</name><argument_list pos:start="919:36" pos:end="919:121">(<argument pos:start="919:37" pos:end="919:37"><expr pos:start="919:37" pos:end="919:37"><name pos:start="919:37" pos:end="919:37">h</name></expr></argument>, <argument pos:start="919:40" pos:end="919:41"><expr pos:start="919:40" pos:end="919:41"><name pos:start="919:40" pos:end="919:41">gb</name></expr></argument>, <argument pos:start="919:44" pos:end="919:72"><expr pos:start="919:44" pos:end="919:72"><name pos:start="919:44" pos:end="919:48"><name pos:start="919:44" pos:end="919:44">h</name><operator pos:start="919:45" pos:end="919:46">-&gt;</operator><name pos:start="919:47" pos:end="919:48">mb</name></name> <operator pos:start="919:50" pos:end="919:50">+</operator> <literal type="number" pos:start="919:52" pos:end="919:56">256</literal> <operator pos:start="919:56" pos:end="919:56">+</operator> <literal type="number" pos:start="919:58" pos:end="919:59">16</literal><operator pos:start="919:60" pos:end="919:60">*</operator><literal type="number" pos:start="919:61" pos:end="919:61">4</literal><operator pos:start="919:62" pos:end="919:62">*</operator><name pos:start="919:63" pos:end="919:72">chroma_idx</name></expr></argument>, <argument pos:start="919:75" pos:end="919:95"><expr pos:start="919:75" pos:end="919:95"><name pos:start="919:75" pos:end="919:95">CHROMA_DC_BLOCK_INDEX</name></expr></argument>, <argument pos:start="919:98" pos:end="919:111"><expr pos:start="919:98" pos:end="919:111"><name pos:start="919:98" pos:end="919:111">chroma_dc_scan</name></expr></argument>, <argument pos:start="919:114" pos:end="919:117"><expr pos:start="919:114" pos:end="919:117"><name pos:start="919:114" pos:end="919:117">NULL</name></expr></argument>, <argument pos:start="919:120" pos:end="919:120"><expr pos:start="919:120" pos:end="919:120"><literal type="number" pos:start="919:120" pos:end="919:120">4</literal></expr></argument>)</argument_list></call> <operator pos:start="919:123" pos:end="919:123">&lt;</operator> <literal type="number" pos:start="919:125" pos:end="919:125">0</literal></expr>)</condition><block pos:start="919:127" pos:end="923:17">{<block_content pos:start="921:21" pos:end="921:30">

                    <return pos:start="921:21" pos:end="921:30">return <expr pos:start="921:28" pos:end="921:29"><operator pos:start="921:28" pos:end="921:28">-</operator><literal type="number" pos:start="921:29" pos:end="921:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="929:9" pos:end="957:9"><if pos:start="929:9" pos:end="949:9">if<condition pos:start="929:11" pos:end="929:20">(<expr pos:start="929:12" pos:end="929:19"><name pos:start="929:12" pos:end="929:14">cbp</name><operator pos:start="929:15" pos:end="929:15">&amp;</operator><literal type="number" pos:start="929:16" pos:end="929:19">0x20</literal></expr>)</condition><block pos:start="929:21" pos:end="949:9">{<block_content pos:start="931:13" pos:end="947:13">

            <for pos:start="931:13" pos:end="947:13">for<control pos:start="931:16" pos:end="931:57">(<init pos:start="931:17" pos:end="931:29"><expr pos:start="931:17" pos:end="931:28"><name pos:start="931:17" pos:end="931:26">chroma_idx</name><operator pos:start="931:27" pos:end="931:27">=</operator><literal type="number" pos:start="931:28" pos:end="931:28">0</literal></expr>;</init> <condition pos:start="931:31" pos:end="931:43"><expr pos:start="931:31" pos:end="931:42"><name pos:start="931:31" pos:end="931:40">chroma_idx</name><operator pos:start="931:41" pos:end="931:41">&lt;</operator><literal type="number" pos:start="931:42" pos:end="931:42">2</literal></expr>;</condition> <incr pos:start="931:45" pos:end="931:56"><expr pos:start="931:45" pos:end="931:56"><name pos:start="931:45" pos:end="931:54">chroma_idx</name><operator pos:start="931:55" pos:end="931:56">++</operator></expr></incr>)</control><block pos:start="931:58" pos:end="947:13">{<block_content pos:start="933:17" pos:end="945:17">

                <decl_stmt pos:start="933:17" pos:end="933:125"><decl pos:start="933:17" pos:end="933:124"><type pos:start="933:17" pos:end="933:32"><specifier pos:start="933:17" pos:end="933:21">const</specifier> <name pos:start="933:23" pos:end="933:30">uint32_t</name> <modifier pos:start="933:32" pos:end="933:32">*</modifier></type><name pos:start="933:33" pos:end="933:36">qmul</name> <init pos:start="933:38" pos:end="933:124">= <expr pos:start="933:40" pos:end="933:124"><name pos:start="933:40" pos:end="933:124"><name pos:start="933:40" pos:end="933:40">h</name><operator pos:start="933:41" pos:end="933:42">-&gt;</operator><name pos:start="933:43" pos:end="933:56">dequant4_coeff</name><index pos:start="933:57" pos:end="933:98">[<expr pos:start="933:58" pos:end="933:97"><name pos:start="933:58" pos:end="933:67">chroma_idx</name><operator pos:start="933:68" pos:end="933:68">+</operator><literal type="number" pos:start="933:69" pos:end="933:70">1</literal><operator pos:start="933:70" pos:end="933:70">+</operator><operator pos:start="933:71" pos:end="933:71">(</operator><ternary pos:start="933:72" pos:end="933:96"><condition pos:start="933:72" pos:end="933:92"><expr pos:start="933:72" pos:end="933:90"><call pos:start="933:72" pos:end="933:90"><name pos:start="933:72" pos:end="933:79">IS_INTRA</name><argument_list pos:start="933:80" pos:end="933:90">( <argument pos:start="933:82" pos:end="933:88"><expr pos:start="933:82" pos:end="933:88"><name pos:start="933:82" pos:end="933:88">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="933:94" pos:end="933:94"> <expr pos:start="933:94" pos:end="933:94"><literal type="number" pos:start="933:94" pos:end="933:94">0</literal></expr></then><else pos:start="933:95" pos:end="933:96">:<expr pos:start="933:96" pos:end="933:96"><literal type="number" pos:start="933:96" pos:end="933:96">3</literal></expr></else></ternary><operator pos:start="933:97" pos:end="933:97">)</operator></expr>]</index><index pos:start="933:99" pos:end="933:124">[<expr pos:start="933:100" pos:end="933:123"><name pos:start="933:100" pos:end="933:123"><name pos:start="933:100" pos:end="933:100">h</name><operator pos:start="933:101" pos:end="933:102">-&gt;</operator><name pos:start="933:103" pos:end="933:111">chroma_qp</name><index pos:start="933:112" pos:end="933:123">[<expr pos:start="933:113" pos:end="933:122"><name pos:start="933:113" pos:end="933:122">chroma_idx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <for pos:start="935:17" pos:end="945:17">for<control pos:start="935:20" pos:end="935:43">(<init pos:start="935:21" pos:end="935:27"><expr pos:start="935:21" pos:end="935:26"><name pos:start="935:21" pos:end="935:24">i4x4</name><operator pos:start="935:25" pos:end="935:25">=</operator><literal type="number" pos:start="935:26" pos:end="935:26">0</literal></expr>;</init> <condition pos:start="935:29" pos:end="935:35"><expr pos:start="935:29" pos:end="935:34"><name pos:start="935:29" pos:end="935:32">i4x4</name><operator pos:start="935:33" pos:end="935:33">&lt;</operator><literal type="number" pos:start="935:34" pos:end="935:34">4</literal></expr>;</condition> <incr pos:start="935:37" pos:end="935:42"><expr pos:start="935:37" pos:end="935:42"><name pos:start="935:37" pos:end="935:40">i4x4</name><operator pos:start="935:41" pos:end="935:42">++</operator></expr></incr>)</control><block pos:start="935:44" pos:end="945:17">{<block_content pos:start="937:21" pos:end="943:21">

                    <decl_stmt pos:start="937:21" pos:end="937:62"><decl pos:start="937:21" pos:end="937:61"><type pos:start="937:21" pos:end="937:29"><specifier pos:start="937:21" pos:end="937:25">const</specifier> <name pos:start="937:27" pos:end="937:29">int</name></type> <name pos:start="937:31" pos:end="937:35">index</name><init pos:start="937:36" pos:end="937:61">= <expr pos:start="937:38" pos:end="937:61"><literal type="number" pos:start="937:38" pos:end="937:41">16</literal> <operator pos:start="937:41" pos:end="937:41">+</operator> <literal type="number" pos:start="937:43" pos:end="937:43">4</literal><operator pos:start="937:44" pos:end="937:44">*</operator><name pos:start="937:45" pos:end="937:54">chroma_idx</name> <operator pos:start="937:56" pos:end="937:56">+</operator> <name pos:start="937:58" pos:end="937:61">i4x4</name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="939:21" pos:end="943:21"><if pos:start="939:21" pos:end="943:21">if<condition pos:start="939:23" pos:end="939:96">( <expr pos:start="939:25" pos:end="939:95"><call pos:start="939:25" pos:end="939:91"><name pos:start="939:25" pos:end="939:39">decode_residual</name><argument_list pos:start="939:40" pos:end="939:91">(<argument pos:start="939:41" pos:end="939:41"><expr pos:start="939:41" pos:end="939:41"><name pos:start="939:41" pos:end="939:41">h</name></expr></argument>, <argument pos:start="939:44" pos:end="939:45"><expr pos:start="939:44" pos:end="939:45"><name pos:start="939:44" pos:end="939:45">gb</name></expr></argument>, <argument pos:start="939:48" pos:end="939:63"><expr pos:start="939:48" pos:end="939:63"><name pos:start="939:48" pos:end="939:52"><name pos:start="939:48" pos:end="939:48">h</name><operator pos:start="939:49" pos:end="939:50">-&gt;</operator><name pos:start="939:51" pos:end="939:52">mb</name></name> <operator pos:start="939:54" pos:end="939:54">+</operator> <literal type="number" pos:start="939:56" pos:end="939:57">16</literal><operator pos:start="939:58" pos:end="939:58">*</operator><name pos:start="939:59" pos:end="939:63">index</name></expr></argument>, <argument pos:start="939:66" pos:end="939:70"><expr pos:start="939:66" pos:end="939:70"><name pos:start="939:66" pos:end="939:70">index</name></expr></argument>, <argument pos:start="939:73" pos:end="939:80"><expr pos:start="939:73" pos:end="939:80"><name pos:start="939:73" pos:end="939:76">scan</name> <operator pos:start="939:78" pos:end="939:78">+</operator> <literal type="number" pos:start="939:80" pos:end="939:80">1</literal></expr></argument>, <argument pos:start="939:83" pos:end="939:86"><expr pos:start="939:83" pos:end="939:86"><name pos:start="939:83" pos:end="939:86">qmul</name></expr></argument>, <argument pos:start="939:89" pos:end="939:90"><expr pos:start="939:89" pos:end="939:90"><literal type="number" pos:start="939:89" pos:end="939:90">15</literal></expr></argument>)</argument_list></call> <operator pos:start="939:93" pos:end="939:93">&lt;</operator> <literal type="number" pos:start="939:95" pos:end="939:95">0</literal></expr>)</condition><block pos:start="939:97" pos:end="943:21">{<block_content pos:start="941:25" pos:end="941:34">

                        <return pos:start="941:25" pos:end="941:34">return <expr pos:start="941:32" pos:end="941:33"><operator pos:start="941:32" pos:end="941:32">-</operator><literal type="number" pos:start="941:33" pos:end="941:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="949:10" pos:end="957:9">else<block pos:start="949:14" pos:end="957:9">{<block_content pos:start="951:13" pos:end="955:96">

            <decl_stmt pos:start="951:13" pos:end="951:61"><decl pos:start="951:13" pos:end="951:60"><type pos:start="951:13" pos:end="951:27"><name pos:start="951:13" pos:end="951:19">uint8_t</name> <modifier pos:start="951:21" pos:end="951:21">*</modifier> <specifier pos:start="951:23" pos:end="951:27">const</specifier></type> <name pos:start="951:29" pos:end="951:31">nnz</name><init pos:start="951:32" pos:end="951:60">= <expr pos:start="951:34" pos:end="951:60"><operator pos:start="951:34" pos:end="951:34">&amp;</operator><name pos:start="951:35" pos:end="951:60"><name pos:start="951:35" pos:end="951:35">h</name><operator pos:start="951:36" pos:end="951:37">-&gt;</operator><name pos:start="951:38" pos:end="951:57">non_zero_count_cache</name><index pos:start="951:58" pos:end="951:60">[<expr pos:start="951:59" pos:end="951:59"><literal type="number" pos:start="951:59" pos:end="951:59">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="953:13" pos:end="955:96"><expr pos:start="953:13" pos:end="955:95"><name pos:start="953:13" pos:end="953:30"><name pos:start="953:13" pos:end="953:15">nnz</name><index pos:start="953:16" pos:end="953:30">[ <expr pos:start="953:18" pos:end="953:28"><name pos:start="953:18" pos:end="953:26"><name pos:start="953:18" pos:end="953:22">scan8</name><index pos:start="953:23" pos:end="953:26">[<expr pos:start="953:24" pos:end="953:25"><literal type="number" pos:start="953:24" pos:end="953:25">16</literal></expr>]</index></name><operator pos:start="953:27" pos:end="953:27">+</operator><literal type="number" pos:start="953:28" pos:end="953:28">0</literal></expr> ]</index></name> <operator pos:start="953:32" pos:end="953:32">=</operator> <name pos:start="953:34" pos:end="953:51"><name pos:start="953:34" pos:end="953:36">nnz</name><index pos:start="953:37" pos:end="953:51">[ <expr pos:start="953:39" pos:end="953:49"><name pos:start="953:39" pos:end="953:47"><name pos:start="953:39" pos:end="953:43">scan8</name><index pos:start="953:44" pos:end="953:47">[<expr pos:start="953:45" pos:end="953:46"><literal type="number" pos:start="953:45" pos:end="953:46">16</literal></expr>]</index></name><operator pos:start="953:48" pos:end="953:48">+</operator><literal type="number" pos:start="953:49" pos:end="953:49">1</literal></expr> ]</index></name> <operator pos:start="953:53" pos:end="953:53">=</operator><name pos:start="953:54" pos:end="953:71"><name pos:start="953:54" pos:end="953:56">nnz</name><index pos:start="953:57" pos:end="953:71">[ <expr pos:start="953:59" pos:end="953:69"><name pos:start="953:59" pos:end="953:67"><name pos:start="953:59" pos:end="953:63">scan8</name><index pos:start="953:64" pos:end="953:67">[<expr pos:start="953:65" pos:end="953:66"><literal type="number" pos:start="953:65" pos:end="953:66">16</literal></expr>]</index></name><operator pos:start="953:68" pos:end="953:68">+</operator><literal type="number" pos:start="953:69" pos:end="953:69">8</literal></expr> ]</index></name> <operator pos:start="953:73" pos:end="953:73">=</operator><name pos:start="953:74" pos:end="953:91"><name pos:start="953:74" pos:end="953:76">nnz</name><index pos:start="953:77" pos:end="953:91">[ <expr pos:start="953:79" pos:end="953:89"><name pos:start="953:79" pos:end="953:87"><name pos:start="953:79" pos:end="953:83">scan8</name><index pos:start="953:84" pos:end="953:87">[<expr pos:start="953:85" pos:end="953:86"><literal type="number" pos:start="953:85" pos:end="953:86">16</literal></expr>]</index></name><operator pos:start="953:88" pos:end="953:88">+</operator><literal type="number" pos:start="953:89" pos:end="953:89">9</literal></expr> ]</index></name> <operator pos:start="953:93" pos:end="953:93">=</operator>

            <name pos:start="955:13" pos:end="955:30"><name pos:start="955:13" pos:end="955:15">nnz</name><index pos:start="955:16" pos:end="955:30">[ <expr pos:start="955:18" pos:end="955:28"><name pos:start="955:18" pos:end="955:26"><name pos:start="955:18" pos:end="955:22">scan8</name><index pos:start="955:23" pos:end="955:26">[<expr pos:start="955:24" pos:end="955:25"><literal type="number" pos:start="955:24" pos:end="955:25">20</literal></expr>]</index></name><operator pos:start="955:27" pos:end="955:27">+</operator><literal type="number" pos:start="955:28" pos:end="955:28">0</literal></expr> ]</index></name> <operator pos:start="955:32" pos:end="955:32">=</operator> <name pos:start="955:34" pos:end="955:51"><name pos:start="955:34" pos:end="955:36">nnz</name><index pos:start="955:37" pos:end="955:51">[ <expr pos:start="955:39" pos:end="955:49"><name pos:start="955:39" pos:end="955:47"><name pos:start="955:39" pos:end="955:43">scan8</name><index pos:start="955:44" pos:end="955:47">[<expr pos:start="955:45" pos:end="955:46"><literal type="number" pos:start="955:45" pos:end="955:46">20</literal></expr>]</index></name><operator pos:start="955:48" pos:end="955:48">+</operator><literal type="number" pos:start="955:49" pos:end="955:49">1</literal></expr> ]</index></name> <operator pos:start="955:53" pos:end="955:53">=</operator><name pos:start="955:54" pos:end="955:71"><name pos:start="955:54" pos:end="955:56">nnz</name><index pos:start="955:57" pos:end="955:71">[ <expr pos:start="955:59" pos:end="955:69"><name pos:start="955:59" pos:end="955:67"><name pos:start="955:59" pos:end="955:63">scan8</name><index pos:start="955:64" pos:end="955:67">[<expr pos:start="955:65" pos:end="955:66"><literal type="number" pos:start="955:65" pos:end="955:66">20</literal></expr>]</index></name><operator pos:start="955:68" pos:end="955:68">+</operator><literal type="number" pos:start="955:69" pos:end="955:69">8</literal></expr> ]</index></name> <operator pos:start="955:73" pos:end="955:73">=</operator><name pos:start="955:74" pos:end="955:91"><name pos:start="955:74" pos:end="955:76">nnz</name><index pos:start="955:77" pos:end="955:91">[ <expr pos:start="955:79" pos:end="955:89"><name pos:start="955:79" pos:end="955:87"><name pos:start="955:79" pos:end="955:83">scan8</name><index pos:start="955:84" pos:end="955:87">[<expr pos:start="955:85" pos:end="955:86"><literal type="number" pos:start="955:85" pos:end="955:86">20</literal></expr>]</index></name><operator pos:start="955:88" pos:end="955:88">+</operator><literal type="number" pos:start="955:89" pos:end="955:89">9</literal></expr> ]</index></name> <operator pos:start="955:93" pos:end="955:93">=</operator> <literal type="number" pos:start="955:95" pos:end="955:95">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="959:6" pos:end="969:5">else<block pos:start="959:10" pos:end="969:5">{<block_content pos:start="961:9" pos:end="967:92">

        <decl_stmt pos:start="961:9" pos:end="961:57"><decl pos:start="961:9" pos:end="961:56"><type pos:start="961:9" pos:end="961:23"><name pos:start="961:9" pos:end="961:15">uint8_t</name> <modifier pos:start="961:17" pos:end="961:17">*</modifier> <specifier pos:start="961:19" pos:end="961:23">const</specifier></type> <name pos:start="961:25" pos:end="961:27">nnz</name><init pos:start="961:28" pos:end="961:56">= <expr pos:start="961:30" pos:end="961:56"><operator pos:start="961:30" pos:end="961:30">&amp;</operator><name pos:start="961:31" pos:end="961:56"><name pos:start="961:31" pos:end="961:31">h</name><operator pos:start="961:32" pos:end="961:33">-&gt;</operator><name pos:start="961:34" pos:end="961:53">non_zero_count_cache</name><index pos:start="961:54" pos:end="961:56">[<expr pos:start="961:55" pos:end="961:55"><literal type="number" pos:start="961:55" pos:end="961:55">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="963:9" pos:end="963:54"><expr pos:start="963:9" pos:end="963:53"><call pos:start="963:9" pos:end="963:53"><name pos:start="963:9" pos:end="963:22">fill_rectangle</name><argument_list pos:start="963:23" pos:end="963:53">(<argument pos:start="963:24" pos:end="963:37"><expr pos:start="963:24" pos:end="963:37"><operator pos:start="963:24" pos:end="963:24">&amp;</operator><name pos:start="963:25" pos:end="963:37"><name pos:start="963:25" pos:end="963:27">nnz</name><index pos:start="963:28" pos:end="963:37">[<expr pos:start="963:29" pos:end="963:36"><name pos:start="963:29" pos:end="963:36"><name pos:start="963:29" pos:end="963:33">scan8</name><index pos:start="963:34" pos:end="963:36">[<expr pos:start="963:35" pos:end="963:35"><literal type="number" pos:start="963:35" pos:end="963:35">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="963:40" pos:end="963:40"><expr pos:start="963:40" pos:end="963:40"><literal type="number" pos:start="963:40" pos:end="963:40">4</literal></expr></argument>, <argument pos:start="963:43" pos:end="963:43"><expr pos:start="963:43" pos:end="963:43"><literal type="number" pos:start="963:43" pos:end="963:43">4</literal></expr></argument>, <argument pos:start="963:46" pos:end="963:46"><expr pos:start="963:46" pos:end="963:46"><literal type="number" pos:start="963:46" pos:end="963:46">8</literal></expr></argument>, <argument pos:start="963:49" pos:end="963:49"><expr pos:start="963:49" pos:end="963:49"><literal type="number" pos:start="963:49" pos:end="963:49">0</literal></expr></argument>, <argument pos:start="963:52" pos:end="963:52"><expr pos:start="963:52" pos:end="963:52"><literal type="number" pos:start="963:52" pos:end="963:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="965:9" pos:end="967:92"><expr pos:start="965:9" pos:end="967:91"><name pos:start="965:9" pos:end="965:26"><name pos:start="965:9" pos:end="965:11">nnz</name><index pos:start="965:12" pos:end="965:26">[ <expr pos:start="965:14" pos:end="965:24"><name pos:start="965:14" pos:end="965:22"><name pos:start="965:14" pos:end="965:18">scan8</name><index pos:start="965:19" pos:end="965:22">[<expr pos:start="965:20" pos:end="965:21"><literal type="number" pos:start="965:20" pos:end="965:21">16</literal></expr>]</index></name><operator pos:start="965:23" pos:end="965:23">+</operator><literal type="number" pos:start="965:24" pos:end="965:24">0</literal></expr> ]</index></name> <operator pos:start="965:28" pos:end="965:28">=</operator> <name pos:start="965:30" pos:end="965:47"><name pos:start="965:30" pos:end="965:32">nnz</name><index pos:start="965:33" pos:end="965:47">[ <expr pos:start="965:35" pos:end="965:45"><name pos:start="965:35" pos:end="965:43"><name pos:start="965:35" pos:end="965:39">scan8</name><index pos:start="965:40" pos:end="965:43">[<expr pos:start="965:41" pos:end="965:42"><literal type="number" pos:start="965:41" pos:end="965:42">16</literal></expr>]</index></name><operator pos:start="965:44" pos:end="965:44">+</operator><literal type="number" pos:start="965:45" pos:end="965:45">1</literal></expr> ]</index></name> <operator pos:start="965:49" pos:end="965:49">=</operator><name pos:start="965:50" pos:end="965:67"><name pos:start="965:50" pos:end="965:52">nnz</name><index pos:start="965:53" pos:end="965:67">[ <expr pos:start="965:55" pos:end="965:65"><name pos:start="965:55" pos:end="965:63"><name pos:start="965:55" pos:end="965:59">scan8</name><index pos:start="965:60" pos:end="965:63">[<expr pos:start="965:61" pos:end="965:62"><literal type="number" pos:start="965:61" pos:end="965:62">16</literal></expr>]</index></name><operator pos:start="965:64" pos:end="965:64">+</operator><literal type="number" pos:start="965:65" pos:end="965:65">8</literal></expr> ]</index></name> <operator pos:start="965:69" pos:end="965:69">=</operator><name pos:start="965:70" pos:end="965:87"><name pos:start="965:70" pos:end="965:72">nnz</name><index pos:start="965:73" pos:end="965:87">[ <expr pos:start="965:75" pos:end="965:85"><name pos:start="965:75" pos:end="965:83"><name pos:start="965:75" pos:end="965:79">scan8</name><index pos:start="965:80" pos:end="965:83">[<expr pos:start="965:81" pos:end="965:82"><literal type="number" pos:start="965:81" pos:end="965:82">16</literal></expr>]</index></name><operator pos:start="965:84" pos:end="965:84">+</operator><literal type="number" pos:start="965:85" pos:end="965:85">9</literal></expr> ]</index></name> <operator pos:start="965:89" pos:end="965:89">=</operator>

        <name pos:start="967:9" pos:end="967:26"><name pos:start="967:9" pos:end="967:11">nnz</name><index pos:start="967:12" pos:end="967:26">[ <expr pos:start="967:14" pos:end="967:24"><name pos:start="967:14" pos:end="967:22"><name pos:start="967:14" pos:end="967:18">scan8</name><index pos:start="967:19" pos:end="967:22">[<expr pos:start="967:20" pos:end="967:21"><literal type="number" pos:start="967:20" pos:end="967:21">20</literal></expr>]</index></name><operator pos:start="967:23" pos:end="967:23">+</operator><literal type="number" pos:start="967:24" pos:end="967:24">0</literal></expr> ]</index></name> <operator pos:start="967:28" pos:end="967:28">=</operator> <name pos:start="967:30" pos:end="967:47"><name pos:start="967:30" pos:end="967:32">nnz</name><index pos:start="967:33" pos:end="967:47">[ <expr pos:start="967:35" pos:end="967:45"><name pos:start="967:35" pos:end="967:43"><name pos:start="967:35" pos:end="967:39">scan8</name><index pos:start="967:40" pos:end="967:43">[<expr pos:start="967:41" pos:end="967:42"><literal type="number" pos:start="967:41" pos:end="967:42">20</literal></expr>]</index></name><operator pos:start="967:44" pos:end="967:44">+</operator><literal type="number" pos:start="967:45" pos:end="967:45">1</literal></expr> ]</index></name> <operator pos:start="967:49" pos:end="967:49">=</operator><name pos:start="967:50" pos:end="967:67"><name pos:start="967:50" pos:end="967:52">nnz</name><index pos:start="967:53" pos:end="967:67">[ <expr pos:start="967:55" pos:end="967:65"><name pos:start="967:55" pos:end="967:63"><name pos:start="967:55" pos:end="967:59">scan8</name><index pos:start="967:60" pos:end="967:63">[<expr pos:start="967:61" pos:end="967:62"><literal type="number" pos:start="967:61" pos:end="967:62">20</literal></expr>]</index></name><operator pos:start="967:64" pos:end="967:64">+</operator><literal type="number" pos:start="967:65" pos:end="967:65">8</literal></expr> ]</index></name> <operator pos:start="967:69" pos:end="967:69">=</operator><name pos:start="967:70" pos:end="967:87"><name pos:start="967:70" pos:end="967:72">nnz</name><index pos:start="967:73" pos:end="967:87">[ <expr pos:start="967:75" pos:end="967:85"><name pos:start="967:75" pos:end="967:83"><name pos:start="967:75" pos:end="967:79">scan8</name><index pos:start="967:80" pos:end="967:83">[<expr pos:start="967:81" pos:end="967:82"><literal type="number" pos:start="967:81" pos:end="967:82">20</literal></expr>]</index></name><operator pos:start="967:84" pos:end="967:84">+</operator><literal type="number" pos:start="967:85" pos:end="967:85">9</literal></expr> ]</index></name> <operator pos:start="967:89" pos:end="967:89">=</operator> <literal type="number" pos:start="967:91" pos:end="967:91">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="971:5" pos:end="971:54"><expr pos:start="971:5" pos:end="971:53"><name pos:start="971:5" pos:end="971:42"><name pos:start="971:5" pos:end="971:5">s</name><operator pos:start="971:6" pos:end="971:7">-&gt;</operator><name pos:start="971:8" pos:end="971:22">current_picture</name><operator pos:start="971:23" pos:end="971:23">.</operator><name pos:start="971:24" pos:end="971:35">qscale_table</name><index pos:start="971:36" pos:end="971:42">[<expr pos:start="971:37" pos:end="971:41"><name pos:start="971:37" pos:end="971:41">mb_xy</name></expr>]</index></name><operator pos:start="971:43" pos:end="971:43">=</operator> <name pos:start="971:45" pos:end="971:53"><name pos:start="971:45" pos:end="971:45">s</name><operator pos:start="971:46" pos:end="971:47">-&gt;</operator><name pos:start="971:48" pos:end="971:53">qscale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="973:5" pos:end="973:33"><expr pos:start="973:5" pos:end="973:32"><call pos:start="973:5" pos:end="973:32"><name pos:start="973:5" pos:end="973:29">write_back_non_zero_count</name><argument_list pos:start="973:30" pos:end="973:32">(<argument pos:start="973:31" pos:end="973:31"><expr pos:start="973:31" pos:end="973:31"><name pos:start="973:31" pos:end="973:31">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="977:5" pos:end="983:5"><if pos:start="977:5" pos:end="983:5">if<condition pos:start="977:7" pos:end="977:16">(<expr pos:start="977:8" pos:end="977:15"><name pos:start="977:8" pos:end="977:15">MB_MBAFF</name></expr>)</condition><block pos:start="977:17" pos:end="983:5">{<block_content pos:start="979:9" pos:end="981:30">

        <expr_stmt pos:start="979:9" pos:end="979:30"><expr pos:start="979:9" pos:end="979:29"><name pos:start="979:9" pos:end="979:23"><name pos:start="979:9" pos:end="979:9">h</name><operator pos:start="979:10" pos:end="979:11">-&gt;</operator><name pos:start="979:12" pos:end="979:20">ref_count</name><index pos:start="979:21" pos:end="979:23">[<expr pos:start="979:22" pos:end="979:22"><literal type="number" pos:start="979:22" pos:end="979:22">0</literal></expr>]</index></name> <operator pos:start="979:25" pos:end="979:27">&gt;&gt;=</operator> <literal type="number" pos:start="979:29" pos:end="979:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="981:9" pos:end="981:30"><expr pos:start="981:9" pos:end="981:29"><name pos:start="981:9" pos:end="981:23"><name pos:start="981:9" pos:end="981:9">h</name><operator pos:start="981:10" pos:end="981:11">-&gt;</operator><name pos:start="981:12" pos:end="981:20">ref_count</name><index pos:start="981:21" pos:end="981:23">[<expr pos:start="981:22" pos:end="981:22"><literal type="number" pos:start="981:22" pos:end="981:22">1</literal></expr>]</index></name> <operator pos:start="981:25" pos:end="981:27">&gt;&gt;=</operator> <literal type="number" pos:start="981:29" pos:end="981:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="987:5" pos:end="987:13">return <expr pos:start="987:12" pos:end="987:12"><literal type="number" pos:start="987:12" pos:end="987:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
