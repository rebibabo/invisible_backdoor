<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15212.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="1:91">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">got_frame</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:90"><decl pos:start="1:76" pos:end="1:90"><type pos:start="1:76" pos:end="1:90"><name pos:start="1:76" pos:end="1:83">AVPacket</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier></type><name pos:start="1:86" pos:end="1:90">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="233:1">{<block_content pos:start="5:5" pos:end="231:23">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVFrame</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">frame</name> <init pos:start="5:20" pos:end="5:25">= <expr pos:start="5:22" pos:end="5:25"><name pos:start="5:22" pos:end="5:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:17">DxaDecContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier> <specifier pos:start="7:21" pos:end="7:25">const</specifier></type> <name pos:start="7:27" pos:end="7:27">c</name> <init pos:start="7:29" pos:end="7:46">= <expr pos:start="7:31" pos:end="7:46"><name pos:start="7:31" pos:end="7:46"><name pos:start="7:31" pos:end="7:35">avctx</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:19">outptr</name></decl>, <decl pos:start="9:22" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:28">srcptr</name></decl>, <decl pos:start="9:31" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:37">tmpptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:23">dsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>, <decl pos:start="13:15" pos:end="13:19"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:19">compr</name></decl>, <decl pos:start="13:22" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:22" pos:end="13:24">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">stride</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">pc</name> <init pos:start="17:12" pos:end="17:14">= <expr pos:start="17:14" pos:end="17:14"><literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18">GetByteContext</name></type> <name pos:start="19:20" pos:end="19:21">gb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:52"><expr pos:start="23:5" pos:end="23:51"><call pos:start="23:5" pos:end="23:51"><name pos:start="23:5" pos:end="23:20">bytestream2_init</name><argument_list pos:start="23:21" pos:end="23:51">(<argument pos:start="23:22" pos:end="23:24"><expr pos:start="23:22" pos:end="23:24"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:24">gb</name></expr></argument>, <argument pos:start="23:27" pos:end="23:37"><expr pos:start="23:27" pos:end="23:37"><name pos:start="23:27" pos:end="23:37"><name pos:start="23:27" pos:end="23:31">avpkt</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:37">data</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:50"><expr pos:start="23:40" pos:end="23:50"><name pos:start="23:40" pos:end="23:50"><name pos:start="23:40" pos:end="23:44">avpkt</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:51">/* make the palette available on the way out */</comment>

    <if_stmt pos:start="29:5" pos:end="41:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:61">(<expr pos:start="29:9" pos:end="29:60"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:29">bytestream2_peek_le32</name><argument_list pos:start="29:30" pos:end="29:34">(<argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="29:36" pos:end="29:37">==</operator> <call pos:start="29:39" pos:end="29:60"><name pos:start="29:39" pos:end="29:43">MKTAG</name><argument_list pos:start="29:44" pos:end="29:60">(<argument pos:start="29:45" pos:end="29:47"><expr pos:start="29:45" pos:end="29:47"><literal type="char" pos:start="29:45" pos:end="29:47">'C'</literal></expr></argument>,<argument pos:start="29:49" pos:end="29:51"><expr pos:start="29:49" pos:end="29:51"><literal type="char" pos:start="29:49" pos:end="29:51">'M'</literal></expr></argument>,<argument pos:start="29:53" pos:end="29:55"><expr pos:start="29:53" pos:end="29:55"><literal type="char" pos:start="29:53" pos:end="29:55">'A'</literal></expr></argument>,<argument pos:start="29:57" pos:end="29:59"><expr pos:start="29:57" pos:end="29:59"><literal type="char" pos:start="29:57" pos:end="29:59">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:63" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:15">

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><call pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:24">bytestream2_skip</name><argument_list pos:start="31:25" pos:end="31:32">(<argument pos:start="31:26" pos:end="31:28"><expr pos:start="31:26" pos:end="31:28"><operator pos:start="31:26" pos:end="31:26">&amp;</operator><name pos:start="31:27" pos:end="31:28">gb</name></expr></argument>, <argument pos:start="31:31" pos:end="31:31"><expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="33:9" pos:end="37:9">for<control pos:start="33:12" pos:end="33:32">(<init pos:start="33:13" pos:end="33:18"><expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:13">i</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</init> <condition pos:start="33:20" pos:end="33:27"><expr pos:start="33:20" pos:end="33:26"><name pos:start="33:20" pos:end="33:20">i</name> <operator pos:start="33:22" pos:end="33:22">&lt;</operator> <literal type="number" pos:start="33:24" pos:end="33:26">256</literal></expr>;</condition> <incr pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:29">i</name><operator pos:start="33:30" pos:end="33:31">++</operator></expr></incr>)</control><block pos:start="33:33" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:64">

            <expr_stmt pos:start="35:13" pos:end="35:64"><expr pos:start="35:13" pos:end="35:63"><name pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:13">c</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">pal</name><index pos:start="35:19" pos:end="35:21">[<expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">i</name></expr>]</index></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <literal type="number" pos:start="35:25" pos:end="35:29">0xFFU</literal> <operator pos:start="35:31" pos:end="35:32">&lt;&lt;</operator> <literal type="number" pos:start="35:34" pos:end="35:35">24</literal> <operator pos:start="35:37" pos:end="35:37">|</operator> <call pos:start="35:39" pos:end="35:63"><name pos:start="35:39" pos:end="35:58">bytestream2_get_be24</name><argument_list pos:start="35:59" pos:end="35:63">(<argument pos:start="35:60" pos:end="35:62"><expr pos:start="35:60" pos:end="35:62"><operator pos:start="35:60" pos:end="35:60">&amp;</operator><name pos:start="35:61" pos:end="35:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="39:9" pos:end="39:15"><expr pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:10">pc</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="47:19"><if pos:start="45:5" pos:end="47:19">if <condition pos:start="45:8" pos:end="45:72">(<expr pos:start="45:9" pos:end="45:71"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:12">ret</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:66"><name pos:start="45:16" pos:end="45:28">ff_get_buffer</name><argument_list pos:start="45:29" pos:end="45:66">(<argument pos:start="45:30" pos:end="45:34"><expr pos:start="45:30" pos:end="45:34"><name pos:start="45:30" pos:end="45:34">avctx</name></expr></argument>, <argument pos:start="45:37" pos:end="45:41"><expr pos:start="45:37" pos:end="45:41"><name pos:start="45:37" pos:end="45:41">frame</name></expr></argument>, <argument pos:start="45:44" pos:end="45:65"><expr pos:start="45:44" pos:end="45:65"><name pos:start="45:44" pos:end="45:65">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="45:67" pos:end="45:67">)</operator> <operator pos:start="45:69" pos:end="45:69">&lt;</operator> <literal type="number" pos:start="45:71" pos:end="45:71">0</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:19"><block_content pos:start="47:9" pos:end="47:19">

        <return pos:start="47:9" pos:end="47:19">return <expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:10">memcpy</name><argument_list pos:start="49:11" pos:end="49:50">(<argument pos:start="49:12" pos:end="49:25"><expr pos:start="49:12" pos:end="49:25"><name pos:start="49:12" pos:end="49:25"><name pos:start="49:12" pos:end="49:16">frame</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:22">data</name><index pos:start="49:23" pos:end="49:25">[<expr pos:start="49:24" pos:end="49:24"><literal type="number" pos:start="49:24" pos:end="49:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:28">c</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:33">pal</name></name></expr></argument>, <argument pos:start="49:36" pos:end="49:49"><expr pos:start="49:36" pos:end="49:49"><name pos:start="49:36" pos:end="49:49">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:36"><expr pos:start="51:5" pos:end="51:35"><name pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:9">frame</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:30">palette_has_changed</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <name pos:start="51:34" pos:end="51:35">pc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:10">outptr</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:27"><name pos:start="55:14" pos:end="55:18">frame</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:24">data</name><index pos:start="55:25" pos:end="55:27">[<expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:10">srcptr</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:26"><name pos:start="57:14" pos:end="57:14">c</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:26">decomp_buf</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:30"><expr pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:10">tmpptr</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:29"><name pos:start="59:14" pos:end="59:14">c</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:20">prev</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:26">data</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:10">stride</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <name pos:start="61:14" pos:end="61:31"><name pos:start="61:14" pos:end="61:18">frame</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:28">linesize</name><index pos:start="61:29" pos:end="61:31">[<expr pos:start="61:30" pos:end="61:30"><literal type="number" pos:start="61:30" pos:end="61:30">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="71:42"><if pos:start="65:5" pos:end="67:19">if <condition pos:start="65:8" pos:end="65:60">(<expr pos:start="65:9" pos:end="65:59"><call pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:28">bytestream2_get_le32</name><argument_list pos:start="65:29" pos:end="65:33">(<argument pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="65:35" pos:end="65:36">==</operator> <call pos:start="65:38" pos:end="65:59"><name pos:start="65:38" pos:end="65:42">MKTAG</name><argument_list pos:start="65:43" pos:end="65:59">(<argument pos:start="65:44" pos:end="65:46"><expr pos:start="65:44" pos:end="65:46"><literal type="char" pos:start="65:44" pos:end="65:46">'N'</literal></expr></argument>,<argument pos:start="65:48" pos:end="65:50"><expr pos:start="65:48" pos:end="65:50"><literal type="char" pos:start="65:48" pos:end="65:50">'U'</literal></expr></argument>,<argument pos:start="65:52" pos:end="65:54"><expr pos:start="65:52" pos:end="65:54"><literal type="char" pos:start="65:52" pos:end="65:54">'L'</literal></expr></argument>,<argument pos:start="65:56" pos:end="65:58"><expr pos:start="65:56" pos:end="65:58"><literal type="char" pos:start="65:56" pos:end="65:58">'L'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:19"><block_content pos:start="67:9" pos:end="67:19">

        <expr_stmt pos:start="67:9" pos:end="67:19"><expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:13">compr</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <operator pos:start="67:17" pos:end="67:17">-</operator><literal type="number" pos:start="67:18" pos:end="67:18">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="69:5" pos:end="71:42">else<block type="pseudo" pos:start="71:9" pos:end="71:42"><block_content pos:start="71:9" pos:end="71:42">

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:13">compr</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:41"><name pos:start="71:17" pos:end="71:36">bytestream2_get_byte</name><argument_list pos:start="71:37" pos:end="71:41">(<argument pos:start="71:38" pos:end="71:40"><expr pos:start="71:38" pos:end="71:40"><operator pos:start="71:38" pos:end="71:38">&amp;</operator><name pos:start="71:39" pos:end="71:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:21"><expr pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:9">dsize</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <name pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:13">c</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:20">dsize</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="93:5"><if pos:start="77:5" pos:end="93:5">if <condition pos:start="77:8" pos:end="77:34">(<expr pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:13">compr</name> <operator pos:start="77:15" pos:end="77:16">!=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">4</literal> <operator pos:start="77:20" pos:end="77:21">&amp;&amp;</operator> <name pos:start="77:23" pos:end="77:27">compr</name> <operator pos:start="77:29" pos:end="77:30">!=</operator> <operator pos:start="77:32" pos:end="77:32">-</operator><literal type="number" pos:start="77:33" pos:end="77:33">1</literal></expr>)</condition> <block pos:start="77:36" pos:end="93:5">{<block_content pos:start="79:9" pos:end="91:61">

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><call pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:24">bytestream2_skip</name><argument_list pos:start="79:25" pos:end="79:32">(<argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:28">gb</name></expr></argument>, <argument pos:start="79:31" pos:end="79:31"><expr pos:start="79:31" pos:end="79:31"><literal type="number" pos:start="79:31" pos:end="79:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="83:64">(<expr pos:start="81:13" pos:end="83:63"><call pos:start="81:13" pos:end="83:55"><name pos:start="81:13" pos:end="81:22">uncompress</name><argument_list pos:start="81:23" pos:end="83:55">(<argument pos:start="81:24" pos:end="81:36"><expr pos:start="81:24" pos:end="81:36"><name pos:start="81:24" pos:end="81:36"><name pos:start="81:24" pos:end="81:24">c</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:36">decomp_buf</name></name></expr></argument>, <argument pos:start="81:39" pos:end="81:44"><expr pos:start="81:39" pos:end="81:44"><operator pos:start="81:39" pos:end="81:39">&amp;</operator><name pos:start="81:40" pos:end="81:44">dsize</name></expr></argument>, <argument pos:start="81:47" pos:end="81:81"><expr pos:start="81:47" pos:end="81:81"><name pos:start="81:47" pos:end="81:57"><name pos:start="81:47" pos:end="81:51">avpkt</name><operator pos:start="81:52" pos:end="81:53">-&gt;</operator><name pos:start="81:54" pos:end="81:57">data</name></name> <operator pos:start="81:59" pos:end="81:59">+</operator> <call pos:start="81:61" pos:end="81:81"><name pos:start="81:61" pos:end="81:76">bytestream2_tell</name><argument_list pos:start="81:77" pos:end="81:81">(<argument pos:start="81:78" pos:end="81:80"><expr pos:start="81:78" pos:end="81:80"><operator pos:start="81:78" pos:end="81:78">&amp;</operator><name pos:start="81:79" pos:end="81:80">gb</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:54"><expr pos:start="83:24" pos:end="83:54"><call pos:start="83:24" pos:end="83:54"><name pos:start="83:24" pos:end="83:49">bytestream2_get_bytes_left</name><argument_list pos:start="83:50" pos:end="83:54">(<argument pos:start="83:51" pos:end="83:53"><expr pos:start="83:51" pos:end="83:53"><operator pos:start="83:51" pos:end="83:51">&amp;</operator><name pos:start="83:52" pos:end="83:53">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="83:57" pos:end="83:58">!=</operator> <name pos:start="83:60" pos:end="83:63">Z_OK</name></expr>)</condition> <block pos:start="83:66" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:35">

            <expr_stmt pos:start="85:13" pos:end="85:64"><expr pos:start="85:13" pos:end="85:63"><call pos:start="85:13" pos:end="85:63"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="85:63">(<argument pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:24">avctx</name></expr></argument>, <argument pos:start="85:27" pos:end="85:38"><expr pos:start="85:27" pos:end="85:38"><name pos:start="85:27" pos:end="85:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:41" pos:end="85:62"><expr pos:start="85:41" pos:end="85:62"><literal type="string" pos:start="85:41" pos:end="85:62">"Uncompress failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:35">return <expr pos:start="87:20" pos:end="87:34"><name pos:start="87:20" pos:end="87:34">AVERROR_UNKNOWN</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:61"><expr pos:start="91:9" pos:end="91:60"><call pos:start="91:9" pos:end="91:60"><name pos:start="91:9" pos:end="91:14">memset</name><argument_list pos:start="91:15" pos:end="91:60">(<argument pos:start="91:16" pos:end="91:36"><expr pos:start="91:16" pos:end="91:36"><name pos:start="91:16" pos:end="91:28"><name pos:start="91:16" pos:end="91:16">c</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:28">decomp_buf</name></name> <operator pos:start="91:30" pos:end="91:30">+</operator> <name pos:start="91:32" pos:end="91:36">dsize</name></expr></argument>, <argument pos:start="91:39" pos:end="91:39"><expr pos:start="91:39" pos:end="91:39"><literal type="number" pos:start="91:39" pos:end="91:39">0</literal></expr></argument>, <argument pos:start="91:42" pos:end="91:59"><expr pos:start="91:42" pos:end="91:59"><name pos:start="91:42" pos:end="91:59">DECOMP_BUF_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="99:80"><if pos:start="97:5" pos:end="99:80">if <condition pos:start="97:8" pos:end="97:42">(<expr pos:start="97:9" pos:end="97:41"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:13">avctx</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:20">debug</name></name> <operator pos:start="97:22" pos:end="97:22">&amp;</operator> <name pos:start="97:24" pos:end="97:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:80"><block_content pos:start="99:9" pos:end="99:80">

        <expr_stmt pos:start="99:9" pos:end="99:80"><expr pos:start="99:9" pos:end="99:79"><call pos:start="99:9" pos:end="99:79"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:79">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="99:37" pos:end="99:59"><expr pos:start="99:37" pos:end="99:59"><literal type="string" pos:start="99:37" pos:end="99:59">"compr:%2d, dsize:%d\n"</literal></expr></argument>, <argument pos:start="99:62" pos:end="99:66"><expr pos:start="99:62" pos:end="99:66"><name pos:start="99:62" pos:end="99:66">compr</name></expr></argument>, <argument pos:start="99:69" pos:end="99:78"><expr pos:start="99:69" pos:end="99:78"><operator pos:start="99:69" pos:end="99:69">(</operator><name pos:start="99:70" pos:end="99:72">int</name><operator pos:start="99:73" pos:end="99:73">)</operator><name pos:start="99:74" pos:end="99:78">dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <switch pos:start="103:5" pos:end="213:5">switch<condition pos:start="103:11" pos:end="103:17">(<expr pos:start="103:12" pos:end="103:16"><name pos:start="103:12" pos:end="103:16">compr</name></expr>)</condition><block pos:start="103:18" pos:end="213:5">{<block_content pos:start="105:5" pos:end="211:35">

    <case pos:start="105:5" pos:end="105:12">case <expr pos:start="105:10" pos:end="105:11"><operator pos:start="105:10" pos:end="105:10">-</operator><literal type="number" pos:start="105:11" pos:end="105:11">1</literal></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:29"><expr pos:start="107:9" pos:end="107:28"><name pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:13">frame</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:24">key_frame</name></name> <operator pos:start="107:26" pos:end="107:26">=</operator> <literal type="number" pos:start="107:28" pos:end="107:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:45"><expr pos:start="109:9" pos:end="109:44"><name pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:13">frame</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:24">pict_type</name></name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:44">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="123:9"><if pos:start="111:9" pos:end="113:89">if <condition pos:start="111:12" pos:end="111:29">(<expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:13">c</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:19">prev</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:25">data</name><index pos:start="111:26" pos:end="111:28">[<expr pos:start="111:27" pos:end="111:27"><literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:89"><block_content pos:start="113:13" pos:end="113:89">

            <expr_stmt pos:start="113:13" pos:end="113:89"><expr pos:start="113:13" pos:end="113:88"><call pos:start="113:13" pos:end="113:88"><name pos:start="113:13" pos:end="113:18">memcpy</name><argument_list pos:start="113:19" pos:end="113:88">(<argument pos:start="113:20" pos:end="113:33"><expr pos:start="113:20" pos:end="113:33"><name pos:start="113:20" pos:end="113:33"><name pos:start="113:20" pos:end="113:24">frame</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:30">data</name><index pos:start="113:31" pos:end="113:33">[<expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="113:36" pos:end="113:51"><expr pos:start="113:36" pos:end="113:51"><name pos:start="113:36" pos:end="113:51"><name pos:start="113:36" pos:end="113:36">c</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:42">prev</name><operator pos:start="113:43" pos:end="113:44">-&gt;</operator><name pos:start="113:45" pos:end="113:48">data</name><index pos:start="113:49" pos:end="113:51">[<expr pos:start="113:50" pos:end="113:50"><literal type="number" pos:start="113:50" pos:end="113:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="113:54" pos:end="113:87"><expr pos:start="113:54" pos:end="113:87"><name pos:start="113:54" pos:end="113:71"><name pos:start="113:54" pos:end="113:58">frame</name><operator pos:start="113:59" pos:end="113:60">-&gt;</operator><name pos:start="113:61" pos:end="113:68">linesize</name><index pos:start="113:69" pos:end="113:71">[<expr pos:start="113:70" pos:end="113:70"><literal type="number" pos:start="113:70" pos:end="113:70">0</literal></expr>]</index></name> <operator pos:start="113:73" pos:end="113:73">*</operator> <name pos:start="113:75" pos:end="113:87"><name pos:start="113:75" pos:end="113:79">avctx</name><operator pos:start="113:80" pos:end="113:81">-&gt;</operator><name pos:start="113:82" pos:end="113:87">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="115:9" pos:end="123:9">else<block pos:start="115:13" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:49"> <comment type="line" pos:start="115:15" pos:end="115:62">// Should happen only when first frame is 'NULL'</comment>

            <expr_stmt pos:start="117:13" pos:end="117:74"><expr pos:start="117:13" pos:end="117:73"><call pos:start="117:13" pos:end="117:73"><name pos:start="117:13" pos:end="117:18">memset</name><argument_list pos:start="117:19" pos:end="117:73">(<argument pos:start="117:20" pos:end="117:33"><expr pos:start="117:20" pos:end="117:33"><name pos:start="117:20" pos:end="117:33"><name pos:start="117:20" pos:end="117:24">frame</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:30">data</name><index pos:start="117:31" pos:end="117:33">[<expr pos:start="117:32" pos:end="117:32"><literal type="number" pos:start="117:32" pos:end="117:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="117:36" pos:end="117:36"><expr pos:start="117:36" pos:end="117:36"><literal type="number" pos:start="117:36" pos:end="117:36">0</literal></expr></argument>, <argument pos:start="117:39" pos:end="117:72"><expr pos:start="117:39" pos:end="117:72"><name pos:start="117:39" pos:end="117:56"><name pos:start="117:39" pos:end="117:43">frame</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:53">linesize</name><index pos:start="117:54" pos:end="117:56">[<expr pos:start="117:55" pos:end="117:55"><literal type="number" pos:start="117:55" pos:end="117:55">0</literal></expr>]</index></name> <operator pos:start="117:58" pos:end="117:58">*</operator> <name pos:start="117:60" pos:end="117:72"><name pos:start="117:60" pos:end="117:64">avctx</name><operator pos:start="117:65" pos:end="117:66">-&gt;</operator><name pos:start="117:67" pos:end="117:72">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:33"><expr pos:start="119:13" pos:end="119:32"><name pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:17">frame</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:28">key_frame</name></name> <operator pos:start="119:30" pos:end="119:30">=</operator> <literal type="number" pos:start="119:32" pos:end="119:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:49"><expr pos:start="121:13" pos:end="121:48"><name pos:start="121:13" pos:end="121:28"><name pos:start="121:13" pos:end="121:17">frame</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:28">pict_type</name></name> <operator pos:start="121:30" pos:end="121:30">=</operator> <name pos:start="121:32" pos:end="121:48">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:11">case <expr pos:start="127:10" pos:end="127:10"><literal type="number" pos:start="127:10" pos:end="127:10">2</literal></expr>:</case>

    <case pos:start="129:5" pos:end="129:11">case <expr pos:start="129:10" pos:end="129:10"><literal type="number" pos:start="129:10" pos:end="129:10">4</literal></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:29"><expr pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:13">frame</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:24">key_frame</name></name> <operator pos:start="131:26" pos:end="131:26">=</operator> <literal type="number" pos:start="131:28" pos:end="131:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:45"><expr pos:start="133:9" pos:end="133:44"><name pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:13">frame</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:24">pict_type</name></name> <operator pos:start="133:26" pos:end="133:26">=</operator> <name pos:start="133:28" pos:end="133:44">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

        <for pos:start="135:9" pos:end="143:9">for <control pos:start="135:13" pos:end="135:43">(<init pos:start="135:14" pos:end="135:19"><expr pos:start="135:14" pos:end="135:18"><name pos:start="135:14" pos:end="135:14">j</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>;</init> <condition pos:start="135:21" pos:end="135:38"><expr pos:start="135:21" pos:end="135:37"><name pos:start="135:21" pos:end="135:21">j</name> <operator pos:start="135:23" pos:end="135:23">&lt;</operator> <name pos:start="135:25" pos:end="135:37"><name pos:start="135:25" pos:end="135:29">avctx</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:37">height</name></name></expr>;</condition> <incr pos:start="135:40" pos:end="135:42"><expr pos:start="135:40" pos:end="135:42"><name pos:start="135:40" pos:end="135:40">j</name><operator pos:start="135:41" pos:end="135:42">++</operator></expr></incr>)</control> <block pos:start="135:45" pos:end="143:9">{<block_content pos:start="137:17" pos:end="141:35">

                <expr_stmt pos:start="137:17" pos:end="137:53"><expr pos:start="137:17" pos:end="137:52"><call pos:start="137:17" pos:end="137:52"><name pos:start="137:17" pos:end="137:22">memcpy</name><argument_list pos:start="137:23" pos:end="137:52">(<argument pos:start="137:24" pos:end="137:29"><expr pos:start="137:24" pos:end="137:29"><name pos:start="137:24" pos:end="137:29">outptr</name></expr></argument>, <argument pos:start="137:32" pos:end="137:37"><expr pos:start="137:32" pos:end="137:37"><name pos:start="137:32" pos:end="137:37">srcptr</name></expr></argument>, <argument pos:start="137:40" pos:end="137:51"><expr pos:start="137:40" pos:end="137:51"><name pos:start="137:40" pos:end="137:51"><name pos:start="137:40" pos:end="137:44">avctx</name><operator pos:start="137:45" pos:end="137:46">-&gt;</operator><name pos:start="137:47" pos:end="137:51">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:29"><expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:18">outptr</name> <operator pos:start="139:20" pos:end="139:21">+=</operator> <name pos:start="139:23" pos:end="139:28">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:35"><expr pos:start="141:13" pos:end="141:34"><name pos:start="141:13" pos:end="141:18">srcptr</name> <operator pos:start="141:20" pos:end="141:21">+=</operator> <name pos:start="141:23" pos:end="141:34"><name pos:start="141:23" pos:end="141:27">avctx</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:34">width</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:11">case <expr pos:start="147:10" pos:end="147:10"><literal type="number" pos:start="147:10" pos:end="147:10">3</literal></expr>:</case>

    <case pos:start="149:5" pos:end="149:11">case <expr pos:start="149:10" pos:end="149:10"><literal type="number" pos:start="149:10" pos:end="149:10">5</literal></expr>:</case>

        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:20">(<expr pos:start="151:13" pos:end="151:19"><operator pos:start="151:13" pos:end="151:13">!</operator><name pos:start="151:14" pos:end="151:19">tmpptr</name></expr>)</condition> <block pos:start="151:22" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:43">

            <expr_stmt pos:start="153:13" pos:end="153:70"><expr pos:start="153:13" pos:end="153:69"><call pos:start="153:13" pos:end="153:69"><name pos:start="153:13" pos:end="153:18">av_log</name><argument_list pos:start="153:19" pos:end="153:69">(<argument pos:start="153:20" pos:end="153:24"><expr pos:start="153:20" pos:end="153:24"><name pos:start="153:20" pos:end="153:24">avctx</name></expr></argument>, <argument pos:start="153:27" pos:end="153:38"><expr pos:start="153:27" pos:end="153:38"><name pos:start="153:27" pos:end="153:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:41" pos:end="153:68"><expr pos:start="153:41" pos:end="153:68"><literal type="string" pos:start="153:41" pos:end="153:68">"Missing reference frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="157:43"><if pos:start="155:13" pos:end="157:43">if <condition pos:start="155:16" pos:end="155:56">(<expr pos:start="155:17" pos:end="155:55"><operator pos:start="155:17" pos:end="155:17">!</operator><operator pos:start="155:18" pos:end="155:18">(</operator><name pos:start="155:19" pos:end="155:31"><name pos:start="155:19" pos:end="155:23">avctx</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:31">flags2</name></name> <operator pos:start="155:33" pos:end="155:33">&amp;</operator> <name pos:start="155:35" pos:end="155:54">CODEC_FLAG2_SHOW_ALL</name><operator pos:start="155:55" pos:end="155:55">)</operator></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:43"><block_content pos:start="157:17" pos:end="157:43">

                <return pos:start="157:17" pos:end="157:43">return <expr pos:start="157:24" pos:end="157:42"><name pos:start="157:24" pos:end="157:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:29"><expr pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:24"><name pos:start="161:9" pos:end="161:13">frame</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:24">key_frame</name></name> <operator pos:start="161:26" pos:end="161:26">=</operator> <literal type="number" pos:start="161:28" pos:end="161:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:45"><expr pos:start="163:9" pos:end="163:44"><name pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:13">frame</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:24">pict_type</name></name> <operator pos:start="163:26" pos:end="163:26">=</operator> <name pos:start="163:28" pos:end="163:44">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

        <for pos:start="165:9" pos:end="183:9">for <control pos:start="165:13" pos:end="165:43">(<init pos:start="165:14" pos:end="165:19"><expr pos:start="165:14" pos:end="165:18"><name pos:start="165:14" pos:end="165:14">j</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <literal type="number" pos:start="165:18" pos:end="165:18">0</literal></expr>;</init> <condition pos:start="165:21" pos:end="165:38"><expr pos:start="165:21" pos:end="165:37"><name pos:start="165:21" pos:end="165:21">j</name> <operator pos:start="165:23" pos:end="165:23">&lt;</operator> <name pos:start="165:25" pos:end="165:37"><name pos:start="165:25" pos:end="165:29">avctx</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:37">height</name></name></expr>;</condition> <incr pos:start="165:40" pos:end="165:42"><expr pos:start="165:40" pos:end="165:42"><name pos:start="165:40" pos:end="165:40">j</name><operator pos:start="165:41" pos:end="165:42">++</operator></expr></incr>)</control> <block pos:start="165:45" pos:end="183:9">{<block_content pos:start="167:13" pos:end="181:35">

            <if_stmt pos:start="167:13" pos:end="177:53"><if pos:start="167:13" pos:end="175:13">if<condition pos:start="167:15" pos:end="167:22">(<expr pos:start="167:16" pos:end="167:21"><name pos:start="167:16" pos:end="167:21">tmpptr</name></expr>)</condition><block pos:start="167:23" pos:end="175:13">{<block_content pos:start="169:17" pos:end="173:33">

                <for pos:start="169:17" pos:end="171:54">for<control pos:start="169:20" pos:end="169:49">(<init pos:start="169:21" pos:end="169:26"><expr pos:start="169:21" pos:end="169:25"><name pos:start="169:21" pos:end="169:21">i</name> <operator pos:start="169:23" pos:end="169:23">=</operator> <literal type="number" pos:start="169:25" pos:end="169:25">0</literal></expr>;</init> <condition pos:start="169:28" pos:end="169:44"><expr pos:start="169:28" pos:end="169:43"><name pos:start="169:28" pos:end="169:28">i</name> <operator pos:start="169:30" pos:end="169:30">&lt;</operator> <name pos:start="169:32" pos:end="169:43"><name pos:start="169:32" pos:end="169:36">avctx</name><operator pos:start="169:37" pos:end="169:38">-&gt;</operator><name pos:start="169:39" pos:end="169:43">width</name></name></expr>;</condition> <incr pos:start="169:46" pos:end="169:48"><expr pos:start="169:46" pos:end="169:48"><name pos:start="169:46" pos:end="169:46">i</name><operator pos:start="169:47" pos:end="169:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="171:21" pos:end="171:54"><block_content pos:start="171:21" pos:end="171:54">

                    <expr_stmt pos:start="171:21" pos:end="171:54"><expr pos:start="171:21" pos:end="171:53"><name pos:start="171:21" pos:end="171:29"><name pos:start="171:21" pos:end="171:26">outptr</name><index pos:start="171:27" pos:end="171:29">[<expr pos:start="171:28" pos:end="171:28"><name pos:start="171:28" pos:end="171:28">i</name></expr>]</index></name> <operator pos:start="171:31" pos:end="171:31">=</operator> <name pos:start="171:33" pos:end="171:41"><name pos:start="171:33" pos:end="171:38">srcptr</name><index pos:start="171:39" pos:end="171:41">[<expr pos:start="171:40" pos:end="171:40"><name pos:start="171:40" pos:end="171:40">i</name></expr>]</index></name> <operator pos:start="171:43" pos:end="171:43">^</operator> <name pos:start="171:45" pos:end="171:53"><name pos:start="171:45" pos:end="171:50">tmpptr</name><index pos:start="171:51" pos:end="171:53">[<expr pos:start="171:52" pos:end="171:52"><name pos:start="171:52" pos:end="171:52">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="173:17" pos:end="173:33"><expr pos:start="173:17" pos:end="173:32"><name pos:start="173:17" pos:end="173:22">tmpptr</name> <operator pos:start="173:24" pos:end="173:25">+=</operator> <name pos:start="173:27" pos:end="173:32">stride</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="175:14" pos:end="177:53">else<block type="pseudo" pos:start="177:17" pos:end="177:53"><block_content pos:start="177:17" pos:end="177:53">

                <expr_stmt pos:start="177:17" pos:end="177:53"><expr pos:start="177:17" pos:end="177:52"><call pos:start="177:17" pos:end="177:52"><name pos:start="177:17" pos:end="177:22">memcpy</name><argument_list pos:start="177:23" pos:end="177:52">(<argument pos:start="177:24" pos:end="177:29"><expr pos:start="177:24" pos:end="177:29"><name pos:start="177:24" pos:end="177:29">outptr</name></expr></argument>, <argument pos:start="177:32" pos:end="177:37"><expr pos:start="177:32" pos:end="177:37"><name pos:start="177:32" pos:end="177:37">srcptr</name></expr></argument>, <argument pos:start="177:40" pos:end="177:51"><expr pos:start="177:40" pos:end="177:51"><name pos:start="177:40" pos:end="177:51"><name pos:start="177:40" pos:end="177:44">avctx</name><operator pos:start="177:45" pos:end="177:46">-&gt;</operator><name pos:start="177:47" pos:end="177:51">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:29"><expr pos:start="179:13" pos:end="179:28"><name pos:start="179:13" pos:end="179:18">outptr</name> <operator pos:start="179:20" pos:end="179:21">+=</operator> <name pos:start="179:23" pos:end="179:28">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:35"><expr pos:start="181:13" pos:end="181:34"><name pos:start="181:13" pos:end="181:18">srcptr</name> <operator pos:start="181:20" pos:end="181:21">+=</operator> <name pos:start="181:23" pos:end="181:34"><name pos:start="181:23" pos:end="181:27">avctx</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:34">width</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    <case pos:start="187:5" pos:end="187:12">case <expr pos:start="187:10" pos:end="187:11"><literal type="number" pos:start="187:10" pos:end="187:11">12</literal></expr>:</case> <comment type="line" pos:start="187:14" pos:end="187:30">// ScummVM coding</comment>

    <case pos:start="189:5" pos:end="189:12">case <expr pos:start="189:10" pos:end="189:11"><literal type="number" pos:start="189:10" pos:end="189:11">13</literal></expr>:</case>

        <expr_stmt pos:start="191:9" pos:end="191:29"><expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:13">frame</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:24">key_frame</name></name> <operator pos:start="191:26" pos:end="191:26">=</operator> <literal type="number" pos:start="191:28" pos:end="191:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:45"><expr pos:start="193:9" pos:end="193:44"><name pos:start="193:9" pos:end="193:24"><name pos:start="193:9" pos:end="193:13">frame</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:24">pict_type</name></name> <operator pos:start="193:26" pos:end="193:26">=</operator> <name pos:start="193:28" pos:end="193:44">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:30">(<expr pos:start="195:13" pos:end="195:29"><operator pos:start="195:13" pos:end="195:13">!</operator><name pos:start="195:14" pos:end="195:29"><name pos:start="195:14" pos:end="195:14">c</name><operator pos:start="195:15" pos:end="195:16">-&gt;</operator><name pos:start="195:17" pos:end="195:20">prev</name><operator pos:start="195:21" pos:end="195:22">-&gt;</operator><name pos:start="195:23" pos:end="195:26">data</name><index pos:start="195:27" pos:end="195:29">[<expr pos:start="195:28" pos:end="195:28"><literal type="number" pos:start="195:28" pos:end="195:28">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="195:32" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:39">

            <expr_stmt pos:start="197:13" pos:end="197:69"><expr pos:start="197:13" pos:end="197:68"><call pos:start="197:13" pos:end="197:68"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="197:68">(<argument pos:start="197:20" pos:end="197:24"><expr pos:start="197:20" pos:end="197:24"><name pos:start="197:20" pos:end="197:24">avctx</name></expr></argument>, <argument pos:start="197:27" pos:end="197:38"><expr pos:start="197:27" pos:end="197:38"><name pos:start="197:27" pos:end="197:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:41" pos:end="197:67"><expr pos:start="197:41" pos:end="197:67"><literal type="string" pos:start="197:41" pos:end="197:67">"Missing reference frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="199:13" pos:end="199:39">return <expr pos:start="199:20" pos:end="199:38"><name pos:start="199:20" pos:end="199:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:90"><expr pos:start="203:9" pos:end="203:89"><call pos:start="203:9" pos:end="203:89"><name pos:start="203:9" pos:end="203:17">decode_13</name><argument_list pos:start="203:18" pos:end="203:89">(<argument pos:start="203:19" pos:end="203:23"><expr pos:start="203:19" pos:end="203:23"><name pos:start="203:19" pos:end="203:23">avctx</name></expr></argument>, <argument pos:start="203:26" pos:end="203:26"><expr pos:start="203:26" pos:end="203:26"><name pos:start="203:26" pos:end="203:26">c</name></expr></argument>, <argument pos:start="203:29" pos:end="203:42"><expr pos:start="203:29" pos:end="203:42"><name pos:start="203:29" pos:end="203:42"><name pos:start="203:29" pos:end="203:33">frame</name><operator pos:start="203:34" pos:end="203:35">-&gt;</operator><name pos:start="203:36" pos:end="203:39">data</name><index pos:start="203:40" pos:end="203:42">[<expr pos:start="203:41" pos:end="203:41"><literal type="number" pos:start="203:41" pos:end="203:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:45" pos:end="203:62"><expr pos:start="203:45" pos:end="203:62"><name pos:start="203:45" pos:end="203:62"><name pos:start="203:45" pos:end="203:49">frame</name><operator pos:start="203:50" pos:end="203:51">-&gt;</operator><name pos:start="203:52" pos:end="203:59">linesize</name><index pos:start="203:60" pos:end="203:62">[<expr pos:start="203:61" pos:end="203:61"><literal type="number" pos:start="203:61" pos:end="203:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:65" pos:end="203:70"><expr pos:start="203:65" pos:end="203:70"><name pos:start="203:65" pos:end="203:70">srcptr</name></expr></argument>, <argument pos:start="203:73" pos:end="203:88"><expr pos:start="203:73" pos:end="203:88"><name pos:start="203:73" pos:end="203:88"><name pos:start="203:73" pos:end="203:73">c</name><operator pos:start="203:74" pos:end="203:75">-&gt;</operator><name pos:start="203:76" pos:end="203:79">prev</name><operator pos:start="203:80" pos:end="203:81">-&gt;</operator><name pos:start="203:82" pos:end="203:85">data</name><index pos:start="203:86" pos:end="203:88">[<expr pos:start="203:87" pos:end="203:87"><literal type="number" pos:start="203:87" pos:end="203:87">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="205:9" pos:end="205:14">break;</break>

    <default pos:start="207:5" pos:end="207:12">default:</default>

        <expr_stmt pos:start="209:9" pos:end="209:88"><expr pos:start="209:9" pos:end="209:87"><call pos:start="209:9" pos:end="209:87"><name pos:start="209:9" pos:end="209:14">av_log</name><argument_list pos:start="209:15" pos:end="209:87">(<argument pos:start="209:16" pos:end="209:20"><expr pos:start="209:16" pos:end="209:20"><name pos:start="209:16" pos:end="209:20">avctx</name></expr></argument>, <argument pos:start="209:23" pos:end="209:34"><expr pos:start="209:23" pos:end="209:34"><name pos:start="209:23" pos:end="209:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:37" pos:end="209:79"><expr pos:start="209:37" pos:end="209:79"><literal type="string" pos:start="209:37" pos:end="209:79">"Unknown/unsupported compression type %d\n"</literal></expr></argument>, <argument pos:start="209:82" pos:end="209:86"><expr pos:start="209:82" pos:end="209:86"><name pos:start="209:82" pos:end="209:86">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="211:9" pos:end="211:35">return <expr pos:start="211:16" pos:end="211:34"><name pos:start="211:16" pos:end="211:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="217:5" pos:end="217:28"><expr pos:start="217:5" pos:end="217:27"><call pos:start="217:5" pos:end="217:27"><name pos:start="217:5" pos:end="217:18">av_frame_unref</name><argument_list pos:start="217:19" pos:end="217:27">(<argument pos:start="217:20" pos:end="217:26"><expr pos:start="217:20" pos:end="217:26"><name pos:start="217:20" pos:end="217:26"><name pos:start="217:20" pos:end="217:20">c</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:26">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="221:19"><if pos:start="219:5" pos:end="221:19">if <condition pos:start="219:8" pos:end="219:49">(<expr pos:start="219:9" pos:end="219:48"><operator pos:start="219:9" pos:end="219:9">(</operator><name pos:start="219:10" pos:end="219:12">ret</name> <operator pos:start="219:14" pos:end="219:14">=</operator> <call pos:start="219:16" pos:end="219:43"><name pos:start="219:16" pos:end="219:27">av_frame_ref</name><argument_list pos:start="219:28" pos:end="219:43">(<argument pos:start="219:29" pos:end="219:35"><expr pos:start="219:29" pos:end="219:35"><name pos:start="219:29" pos:end="219:35"><name pos:start="219:29" pos:end="219:29">c</name><operator pos:start="219:30" pos:end="219:31">-&gt;</operator><name pos:start="219:32" pos:end="219:35">prev</name></name></expr></argument>, <argument pos:start="219:38" pos:end="219:42"><expr pos:start="219:38" pos:end="219:42"><name pos:start="219:38" pos:end="219:42">frame</name></expr></argument>)</argument_list></call><operator pos:start="219:44" pos:end="219:44">)</operator> <operator pos:start="219:46" pos:end="219:46">&lt;</operator> <literal type="number" pos:start="219:48" pos:end="219:48">0</literal></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:19"><block_content pos:start="221:9" pos:end="221:19">

        <return pos:start="221:9" pos:end="221:19">return <expr pos:start="221:16" pos:end="221:18"><name pos:start="221:16" pos:end="221:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:19"><expr pos:start="225:5" pos:end="225:18"><operator pos:start="225:5" pos:end="225:5">*</operator><name pos:start="225:6" pos:end="225:14">got_frame</name> <operator pos:start="225:16" pos:end="225:16">=</operator> <literal type="number" pos:start="225:18" pos:end="225:18">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:63">/* always report that the buffer was completely consumed */</comment>

    <return pos:start="231:5" pos:end="231:23">return <expr pos:start="231:12" pos:end="231:22"><name pos:start="231:12" pos:end="231:22"><name pos:start="231:12" pos:end="231:16">avpkt</name><operator pos:start="231:17" pos:end="231:18">-&gt;</operator><name pos:start="231:19" pos:end="231:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
