<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1244.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:38">raw_co_pwritev</name><parameter_list pos:start="1:39" pos:end="5:49">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:69">uint64_t</name></type> <name pos:start="1:71" pos:end="1:76">offset</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:53"><decl pos:start="3:40" pos:end="3:53"><type pos:start="3:40" pos:end="3:53"><name pos:start="3:40" pos:end="3:47">uint64_t</name></type> <name pos:start="3:49" pos:end="3:53">bytes</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:73"><decl pos:start="3:56" pos:end="3:73"><type pos:start="3:56" pos:end="3:73"><name pos:start="3:56" pos:end="3:67">QEMUIOVector</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:73">qiov</name></decl></parameter>,

                                       <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="133:1">{<block_content pos:start="9:5" pos:end="131:15">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BDRVRawState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:24">bs</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">buf</name> <init pos:start="11:15" pos:end="11:20">= <expr pos:start="11:17" pos:end="11:20"><name pos:start="11:17" pos:end="11:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">BlockDriver</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">QEMUIOVector</name></type> <name pos:start="15:18" pos:end="15:27">local_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:72">(<expr pos:start="21:9" pos:end="21:71"><name pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:19">has_size</name></name> <operator pos:start="21:21" pos:end="21:22">&amp;&amp;</operator> <operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:30">offset</name> <operator pos:start="21:32" pos:end="21:32">&gt;</operator> <name pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:34">s</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:40">size</name></name> <operator pos:start="21:42" pos:end="21:43">||</operator> <name pos:start="21:45" pos:end="21:49">bytes</name> <operator pos:start="21:51" pos:end="21:51">&gt;</operator> <operator pos:start="21:53" pos:end="21:53">(</operator><name pos:start="21:54" pos:end="21:60"><name pos:start="21:54" pos:end="21:54">s</name><operator pos:start="21:55" pos:end="21:56">-&gt;</operator><name pos:start="21:57" pos:end="21:60">size</name></name> <operator pos:start="21:62" pos:end="21:62">-</operator> <name pos:start="21:64" pos:end="21:69">offset</name><operator pos:start="21:70" pos:end="21:70">)</operator><operator pos:start="21:71" pos:end="21:71">)</operator></expr>)</condition> <block pos:start="21:74" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:23">

        <comment type="block" pos:start="23:9" pos:end="25:75">/* There's not enough space for the data. Don't write anything and just

         * fail to prevent leaking out of the size specified in options. */</comment>

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">ENOSPC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:40">(<expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:14">offset</name> <operator pos:start="33:16" pos:end="33:16">&gt;</operator> <name pos:start="33:18" pos:end="33:27">UINT64_MAX</name> <operator pos:start="33:29" pos:end="33:29">-</operator> <name pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:39">offset</name></name></expr>)</condition> <block pos:start="33:42" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <operator pos:start="35:15" pos:end="35:15">-</operator><name pos:start="35:16" pos:end="35:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="107:5"><if pos:start="43:5" pos:end="107:5">if <condition pos:start="43:8" pos:end="43:61">(<expr pos:start="43:9" pos:end="43:60"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:10">bs</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:18">probed</name></name> <operator pos:start="43:20" pos:end="43:21">&amp;&amp;</operator> <name pos:start="43:23" pos:end="43:28">offset</name> <operator pos:start="43:30" pos:end="43:30">&lt;</operator> <name pos:start="43:32" pos:end="43:51">BLOCK_PROBE_BUF_SIZE</name> <operator pos:start="43:53" pos:end="43:54">&amp;&amp;</operator> <name pos:start="43:56" pos:end="43:60">bytes</name></expr>)</condition> <block pos:start="43:63" pos:end="107:5">{<block_content pos:start="51:9" pos:end="105:27">

        <comment type="block" pos:start="45:9" pos:end="49:30">/* Handling partial writes would be a pain - so we just

         * require that guests have 512-byte request alignment if

         * probing occurred */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><call pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:25">QEMU_BUILD_BUG_ON</name><argument_list pos:start="51:26" pos:end="51:54">(<argument pos:start="51:27" pos:end="51:53"><expr pos:start="51:27" pos:end="51:53"><name pos:start="51:27" pos:end="51:46">BLOCK_PROBE_BUF_SIZE</name> <operator pos:start="51:48" pos:end="51:49">!=</operator> <literal type="number" pos:start="51:51" pos:end="51:53">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:25">QEMU_BUILD_BUG_ON</name><argument_list pos:start="53:26" pos:end="53:50">(<argument pos:start="53:27" pos:end="53:49"><expr pos:start="53:27" pos:end="53:49"><name pos:start="53:27" pos:end="53:42">BDRV_SECTOR_SIZE</name> <operator pos:start="53:44" pos:end="53:45">!=</operator> <literal type="number" pos:start="53:47" pos:end="53:49">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:61"><expr pos:start="55:9" pos:end="55:60"><call pos:start="55:9" pos:end="55:60"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:60">(<argument pos:start="55:16" pos:end="55:59"><expr pos:start="55:16" pos:end="55:59"><name pos:start="55:16" pos:end="55:21">offset</name> <operator pos:start="55:23" pos:end="55:24">==</operator> <literal type="number" pos:start="55:26" pos:end="55:26">0</literal> <operator pos:start="55:28" pos:end="55:29">&amp;&amp;</operator> <name pos:start="55:31" pos:end="55:35">bytes</name> <operator pos:start="55:37" pos:end="55:38">&gt;=</operator> <name pos:start="55:40" pos:end="55:59">BLOCK_PROBE_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:53"><expr pos:start="59:9" pos:end="59:52"><name pos:start="59:9" pos:end="59:11">buf</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:52"><name pos:start="59:15" pos:end="59:33">qemu_try_blockalign</name><argument_list pos:start="59:34" pos:end="59:52">(<argument pos:start="59:35" pos:end="59:46"><expr pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:36">bs</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:42">file</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:46">bs</name></name></expr></argument>, <argument pos:start="59:49" pos:end="59:51"><expr pos:start="59:49" pos:end="59:51"><literal type="number" pos:start="59:49" pos:end="59:51">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:16">buf</name></expr>)</condition> <block pos:start="61:19" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:22">

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><name pos:start="63:20" pos:end="63:25">ENOMEM</name></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:51"><expr pos:start="71:9" pos:end="71:50"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:50"><name pos:start="71:15" pos:end="71:31">qemu_iovec_to_buf</name><argument_list pos:start="71:32" pos:end="71:50">(<argument pos:start="71:33" pos:end="71:36"><expr pos:start="71:33" pos:end="71:36"><name pos:start="71:33" pos:end="71:36">qiov</name></expr></argument>, <argument pos:start="71:39" pos:end="71:39"><expr pos:start="71:39" pos:end="71:39"><literal type="number" pos:start="71:39" pos:end="71:39">0</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:44"><expr pos:start="71:42" pos:end="71:44"><name pos:start="71:42" pos:end="71:44">buf</name></expr></argument>, <argument pos:start="71:47" pos:end="71:49"><expr pos:start="71:47" pos:end="71:49"><literal type="number" pos:start="71:47" pos:end="71:49">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:23">(<expr pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:18">!=</operator> <literal type="number" pos:start="73:20" pos:end="73:22">512</literal></expr>)</condition> <block pos:start="73:25" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:22">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <operator pos:start="75:19" pos:end="75:19">-</operator><name pos:start="75:20" pos:end="75:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:22">goto <name pos:start="77:18" pos:end="77:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><name pos:start="83:9" pos:end="83:11">drv</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:44"><name pos:start="83:15" pos:end="83:28">bdrv_probe_all</name><argument_list pos:start="83:29" pos:end="83:44">(<argument pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><name pos:start="83:30" pos:end="83:32">buf</name></expr></argument>, <argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><literal type="number" pos:start="83:35" pos:end="83:37">512</literal></expr></argument>, <argument pos:start="83:40" pos:end="83:43"><expr pos:start="83:40" pos:end="83:43"><name pos:start="83:40" pos:end="83:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:27">(<expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:15">drv</name> <operator pos:start="85:17" pos:end="85:18">!=</operator> <name pos:start="85:20" pos:end="85:26"><name pos:start="85:20" pos:end="85:21">bs</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:26">drv</name></name></expr>)</condition> <block pos:start="85:29" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:22">

            <expr_stmt pos:start="87:13" pos:end="87:25"><expr pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <operator pos:start="87:19" pos:end="87:19">-</operator><name pos:start="87:20" pos:end="87:24">EPERM</name></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="89:22">goto <name pos:start="89:18" pos:end="89:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="97:48">/* Use the checked buffer, a malicious guest might be overwriting its

         * original buffer in the background. */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:53"><expr pos:start="99:9" pos:end="99:52"><call pos:start="99:9" pos:end="99:52"><name pos:start="99:9" pos:end="99:23">qemu_iovec_init</name><argument_list pos:start="99:24" pos:end="99:52">(<argument pos:start="99:25" pos:end="99:35"><expr pos:start="99:25" pos:end="99:35"><operator pos:start="99:25" pos:end="99:25">&amp;</operator><name pos:start="99:26" pos:end="99:35">local_qiov</name></expr></argument>, <argument pos:start="99:38" pos:end="99:51"><expr pos:start="99:38" pos:end="99:51"><name pos:start="99:38" pos:end="99:47"><name pos:start="99:38" pos:end="99:41">qiov</name><operator pos:start="99:42" pos:end="99:43">-&gt;</operator><name pos:start="99:44" pos:end="99:47">niov</name></name> <operator pos:start="99:49" pos:end="99:49">+</operator> <literal type="number" pos:start="99:51" pos:end="99:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><call pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:22">qemu_iovec_add</name><argument_list pos:start="101:23" pos:end="101:45">(<argument pos:start="101:24" pos:end="101:34"><expr pos:start="101:24" pos:end="101:34"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:34">local_qiov</name></expr></argument>, <argument pos:start="101:37" pos:end="101:39"><expr pos:start="101:37" pos:end="101:39"><name pos:start="101:37" pos:end="101:39">buf</name></expr></argument>, <argument pos:start="101:42" pos:end="101:44"><expr pos:start="101:42" pos:end="101:44"><literal type="number" pos:start="101:42" pos:end="101:44">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:68"><expr pos:start="103:9" pos:end="103:67"><call pos:start="103:9" pos:end="103:67"><name pos:start="103:9" pos:end="103:25">qemu_iovec_concat</name><argument_list pos:start="103:26" pos:end="103:67">(<argument pos:start="103:27" pos:end="103:37"><expr pos:start="103:27" pos:end="103:37"><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:37">local_qiov</name></expr></argument>, <argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">qiov</name></expr></argument>, <argument pos:start="103:46" pos:end="103:48"><expr pos:start="103:46" pos:end="103:48"><literal type="number" pos:start="103:46" pos:end="103:48">512</literal></expr></argument>, <argument pos:start="103:51" pos:end="103:66"><expr pos:start="103:51" pos:end="103:66"><name pos:start="103:51" pos:end="103:60"><name pos:start="103:51" pos:end="103:54">qiov</name><operator pos:start="103:55" pos:end="103:56">-&gt;</operator><name pos:start="103:57" pos:end="103:60">size</name></name> <operator pos:start="103:62" pos:end="103:62">-</operator> <literal type="number" pos:start="103:64" pos:end="103:66">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:27"><expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:12">qiov</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <operator pos:start="105:16" pos:end="105:16">&amp;</operator><name pos:start="105:17" pos:end="105:26">local_qiov</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:24"><expr pos:start="111:5" pos:end="111:23"><name pos:start="111:5" pos:end="111:10">offset</name> <operator pos:start="111:12" pos:end="111:13">+=</operator> <name pos:start="111:15" pos:end="111:23"><name pos:start="111:15" pos:end="111:15">s</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:23">offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:45"><expr pos:start="115:5" pos:end="115:44"><call pos:start="115:5" pos:end="115:44"><name pos:start="115:5" pos:end="115:16">BLKDBG_EVENT</name><argument_list pos:start="115:17" pos:end="115:44">(<argument pos:start="115:18" pos:end="115:25"><expr pos:start="115:18" pos:end="115:25"><name pos:start="115:18" pos:end="115:25"><name pos:start="115:18" pos:end="115:19">bs</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:25">file</name></name></expr></argument>, <argument pos:start="115:28" pos:end="115:43"><expr pos:start="115:28" pos:end="115:43"><name pos:start="115:28" pos:end="115:43">BLKDBG_WRITE_AIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:64"><expr pos:start="117:5" pos:end="117:63"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:63"><name pos:start="117:11" pos:end="117:25">bdrv_co_pwritev</name><argument_list pos:start="117:26" pos:end="117:63">(<argument pos:start="117:27" pos:end="117:34"><expr pos:start="117:27" pos:end="117:34"><name pos:start="117:27" pos:end="117:34"><name pos:start="117:27" pos:end="117:28">bs</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:34">file</name></name></expr></argument>, <argument pos:start="117:37" pos:end="117:42"><expr pos:start="117:37" pos:end="117:42"><name pos:start="117:37" pos:end="117:42">offset</name></expr></argument>, <argument pos:start="117:45" pos:end="117:49"><expr pos:start="117:45" pos:end="117:49"><name pos:start="117:45" pos:end="117:49">bytes</name></expr></argument>, <argument pos:start="117:52" pos:end="117:55"><expr pos:start="117:52" pos:end="117:55"><name pos:start="117:52" pos:end="117:55">qiov</name></expr></argument>, <argument pos:start="117:58" pos:end="117:62"><expr pos:start="117:58" pos:end="117:62"><name pos:start="117:58" pos:end="117:62">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="121:1" pos:end="121:5"><name pos:start="121:1" pos:end="121:4">fail</name>:</label>

    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:28">(<expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:12">qiov</name> <operator pos:start="123:14" pos:end="123:15">==</operator> <operator pos:start="123:17" pos:end="123:17">&amp;</operator><name pos:start="123:18" pos:end="123:27">local_qiov</name></expr>)</condition> <block pos:start="123:30" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:40">

        <expr_stmt pos:start="125:9" pos:end="125:40"><expr pos:start="125:9" pos:end="125:39"><call pos:start="125:9" pos:end="125:39"><name pos:start="125:9" pos:end="125:26">qemu_iovec_destroy</name><argument_list pos:start="125:27" pos:end="125:39">(<argument pos:start="125:28" pos:end="125:38"><expr pos:start="125:28" pos:end="125:38"><operator pos:start="125:28" pos:end="125:28">&amp;</operator><name pos:start="125:29" pos:end="125:38">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:20"><expr pos:start="129:5" pos:end="129:19"><call pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:14">qemu_vfree</name><argument_list pos:start="129:15" pos:end="129:19">(<argument pos:start="129:16" pos:end="129:18"><expr pos:start="129:16" pos:end="129:18"><name pos:start="129:16" pos:end="129:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
