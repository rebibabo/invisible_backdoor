<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26134.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">replication_start</name><parameter_list pos:start="1:30" pos:end="2:43">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">ReplicationState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">rs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">ReplicationMode</name></type> <name pos:start="1:69" pos:end="1:72">mode</name></decl></parameter>,
                              <parameter pos:start="2:31" pos:end="2:42"><decl pos:start="2:31" pos:end="2:42"><type pos:start="2:31" pos:end="2:42"><name pos:start="2:31" pos:end="2:35">Error</name> <modifier pos:start="2:37" pos:end="2:37">*</modifier><modifier pos:start="2:38" pos:end="2:38">*</modifier></type><name pos:start="2:39" pos:end="2:42">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="4:5" pos:end="108:37">
    <decl_stmt pos:start="4:5" pos:end="4:38"><decl pos:start="4:5" pos:end="4:37"><type pos:start="4:5" pos:end="4:22"><name pos:start="4:5" pos:end="4:20">BlockDriverState</name> <modifier pos:start="4:22" pos:end="4:22">*</modifier></type><name pos:start="4:23" pos:end="4:24">bs</name> <init pos:start="4:26" pos:end="4:37">= <expr pos:start="4:28" pos:end="4:37"><name pos:start="4:28" pos:end="4:37"><name pos:start="4:28" pos:end="4:29">rs</name><operator pos:start="4:30" pos:end="4:31">-&gt;</operator><name pos:start="4:32" pos:end="4:37">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">BDRVReplicationState</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:27">s</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:29"><decl pos:start="6:5" pos:end="6:28"><type pos:start="6:5" pos:end="6:22"><name pos:start="6:5" pos:end="6:20">BlockDriverState</name> <modifier pos:start="6:22" pos:end="6:22">*</modifier></type><name pos:start="6:23" pos:end="6:28">top_bs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:25">active_length</name></decl>, <decl pos:start="7:28" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:28" pos:end="7:40">hidden_length</name></decl>, <decl pos:start="7:43" pos:end="7:53"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:43" pos:end="7:53">disk_length</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:14">AioContext</name> <modifier pos:start="8:16" pos:end="8:16">*</modifier></type><name pos:start="8:17" pos:end="8:27">aio_context</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:18"><decl pos:start="10:5" pos:end="10:17"><type pos:start="10:5" pos:end="10:14"><name pos:start="10:5" pos:end="10:12">BlockJob</name> <modifier pos:start="10:14" pos:end="10:14">*</modifier></type><name pos:start="10:15" pos:end="10:17">job</name></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:43"><expr pos:start="11:5" pos:end="11:42"><name pos:start="11:5" pos:end="11:15">aio_context</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <call pos:start="11:19" pos:end="11:42"><name pos:start="11:19" pos:end="11:38">bdrv_get_aio_context</name><argument_list pos:start="11:39" pos:end="11:42">(<argument pos:start="11:40" pos:end="11:41"><expr pos:start="11:40" pos:end="11:41"><name pos:start="11:40" pos:end="11:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:37"><expr pos:start="12:5" pos:end="12:36"><call pos:start="12:5" pos:end="12:36"><name pos:start="12:5" pos:end="12:23">aio_context_acquire</name><argument_list pos:start="12:24" pos:end="12:36">(<argument pos:start="12:25" pos:end="12:35"><expr pos:start="12:25" pos:end="12:35"><name pos:start="12:25" pos:end="12:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:5">s</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <name pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:10">bs</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:18">opaque</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="18:5"><if pos:start="14:5" pos:end="18:5">if <condition pos:start="14:8" pos:end="14:43">(<expr pos:start="14:9" pos:end="14:42"><name pos:start="14:9" pos:end="14:16"><name pos:start="14:9" pos:end="14:9">s</name><operator pos:start="14:10" pos:end="14:11">-&gt;</operator><name pos:start="14:12" pos:end="14:16">stage</name></name> <operator pos:start="14:18" pos:end="14:19">!=</operator> <name pos:start="14:21" pos:end="14:42">BLOCK_REPLICATION_NONE</name></expr>)</condition> <block pos:start="14:45" pos:end="18:5">{<block_content pos:start="15:9" pos:end="17:15">
        <expr_stmt pos:start="15:9" pos:end="15:65"><expr pos:start="15:9" pos:end="15:64"><call pos:start="15:9" pos:end="15:64"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:64">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">errp</name></expr></argument>, <argument pos:start="15:26" pos:end="15:63"><expr pos:start="15:26" pos:end="15:63"><literal type="string" pos:start="15:26" pos:end="15:63">"Block replication is running or done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:41"><expr pos:start="16:9" pos:end="16:40"><call pos:start="16:9" pos:end="16:40"><name pos:start="16:9" pos:end="16:27">aio_context_release</name><argument_list pos:start="16:28" pos:end="16:40">(<argument pos:start="16:29" pos:end="16:39"><expr pos:start="16:29" pos:end="16:39"><name pos:start="16:29" pos:end="16:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="17:9" pos:end="17:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="19:5" pos:end="24:5"><if pos:start="19:5" pos:end="24:5">if <condition pos:start="19:8" pos:end="19:24">(<expr pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:15">mode</name></name> <operator pos:start="19:17" pos:end="19:18">!=</operator> <name pos:start="19:20" pos:end="19:23">mode</name></expr>)</condition> <block pos:start="19:26" pos:end="24:5">{<block_content pos:start="20:9" pos:end="23:15">
        <expr_stmt pos:start="20:9" pos:end="21:49"><expr pos:start="20:9" pos:end="21:48"><call pos:start="20:9" pos:end="21:48"><name pos:start="20:9" pos:end="20:18">error_setg</name><argument_list pos:start="20:19" pos:end="21:48">(<argument pos:start="20:20" pos:end="20:23"><expr pos:start="20:20" pos:end="20:23"><name pos:start="20:20" pos:end="20:23">errp</name></expr></argument>, <argument pos:start="20:26" pos:end="21:32"><expr pos:start="20:26" pos:end="21:32"><literal type="string" pos:start="20:26" pos:end="20:75">"The parameter mode's value is invalid, needs %d,"</literal>
                   <literal type="string" pos:start="21:20" pos:end="21:32">" but got %d"</literal></expr></argument>, <argument pos:start="21:35" pos:end="21:41"><expr pos:start="21:35" pos:end="21:41"><name pos:start="21:35" pos:end="21:41"><name pos:start="21:35" pos:end="21:35">s</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:41">mode</name></name></expr></argument>, <argument pos:start="21:44" pos:end="21:47"><expr pos:start="21:44" pos:end="21:47"><name pos:start="21:44" pos:end="21:47">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:41"><expr pos:start="22:9" pos:end="22:40"><call pos:start="22:9" pos:end="22:40"><name pos:start="22:9" pos:end="22:27">aio_context_release</name><argument_list pos:start="22:28" pos:end="22:40">(<argument pos:start="22:29" pos:end="22:39"><expr pos:start="22:29" pos:end="22:39"><name pos:start="22:29" pos:end="22:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="23:9" pos:end="23:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <switch pos:start="25:5" pos:end="102:5">switch <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:19">mode</name></name></expr>)</condition> <block pos:start="25:22" pos:end="102:5">{<block_content pos:start="26:5" pos:end="101:16">
    <case pos:start="26:5" pos:end="26:34">case <expr pos:start="26:10" pos:end="26:33"><name pos:start="26:10" pos:end="26:33">REPLICATION_MODE_PRIMARY</name></expr>:</case>
        <break pos:start="27:9" pos:end="27:14">break;</break>
    <case pos:start="28:5" pos:end="28:36">case <expr pos:start="28:10" pos:end="28:35"><name pos:start="28:10" pos:end="28:35">REPLICATION_MODE_SECONDARY</name></expr>:</case>
        <expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:22">active_disk</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:33"><name pos:start="29:26" pos:end="29:27">bs</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:33">file</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="30:9" pos:end="35:9"><if pos:start="30:9" pos:end="35:9">if <condition pos:start="30:12" pos:end="31:65">(<expr pos:start="30:13" pos:end="31:64"><operator pos:start="30:13" pos:end="30:13">!</operator><name pos:start="30:14" pos:end="30:27"><name pos:start="30:14" pos:end="30:14">s</name><operator pos:start="30:15" pos:end="30:16">-&gt;</operator><name pos:start="30:17" pos:end="30:27">active_disk</name></name> <operator pos:start="30:29" pos:end="30:30">||</operator> <operator pos:start="30:32" pos:end="30:32">!</operator><name pos:start="30:33" pos:end="30:50"><name pos:start="30:33" pos:end="30:33">s</name><operator pos:start="30:34" pos:end="30:35">-&gt;</operator><name pos:start="30:36" pos:end="30:46">active_disk</name><operator pos:start="30:47" pos:end="30:48">-&gt;</operator><name pos:start="30:49" pos:end="30:50">bs</name></name> <operator pos:start="30:52" pos:end="30:53">||</operator>
                                    <operator pos:start="31:37" pos:end="31:37">!</operator><name pos:start="31:38" pos:end="31:64"><name pos:start="31:38" pos:end="31:38">s</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:51">active_disk</name><operator pos:start="31:52" pos:end="31:53">-&gt;</operator><name pos:start="31:54" pos:end="31:55">bs</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:64">backing</name></name></expr>)</condition> <block pos:start="31:67" pos:end="35:9">{<block_content pos:start="32:13" pos:end="34:19">
            <expr_stmt pos:start="32:13" pos:end="32:70"><expr pos:start="32:13" pos:end="32:69"><call pos:start="32:13" pos:end="32:69"><name pos:start="32:13" pos:end="32:22">error_setg</name><argument_list pos:start="32:23" pos:end="32:69">(<argument pos:start="32:24" pos:end="32:27"><expr pos:start="32:24" pos:end="32:27"><name pos:start="32:24" pos:end="32:27">errp</name></expr></argument>, <argument pos:start="32:30" pos:end="32:68"><expr pos:start="32:30" pos:end="32:68"><literal type="string" pos:start="32:30" pos:end="32:68">"Active disk doesn't have backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="33:13" pos:end="33:45"><expr pos:start="33:13" pos:end="33:44"><call pos:start="33:13" pos:end="33:44"><name pos:start="33:13" pos:end="33:31">aio_context_release</name><argument_list pos:start="33:32" pos:end="33:44">(<argument pos:start="33:33" pos:end="33:43"><expr pos:start="33:33" pos:end="33:43"><name pos:start="33:33" pos:end="33:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="34:13" pos:end="34:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:53"><expr pos:start="36:9" pos:end="36:52"><name pos:start="36:9" pos:end="36:22"><name pos:start="36:9" pos:end="36:9">s</name><operator pos:start="36:10" pos:end="36:11">-&gt;</operator><name pos:start="36:12" pos:end="36:22">hidden_disk</name></name> <operator pos:start="36:24" pos:end="36:24">=</operator> <name pos:start="36:26" pos:end="36:52"><name pos:start="36:26" pos:end="36:26">s</name><operator pos:start="36:27" pos:end="36:28">-&gt;</operator><name pos:start="36:29" pos:end="36:39">active_disk</name><operator pos:start="36:40" pos:end="36:41">-&gt;</operator><name pos:start="36:42" pos:end="36:43">bs</name><operator pos:start="36:44" pos:end="36:45">-&gt;</operator><name pos:start="36:46" pos:end="36:52">backing</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:64">(<expr pos:start="37:13" pos:end="37:63"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:31"><name pos:start="37:14" pos:end="37:14">s</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:27">hidden_disk</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:31">bs</name></name> <operator pos:start="37:33" pos:end="37:34">||</operator> <operator pos:start="37:36" pos:end="37:36">!</operator><name pos:start="37:37" pos:end="37:63"><name pos:start="37:37" pos:end="37:37">s</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:50">hidden_disk</name><operator pos:start="37:51" pos:end="37:52">-&gt;</operator><name pos:start="37:53" pos:end="37:54">bs</name><operator pos:start="37:55" pos:end="37:56">-&gt;</operator><name pos:start="37:57" pos:end="37:63">backing</name></name></expr>)</condition> <block pos:start="37:66" pos:end="41:9">{<block_content pos:start="38:13" pos:end="40:19">
            <expr_stmt pos:start="38:13" pos:end="38:70"><expr pos:start="38:13" pos:end="38:69"><call pos:start="38:13" pos:end="38:69"><name pos:start="38:13" pos:end="38:22">error_setg</name><argument_list pos:start="38:23" pos:end="38:69">(<argument pos:start="38:24" pos:end="38:27"><expr pos:start="38:24" pos:end="38:27"><name pos:start="38:24" pos:end="38:27">errp</name></expr></argument>, <argument pos:start="38:30" pos:end="38:68"><expr pos:start="38:30" pos:end="38:68"><literal type="string" pos:start="38:30" pos:end="38:68">"Hidden disk doesn't have backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="39:13" pos:end="39:45"><expr pos:start="39:13" pos:end="39:44"><call pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:31">aio_context_release</name><argument_list pos:start="39:32" pos:end="39:44">(<argument pos:start="39:33" pos:end="39:43"><expr pos:start="39:33" pos:end="39:43"><name pos:start="39:33" pos:end="39:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="40:13" pos:end="40:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:56"><expr pos:start="42:9" pos:end="42:55"><name pos:start="42:9" pos:end="42:25"><name pos:start="42:9" pos:end="42:9">s</name><operator pos:start="42:10" pos:end="42:11">-&gt;</operator><name pos:start="42:12" pos:end="42:25">secondary_disk</name></name> <operator pos:start="42:27" pos:end="42:27">=</operator> <name pos:start="42:29" pos:end="42:55"><name pos:start="42:29" pos:end="42:29">s</name><operator pos:start="42:30" pos:end="42:31">-&gt;</operator><name pos:start="42:32" pos:end="42:42">hidden_disk</name><operator pos:start="42:43" pos:end="42:44">-&gt;</operator><name pos:start="42:45" pos:end="42:46">bs</name><operator pos:start="42:47" pos:end="42:48">-&gt;</operator><name pos:start="42:49" pos:end="42:55">backing</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:75">(<expr pos:start="43:13" pos:end="43:74"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:34"><name pos:start="43:14" pos:end="43:14">s</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:30">secondary_disk</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:34">bs</name></name> <operator pos:start="43:36" pos:end="43:37">||</operator> <operator pos:start="43:39" pos:end="43:39">!</operator><call pos:start="43:40" pos:end="43:74"><name pos:start="43:40" pos:end="43:51">bdrv_has_blk</name><argument_list pos:start="43:52" pos:end="43:74">(<argument pos:start="43:53" pos:end="43:73"><expr pos:start="43:53" pos:end="43:73"><name pos:start="43:53" pos:end="43:73"><name pos:start="43:53" pos:end="43:53">s</name><operator pos:start="43:54" pos:end="43:55">-&gt;</operator><name pos:start="43:56" pos:end="43:69">secondary_disk</name><operator pos:start="43:70" pos:end="43:71">-&gt;</operator><name pos:start="43:72" pos:end="43:73">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:77" pos:end="47:9">{<block_content pos:start="44:13" pos:end="46:19">
            <expr_stmt pos:start="44:13" pos:end="44:78"><expr pos:start="44:13" pos:end="44:77"><call pos:start="44:13" pos:end="44:77"><name pos:start="44:13" pos:end="44:22">error_setg</name><argument_list pos:start="44:23" pos:end="44:77">(<argument pos:start="44:24" pos:end="44:27"><expr pos:start="44:24" pos:end="44:27"><name pos:start="44:24" pos:end="44:27">errp</name></expr></argument>, <argument pos:start="44:30" pos:end="44:76"><expr pos:start="44:30" pos:end="44:76"><literal type="string" pos:start="44:30" pos:end="44:76">"The secondary disk doesn't have block backend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:45"><expr pos:start="45:13" pos:end="45:44"><call pos:start="45:13" pos:end="45:44"><name pos:start="45:13" pos:end="45:31">aio_context_release</name><argument_list pos:start="45:32" pos:end="45:44">(<argument pos:start="45:33" pos:end="45:43"><expr pos:start="45:33" pos:end="45:43"><name pos:start="45:33" pos:end="45:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="46:13" pos:end="46:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="48:9" pos:end="48:31">/* verify the length */</comment>
        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:21">active_length</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <call pos:start="49:25" pos:end="49:58"><name pos:start="49:25" pos:end="49:38">bdrv_getlength</name><argument_list pos:start="49:39" pos:end="49:58">(<argument pos:start="49:40" pos:end="49:57"><expr pos:start="49:40" pos:end="49:57"><name pos:start="49:40" pos:end="49:57"><name pos:start="49:40" pos:end="49:40">s</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:53">active_disk</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:57">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:59"><expr pos:start="50:9" pos:end="50:58"><name pos:start="50:9" pos:end="50:21">hidden_length</name> <operator pos:start="50:23" pos:end="50:23">=</operator> <call pos:start="50:25" pos:end="50:58"><name pos:start="50:25" pos:end="50:38">bdrv_getlength</name><argument_list pos:start="50:39" pos:end="50:58">(<argument pos:start="50:40" pos:end="50:57"><expr pos:start="50:40" pos:end="50:57"><name pos:start="50:40" pos:end="50:57"><name pos:start="50:40" pos:end="50:40">s</name><operator pos:start="50:41" pos:end="50:42">-&gt;</operator><name pos:start="50:43" pos:end="50:53">hidden_disk</name><operator pos:start="50:54" pos:end="50:55">-&gt;</operator><name pos:start="50:56" pos:end="50:57">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:19">disk_length</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:59"><name pos:start="51:23" pos:end="51:36">bdrv_getlength</name><argument_list pos:start="51:37" pos:end="51:59">(<argument pos:start="51:38" pos:end="51:58"><expr pos:start="51:38" pos:end="51:58"><name pos:start="51:38" pos:end="51:58"><name pos:start="51:38" pos:end="51:38">s</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:54">secondary_disk</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:58">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="52:9" pos:end="58:9"><if pos:start="52:9" pos:end="58:9">if <condition pos:start="52:12" pos:end="53:75">(<expr pos:start="52:13" pos:end="53:74"><name pos:start="52:13" pos:end="52:25">active_length</name> <operator pos:start="52:27" pos:end="52:27">&lt;</operator> <literal type="number" pos:start="52:29" pos:end="52:29">0</literal> <operator pos:start="52:31" pos:end="52:32">||</operator> <name pos:start="52:34" pos:end="52:46">hidden_length</name> <operator pos:start="52:48" pos:end="52:48">&lt;</operator> <literal type="number" pos:start="52:50" pos:end="52:50">0</literal> <operator pos:start="52:52" pos:end="52:53">||</operator> <name pos:start="52:55" pos:end="52:65">disk_length</name> <operator pos:start="52:67" pos:end="52:67">&lt;</operator> <literal type="number" pos:start="52:69" pos:end="52:69">0</literal> <operator pos:start="52:71" pos:end="52:72">||</operator>
            <name pos:start="53:13" pos:end="53:25">active_length</name> <operator pos:start="53:27" pos:end="53:28">!=</operator> <name pos:start="53:30" pos:end="53:42">hidden_length</name> <operator pos:start="53:44" pos:end="53:45">||</operator> <name pos:start="53:47" pos:end="53:59">hidden_length</name> <operator pos:start="53:61" pos:end="53:62">!=</operator> <name pos:start="53:64" pos:end="53:74">disk_length</name></expr>)</condition> <block pos:start="53:77" pos:end="58:9">{<block_content pos:start="54:13" pos:end="57:19">
            <expr_stmt pos:start="54:13" pos:end="55:44"><expr pos:start="54:13" pos:end="55:43"><call pos:start="54:13" pos:end="55:43"><name pos:start="54:13" pos:end="54:22">error_setg</name><argument_list pos:start="54:23" pos:end="55:43">(<argument pos:start="54:24" pos:end="54:27"><expr pos:start="54:24" pos:end="54:27"><name pos:start="54:24" pos:end="54:27">errp</name></expr></argument>, <argument pos:start="54:30" pos:end="55:42"><expr pos:start="54:30" pos:end="55:42"><literal type="string" pos:start="54:30" pos:end="54:80">"Active disk, hidden disk, secondary disk's length"</literal>
                       <literal type="string" pos:start="55:24" pos:end="55:42">" are not the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:45"><expr pos:start="56:13" pos:end="56:44"><call pos:start="56:13" pos:end="56:44"><name pos:start="56:13" pos:end="56:31">aio_context_release</name><argument_list pos:start="56:32" pos:end="56:44">(<argument pos:start="56:33" pos:end="56:43"><expr pos:start="56:33" pos:end="56:43"><name pos:start="56:33" pos:end="56:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="57:13" pos:end="57:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="60:54">(<expr pos:start="59:13" pos:end="60:53"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:53"><name pos:start="59:14" pos:end="59:14">s</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:27">active_disk</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:31">bs</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:36">drv</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:53">bdrv_make_empty</name></name> <operator pos:start="59:55" pos:end="59:56">||</operator>
            <operator pos:start="60:13" pos:end="60:13">!</operator><name pos:start="60:14" pos:end="60:53"><name pos:start="60:14" pos:end="60:14">s</name><operator pos:start="60:15" pos:end="60:16">-&gt;</operator><name pos:start="60:17" pos:end="60:27">hidden_disk</name><operator pos:start="60:28" pos:end="60:29">-&gt;</operator><name pos:start="60:30" pos:end="60:31">bs</name><operator pos:start="60:32" pos:end="60:33">-&gt;</operator><name pos:start="60:34" pos:end="60:36">drv</name><operator pos:start="60:37" pos:end="60:38">-&gt;</operator><name pos:start="60:39" pos:end="60:53">bdrv_make_empty</name></name></expr>)</condition> <block pos:start="60:56" pos:end="65:9">{<block_content pos:start="61:13" pos:end="64:19">
            <expr_stmt pos:start="61:13" pos:end="62:80"><expr pos:start="61:13" pos:end="62:79"><call pos:start="61:13" pos:end="62:79"><name pos:start="61:13" pos:end="61:22">error_setg</name><argument_list pos:start="61:23" pos:end="62:79">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">errp</name></expr></argument>,
                       <argument pos:start="62:24" pos:end="62:78"><expr pos:start="62:24" pos:end="62:78"><literal type="string" pos:start="62:24" pos:end="62:78">"Active disk or hidden disk doesn't support make_empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="63:13" pos:end="63:45"><expr pos:start="63:13" pos:end="63:44"><call pos:start="63:13" pos:end="63:44"><name pos:start="63:13" pos:end="63:31">aio_context_release</name><argument_list pos:start="63:32" pos:end="63:44">(<argument pos:start="63:33" pos:end="63:43"><expr pos:start="63:33" pos:end="63:43"><name pos:start="63:33" pos:end="63:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="64:13" pos:end="64:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="66:9" pos:end="66:49">/* reopen the backing file in r/w mode */</comment>
        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><call pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:27">reopen_backing_file</name><argument_list pos:start="67:28" pos:end="67:49">(<argument pos:start="67:29" pos:end="67:30"><expr pos:start="67:29" pos:end="67:30"><name pos:start="67:29" pos:end="67:30">bs</name></expr></argument>, <argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">true</name></expr></argument>, <argument pos:start="67:39" pos:end="67:48"><expr pos:start="67:39" pos:end="67:48"><operator pos:start="67:39" pos:end="67:39">&amp;</operator><name pos:start="67:40" pos:end="67:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="68:9" pos:end="72:9"><if pos:start="68:9" pos:end="72:9">if <condition pos:start="68:12" pos:end="68:22">(<expr pos:start="68:13" pos:end="68:21"><name pos:start="68:13" pos:end="68:21">local_err</name></expr>)</condition> <block pos:start="68:24" pos:end="72:9">{<block_content pos:start="69:13" pos:end="71:19">
            <expr_stmt pos:start="69:13" pos:end="69:45"><expr pos:start="69:13" pos:end="69:44"><call pos:start="69:13" pos:end="69:44"><name pos:start="69:13" pos:end="69:27">error_propagate</name><argument_list pos:start="69:28" pos:end="69:44">(<argument pos:start="69:29" pos:end="69:32"><expr pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:32">errp</name></expr></argument>, <argument pos:start="69:35" pos:end="69:43"><expr pos:start="69:35" pos:end="69:43"><name pos:start="69:35" pos:end="69:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="70:13" pos:end="70:45"><expr pos:start="70:13" pos:end="70:44"><call pos:start="70:13" pos:end="70:44"><name pos:start="70:13" pos:end="70:31">aio_context_release</name><argument_list pos:start="70:32" pos:end="70:44">(<argument pos:start="70:33" pos:end="70:43"><expr pos:start="70:33" pos:end="70:43"><name pos:start="70:33" pos:end="70:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="71:13" pos:end="71:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="73:9" pos:end="73:34">/* start backup job now */</comment>
        <expr_stmt pos:start="74:9" pos:end="75:68"><expr pos:start="74:9" pos:end="75:67"><call pos:start="74:9" pos:end="75:67"><name pos:start="74:9" pos:end="74:18">error_setg</name><argument_list pos:start="74:19" pos:end="75:67">(<argument pos:start="74:20" pos:end="74:30"><expr pos:start="74:20" pos:end="74:30"><operator pos:start="74:20" pos:end="74:20">&amp;</operator><name pos:start="74:21" pos:end="74:30"><name pos:start="74:21" pos:end="74:21">s</name><operator pos:start="74:22" pos:end="74:23">-&gt;</operator><name pos:start="74:24" pos:end="74:30">blocker</name></name></expr></argument>,
                   <argument pos:start="75:20" pos:end="75:66"><expr pos:start="75:20" pos:end="75:66"><literal type="string" pos:start="75:20" pos:end="75:66">"Block device is in use by internal backup job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="76:9" pos:end="76:60"><expr pos:start="76:9" pos:end="76:59"><name pos:start="76:9" pos:end="76:14">top_bs</name> <operator pos:start="76:16" pos:end="76:16">=</operator> <call pos:start="76:18" pos:end="76:59"><name pos:start="76:18" pos:end="76:31">bdrv_lookup_bs</name><argument_list pos:start="76:32" pos:end="76:59">(<argument pos:start="76:33" pos:end="76:41"><expr pos:start="76:33" pos:end="76:41"><name pos:start="76:33" pos:end="76:41"><name pos:start="76:33" pos:end="76:33">s</name><operator pos:start="76:34" pos:end="76:35">-&gt;</operator><name pos:start="76:36" pos:end="76:41">top_id</name></name></expr></argument>, <argument pos:start="76:44" pos:end="76:52"><expr pos:start="76:44" pos:end="76:52"><name pos:start="76:44" pos:end="76:52"><name pos:start="76:44" pos:end="76:44">s</name><operator pos:start="76:45" pos:end="76:46">-&gt;</operator><name pos:start="76:47" pos:end="76:52">top_id</name></name></expr></argument>, <argument pos:start="76:55" pos:end="76:58"><expr pos:start="76:55" pos:end="76:58"><name pos:start="76:55" pos:end="76:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="78:38">(<expr pos:start="77:13" pos:end="78:37"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:19">top_bs</name> <operator pos:start="77:21" pos:end="77:22">||</operator> <operator pos:start="77:24" pos:end="77:24">!</operator><call pos:start="77:25" pos:end="77:49"><name pos:start="77:25" pos:end="77:41">bdrv_is_root_node</name><argument_list pos:start="77:42" pos:end="77:49">(<argument pos:start="77:43" pos:end="77:48"><expr pos:start="77:43" pos:end="77:48"><name pos:start="77:43" pos:end="77:48">top_bs</name></expr></argument>)</argument_list></call> <operator pos:start="77:51" pos:end="77:52">||</operator>
            <operator pos:start="78:13" pos:end="78:13">!</operator><call pos:start="78:14" pos:end="78:37"><name pos:start="78:14" pos:end="78:25">check_top_bs</name><argument_list pos:start="78:26" pos:end="78:37">(<argument pos:start="78:27" pos:end="78:32"><expr pos:start="78:27" pos:end="78:32"><name pos:start="78:27" pos:end="78:32">top_bs</name></expr></argument>, <argument pos:start="78:35" pos:end="78:36"><expr pos:start="78:35" pos:end="78:36"><name pos:start="78:35" pos:end="78:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="78:40" pos:end="83:9">{<block_content pos:start="79:13" pos:end="82:19">
            <expr_stmt pos:start="79:13" pos:end="79:59"><expr pos:start="79:13" pos:end="79:58"><call pos:start="79:13" pos:end="79:58"><name pos:start="79:13" pos:end="79:22">error_setg</name><argument_list pos:start="79:23" pos:end="79:58">(<argument pos:start="79:24" pos:end="79:27"><expr pos:start="79:24" pos:end="79:27"><name pos:start="79:24" pos:end="79:27">errp</name></expr></argument>, <argument pos:start="79:30" pos:end="79:57"><expr pos:start="79:30" pos:end="79:57"><literal type="string" pos:start="79:30" pos:end="79:57">"No top_bs or it is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="80:13" pos:end="80:49"><expr pos:start="80:13" pos:end="80:48"><call pos:start="80:13" pos:end="80:48"><name pos:start="80:13" pos:end="80:31">reopen_backing_file</name><argument_list pos:start="80:32" pos:end="80:48">(<argument pos:start="80:33" pos:end="80:34"><expr pos:start="80:33" pos:end="80:34"><name pos:start="80:33" pos:end="80:34">bs</name></expr></argument>, <argument pos:start="80:37" pos:end="80:41"><expr pos:start="80:37" pos:end="80:41"><name pos:start="80:37" pos:end="80:41">false</name></expr></argument>, <argument pos:start="80:44" pos:end="80:47"><expr pos:start="80:44" pos:end="80:47"><name pos:start="80:44" pos:end="80:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="81:13" pos:end="81:45"><expr pos:start="81:13" pos:end="81:44"><call pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:31">aio_context_release</name><argument_list pos:start="81:32" pos:end="81:44">(<argument pos:start="81:33" pos:end="81:43"><expr pos:start="81:33" pos:end="81:43"><name pos:start="81:33" pos:end="81:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="82:13" pos:end="82:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="84:9" pos:end="84:46"><expr pos:start="84:9" pos:end="84:45"><call pos:start="84:9" pos:end="84:45"><name pos:start="84:9" pos:end="84:25">bdrv_op_block_all</name><argument_list pos:start="84:26" pos:end="84:45">(<argument pos:start="84:27" pos:end="84:32"><expr pos:start="84:27" pos:end="84:32"><name pos:start="84:27" pos:end="84:32">top_bs</name></expr></argument>, <argument pos:start="84:35" pos:end="84:44"><expr pos:start="84:35" pos:end="84:44"><name pos:start="84:35" pos:end="84:44"><name pos:start="84:35" pos:end="84:35">s</name><operator pos:start="84:36" pos:end="84:37">-&gt;</operator><name pos:start="84:38" pos:end="84:44">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:69"><expr pos:start="85:9" pos:end="85:68"><call pos:start="85:9" pos:end="85:68"><name pos:start="85:9" pos:end="85:23">bdrv_op_unblock</name><argument_list pos:start="85:24" pos:end="85:68">(<argument pos:start="85:25" pos:end="85:30"><expr pos:start="85:25" pos:end="85:30"><name pos:start="85:25" pos:end="85:30">top_bs</name></expr></argument>, <argument pos:start="85:33" pos:end="85:55"><expr pos:start="85:33" pos:end="85:55"><name pos:start="85:33" pos:end="85:55">BLOCK_OP_TYPE_DATAPLANE</name></expr></argument>, <argument pos:start="85:58" pos:end="85:67"><expr pos:start="85:58" pos:end="85:67"><name pos:start="85:58" pos:end="85:67"><name pos:start="85:58" pos:end="85:58">s</name><operator pos:start="85:59" pos:end="85:60">-&gt;</operator><name pos:start="85:61" pos:end="85:67">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="86:9" pos:end="90:76"><expr pos:start="86:9" pos:end="90:75"><name pos:start="86:9" pos:end="86:11">job</name> <operator pos:start="86:13" pos:end="86:13">=</operator> <call pos:start="86:15" pos:end="90:75"><name pos:start="86:15" pos:end="86:31">backup_job_create</name><argument_list pos:start="86:32" pos:end="90:75">(<argument pos:start="86:33" pos:end="86:36"><expr pos:start="86:33" pos:end="86:36"><name pos:start="86:33" pos:end="86:36">NULL</name></expr></argument>, <argument pos:start="86:39" pos:end="86:59"><expr pos:start="86:39" pos:end="86:59"><name pos:start="86:39" pos:end="86:59"><name pos:start="86:39" pos:end="86:39">s</name><operator pos:start="86:40" pos:end="86:41">-&gt;</operator><name pos:start="86:42" pos:end="86:55">secondary_disk</name><operator pos:start="86:56" pos:end="86:57">-&gt;</operator><name pos:start="86:58" pos:end="86:59">bs</name></name></expr></argument>, <argument pos:start="86:62" pos:end="86:79"><expr pos:start="86:62" pos:end="86:79"><name pos:start="86:62" pos:end="86:79"><name pos:start="86:62" pos:end="86:62">s</name><operator pos:start="86:63" pos:end="86:64">-&gt;</operator><name pos:start="86:65" pos:end="86:75">hidden_disk</name><operator pos:start="86:76" pos:end="86:77">-&gt;</operator><name pos:start="86:78" pos:end="86:79">bs</name></name></expr></argument>,
                                <argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><literal type="number" pos:start="87:33" pos:end="87:33">0</literal></expr></argument>, <argument pos:start="87:36" pos:end="87:56"><expr pos:start="87:36" pos:end="87:56"><name pos:start="87:36" pos:end="87:56">MIRROR_SYNC_MODE_NONE</name></expr></argument>, <argument pos:start="87:59" pos:end="87:62"><expr pos:start="87:59" pos:end="87:62"><name pos:start="87:59" pos:end="87:62">NULL</name></expr></argument>, <argument pos:start="87:65" pos:end="87:69"><expr pos:start="87:65" pos:end="87:69"><name pos:start="87:65" pos:end="87:69">false</name></expr></argument>,
                                <argument pos:start="88:33" pos:end="88:56"><expr pos:start="88:33" pos:end="88:56"><name pos:start="88:33" pos:end="88:56">BLOCKDEV_ON_ERROR_REPORT</name></expr></argument>,
                                <argument pos:start="89:33" pos:end="89:56"><expr pos:start="89:33" pos:end="89:56"><name pos:start="89:33" pos:end="89:56">BLOCKDEV_ON_ERROR_REPORT</name></expr></argument>, <argument pos:start="89:59" pos:end="89:76"><expr pos:start="89:59" pos:end="89:76"><name pos:start="89:59" pos:end="89:76">BLOCK_JOB_INTERNAL</name></expr></argument>,
                                <argument pos:start="90:33" pos:end="90:52"><expr pos:start="90:33" pos:end="90:52"><name pos:start="90:33" pos:end="90:52">backup_job_completed</name></expr></argument>, <argument pos:start="90:55" pos:end="90:56"><expr pos:start="90:55" pos:end="90:56"><name pos:start="90:55" pos:end="90:56">bs</name></expr></argument>, <argument pos:start="90:59" pos:end="90:62"><expr pos:start="90:59" pos:end="90:62"><name pos:start="90:59" pos:end="90:62">NULL</name></expr></argument>, <argument pos:start="90:65" pos:end="90:74"><expr pos:start="90:65" pos:end="90:74"><operator pos:start="90:65" pos:end="90:65">&amp;</operator><name pos:start="90:66" pos:end="90:74">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="91:9" pos:end="96:9"><if pos:start="91:9" pos:end="96:9">if <condition pos:start="91:12" pos:end="91:22">(<expr pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:21">local_err</name></expr>)</condition> <block pos:start="91:24" pos:end="96:9">{<block_content pos:start="92:13" pos:end="95:19">
            <expr_stmt pos:start="92:13" pos:end="92:45"><expr pos:start="92:13" pos:end="92:44"><call pos:start="92:13" pos:end="92:44"><name pos:start="92:13" pos:end="92:27">error_propagate</name><argument_list pos:start="92:28" pos:end="92:44">(<argument pos:start="92:29" pos:end="92:32"><expr pos:start="92:29" pos:end="92:32"><name pos:start="92:29" pos:end="92:32">errp</name></expr></argument>, <argument pos:start="92:35" pos:end="92:43"><expr pos:start="92:35" pos:end="92:43"><name pos:start="92:35" pos:end="92:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="93:13" pos:end="93:35"><expr pos:start="93:13" pos:end="93:34"><call pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:30">backup_job_cleanup</name><argument_list pos:start="93:31" pos:end="93:34">(<argument pos:start="93:32" pos:end="93:33"><expr pos:start="93:32" pos:end="93:33"><name pos:start="93:32" pos:end="93:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="94:13" pos:end="94:45"><expr pos:start="94:13" pos:end="94:44"><call pos:start="94:13" pos:end="94:44"><name pos:start="94:13" pos:end="94:31">aio_context_release</name><argument_list pos:start="94:32" pos:end="94:44">(<argument pos:start="94:33" pos:end="94:43"><expr pos:start="94:33" pos:end="94:43"><name pos:start="94:33" pos:end="94:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="95:13" pos:end="95:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><call pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:23">block_job_start</name><argument_list pos:start="97:24" pos:end="97:28">(<argument pos:start="97:25" pos:end="97:27"><expr pos:start="97:25" pos:end="97:27"><name pos:start="97:25" pos:end="97:27">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="98:9" pos:end="98:14">break;</break>
    <default pos:start="99:5" pos:end="99:12">default:</default>
        <expr_stmt pos:start="100:9" pos:end="100:41"><expr pos:start="100:9" pos:end="100:40"><call pos:start="100:9" pos:end="100:40"><name pos:start="100:9" pos:end="100:27">aio_context_release</name><argument_list pos:start="100:28" pos:end="100:40">(<argument pos:start="100:29" pos:end="100:39"><expr pos:start="100:29" pos:end="100:39"><name pos:start="100:29" pos:end="100:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="101:9" pos:end="101:16"><expr pos:start="101:9" pos:end="101:15"><call pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:13">abort</name><argument_list pos:start="101:14" pos:end="101:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:12">stage</name></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <name pos:start="103:16" pos:end="103:40">BLOCK_REPLICATION_RUNNING</name></expr>;</expr_stmt>
    <if_stmt pos:start="104:5" pos:end="106:5"><if pos:start="104:5" pos:end="106:5">if <condition pos:start="104:8" pos:end="104:46">(<expr pos:start="104:9" pos:end="104:45"><name pos:start="104:9" pos:end="104:15"><name pos:start="104:9" pos:end="104:9">s</name><operator pos:start="104:10" pos:end="104:11">-&gt;</operator><name pos:start="104:12" pos:end="104:15">mode</name></name> <operator pos:start="104:17" pos:end="104:18">==</operator> <name pos:start="104:20" pos:end="104:45">REPLICATION_MODE_SECONDARY</name></expr>)</condition> <block pos:start="104:48" pos:end="106:5">{<block_content pos:start="105:9" pos:end="105:41">
        <expr_stmt pos:start="105:9" pos:end="105:41"><expr pos:start="105:9" pos:end="105:40"><call pos:start="105:9" pos:end="105:40"><name pos:start="105:9" pos:end="105:31">secondary_do_checkpoint</name><argument_list pos:start="105:32" pos:end="105:40">(<argument pos:start="105:33" pos:end="105:33"><expr pos:start="105:33" pos:end="105:33"><name pos:start="105:33" pos:end="105:33">s</name></expr></argument>, <argument pos:start="105:36" pos:end="105:39"><expr pos:start="105:36" pos:end="105:39"><name pos:start="105:36" pos:end="105:39">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="107:5" pos:end="107:17"><expr pos:start="107:5" pos:end="107:16"><name pos:start="107:5" pos:end="107:12"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:12">error</name></name> <operator pos:start="107:14" pos:end="107:14">=</operator> <literal type="number" pos:start="107:16" pos:end="107:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="108:5" pos:end="108:37"><expr pos:start="108:5" pos:end="108:36"><call pos:start="108:5" pos:end="108:36"><name pos:start="108:5" pos:end="108:23">aio_context_release</name><argument_list pos:start="108:24" pos:end="108:36">(<argument pos:start="108:25" pos:end="108:35"><expr pos:start="108:25" pos:end="108:35"><name pos:start="108:25" pos:end="108:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
