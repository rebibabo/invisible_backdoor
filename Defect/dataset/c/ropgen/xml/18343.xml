<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18343.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">nbd_init</name><parameter_list pos:start="1:13" pos:end="1:77">(<parameter pos:start="1:14" pos:end="1:19"><decl pos:start="1:14" pos:end="1:19"><type pos:start="1:14" pos:end="1:19"><name pos:start="1:14" pos:end="1:16">int</name></type> <name pos:start="1:18" pos:end="1:19">fd</name></decl></parameter>, <parameter pos:start="1:22" pos:end="1:30"><decl pos:start="1:22" pos:end="1:30"><type pos:start="1:22" pos:end="1:30"><name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:30">csock</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:40">uint32_t</name></type> <name pos:start="1:42" pos:end="1:46">flags</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:53">off_t</name></type> <name pos:start="1:55" pos:end="1:58">size</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:76"><decl pos:start="1:61" pos:end="1:76"><type pos:start="1:61" pos:end="1:76"><name pos:start="1:61" pos:end="1:66">size_t</name></type> <name pos:start="1:68" pos:end="1:76">blocksize</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <expr_stmt pos:start="5:5" pos:end="5:32"><expr pos:start="5:5" pos:end="5:31"><call pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:9">TRACE</name><argument_list pos:start="5:10" pos:end="5:31">(<argument pos:start="5:11" pos:end="5:30"><expr pos:start="5:11" pos:end="5:30"><literal type="string" pos:start="5:11" pos:end="5:30">"Setting NBD socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="9:5" pos:end="19:5"><if pos:start="9:5" pos:end="19:5">if <condition pos:start="9:8" pos:end="9:43">(<expr pos:start="9:9" pos:end="9:42"><call pos:start="9:9" pos:end="9:38"><name pos:start="9:9" pos:end="9:13">ioctl</name><argument_list pos:start="9:14" pos:end="9:38">(<argument pos:start="9:15" pos:end="9:16"><expr pos:start="9:15" pos:end="9:16"><name pos:start="9:15" pos:end="9:16">fd</name></expr></argument>, <argument pos:start="9:19" pos:end="9:30"><expr pos:start="9:19" pos:end="9:30"><name pos:start="9:19" pos:end="9:30">NBD_SET_SOCK</name></expr></argument>, <argument pos:start="9:33" pos:end="9:37"><expr pos:start="9:33" pos:end="9:37"><name pos:start="9:33" pos:end="9:37">csock</name></expr></argument>)</argument_list></call> <operator pos:start="9:40" pos:end="9:40">&lt;</operator> <literal type="number" pos:start="9:42" pos:end="9:42">0</literal></expr>)</condition> <block pos:start="9:45" pos:end="19:5">{<block_content pos:start="11:9" pos:end="17:18">

        <decl_stmt pos:start="11:9" pos:end="11:27"><decl pos:start="11:9" pos:end="11:26"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:18">serrno</name> <init pos:start="11:20" pos:end="11:26">= <expr pos:start="11:22" pos:end="11:26"><name pos:start="11:22" pos:end="11:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:40"><expr pos:start="13:9" pos:end="13:39"><call pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:11">LOG</name><argument_list pos:start="13:12" pos:end="13:39">(<argument pos:start="13:13" pos:end="13:38"><expr pos:start="13:13" pos:end="13:38"><literal type="string" pos:start="13:13" pos:end="13:38">"Failed to set NBD socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:23"><expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:13">errno</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:22">serrno</name></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:65"><expr pos:start="23:5" pos:end="23:64"><call pos:start="23:5" pos:end="23:64"><name pos:start="23:5" pos:end="23:9">TRACE</name><argument_list pos:start="23:10" pos:end="23:64">(<argument pos:start="23:11" pos:end="23:37"><expr pos:start="23:11" pos:end="23:37"><literal type="string" pos:start="23:11" pos:end="23:37">"Setting block size to %lu"</literal></expr></argument>, <argument pos:start="23:40" pos:end="23:63"><expr pos:start="23:40" pos:end="23:63"><operator pos:start="23:40" pos:end="23:40">(</operator><name pos:start="23:41" pos:end="23:48">unsigned</name> <name pos:start="23:50" pos:end="23:53">long</name><operator pos:start="23:54" pos:end="23:54">)</operator><name pos:start="23:55" pos:end="23:63">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:50">(<expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:13">ioctl</name><argument_list pos:start="27:14" pos:end="27:45">(<argument pos:start="27:15" pos:end="27:16"><expr pos:start="27:15" pos:end="27:16"><name pos:start="27:15" pos:end="27:16">fd</name></expr></argument>, <argument pos:start="27:19" pos:end="27:33"><expr pos:start="27:19" pos:end="27:33"><name pos:start="27:19" pos:end="27:33">NBD_SET_BLKSIZE</name></expr></argument>, <argument pos:start="27:36" pos:end="27:44"><expr pos:start="27:36" pos:end="27:44"><name pos:start="27:36" pos:end="27:44">blocksize</name></expr></argument>)</argument_list></call> <operator pos:start="27:47" pos:end="27:47">&lt;</operator> <literal type="number" pos:start="27:49" pos:end="27:49">0</literal></expr>)</condition> <block pos:start="27:52" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:18">

        <decl_stmt pos:start="29:9" pos:end="29:27"><decl pos:start="29:9" pos:end="29:26"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:18">serrno</name> <init pos:start="29:20" pos:end="29:26">= <expr pos:start="29:22" pos:end="29:26"><name pos:start="29:22" pos:end="29:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:11">LOG</name><argument_list pos:start="31:12" pos:end="31:44">(<argument pos:start="31:13" pos:end="31:43"><expr pos:start="31:13" pos:end="31:43"><literal type="string" pos:start="31:13" pos:end="31:43">"Failed setting NBD block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:13">errno</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:22">serrno</name></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:74"><expr pos:start="41:9" pos:end="41:73"><call pos:start="41:9" pos:end="41:73"><name pos:start="41:9" pos:end="41:13">TRACE</name><argument_list pos:start="41:14" pos:end="41:73">(<argument pos:start="41:15" pos:end="41:44"><expr pos:start="41:15" pos:end="41:44"><literal type="string" pos:start="41:15" pos:end="41:44">"Setting size to %zd block(s)"</literal></expr></argument>, <argument pos:start="41:47" pos:end="41:72"><expr pos:start="41:47" pos:end="41:72"><operator pos:start="41:47" pos:end="41:47">(</operator><name pos:start="41:48" pos:end="41:53">size_t</name><operator pos:start="41:54" pos:end="41:54">)</operator><operator pos:start="41:55" pos:end="41:55">(</operator><name pos:start="41:56" pos:end="41:59">size</name> <operator pos:start="41:61" pos:end="41:61">/</operator> <name pos:start="41:63" pos:end="41:71">blocksize</name><operator pos:start="41:72" pos:end="41:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:61">(<expr pos:start="45:9" pos:end="45:60"><call pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:13">ioctl</name><argument_list pos:start="45:14" pos:end="45:56">(<argument pos:start="45:15" pos:end="45:16"><expr pos:start="45:15" pos:end="45:16"><name pos:start="45:15" pos:end="45:16">fd</name></expr></argument>, <argument pos:start="45:19" pos:end="45:37"><expr pos:start="45:19" pos:end="45:37"><name pos:start="45:19" pos:end="45:37">NBD_SET_SIZE_BLOCKS</name></expr></argument>, <argument pos:start="45:40" pos:end="45:55"><expr pos:start="45:40" pos:end="45:55"><name pos:start="45:40" pos:end="45:43">size</name> <operator pos:start="45:45" pos:end="45:45">/</operator> <name pos:start="45:47" pos:end="45:55">blocksize</name></expr></argument>)</argument_list></call> <operator pos:start="45:58" pos:end="45:58">&lt;</operator> <literal type="number" pos:start="45:60" pos:end="45:60">0</literal></expr>)</condition> <block pos:start="45:63" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:18">

        <decl_stmt pos:start="47:9" pos:end="47:27"><decl pos:start="47:9" pos:end="47:26"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:18">serrno</name> <init pos:start="47:20" pos:end="47:26">= <expr pos:start="47:22" pos:end="47:26"><name pos:start="47:22" pos:end="47:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:47"><expr pos:start="49:9" pos:end="49:46"><call pos:start="49:9" pos:end="49:46"><name pos:start="49:9" pos:end="49:11">LOG</name><argument_list pos:start="49:12" pos:end="49:46">(<argument pos:start="49:13" pos:end="49:45"><expr pos:start="49:13" pos:end="49:45"><literal type="string" pos:start="49:13" pos:end="49:45">"Failed setting size (in blocks)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:13">errno</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:22">serrno</name></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="79:5"><if pos:start="59:5" pos:end="79:5">if <condition pos:start="59:8" pos:end="59:35">(<expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:13">flags</name> <operator pos:start="59:15" pos:end="59:15">&amp;</operator> <name pos:start="59:17" pos:end="59:34">NBD_FLAG_READ_ONLY</name></expr>)</condition> <block pos:start="59:37" pos:end="79:5">{<block_content pos:start="61:9" pos:end="77:9">

        <decl_stmt pos:start="61:9" pos:end="61:26"><decl pos:start="61:9" pos:end="61:25"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:21">read_only</name> <init pos:start="61:23" pos:end="61:25">= <expr pos:start="61:25" pos:end="61:25"><literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:43"><call pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:13">TRACE</name><argument_list pos:start="63:14" pos:end="63:43">(<argument pos:start="63:15" pos:end="63:42"><expr pos:start="63:15" pos:end="63:42"><literal type="string" pos:start="63:15" pos:end="63:42">"Setting readonly attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="67:9" pos:end="77:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:64">(<expr pos:start="67:13" pos:end="67:63"><call pos:start="67:13" pos:end="67:59"><name pos:start="67:13" pos:end="67:17">ioctl</name><argument_list pos:start="67:18" pos:end="67:59">(<argument pos:start="67:19" pos:end="67:20"><expr pos:start="67:19" pos:end="67:20"><name pos:start="67:19" pos:end="67:20">fd</name></expr></argument>, <argument pos:start="67:23" pos:end="67:30"><expr pos:start="67:23" pos:end="67:30"><name pos:start="67:23" pos:end="67:30">BLKROSET</name></expr></argument>, <argument pos:start="67:33" pos:end="67:58"><expr pos:start="67:33" pos:end="67:58"><operator pos:start="67:33" pos:end="67:33">(</operator><name pos:start="67:34" pos:end="67:41">unsigned</name> <name pos:start="67:43" pos:end="67:46">long</name><operator pos:start="67:47" pos:end="67:47">)</operator> <operator pos:start="67:49" pos:end="67:49">&amp;</operator><name pos:start="67:50" pos:end="67:58">read_only</name></expr></argument>)</argument_list></call> <operator pos:start="67:61" pos:end="67:61">&lt;</operator> <literal type="number" pos:start="67:63" pos:end="67:63">0</literal></expr>)</condition> <block pos:start="67:66" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:22">

            <decl_stmt pos:start="69:13" pos:end="69:31"><decl pos:start="69:13" pos:end="69:30"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:22">serrno</name> <init pos:start="69:24" pos:end="69:30">= <expr pos:start="69:26" pos:end="69:30"><name pos:start="69:26" pos:end="69:30">errno</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:54"><expr pos:start="71:13" pos:end="71:53"><call pos:start="71:13" pos:end="71:53"><name pos:start="71:13" pos:end="71:15">LOG</name><argument_list pos:start="71:16" pos:end="71:53">(<argument pos:start="71:17" pos:end="71:52"><expr pos:start="71:17" pos:end="71:52"><literal type="string" pos:start="71:17" pos:end="71:52">"Failed setting read-only attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:27"><expr pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:17">errno</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:26">serrno</name></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:22">return <expr pos:start="75:20" pos:end="75:21"><operator pos:start="75:20" pos:end="75:20">-</operator><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="85:27">(<expr pos:start="83:9" pos:end="85:26"><call pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:13">ioctl</name><argument_list pos:start="83:14" pos:end="83:39">(<argument pos:start="83:15" pos:end="83:16"><expr pos:start="83:15" pos:end="83:16"><name pos:start="83:15" pos:end="83:16">fd</name></expr></argument>, <argument pos:start="83:19" pos:end="83:31"><expr pos:start="83:19" pos:end="83:31"><name pos:start="83:19" pos:end="83:31">NBD_SET_FLAGS</name></expr></argument>, <argument pos:start="83:34" pos:end="83:38"><expr pos:start="83:34" pos:end="83:38"><name pos:start="83:34" pos:end="83:38">flags</name></expr></argument>)</argument_list></call> <operator pos:start="83:41" pos:end="83:41">&lt;</operator> <literal type="number" pos:start="83:43" pos:end="83:43">0</literal>

        <operator pos:start="85:9" pos:end="85:10">&amp;&amp;</operator> <name pos:start="85:12" pos:end="85:16">errno</name> <operator pos:start="85:18" pos:end="85:19">!=</operator> <name pos:start="85:21" pos:end="85:26">ENOTTY</name></expr>)</condition> <block pos:start="85:29" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:18">

        <decl_stmt pos:start="87:9" pos:end="87:27"><decl pos:start="87:9" pos:end="87:26"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:18">serrno</name> <init pos:start="87:20" pos:end="87:26">= <expr pos:start="87:22" pos:end="87:26"><name pos:start="87:22" pos:end="87:26">errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:36"><expr pos:start="89:9" pos:end="89:35"><call pos:start="89:9" pos:end="89:35"><name pos:start="89:9" pos:end="89:11">LOG</name><argument_list pos:start="89:12" pos:end="89:35">(<argument pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:34"><literal type="string" pos:start="89:13" pos:end="89:34">"Failed setting flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:23"><expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:13">errno</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <name pos:start="91:17" pos:end="91:22">serrno</name></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:31"><expr pos:start="99:5" pos:end="99:30"><call pos:start="99:5" pos:end="99:30"><name pos:start="99:5" pos:end="99:9">TRACE</name><argument_list pos:start="99:10" pos:end="99:30">(<argument pos:start="99:11" pos:end="99:29"><expr pos:start="99:11" pos:end="99:29"><literal type="string" pos:start="99:11" pos:end="99:29">"Negotiation ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
