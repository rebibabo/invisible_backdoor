<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19267.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">tcg_out_modrm_sib_offset</name><parameter_list pos:start="1:37" pos:end="3:75">(<parameter pos:start="1:38" pos:end="1:50"><decl pos:start="1:38" pos:end="1:50"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:47">TCGContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:59">opc</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:66"><decl pos:start="1:62" pos:end="1:66"><type pos:start="1:62" pos:end="1:66"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:66">r</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:74"><decl pos:start="1:69" pos:end="1:74"><type pos:start="1:69" pos:end="1:74"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:74">rm</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:46">index</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:57"><decl pos:start="3:49" pos:end="3:57"><type pos:start="3:49" pos:end="3:57"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:57">shift</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:74"><decl pos:start="3:60" pos:end="3:74"><type pos:start="3:60" pos:end="3:74"><name pos:start="3:60" pos:end="3:67">intptr_t</name></type> <name pos:start="3:69" pos:end="3:74">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:5">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">mod</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="77:5"><if pos:start="11:5" pos:end="77:5">if <condition pos:start="11:8" pos:end="11:28">(<expr pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:13">index</name> <operator pos:start="11:15" pos:end="11:15">&lt;</operator> <literal type="number" pos:start="11:17" pos:end="11:17">0</literal> <operator pos:start="11:19" pos:end="11:20">&amp;&amp;</operator> <name pos:start="11:22" pos:end="11:23">rm</name> <operator pos:start="11:25" pos:end="11:25">&lt;</operator> <literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr>)</condition> <block pos:start="11:30" pos:end="77:5">{<block_content pos:start="13:9" pos:end="75:9">

        <if_stmt pos:start="13:9" pos:end="75:9"><if pos:start="13:9" pos:end="63:9">if <condition pos:start="13:12" pos:end="13:38">(<expr pos:start="13:13" pos:end="13:37"><name pos:start="13:13" pos:end="13:31">TCG_TARGET_REG_BITS</name> <operator pos:start="13:33" pos:end="13:34">==</operator> <literal type="number" pos:start="13:36" pos:end="13:37">64</literal></expr>)</condition> <block pos:start="13:40" pos:end="63:9">{<block_content pos:start="19:13" pos:end="61:24">

            <comment type="block" pos:start="15:13" pos:end="17:64">/* Try for a rip-relative addressing mode.  This has replaced

               the 32-bit-mode absolute addressing encoding.  */</comment>

            <decl_stmt pos:start="19:13" pos:end="19:58"><decl pos:start="19:13" pos:end="19:57"><type pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:20">intptr_t</name></type> <name pos:start="19:22" pos:end="19:23">pc</name> <init pos:start="19:25" pos:end="19:57">= <expr pos:start="19:27" pos:end="19:57"><operator pos:start="19:27" pos:end="19:27">(</operator><name pos:start="19:28" pos:end="19:35">intptr_t</name><operator pos:start="19:36" pos:end="19:36">)</operator><name pos:start="19:37" pos:end="19:47"><name pos:start="19:37" pos:end="19:37">s</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:47">code_ptr</name></name> <operator pos:start="19:49" pos:end="19:49">+</operator> <literal type="number" pos:start="19:51" pos:end="19:53">5</literal> <operator pos:start="19:53" pos:end="19:53">+</operator> <operator pos:start="19:55" pos:end="19:55">~</operator><name pos:start="19:56" pos:end="19:57">rm</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="21:13" pos:end="21:40"><decl pos:start="21:13" pos:end="21:39"><type pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:20">intptr_t</name></type> <name pos:start="21:22" pos:end="21:25">disp</name> <init pos:start="21:27" pos:end="21:39">= <expr pos:start="21:29" pos:end="21:39"><name pos:start="21:29" pos:end="21:34">offset</name> <operator pos:start="21:36" pos:end="21:36">-</operator> <name pos:start="21:38" pos:end="21:39">pc</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="23:13" pos:end="33:13"><if pos:start="23:13" pos:end="33:13">if <condition pos:start="23:16" pos:end="23:38">(<expr pos:start="23:17" pos:end="23:37"><name pos:start="23:17" pos:end="23:20">disp</name> <operator pos:start="23:22" pos:end="23:23">==</operator> <operator pos:start="23:25" pos:end="23:25">(</operator><name pos:start="23:26" pos:end="23:32">int32_t</name><operator pos:start="23:33" pos:end="23:33">)</operator><name pos:start="23:34" pos:end="23:37">disp</name></expr>)</condition> <block pos:start="23:40" pos:end="33:13">{<block_content pos:start="25:17" pos:end="31:23">

                <expr_stmt pos:start="25:17" pos:end="25:45"><expr pos:start="25:17" pos:end="25:44"><call pos:start="25:17" pos:end="25:44"><name pos:start="25:17" pos:end="25:27">tcg_out_opc</name><argument_list pos:start="25:28" pos:end="25:44">(<argument pos:start="25:29" pos:end="25:29"><expr pos:start="25:29" pos:end="25:29"><name pos:start="25:29" pos:end="25:29">s</name></expr></argument>, <argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><name pos:start="25:32" pos:end="25:34">opc</name></expr></argument>, <argument pos:start="25:37" pos:end="25:37"><expr pos:start="25:37" pos:end="25:37"><name pos:start="25:37" pos:end="25:37">r</name></expr></argument>, <argument pos:start="25:40" pos:end="25:40"><expr pos:start="25:40" pos:end="25:40"><literal type="number" pos:start="25:40" pos:end="25:40">0</literal></expr></argument>, <argument pos:start="25:43" pos:end="25:43"><expr pos:start="25:43" pos:end="25:43"><literal type="number" pos:start="25:43" pos:end="25:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="27:17" pos:end="27:54"><expr pos:start="27:17" pos:end="27:53"><call pos:start="27:17" pos:end="27:53"><name pos:start="27:17" pos:end="27:24">tcg_out8</name><argument_list pos:start="27:25" pos:end="27:53">(<argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>, <argument pos:start="27:29" pos:end="27:52"><expr pos:start="27:29" pos:end="27:52"><operator pos:start="27:29" pos:end="27:29">(</operator><call pos:start="27:30" pos:end="27:42"><name pos:start="27:30" pos:end="27:39">LOWREGMASK</name><argument_list pos:start="27:40" pos:end="27:42">(<argument pos:start="27:41" pos:end="27:41"><expr pos:start="27:41" pos:end="27:41"><name pos:start="27:41" pos:end="27:41">r</name></expr></argument>)</argument_list></call> <operator pos:start="27:44" pos:end="27:45">&lt;&lt;</operator> <literal type="number" pos:start="27:47" pos:end="27:47">3</literal><operator pos:start="27:48" pos:end="27:48">)</operator> <operator pos:start="27:50" pos:end="27:50">|</operator> <literal type="number" pos:start="27:52" pos:end="27:52">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="29:17" pos:end="29:35"><expr pos:start="29:17" pos:end="29:34"><call pos:start="29:17" pos:end="29:34"><name pos:start="29:17" pos:end="29:25">tcg_out32</name><argument_list pos:start="29:26" pos:end="29:34">(<argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><name pos:start="29:27" pos:end="29:27">s</name></expr></argument>, <argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="31:17" pos:end="31:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="37:13" pos:end="41:43">/* Try for an absolute address encoding.  This requires the

               use of the MODRM+SIB encoding and is therefore larger than

               rip-relative addressing.  */</comment>

            <if_stmt pos:start="43:13" pos:end="55:13"><if pos:start="43:13" pos:end="55:13">if <condition pos:start="43:16" pos:end="43:42">(<expr pos:start="43:17" pos:end="43:41"><name pos:start="43:17" pos:end="43:22">offset</name> <operator pos:start="43:24" pos:end="43:25">==</operator> <operator pos:start="43:27" pos:end="43:27">(</operator><name pos:start="43:28" pos:end="43:34">int32_t</name><operator pos:start="43:35" pos:end="43:35">)</operator><name pos:start="43:36" pos:end="43:41">offset</name></expr>)</condition> <block pos:start="43:44" pos:end="55:13">{<block_content pos:start="45:17" pos:end="53:23">

                <expr_stmt pos:start="45:17" pos:end="45:45"><expr pos:start="45:17" pos:end="45:44"><call pos:start="45:17" pos:end="45:44"><name pos:start="45:17" pos:end="45:27">tcg_out_opc</name><argument_list pos:start="45:28" pos:end="45:44">(<argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><name pos:start="45:29" pos:end="45:29">s</name></expr></argument>, <argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">opc</name></expr></argument>, <argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><name pos:start="45:37" pos:end="45:37">r</name></expr></argument>, <argument pos:start="45:40" pos:end="45:40"><expr pos:start="45:40" pos:end="45:40"><literal type="number" pos:start="45:40" pos:end="45:40">0</literal></expr></argument>, <argument pos:start="45:43" pos:end="45:43"><expr pos:start="45:43" pos:end="45:43"><literal type="number" pos:start="45:43" pos:end="45:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:54"><expr pos:start="47:17" pos:end="47:53"><call pos:start="47:17" pos:end="47:53"><name pos:start="47:17" pos:end="47:24">tcg_out8</name><argument_list pos:start="47:25" pos:end="47:53">(<argument pos:start="47:26" pos:end="47:26"><expr pos:start="47:26" pos:end="47:26"><name pos:start="47:26" pos:end="47:26">s</name></expr></argument>, <argument pos:start="47:29" pos:end="47:52"><expr pos:start="47:29" pos:end="47:52"><operator pos:start="47:29" pos:end="47:29">(</operator><call pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:39">LOWREGMASK</name><argument_list pos:start="47:40" pos:end="47:42">(<argument pos:start="47:41" pos:end="47:41"><expr pos:start="47:41" pos:end="47:41"><name pos:start="47:41" pos:end="47:41">r</name></expr></argument>)</argument_list></call> <operator pos:start="47:44" pos:end="47:45">&lt;&lt;</operator> <literal type="number" pos:start="47:47" pos:end="47:47">3</literal><operator pos:start="47:48" pos:end="47:48">)</operator> <operator pos:start="47:50" pos:end="47:50">|</operator> <literal type="number" pos:start="47:52" pos:end="47:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:42"><expr pos:start="49:17" pos:end="49:41"><call pos:start="49:17" pos:end="49:41"><name pos:start="49:17" pos:end="49:24">tcg_out8</name><argument_list pos:start="49:25" pos:end="49:41">(<argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><name pos:start="49:26" pos:end="49:26">s</name></expr></argument>, <argument pos:start="49:29" pos:end="49:40"><expr pos:start="49:29" pos:end="49:40"><operator pos:start="49:29" pos:end="49:29">(</operator><literal type="number" pos:start="49:30" pos:end="49:30">4</literal> <operator pos:start="49:32" pos:end="49:33">&lt;&lt;</operator> <literal type="number" pos:start="49:35" pos:end="49:35">3</literal><operator pos:start="49:36" pos:end="49:36">)</operator> <operator pos:start="49:38" pos:end="49:38">|</operator> <literal type="number" pos:start="49:40" pos:end="49:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:37"><expr pos:start="51:17" pos:end="51:36"><call pos:start="51:17" pos:end="51:36"><name pos:start="51:17" pos:end="51:25">tcg_out32</name><argument_list pos:start="51:26" pos:end="51:36">(<argument pos:start="51:27" pos:end="51:27"><expr pos:start="51:27" pos:end="51:27"><name pos:start="51:27" pos:end="51:27">s</name></expr></argument>, <argument pos:start="51:30" pos:end="51:35"><expr pos:start="51:30" pos:end="51:35"><name pos:start="51:30" pos:end="51:35">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="53:17" pos:end="53:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="59:13" pos:end="59:61">/* ??? The memory isn't directly addressable.  */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:24"><expr pos:start="61:13" pos:end="61:23"><call pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:21">tcg_abort</name><argument_list pos:start="61:22" pos:end="61:23">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="75:9">else <block pos:start="63:16" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:19">

            <comment type="block" pos:start="65:13" pos:end="65:36">/* Absolute address.  */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:41"><expr pos:start="67:13" pos:end="67:40"><call pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:23">tcg_out_opc</name><argument_list pos:start="67:24" pos:end="67:40">(<argument pos:start="67:25" pos:end="67:25"><expr pos:start="67:25" pos:end="67:25"><name pos:start="67:25" pos:end="67:25">s</name></expr></argument>, <argument pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:30">opc</name></expr></argument>, <argument pos:start="67:33" pos:end="67:33"><expr pos:start="67:33" pos:end="67:33"><name pos:start="67:33" pos:end="67:33">r</name></expr></argument>, <argument pos:start="67:36" pos:end="67:36"><expr pos:start="67:36" pos:end="67:36"><literal type="number" pos:start="67:36" pos:end="67:36">0</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><literal type="number" pos:start="67:39" pos:end="67:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><call pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:20">tcg_out8</name><argument_list pos:start="69:21" pos:end="69:37">(<argument pos:start="69:22" pos:end="69:22"><expr pos:start="69:22" pos:end="69:22"><name pos:start="69:22" pos:end="69:22">s</name></expr></argument>, <argument pos:start="69:25" pos:end="69:36"><expr pos:start="69:25" pos:end="69:36"><operator pos:start="69:25" pos:end="69:25">(</operator><name pos:start="69:26" pos:end="69:26">r</name> <operator pos:start="69:28" pos:end="69:29">&lt;&lt;</operator> <literal type="number" pos:start="69:31" pos:end="69:31">3</literal><operator pos:start="69:32" pos:end="69:32">)</operator> <operator pos:start="69:34" pos:end="69:34">|</operator> <literal type="number" pos:start="69:36" pos:end="69:36">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:33"><expr pos:start="71:13" pos:end="71:32"><call pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:21">tcg_out32</name><argument_list pos:start="71:22" pos:end="71:32">(<argument pos:start="71:23" pos:end="71:23"><expr pos:start="71:23" pos:end="71:23"><name pos:start="71:23" pos:end="71:23">s</name></expr></argument>, <argument pos:start="71:26" pos:end="71:31"><expr pos:start="71:26" pos:end="71:31"><name pos:start="71:26" pos:end="71:31">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:19">return;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="83:71">/* Find the length of the immediate addend.  Note that the encoding

       that would be used for (%ebp) indicates absolute addressing.  */</comment>

    <if_stmt pos:start="85:5" pos:end="101:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:15">(<expr pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:10">rm</name> <operator pos:start="85:12" pos:end="85:12">&lt;</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>)</condition> <block pos:start="85:17" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:33">

        <expr_stmt pos:start="87:9" pos:end="87:33"><expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">mod</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr><operator pos:start="87:16" pos:end="87:16">,</operator> <expr pos:start="87:18" pos:end="87:24"><name pos:start="87:18" pos:end="87:20">len</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <literal type="number" pos:start="87:24" pos:end="87:24">4</literal></expr><operator pos:start="87:25" pos:end="87:25">,</operator> <expr pos:start="87:27" pos:end="87:32"><name pos:start="87:27" pos:end="87:28">rm</name> <operator pos:start="87:30" pos:end="87:30">=</operator> <literal type="number" pos:start="87:32" pos:end="87:32">5</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="93:5">else if <condition pos:start="89:15" pos:end="89:60">(<expr pos:start="89:16" pos:end="89:59"><name pos:start="89:16" pos:end="89:21">offset</name> <operator pos:start="89:23" pos:end="89:24">==</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal> <operator pos:start="89:28" pos:end="89:29">&amp;&amp;</operator> <call pos:start="89:31" pos:end="89:44"><name pos:start="89:31" pos:end="89:40">LOWREGMASK</name><argument_list pos:start="89:41" pos:end="89:44">(<argument pos:start="89:42" pos:end="89:43"><expr pos:start="89:42" pos:end="89:43"><name pos:start="89:42" pos:end="89:43">rm</name></expr></argument>)</argument_list></call> <operator pos:start="89:46" pos:end="89:47">!=</operator> <name pos:start="89:49" pos:end="89:59">TCG_REG_EBP</name></expr>)</condition> <block pos:start="89:62" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:25">

        <expr_stmt pos:start="91:9" pos:end="91:25"><expr pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:11">mod</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <literal type="number" pos:start="91:15" pos:end="91:15">0</literal></expr><operator pos:start="91:16" pos:end="91:16">,</operator> <expr pos:start="91:18" pos:end="91:24"><name pos:start="91:18" pos:end="91:20">len</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <literal type="number" pos:start="91:24" pos:end="91:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="93:7" pos:end="97:5">else if <condition pos:start="93:15" pos:end="93:40">(<expr pos:start="93:16" pos:end="93:39"><name pos:start="93:16" pos:end="93:21">offset</name> <operator pos:start="93:23" pos:end="93:24">==</operator> <operator pos:start="93:26" pos:end="93:26">(</operator><name pos:start="93:27" pos:end="93:32">int8_t</name><operator pos:start="93:33" pos:end="93:33">)</operator><name pos:start="93:34" pos:end="93:39">offset</name></expr>)</condition> <block pos:start="93:42" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:28">

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:11">mod</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <literal type="number" pos:start="95:15" pos:end="95:18">0x40</literal></expr><operator pos:start="95:19" pos:end="95:19">,</operator> <expr pos:start="95:21" pos:end="95:27"><name pos:start="95:21" pos:end="95:23">len</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <literal type="number" pos:start="95:27" pos:end="95:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="101:5">else <block pos:start="97:12" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:28">

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:11">mod</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <literal type="number" pos:start="99:15" pos:end="99:18">0x80</literal></expr><operator pos:start="99:19" pos:end="99:19">,</operator> <expr pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:23">len</name> <operator pos:start="99:25" pos:end="99:25">=</operator> <literal type="number" pos:start="99:27" pos:end="99:27">4</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="107:74">/* Use a single byte MODRM format if possible.  Note that the encoding

       that would be used for %esp is the escape to the two byte form.  */</comment>

    <if_stmt pos:start="109:5" pos:end="147:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:51">(<expr pos:start="109:9" pos:end="109:50"><name pos:start="109:9" pos:end="109:13">index</name> <operator pos:start="109:15" pos:end="109:15">&lt;</operator> <literal type="number" pos:start="109:17" pos:end="109:17">0</literal> <operator pos:start="109:19" pos:end="109:20">&amp;&amp;</operator> <call pos:start="109:22" pos:end="109:35"><name pos:start="109:22" pos:end="109:31">LOWREGMASK</name><argument_list pos:start="109:32" pos:end="109:35">(<argument pos:start="109:33" pos:end="109:34"><expr pos:start="109:33" pos:end="109:34"><name pos:start="109:33" pos:end="109:34">rm</name></expr></argument>)</argument_list></call> <operator pos:start="109:37" pos:end="109:38">!=</operator> <name pos:start="109:40" pos:end="109:50">TCG_REG_ESP</name></expr>)</condition> <block pos:start="109:53" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:65">

        <comment type="block" pos:start="111:9" pos:end="111:40">/* Single byte MODRM format.  */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:38"><expr pos:start="113:9" pos:end="113:37"><call pos:start="113:9" pos:end="113:37"><name pos:start="113:9" pos:end="113:19">tcg_out_opc</name><argument_list pos:start="113:20" pos:end="113:37">(<argument pos:start="113:21" pos:end="113:21"><expr pos:start="113:21" pos:end="113:21"><name pos:start="113:21" pos:end="113:21">s</name></expr></argument>, <argument pos:start="113:24" pos:end="113:26"><expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">opc</name></expr></argument>, <argument pos:start="113:29" pos:end="113:29"><expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">r</name></expr></argument>, <argument pos:start="113:32" pos:end="113:33"><expr pos:start="113:32" pos:end="113:33"><name pos:start="113:32" pos:end="113:33">rm</name></expr></argument>, <argument pos:start="113:36" pos:end="113:36"><expr pos:start="113:36" pos:end="113:36"><literal type="number" pos:start="113:36" pos:end="113:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:65"><expr pos:start="115:9" pos:end="115:64"><call pos:start="115:9" pos:end="115:64"><name pos:start="115:9" pos:end="115:16">tcg_out8</name><argument_list pos:start="115:17" pos:end="115:64">(<argument pos:start="115:18" pos:end="115:18"><expr pos:start="115:18" pos:end="115:18"><name pos:start="115:18" pos:end="115:18">s</name></expr></argument>, <argument pos:start="115:21" pos:end="115:63"><expr pos:start="115:21" pos:end="115:63"><name pos:start="115:21" pos:end="115:23">mod</name> <operator pos:start="115:25" pos:end="115:25">|</operator> <operator pos:start="115:27" pos:end="115:27">(</operator><call pos:start="115:28" pos:end="115:40"><name pos:start="115:28" pos:end="115:37">LOWREGMASK</name><argument_list pos:start="115:38" pos:end="115:40">(<argument pos:start="115:39" pos:end="115:39"><expr pos:start="115:39" pos:end="115:39"><name pos:start="115:39" pos:end="115:39">r</name></expr></argument>)</argument_list></call> <operator pos:start="115:42" pos:end="115:43">&lt;&lt;</operator> <literal type="number" pos:start="115:45" pos:end="115:45">3</literal><operator pos:start="115:46" pos:end="115:46">)</operator> <operator pos:start="115:48" pos:end="115:48">|</operator> <call pos:start="115:50" pos:end="115:63"><name pos:start="115:50" pos:end="115:59">LOWREGMASK</name><argument_list pos:start="115:60" pos:end="115:63">(<argument pos:start="115:61" pos:end="115:62"><expr pos:start="115:61" pos:end="115:62"><name pos:start="115:61" pos:end="115:62">rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="117:7" pos:end="147:5">else <block pos:start="117:12" pos:end="147:5">{<block_content pos:start="129:9" pos:end="145:78">

        <comment type="block" pos:start="119:9" pos:end="119:41">/* Two byte MODRM+SIB format.  */</comment>



        <comment type="block" pos:start="123:9" pos:end="127:60">/* Note that the encoding that would place %esp into the index

           field indicates no index register.  In 64-bit mode, the REX.X

           bit counts, so %r12 can be used as the index.  */</comment>

        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="133:9">if <condition pos:start="129:12" pos:end="129:22">(<expr pos:start="129:13" pos:end="129:21"><name pos:start="129:13" pos:end="129:17">index</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <literal type="number" pos:start="129:21" pos:end="129:21">0</literal></expr>)</condition> <block pos:start="129:24" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:22">

            <expr_stmt pos:start="131:13" pos:end="131:22"><expr pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:17">index</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <literal type="number" pos:start="131:21" pos:end="131:21">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="137:9">else <block pos:start="133:16" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:41">

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:18">assert</name><argument_list pos:start="135:19" pos:end="135:40">(<argument pos:start="135:20" pos:end="135:39"><expr pos:start="135:20" pos:end="135:39"><name pos:start="135:20" pos:end="135:24">index</name> <operator pos:start="135:26" pos:end="135:27">!=</operator> <name pos:start="135:29" pos:end="135:39">TCG_REG_ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:42"><expr pos:start="141:9" pos:end="141:41"><call pos:start="141:9" pos:end="141:41"><name pos:start="141:9" pos:end="141:19">tcg_out_opc</name><argument_list pos:start="141:20" pos:end="141:41">(<argument pos:start="141:21" pos:end="141:21"><expr pos:start="141:21" pos:end="141:21"><name pos:start="141:21" pos:end="141:21">s</name></expr></argument>, <argument pos:start="141:24" pos:end="141:26"><expr pos:start="141:24" pos:end="141:26"><name pos:start="141:24" pos:end="141:26">opc</name></expr></argument>, <argument pos:start="141:29" pos:end="141:29"><expr pos:start="141:29" pos:end="141:29"><name pos:start="141:29" pos:end="141:29">r</name></expr></argument>, <argument pos:start="141:32" pos:end="141:33"><expr pos:start="141:32" pos:end="141:33"><name pos:start="141:32" pos:end="141:33">rm</name></expr></argument>, <argument pos:start="141:36" pos:end="141:40"><expr pos:start="141:36" pos:end="141:40"><name pos:start="141:36" pos:end="141:40">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:52"><expr pos:start="143:9" pos:end="143:51"><call pos:start="143:9" pos:end="143:51"><name pos:start="143:9" pos:end="143:16">tcg_out8</name><argument_list pos:start="143:17" pos:end="143:51">(<argument pos:start="143:18" pos:end="143:18"><expr pos:start="143:18" pos:end="143:18"><name pos:start="143:18" pos:end="143:18">s</name></expr></argument>, <argument pos:start="143:21" pos:end="143:50"><expr pos:start="143:21" pos:end="143:50"><name pos:start="143:21" pos:end="143:23">mod</name> <operator pos:start="143:25" pos:end="143:25">|</operator> <operator pos:start="143:27" pos:end="143:27">(</operator><call pos:start="143:28" pos:end="143:40"><name pos:start="143:28" pos:end="143:37">LOWREGMASK</name><argument_list pos:start="143:38" pos:end="143:40">(<argument pos:start="143:39" pos:end="143:39"><expr pos:start="143:39" pos:end="143:39"><name pos:start="143:39" pos:end="143:39">r</name></expr></argument>)</argument_list></call> <operator pos:start="143:42" pos:end="143:43">&lt;&lt;</operator> <literal type="number" pos:start="143:45" pos:end="143:45">3</literal><operator pos:start="143:46" pos:end="143:46">)</operator> <operator pos:start="143:48" pos:end="143:48">|</operator> <literal type="number" pos:start="143:50" pos:end="143:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:78"><expr pos:start="145:9" pos:end="145:77"><call pos:start="145:9" pos:end="145:77"><name pos:start="145:9" pos:end="145:16">tcg_out8</name><argument_list pos:start="145:17" pos:end="145:77">(<argument pos:start="145:18" pos:end="145:18"><expr pos:start="145:18" pos:end="145:18"><name pos:start="145:18" pos:end="145:18">s</name></expr></argument>, <argument pos:start="145:21" pos:end="145:76"><expr pos:start="145:21" pos:end="145:76"><operator pos:start="145:21" pos:end="145:21">(</operator><name pos:start="145:22" pos:end="145:26">shift</name> <operator pos:start="145:28" pos:end="145:29">&lt;&lt;</operator> <literal type="number" pos:start="145:31" pos:end="145:31">6</literal><operator pos:start="145:32" pos:end="145:32">)</operator> <operator pos:start="145:34" pos:end="145:34">|</operator> <operator pos:start="145:36" pos:end="145:36">(</operator><call pos:start="145:37" pos:end="145:53"><name pos:start="145:37" pos:end="145:46">LOWREGMASK</name><argument_list pos:start="145:47" pos:end="145:53">(<argument pos:start="145:48" pos:end="145:52"><expr pos:start="145:48" pos:end="145:52"><name pos:start="145:48" pos:end="145:52">index</name></expr></argument>)</argument_list></call> <operator pos:start="145:55" pos:end="145:56">&lt;&lt;</operator> <literal type="number" pos:start="145:58" pos:end="145:58">3</literal><operator pos:start="145:59" pos:end="145:59">)</operator> <operator pos:start="145:61" pos:end="145:61">|</operator> <call pos:start="145:63" pos:end="145:76"><name pos:start="145:63" pos:end="145:72">LOWREGMASK</name><argument_list pos:start="145:73" pos:end="145:76">(<argument pos:start="145:74" pos:end="145:75"><expr pos:start="145:74" pos:end="145:75"><name pos:start="145:74" pos:end="145:75">rm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="151:5" pos:end="159:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:17">(<expr pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:11">len</name> <operator pos:start="151:13" pos:end="151:14">==</operator> <literal type="number" pos:start="151:16" pos:end="151:16">1</literal></expr>)</condition> <block pos:start="151:19" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:28">

        <expr_stmt pos:start="153:9" pos:end="153:28"><expr pos:start="153:9" pos:end="153:27"><call pos:start="153:9" pos:end="153:27"><name pos:start="153:9" pos:end="153:16">tcg_out8</name><argument_list pos:start="153:17" pos:end="153:27">(<argument pos:start="153:18" pos:end="153:18"><expr pos:start="153:18" pos:end="153:18"><name pos:start="153:18" pos:end="153:18">s</name></expr></argument>, <argument pos:start="153:21" pos:end="153:26"><expr pos:start="153:21" pos:end="153:26"><name pos:start="153:21" pos:end="153:26">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="159:5">else if <condition pos:start="155:15" pos:end="155:24">(<expr pos:start="155:16" pos:end="155:23"><name pos:start="155:16" pos:end="155:18">len</name> <operator pos:start="155:20" pos:end="155:21">==</operator> <literal type="number" pos:start="155:23" pos:end="155:23">4</literal></expr>)</condition> <block pos:start="155:26" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:29">

        <expr_stmt pos:start="157:9" pos:end="157:29"><expr pos:start="157:9" pos:end="157:28"><call pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:17">tcg_out32</name><argument_list pos:start="157:18" pos:end="157:28">(<argument pos:start="157:19" pos:end="157:19"><expr pos:start="157:19" pos:end="157:19"><name pos:start="157:19" pos:end="157:19">s</name></expr></argument>, <argument pos:start="157:22" pos:end="157:27"><expr pos:start="157:22" pos:end="157:27"><name pos:start="157:22" pos:end="157:27">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
