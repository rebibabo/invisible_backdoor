<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18099.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:10">ram_addr_t</name></type> <name pos:start="1:12" pos:end="1:34">qemu_ram_alloc_from_ptr</name><parameter_list pos:start="1:35" pos:end="3:63">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:46">DeviceState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dev</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:69"><decl pos:start="1:54" pos:end="1:69"><type pos:start="1:54" pos:end="1:69"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:69">name</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:45">ram_addr_t</name></type> <name pos:start="3:47" pos:end="3:50">size</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:62"><decl pos:start="3:53" pos:end="3:62"><type pos:start="3:53" pos:end="3:62"><name pos:start="3:53" pos:end="3:56">void</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">host</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:29">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">new_block</name></decl>, <decl pos:start="7:26" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:14"><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:31">block</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:8">size</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <call pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="11:29" pos:end="11:34">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:49"><expr pos:start="13:5" pos:end="13:48"><name pos:start="13:5" pos:end="13:13">new_block</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:48"><name pos:start="13:17" pos:end="13:28">qemu_mallocz</name><argument_list pos:start="13:29" pos:end="13:48">(<argument pos:start="13:30" pos:end="13:47"><expr pos:start="13:30" pos:end="13:47"><sizeof pos:start="13:30" pos:end="13:47">sizeof<argument_list pos:start="13:36" pos:end="13:47">(<argument pos:start="13:37" pos:end="13:46"><expr pos:start="13:37" pos:end="13:46"><operator pos:start="13:37" pos:end="13:37">*</operator><name pos:start="13:38" pos:end="13:46">new_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="29:5">if <condition pos:start="17:8" pos:end="17:70">(<expr pos:start="17:9" pos:end="17:69"><name pos:start="17:9" pos:end="17:11">dev</name> <operator pos:start="17:13" pos:end="17:14">&amp;&amp;</operator> <name pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:18">dev</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:30">parent_bus</name></name> <operator pos:start="17:32" pos:end="17:33">&amp;&amp;</operator> <name pos:start="17:35" pos:end="17:69"><name pos:start="17:35" pos:end="17:37">dev</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:49">parent_bus</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:55">info</name><operator pos:start="17:56" pos:end="17:57">-&gt;</operator><name pos:start="17:58" pos:end="17:69">get_dev_path</name></name></expr>)</condition> <block pos:start="17:72" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:9">

        <decl_stmt pos:start="19:9" pos:end="19:60"><decl pos:start="19:9" pos:end="19:59"><type pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:12">char</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:16">id</name> <init pos:start="19:18" pos:end="19:59">= <expr pos:start="19:20" pos:end="19:59"><call pos:start="19:20" pos:end="19:59"><name pos:start="19:20" pos:end="19:54"><name pos:start="19:20" pos:end="19:22">dev</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:34">parent_bus</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:40">info</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:54">get_dev_path</name></name><argument_list pos:start="19:55" pos:end="19:59">(<argument pos:start="19:56" pos:end="19:58"><expr pos:start="19:56" pos:end="19:58"><name pos:start="19:56" pos:end="19:58">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:15">(<expr pos:start="21:13" pos:end="21:14"><name pos:start="21:13" pos:end="21:14">id</name></expr>)</condition> <block pos:start="21:17" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:26">

            <expr_stmt pos:start="23:13" pos:end="23:76"><expr pos:start="23:13" pos:end="23:75"><call pos:start="23:13" pos:end="23:75"><name pos:start="23:13" pos:end="23:20">snprintf</name><argument_list pos:start="23:21" pos:end="23:75">(<argument pos:start="23:22" pos:end="23:37"><expr pos:start="23:22" pos:end="23:37"><name pos:start="23:22" pos:end="23:37"><name pos:start="23:22" pos:end="23:30">new_block</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:37">idstr</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:63"><expr pos:start="23:40" pos:end="23:63"><sizeof pos:start="23:40" pos:end="23:63">sizeof<argument_list pos:start="23:46" pos:end="23:63">(<argument pos:start="23:47" pos:end="23:62"><expr pos:start="23:47" pos:end="23:62"><name pos:start="23:47" pos:end="23:62"><name pos:start="23:47" pos:end="23:55">new_block</name><operator pos:start="23:56" pos:end="23:57">-&gt;</operator><name pos:start="23:58" pos:end="23:62">idstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:66" pos:end="23:70"><expr pos:start="23:66" pos:end="23:70"><literal type="string" pos:start="23:66" pos:end="23:70">"%s/"</literal></expr></argument>, <argument pos:start="23:73" pos:end="23:74"><expr pos:start="23:73" pos:end="23:74"><name pos:start="23:73" pos:end="23:74">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:26"><expr pos:start="25:13" pos:end="25:25"><call pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:21">qemu_free</name><argument_list pos:start="25:22" pos:end="25:25">(<argument pos:start="25:23" pos:end="25:24"><expr pos:start="25:23" pos:end="25:24"><name pos:start="25:23" pos:end="25:24">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><call pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:11">pstrcat</name><argument_list pos:start="31:12" pos:end="31:61">(<argument pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:21">new_block</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:28">idstr</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:54"><expr pos:start="31:31" pos:end="31:54"><sizeof pos:start="31:31" pos:end="31:54">sizeof<argument_list pos:start="31:37" pos:end="31:54">(<argument pos:start="31:38" pos:end="31:53"><expr pos:start="31:38" pos:end="31:53"><name pos:start="31:38" pos:end="31:53"><name pos:start="31:38" pos:end="31:46">new_block</name><operator pos:start="31:47" pos:end="31:48">-&gt;</operator><name pos:start="31:49" pos:end="31:53">idstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:57" pos:end="31:60"><expr pos:start="31:57" pos:end="31:60"><name pos:start="31:57" pos:end="31:60">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:17">QLIST_FOREACH</name><argument_list pos:start="35:18" pos:end="35:48">(<argument pos:start="35:19" pos:end="35:23">block</argument>, <argument pos:start="35:26" pos:end="35:41">&amp;ram_list.blocks</argument>, <argument pos:start="35:44" pos:end="35:47">next</argument>)</argument_list></macro> <block pos:start="35:50" pos:end="47:5">{<block_content pos:start="37:9" pos:end="45:9">

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:52">(<expr pos:start="37:13" pos:end="37:51"><operator pos:start="37:13" pos:end="37:13">!</operator><call pos:start="37:14" pos:end="37:51"><name pos:start="37:14" pos:end="37:19">strcmp</name><argument_list pos:start="37:20" pos:end="37:51">(<argument pos:start="37:21" pos:end="37:32"><expr pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:25">block</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:32">idstr</name></name></expr></argument>, <argument pos:start="37:35" pos:end="37:50"><expr pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:43">new_block</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:50">idstr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:54" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:20">

            <expr_stmt pos:start="39:13" pos:end="41:38"><expr pos:start="39:13" pos:end="41:37"><call pos:start="39:13" pos:end="41:37"><name pos:start="39:13" pos:end="39:19">fprintf</name><argument_list pos:start="39:20" pos:end="41:37">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:26">stderr</name></expr></argument>, <argument pos:start="39:29" pos:end="39:74"><expr pos:start="39:29" pos:end="39:74"><literal type="string" pos:start="39:29" pos:end="39:74">"RAMBlock \"%s\" already registered, abort!\n"</literal></expr></argument>,

                    <argument pos:start="41:21" pos:end="41:36"><expr pos:start="41:21" pos:end="41:36"><name pos:start="41:21" pos:end="41:36"><name pos:start="41:21" pos:end="41:29">new_block</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:36">idstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><call pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:17">abort</name><argument_list pos:start="43:18" pos:end="43:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="51:5" pos:end="51:46"><expr pos:start="51:5" pos:end="51:45"><name pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:13">new_block</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">offset</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <call pos:start="51:25" pos:end="51:45"><name pos:start="51:25" pos:end="51:39">find_ram_offset</name><argument_list pos:start="51:40" pos:end="51:45">(<argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><name pos:start="51:41" pos:end="51:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="113:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:12">host</name></expr>)</condition> <block pos:start="53:15" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:46">

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:17">new_block</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:23">host</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:30">host</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:46"><expr pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:17">new_block</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:24">flags</name></name> <operator pos:start="57:26" pos:end="57:27">|=</operator> <name pos:start="57:29" pos:end="57:45">RAM_PREALLOC_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="113:5">else <block pos:start="59:12" pos:end="113:5">{<block_content pos:start="61:9" pos:end="111:9">

        <if_stmt pos:start="61:9" pos:end="111:9"><if pos:start="61:9" pos:end="83:9">if <condition pos:start="61:12" pos:end="61:21">(<expr pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:20">mem_path</name></expr>)</condition> <block pos:start="61:23" pos:end="83:9">{<block_content pos:start="65:13" pos:end="82:0">

<cpp:if pos:start="63:1" pos:end="63:49">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:49"><call pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:11">defined</name> <argument_list pos:start="63:13" pos:end="63:23">(<argument pos:start="63:14" pos:end="63:22"><expr pos:start="63:14" pos:end="63:22"><name pos:start="63:14" pos:end="63:22">__linux__</name></expr></argument>)</argument_list></call> <operator pos:start="63:25" pos:end="63:26">&amp;&amp;</operator> <operator pos:start="63:28" pos:end="63:28">!</operator><call pos:start="63:29" pos:end="63:49"><name pos:start="63:29" pos:end="63:35">defined</name><argument_list pos:start="63:36" pos:end="63:49">(<argument pos:start="63:37" pos:end="63:48"><expr pos:start="63:37" pos:end="63:48"><name pos:start="63:37" pos:end="63:48">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="65:13" pos:end="65:72"><expr pos:start="65:13" pos:end="65:71"><name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:21">new_block</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:27">host</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <call pos:start="65:31" pos:end="65:71"><name pos:start="65:31" pos:end="65:44">file_ram_alloc</name><argument_list pos:start="65:45" pos:end="65:71">(<argument pos:start="65:46" pos:end="65:54"><expr pos:start="65:46" pos:end="65:54"><name pos:start="65:46" pos:end="65:54">new_block</name></expr></argument>, <argument pos:start="65:57" pos:end="65:60"><expr pos:start="65:57" pos:end="65:60"><name pos:start="65:57" pos:end="65:60">size</name></expr></argument>, <argument pos:start="65:63" pos:end="65:70"><expr pos:start="65:63" pos:end="65:70"><name pos:start="65:63" pos:end="65:70">mem_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="76:0"><if pos:start="67:13" pos:end="76:0">if <condition pos:start="67:16" pos:end="67:33">(<expr pos:start="67:17" pos:end="67:32"><operator pos:start="67:17" pos:end="67:17">!</operator><name pos:start="67:18" pos:end="67:32"><name pos:start="67:18" pos:end="67:26">new_block</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:32">host</name></name></expr>)</condition> <block pos:start="67:35" pos:end="76:0">{<block_content pos:start="69:17" pos:end="71:73">

                <expr_stmt pos:start="69:17" pos:end="69:53"><expr pos:start="69:17" pos:end="69:52"><name pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:25">new_block</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:31">host</name></name> <operator pos:start="69:33" pos:end="69:33">=</operator> <call pos:start="69:35" pos:end="69:52"><name pos:start="69:35" pos:end="69:46">qemu_vmalloc</name><argument_list pos:start="69:47" pos:end="69:52">(<argument pos:start="69:48" pos:end="69:51"><expr pos:start="69:48" pos:end="69:51"><name pos:start="69:48" pos:end="69:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:73"><expr pos:start="71:17" pos:end="71:72"><call pos:start="71:17" pos:end="71:72"><name pos:start="71:17" pos:end="71:28">qemu_madvise</name><argument_list pos:start="71:29" pos:end="71:72">(<argument pos:start="71:30" pos:end="71:44"><expr pos:start="71:30" pos:end="71:44"><name pos:start="71:30" pos:end="71:44"><name pos:start="71:30" pos:end="71:38">new_block</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:44">host</name></name></expr></argument>, <argument pos:start="71:47" pos:end="71:50"><expr pos:start="71:47" pos:end="71:50"><name pos:start="71:47" pos:end="71:50">size</name></expr></argument>, <argument pos:start="71:53" pos:end="71:71"><expr pos:start="71:53" pos:end="71:71"><name pos:start="71:53" pos:end="71:71">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="77:13" pos:end="77:62"><expr pos:start="77:13" pos:end="77:61"><call pos:start="77:13" pos:end="77:61"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:61">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:60"><expr pos:start="77:29" pos:end="77:60"><literal type="string" pos:start="77:29" pos:end="77:60">"-mem-path option unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="82:0"><expr pos:start="79:13" pos:end="79:19"><call pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:16">exit</name><argument_list pos:start="79:17" pos:end="79:19">(<argument pos:start="79:18" pos:end="79:18"><expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="111:9">else <block pos:start="83:16" pos:end="111:9">{<block_content pos:start="89:13" pos:end="109:69">

<cpp:if pos:start="85:1" pos:end="85:48">#<cpp:directive pos:start="85:2" pos:end="85:3">if</cpp:directive> <expr pos:start="85:5" pos:end="85:48"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:11">defined</name><argument_list pos:start="85:12" pos:end="85:25">(<argument pos:start="85:13" pos:end="85:24"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:24">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="85:27" pos:end="85:28">&amp;&amp;</operator> <call pos:start="85:30" pos:end="85:48"><name pos:start="85:30" pos:end="85:36">defined</name><argument_list pos:start="85:37" pos:end="85:48">(<argument pos:start="85:38" pos:end="85:47"><expr pos:start="85:38" pos:end="85:47"><name pos:start="85:38" pos:end="85:47">CONFIG_KVM</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <comment type="block" pos:start="87:13" pos:end="87:80">/* XXX S390 KVM requires the topmost vma of the RAM to be &lt; 256GB */</comment>

            <expr_stmt pos:start="89:13" pos:end="96:0"><expr pos:start="89:13" pos:end="93:69"><name pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:21">new_block</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:27">host</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <call pos:start="89:31" pos:end="93:69"><name pos:start="89:31" pos:end="89:34">mmap</name><argument_list pos:start="89:35" pos:end="93:69">(<argument pos:start="89:36" pos:end="89:51"><expr pos:start="89:36" pos:end="89:51"><operator pos:start="89:36" pos:end="89:36">(</operator><name pos:start="89:37" pos:end="89:40">void</name><operator pos:start="89:41" pos:end="89:41">*</operator><operator pos:start="89:42" pos:end="89:42">)</operator><literal type="number" pos:start="89:43" pos:end="89:51">0x1000000</literal></expr></argument>, <argument pos:start="89:54" pos:end="89:57"><expr pos:start="89:54" pos:end="89:57"><name pos:start="89:54" pos:end="89:57">size</name></expr></argument>,

                                   <argument pos:start="91:36" pos:end="91:65"><expr pos:start="91:36" pos:end="91:65"><name pos:start="91:36" pos:end="91:44">PROT_EXEC</name><operator pos:start="91:45" pos:end="91:45">|</operator><name pos:start="91:46" pos:end="91:54">PROT_READ</name><operator pos:start="91:55" pos:end="91:55">|</operator><name pos:start="91:56" pos:end="91:65">PROT_WRITE</name></expr></argument>,

                                   <argument pos:start="93:36" pos:end="93:61"><expr pos:start="93:36" pos:end="93:61"><name pos:start="93:36" pos:end="93:45">MAP_SHARED</name> <operator pos:start="93:47" pos:end="93:47">|</operator> <name pos:start="93:49" pos:end="93:61">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="93:64" pos:end="93:65"><expr pos:start="93:64" pos:end="93:65"><operator pos:start="93:64" pos:end="93:64">-</operator><literal type="number" pos:start="93:65" pos:end="93:65">1</literal></expr></argument>, <argument pos:start="93:68" pos:end="93:68"><expr pos:start="93:68" pos:end="93:68"><literal type="number" pos:start="93:68" pos:end="93:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="97:13" pos:end="108:0"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:39">(<expr pos:start="97:17" pos:end="97:38"><call pos:start="97:17" pos:end="97:38"><name pos:start="97:17" pos:end="97:36">xen_mapcache_enabled</name><argument_list pos:start="97:37" pos:end="97:38">()</argument_list></call></expr>)</condition> <block pos:start="97:41" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:55">

                <expr_stmt pos:start="99:17" pos:end="99:55"><expr pos:start="99:17" pos:end="99:54"><call pos:start="99:17" pos:end="99:54"><name pos:start="99:17" pos:end="99:29">xen_ram_alloc</name><argument_list pos:start="99:30" pos:end="99:54">(<argument pos:start="99:31" pos:end="99:47"><expr pos:start="99:31" pos:end="99:47"><name pos:start="99:31" pos:end="99:47"><name pos:start="99:31" pos:end="99:39">new_block</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:47">offset</name></name></expr></argument>, <argument pos:start="99:50" pos:end="99:53"><expr pos:start="99:50" pos:end="99:53"><name pos:start="99:50" pos:end="99:53">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="108:0">else <block pos:start="101:20" pos:end="108:0">{<block_content pos:start="103:17" pos:end="103:53">

                <expr_stmt pos:start="103:17" pos:end="103:53"><expr pos:start="103:17" pos:end="103:52"><name pos:start="103:17" pos:end="103:31"><name pos:start="103:17" pos:end="103:25">new_block</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:31">host</name></name> <operator pos:start="103:33" pos:end="103:33">=</operator> <call pos:start="103:35" pos:end="103:52"><name pos:start="103:35" pos:end="103:46">qemu_vmalloc</name><argument_list pos:start="103:47" pos:end="103:52">(<argument pos:start="103:48" pos:end="103:51"><expr pos:start="103:48" pos:end="103:51"><name pos:start="103:48" pos:end="103:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="109:13" pos:end="109:69"><expr pos:start="109:13" pos:end="109:68"><call pos:start="109:13" pos:end="109:68"><name pos:start="109:13" pos:end="109:24">qemu_madvise</name><argument_list pos:start="109:25" pos:end="109:68">(<argument pos:start="109:26" pos:end="109:40"><expr pos:start="109:26" pos:end="109:40"><name pos:start="109:26" pos:end="109:40"><name pos:start="109:26" pos:end="109:34">new_block</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:40">host</name></name></expr></argument>, <argument pos:start="109:43" pos:end="109:46"><expr pos:start="109:43" pos:end="109:46"><name pos:start="109:43" pos:end="109:46">size</name></expr></argument>, <argument pos:start="109:49" pos:end="109:67"><expr pos:start="109:49" pos:end="109:67"><name pos:start="109:49" pos:end="109:67">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:21"><name pos:start="115:5" pos:end="115:13">new_block</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:21">length</name></name> <operator pos:start="115:23" pos:end="115:23">=</operator> <name pos:start="115:25" pos:end="115:28">size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:57"><expr pos:start="119:5" pos:end="119:56"><call pos:start="119:5" pos:end="119:56"><name pos:start="119:5" pos:end="119:21">QLIST_INSERT_HEAD</name><argument_list pos:start="119:22" pos:end="119:56">(<argument pos:start="119:23" pos:end="119:38"><expr pos:start="119:23" pos:end="119:38"><operator pos:start="119:23" pos:end="119:23">&amp;</operator><name pos:start="119:24" pos:end="119:38"><name pos:start="119:24" pos:end="119:31">ram_list</name><operator pos:start="119:32" pos:end="119:32">.</operator><name pos:start="119:33" pos:end="119:38">blocks</name></name></expr></argument>, <argument pos:start="119:41" pos:end="119:49"><expr pos:start="119:41" pos:end="119:49"><name pos:start="119:41" pos:end="119:49">new_block</name></expr></argument>, <argument pos:start="119:52" pos:end="119:55"><expr pos:start="119:52" pos:end="119:55"><name pos:start="119:52" pos:end="119:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="125:78"><expr pos:start="123:5" pos:end="125:77"><name pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:12">ram_list</name><operator pos:start="123:13" pos:end="123:13">.</operator><name pos:start="123:14" pos:end="123:23">phys_dirty</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="125:77"><name pos:start="123:27" pos:end="123:38">qemu_realloc</name><argument_list pos:start="123:39" pos:end="125:77">(<argument pos:start="123:40" pos:end="123:58"><expr pos:start="123:40" pos:end="123:58"><name pos:start="123:40" pos:end="123:58"><name pos:start="123:40" pos:end="123:47">ram_list</name><operator pos:start="123:48" pos:end="123:48">.</operator><name pos:start="123:49" pos:end="123:58">phys_dirty</name></name></expr></argument>,

                                       <argument pos:start="125:40" pos:end="125:76"><expr pos:start="125:40" pos:end="125:76"><call pos:start="125:40" pos:end="125:56"><name pos:start="125:40" pos:end="125:54">last_ram_offset</name><argument_list pos:start="125:55" pos:end="125:56">()</argument_list></call> <operator pos:start="125:58" pos:end="125:59">&gt;&gt;</operator> <name pos:start="125:61" pos:end="125:76">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="129:43"><expr pos:start="127:5" pos:end="129:42"><call pos:start="127:5" pos:end="129:42"><name pos:start="127:5" pos:end="127:10">memset</name><argument_list pos:start="127:11" pos:end="129:42">(<argument pos:start="127:12" pos:end="127:72"><expr pos:start="127:12" pos:end="127:72"><name pos:start="127:12" pos:end="127:30"><name pos:start="127:12" pos:end="127:19">ram_list</name><operator pos:start="127:20" pos:end="127:20">.</operator><name pos:start="127:21" pos:end="127:30">phys_dirty</name></name> <operator pos:start="127:32" pos:end="127:32">+</operator> <operator pos:start="127:34" pos:end="127:34">(</operator><name pos:start="127:35" pos:end="127:51"><name pos:start="127:35" pos:end="127:43">new_block</name><operator pos:start="127:44" pos:end="127:45">-&gt;</operator><name pos:start="127:46" pos:end="127:51">offset</name></name> <operator pos:start="127:53" pos:end="127:54">&gt;&gt;</operator> <name pos:start="127:56" pos:end="127:71">TARGET_PAGE_BITS</name><operator pos:start="127:72" pos:end="127:72">)</operator></expr></argument>,

           <argument pos:start="129:12" pos:end="129:15"><expr pos:start="129:12" pos:end="129:15"><literal type="number" pos:start="129:12" pos:end="129:15">0xff</literal></expr></argument>, <argument pos:start="129:18" pos:end="129:41"><expr pos:start="129:18" pos:end="129:41"><name pos:start="129:18" pos:end="129:21">size</name> <operator pos:start="129:23" pos:end="129:24">&gt;&gt;</operator> <name pos:start="129:26" pos:end="129:41">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="135:54"><if pos:start="133:5" pos:end="135:54">if <condition pos:start="133:8" pos:end="133:22">(<expr pos:start="133:9" pos:end="133:21"><call pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:19">kvm_enabled</name><argument_list pos:start="133:20" pos:end="133:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:54"><block_content pos:start="135:9" pos:end="135:54">

        <expr_stmt pos:start="135:9" pos:end="135:54"><expr pos:start="135:9" pos:end="135:53"><call pos:start="135:9" pos:end="135:53"><name pos:start="135:9" pos:end="135:30">kvm_setup_guest_memory</name><argument_list pos:start="135:31" pos:end="135:53">(<argument pos:start="135:32" pos:end="135:46"><expr pos:start="135:32" pos:end="135:46"><name pos:start="135:32" pos:end="135:46"><name pos:start="135:32" pos:end="135:40">new_block</name><operator pos:start="135:41" pos:end="135:42">-&gt;</operator><name pos:start="135:43" pos:end="135:46">host</name></name></expr></argument>, <argument pos:start="135:49" pos:end="135:52"><expr pos:start="135:49" pos:end="135:52"><name pos:start="135:49" pos:end="135:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="139:5" pos:end="139:29">return <expr pos:start="139:12" pos:end="139:28"><name pos:start="139:12" pos:end="139:28"><name pos:start="139:12" pos:end="139:20">new_block</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:28">offset</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
