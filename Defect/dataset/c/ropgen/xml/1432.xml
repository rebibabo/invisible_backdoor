<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1432.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">sun4uv_init</name><parameter_list pos:start="1:24" pos:end="5:50">(<parameter pos:start="1:25" pos:end="1:55"><decl pos:start="1:25" pos:end="1:55"><type pos:start="1:25" pos:end="1:55"><name pos:start="1:25" pos:end="1:36">MemoryRegion</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:55">address_space_mem</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:45"><decl pos:start="3:25" pos:end="3:45"><type pos:start="3:25" pos:end="3:45"><name pos:start="3:25" pos:end="3:36">MachineState</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:45">machine</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:49"><decl pos:start="5:25" pos:end="5:49"><type pos:start="5:25" pos:end="5:49"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:36">struct</name> <name pos:start="5:38" pos:end="5:42">hwdef</name></name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:49">hwdef</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="207:1">{<block_content pos:start="9:5" pos:end="205:52">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">SPARCCPU</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">M48t59State</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:22">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:78"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:24">initrd_addr</name></decl>, <decl pos:start="15:27" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:27" pos:end="15:37">initrd_size</name></decl>, <decl pos:start="15:40" pos:end="15:50"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:40" pos:end="15:50">kernel_addr</name></decl>, <decl pos:start="15:53" pos:end="15:63"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:53" pos:end="15:63">kernel_size</name></decl>, <decl pos:start="15:66" pos:end="15:77"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:66" pos:end="15:77">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>, <decl pos:start="17:22" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:12"><modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:30">pci_bus2</name></decl>, <decl pos:start="17:33" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:12"><modifier pos:start="17:33" pos:end="17:33">*</modifier></type><name pos:start="17:34" pos:end="17:41">pci_bus3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">ISABus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:23">ivec_irqs</name></decl>, <decl pos:start="21:26" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:26" pos:end="21:26">*</modifier></type><name pos:start="21:27" pos:end="21:34">pbm_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:46"><decl pos:start="23:5" pos:end="23:45"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">DriveInfo</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:45"><name pos:start="23:16" pos:end="23:17">hd</name><index pos:start="23:18" pos:end="23:45">[<expr pos:start="23:19" pos:end="23:44"><name pos:start="23:19" pos:end="23:29">MAX_IDE_BUS</name> <operator pos:start="23:31" pos:end="23:31">*</operator> <name pos:start="23:33" pos:end="23:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">DriveInfo</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:17">fd</name><index pos:start="25:18" pos:end="25:25">[<expr pos:start="25:19" pos:end="25:24"><name pos:start="25:19" pos:end="25:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">FWCfgState</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:22">fw_cfg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:19">/* init CPUs */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:49"><expr pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:7">cpu</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:48"><name pos:start="33:11" pos:end="33:21">cpu_devinit</name><argument_list pos:start="33:22" pos:end="33:48">(<argument pos:start="33:23" pos:end="33:40"><expr pos:start="33:23" pos:end="33:40"><name pos:start="33:23" pos:end="33:40"><name pos:start="33:23" pos:end="33:29">machine</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:40">cpu_model</name></name></expr></argument>, <argument pos:start="33:43" pos:end="33:47"><expr pos:start="33:43" pos:end="33:47"><name pos:start="33:43" pos:end="33:47">hwdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:24">/* set up devices */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:35"><expr pos:start="39:5" pos:end="39:34"><call pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:12">ram_init</name><argument_list pos:start="39:13" pos:end="39:34">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr></argument>, <argument pos:start="39:17" pos:end="39:33"><expr pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:23">machine</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:33">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><call pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:13">prom_init</name><argument_list pos:start="43:14" pos:end="43:42">(<argument pos:start="43:15" pos:end="43:30"><expr pos:start="43:15" pos:end="43:30"><name pos:start="43:15" pos:end="43:30"><name pos:start="43:15" pos:end="43:19">hwdef</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:30">prom_addr</name></name></expr></argument>, <argument pos:start="43:33" pos:end="43:41"><expr pos:start="43:33" pos:end="43:41"><name pos:start="43:33" pos:end="43:41">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:68"><expr pos:start="47:5" pos:end="47:67"><name pos:start="47:5" pos:end="47:13">ivec_irqs</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:67"><name pos:start="47:17" pos:end="47:34">qemu_allocate_irqs</name><argument_list pos:start="47:35" pos:end="47:67">(<argument pos:start="47:36" pos:end="47:51"><expr pos:start="47:36" pos:end="47:51"><name pos:start="47:36" pos:end="47:51">cpu_set_ivec_irq</name></expr></argument>, <argument pos:start="47:54" pos:end="47:56"><expr pos:start="47:54" pos:end="47:56"><name pos:start="47:54" pos:end="47:56">cpu</name></expr></argument>, <argument pos:start="47:59" pos:end="47:66"><expr pos:start="47:59" pos:end="47:66"><name pos:start="47:59" pos:end="47:66">IVEC_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:49"><expr pos:start="49:5" pos:end="51:48"><name pos:start="49:5" pos:end="49:11">pci_bus</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="51:48"><name pos:start="49:15" pos:end="49:26">pci_apb_init</name><argument_list pos:start="49:27" pos:end="51:48">(<argument pos:start="49:28" pos:end="49:43"><expr pos:start="49:28" pos:end="49:43"><name pos:start="49:28" pos:end="49:43">APB_SPECIAL_BASE</name></expr></argument>, <argument pos:start="49:46" pos:end="49:57"><expr pos:start="49:46" pos:end="49:57"><name pos:start="49:46" pos:end="49:57">APB_MEM_BASE</name></expr></argument>, <argument pos:start="49:60" pos:end="49:68"><expr pos:start="49:60" pos:end="49:68"><name pos:start="49:60" pos:end="49:68">ivec_irqs</name></expr></argument>, <argument pos:start="49:71" pos:end="49:79"><expr pos:start="49:71" pos:end="49:79"><operator pos:start="49:71" pos:end="49:71">&amp;</operator><name pos:start="49:72" pos:end="49:79">pci_bus2</name></expr></argument>,

                           <argument pos:start="51:28" pos:end="51:36"><expr pos:start="51:28" pos:end="51:36"><operator pos:start="51:28" pos:end="51:28">&amp;</operator><name pos:start="51:29" pos:end="51:36">pci_bus3</name></expr></argument>, <argument pos:start="51:39" pos:end="51:47"><expr pos:start="51:39" pos:end="51:47"><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:47">pbm_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:26"><expr pos:start="53:5" pos:end="53:25"><call pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:16">pci_vga_init</name><argument_list pos:start="53:17" pos:end="53:25">(<argument pos:start="53:18" pos:end="53:24"><expr pos:start="53:18" pos:end="53:24"><name pos:start="53:18" pos:end="53:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="57:5" pos:end="57:29">// XXX Should be pci_bus3</comment>

    <expr_stmt pos:start="59:5" pos:end="59:51"><expr pos:start="59:5" pos:end="59:50"><name pos:start="59:5" pos:end="59:11">isa_bus</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:50"><name pos:start="59:15" pos:end="59:27">pci_ebus_init</name><argument_list pos:start="59:28" pos:end="59:50">(<argument pos:start="59:29" pos:end="59:35"><expr pos:start="59:29" pos:end="59:35"><name pos:start="59:29" pos:end="59:35">pci_bus</name></expr></argument>, <argument pos:start="59:38" pos:end="59:39"><expr pos:start="59:38" pos:end="59:39"><operator pos:start="59:38" pos:end="59:38">-</operator><literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr></argument>, <argument pos:start="59:42" pos:end="59:49"><expr pos:start="59:42" pos:end="59:49"><name pos:start="59:42" pos:end="59:49">pbm_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:10"><expr pos:start="63:5" pos:end="63:9"><name pos:start="63:5" pos:end="63:5">i</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <literal type="number" pos:start="63:9" pos:end="63:9">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:35">(<expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:13">hwdef</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:34">console_serial_base</name></name></expr>)</condition> <block pos:start="65:37" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:12">

        <expr_stmt pos:start="67:9" pos:end="69:71"><expr pos:start="67:9" pos:end="69:70"><call pos:start="67:9" pos:end="69:70"><name pos:start="67:9" pos:end="67:22">serial_mm_init</name><argument_list pos:start="67:23" pos:end="69:70">(<argument pos:start="67:24" pos:end="67:40"><expr pos:start="67:24" pos:end="67:40"><name pos:start="67:24" pos:end="67:40">address_space_mem</name></expr></argument>, <argument pos:start="67:43" pos:end="67:68"><expr pos:start="67:43" pos:end="67:68"><name pos:start="67:43" pos:end="67:68"><name pos:start="67:43" pos:end="67:47">hwdef</name><operator pos:start="67:48" pos:end="67:49">-&gt;</operator><name pos:start="67:50" pos:end="67:68">console_serial_base</name></name></expr></argument>, <argument pos:start="67:71" pos:end="67:71"><expr pos:start="67:71" pos:end="67:71"><literal type="number" pos:start="67:71" pos:end="67:71">0</literal></expr></argument>,

                       <argument pos:start="69:24" pos:end="69:27"><expr pos:start="69:24" pos:end="69:27"><name pos:start="69:24" pos:end="69:27">NULL</name></expr></argument>, <argument pos:start="69:30" pos:end="69:35"><expr pos:start="69:30" pos:end="69:35"><literal type="number" pos:start="69:30" pos:end="69:35">115200</literal></expr></argument>, <argument pos:start="69:38" pos:end="69:50"><expr pos:start="69:38" pos:end="69:50"><name pos:start="69:38" pos:end="69:50"><name pos:start="69:38" pos:end="69:47">serial_hds</name><index pos:start="69:48" pos:end="69:50">[<expr pos:start="69:49" pos:end="69:49"><name pos:start="69:49" pos:end="69:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="69:53" pos:end="69:69"><expr pos:start="69:53" pos:end="69:69"><name pos:start="69:53" pos:end="69:69">DEVICE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:12"><expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:9">i</name><operator pos:start="71:10" pos:end="71:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="75:5" pos:end="83:5">for<control pos:start="75:8" pos:end="75:36">(<init pos:start="75:9" pos:end="75:9">;</init> <condition pos:start="75:11" pos:end="75:31"><expr pos:start="75:11" pos:end="75:30"><name pos:start="75:11" pos:end="75:11">i</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <name pos:start="75:15" pos:end="75:30">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:33">i</name><operator pos:start="75:34" pos:end="75:35">++</operator></expr></incr>)</control> <block pos:start="75:38" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:9">

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:26">(<expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:22">serial_hds</name><index pos:start="77:23" pos:end="77:25">[<expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="77:28" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:55">

            <expr_stmt pos:start="79:13" pos:end="79:55"><expr pos:start="79:13" pos:end="79:54"><call pos:start="79:13" pos:end="79:54"><name pos:start="79:13" pos:end="79:27">serial_isa_init</name><argument_list pos:start="79:28" pos:end="79:54">(<argument pos:start="79:29" pos:end="79:35"><expr pos:start="79:29" pos:end="79:35"><name pos:start="79:29" pos:end="79:35">isa_bus</name></expr></argument>, <argument pos:start="79:38" pos:end="79:38"><expr pos:start="79:38" pos:end="79:38"><name pos:start="79:38" pos:end="79:38">i</name></expr></argument>, <argument pos:start="79:41" pos:end="79:53"><expr pos:start="79:41" pos:end="79:53"><name pos:start="79:41" pos:end="79:53"><name pos:start="79:41" pos:end="79:50">serial_hds</name><index pos:start="79:51" pos:end="79:53">[<expr pos:start="79:52" pos:end="79:52"><name pos:start="79:52" pos:end="79:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="87:5" pos:end="95:5">for<control pos:start="87:8" pos:end="87:43">(<init pos:start="87:9" pos:end="87:14"><expr pos:start="87:9" pos:end="87:13"><name pos:start="87:9" pos:end="87:9">i</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <literal type="number" pos:start="87:13" pos:end="87:13">0</literal></expr>;</init> <condition pos:start="87:16" pos:end="87:38"><expr pos:start="87:16" pos:end="87:37"><name pos:start="87:16" pos:end="87:16">i</name> <operator pos:start="87:18" pos:end="87:18">&lt;</operator> <name pos:start="87:20" pos:end="87:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="87:40" pos:end="87:42"><expr pos:start="87:40" pos:end="87:42"><name pos:start="87:40" pos:end="87:40">i</name><operator pos:start="87:41" pos:end="87:42">++</operator></expr></incr>)</control> <block pos:start="87:45" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:9">

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:28">(<expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:24">parallel_hds</name><index pos:start="89:25" pos:end="89:27">[<expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="89:30" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:55">

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><call pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:25">parallel_init</name><argument_list pos:start="91:26" pos:end="91:54">(<argument pos:start="91:27" pos:end="91:33"><expr pos:start="91:27" pos:end="91:33"><name pos:start="91:27" pos:end="91:33">isa_bus</name></expr></argument>, <argument pos:start="91:36" pos:end="91:36"><expr pos:start="91:36" pos:end="91:36"><name pos:start="91:36" pos:end="91:36">i</name></expr></argument>, <argument pos:start="91:39" pos:end="91:53"><expr pos:start="91:39" pos:end="91:53"><name pos:start="91:39" pos:end="91:53"><name pos:start="91:39" pos:end="91:50">parallel_hds</name><index pos:start="91:51" pos:end="91:53">[<expr pos:start="91:52" pos:end="91:52"><name pos:start="91:52" pos:end="91:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="99:5" pos:end="101:69">for<control pos:start="99:8" pos:end="99:32">(<init pos:start="99:9" pos:end="99:14"><expr pos:start="99:9" pos:end="99:13"><name pos:start="99:9" pos:end="99:9">i</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <literal type="number" pos:start="99:13" pos:end="99:13">0</literal></expr>;</init> <condition pos:start="99:16" pos:end="99:27"><expr pos:start="99:16" pos:end="99:26"><name pos:start="99:16" pos:end="99:16">i</name> <operator pos:start="99:18" pos:end="99:18">&lt;</operator> <name pos:start="99:20" pos:end="99:26">nb_nics</name></expr>;</condition> <incr pos:start="99:29" pos:end="99:31"><expr pos:start="99:29" pos:end="99:31"><name pos:start="99:29" pos:end="99:29">i</name><operator pos:start="99:30" pos:end="99:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="101:9" pos:end="101:69"><block_content pos:start="101:9" pos:end="101:69">

        <expr_stmt pos:start="101:9" pos:end="101:69"><expr pos:start="101:9" pos:end="101:68"><call pos:start="101:9" pos:end="101:68"><name pos:start="101:9" pos:end="101:27">pci_nic_init_nofail</name><argument_list pos:start="101:28" pos:end="101:68">(<argument pos:start="101:29" pos:end="101:40"><expr pos:start="101:29" pos:end="101:40"><operator pos:start="101:29" pos:end="101:29">&amp;</operator><name pos:start="101:30" pos:end="101:40"><name pos:start="101:30" pos:end="101:37">nd_table</name><index pos:start="101:38" pos:end="101:40">[<expr pos:start="101:39" pos:end="101:39"><name pos:start="101:39" pos:end="101:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="101:43" pos:end="101:49"><expr pos:start="101:43" pos:end="101:49"><name pos:start="101:43" pos:end="101:49">pci_bus</name></expr></argument>, <argument pos:start="101:52" pos:end="101:61"><expr pos:start="101:52" pos:end="101:61"><literal type="string" pos:start="101:52" pos:end="101:61">"ne2k_pci"</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:67"><expr pos:start="101:64" pos:end="101:67"><name pos:start="101:64" pos:end="101:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="105:5" pos:end="105:35"><expr pos:start="105:5" pos:end="105:34"><call pos:start="105:5" pos:end="105:34"><name pos:start="105:5" pos:end="105:17">ide_drive_get</name><argument_list pos:start="105:18" pos:end="105:34">(<argument pos:start="105:19" pos:end="105:20"><expr pos:start="105:19" pos:end="105:20"><name pos:start="105:19" pos:end="105:20">hd</name></expr></argument>, <argument pos:start="105:23" pos:end="105:33"><expr pos:start="105:23" pos:end="105:33"><name pos:start="105:23" pos:end="105:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:40"><expr pos:start="109:5" pos:end="109:39"><call pos:start="109:5" pos:end="109:39"><name pos:start="109:5" pos:end="109:23">pci_cmd646_ide_init</name><argument_list pos:start="109:24" pos:end="109:39">(<argument pos:start="109:25" pos:end="109:31"><expr pos:start="109:25" pos:end="109:31"><name pos:start="109:25" pos:end="109:31">pci_bus</name></expr></argument>, <argument pos:start="109:34" pos:end="109:35"><expr pos:start="109:34" pos:end="109:35"><name pos:start="109:34" pos:end="109:35">hd</name></expr></argument>, <argument pos:start="109:38" pos:end="109:38"><expr pos:start="109:38" pos:end="109:38"><literal type="number" pos:start="109:38" pos:end="109:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:40"><expr pos:start="113:5" pos:end="113:39"><call pos:start="113:5" pos:end="113:39"><name pos:start="113:5" pos:end="113:21">isa_create_simple</name><argument_list pos:start="113:22" pos:end="113:39">(<argument pos:start="113:23" pos:end="113:29"><expr pos:start="113:23" pos:end="113:29"><name pos:start="113:23" pos:end="113:29">isa_bus</name></expr></argument>, <argument pos:start="113:32" pos:end="113:38"><expr pos:start="113:32" pos:end="113:38"><literal type="string" pos:start="113:32" pos:end="113:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="115:5" pos:end="119:5">for<control pos:start="115:8" pos:end="115:31">(<init pos:start="115:9" pos:end="115:14"><expr pos:start="115:9" pos:end="115:13"><name pos:start="115:9" pos:end="115:9">i</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <literal type="number" pos:start="115:13" pos:end="115:13">0</literal></expr>;</init> <condition pos:start="115:16" pos:end="115:26"><expr pos:start="115:16" pos:end="115:25"><name pos:start="115:16" pos:end="115:16">i</name> <operator pos:start="115:18" pos:end="115:18">&lt;</operator> <name pos:start="115:20" pos:end="115:25">MAX_FD</name></expr>;</condition> <incr pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:28">i</name><operator pos:start="115:29" pos:end="115:30">++</operator></expr></incr>)</control> <block pos:start="115:33" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:43">

        <expr_stmt pos:start="117:9" pos:end="117:43"><expr pos:start="117:9" pos:end="117:42"><name pos:start="117:9" pos:end="117:13"><name pos:start="117:9" pos:end="117:10">fd</name><index pos:start="117:11" pos:end="117:13">[<expr pos:start="117:12" pos:end="117:12"><name pos:start="117:12" pos:end="117:12">i</name></expr>]</index></name> <operator pos:start="117:15" pos:end="117:15">=</operator> <call pos:start="117:17" pos:end="117:42"><name pos:start="117:17" pos:end="117:25">drive_get</name><argument_list pos:start="117:26" pos:end="117:42">(<argument pos:start="117:27" pos:end="117:35"><expr pos:start="117:27" pos:end="117:35"><name pos:start="117:27" pos:end="117:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="117:38" pos:end="117:38"><expr pos:start="117:38" pos:end="117:38"><literal type="number" pos:start="117:38" pos:end="117:38">0</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:41"><expr pos:start="117:41" pos:end="117:41"><name pos:start="117:41" pos:end="117:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="121:5" pos:end="121:33"><expr pos:start="121:5" pos:end="121:32"><call pos:start="121:5" pos:end="121:32"><name pos:start="121:5" pos:end="121:19">fdctrl_init_isa</name><argument_list pos:start="121:20" pos:end="121:32">(<argument pos:start="121:21" pos:end="121:27"><expr pos:start="121:21" pos:end="121:27"><name pos:start="121:21" pos:end="121:27">isa_bus</name></expr></argument>, <argument pos:start="121:30" pos:end="121:31"><expr pos:start="121:30" pos:end="121:31"><name pos:start="121:30" pos:end="121:31">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:61"><expr pos:start="123:5" pos:end="123:60"><name pos:start="123:5" pos:end="123:9">nvram</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <call pos:start="123:13" pos:end="123:60"><name pos:start="123:13" pos:end="123:27">m48t59_init_isa</name><argument_list pos:start="123:28" pos:end="123:60">(<argument pos:start="123:29" pos:end="123:35"><expr pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:35">isa_bus</name></expr></argument>, <argument pos:start="123:38" pos:end="123:43"><expr pos:start="123:38" pos:end="123:43"><literal type="number" pos:start="123:38" pos:end="123:43">0x0074</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:55"><expr pos:start="123:46" pos:end="123:55"><name pos:start="123:46" pos:end="123:55">NVRAM_SIZE</name></expr></argument>, <argument pos:start="123:58" pos:end="123:59"><expr pos:start="123:58" pos:end="123:59"><literal type="number" pos:start="123:58" pos:end="123:59">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:20"><expr pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:15">initrd_size</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <literal type="number" pos:start="127:19" pos:end="127:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:20"><expr pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:15">initrd_addr</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="137:65"><expr pos:start="131:5" pos:end="137:64"><name pos:start="131:5" pos:end="131:15">kernel_size</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="137:64"><name pos:start="131:19" pos:end="131:35">sun4u_load_kernel</name><argument_list pos:start="131:36" pos:end="137:64">(<argument pos:start="131:37" pos:end="131:60"><expr pos:start="131:37" pos:end="131:60"><name pos:start="131:37" pos:end="131:60"><name pos:start="131:37" pos:end="131:43">machine</name><operator pos:start="131:44" pos:end="131:45">-&gt;</operator><name pos:start="131:46" pos:end="131:60">kernel_filename</name></name></expr></argument>,

                                    <argument pos:start="133:37" pos:end="133:60"><expr pos:start="133:37" pos:end="133:60"><name pos:start="133:37" pos:end="133:60"><name pos:start="133:37" pos:end="133:43">machine</name><operator pos:start="133:44" pos:end="133:45">-&gt;</operator><name pos:start="133:46" pos:end="133:60">initrd_filename</name></name></expr></argument>,

                                    <argument pos:start="135:37" pos:end="135:44"><expr pos:start="135:37" pos:end="135:44"><name pos:start="135:37" pos:end="135:44">ram_size</name></expr></argument>, <argument pos:start="135:47" pos:end="135:58"><expr pos:start="135:47" pos:end="135:58"><operator pos:start="135:47" pos:end="135:47">&amp;</operator><name pos:start="135:48" pos:end="135:58">initrd_size</name></expr></argument>, <argument pos:start="135:61" pos:end="135:72"><expr pos:start="135:61" pos:end="135:72"><operator pos:start="135:61" pos:end="135:61">&amp;</operator><name pos:start="135:62" pos:end="135:72">initrd_addr</name></expr></argument>,

                                    <argument pos:start="137:37" pos:end="137:48"><expr pos:start="137:37" pos:end="137:48"><operator pos:start="137:37" pos:end="137:37">&amp;</operator><name pos:start="137:38" pos:end="137:48">kernel_addr</name></expr></argument>, <argument pos:start="137:51" pos:end="137:63"><expr pos:start="137:51" pos:end="137:63"><operator pos:start="137:51" pos:end="137:51">&amp;</operator><name pos:start="137:52" pos:end="137:63">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="157:60"><expr pos:start="141:5" pos:end="157:59"><call pos:start="141:5" pos:end="157:59"><name pos:start="141:5" pos:end="141:26">sun4u_NVRAM_set_params</name><argument_list pos:start="141:27" pos:end="157:59">(<argument pos:start="141:28" pos:end="141:32"><expr pos:start="141:28" pos:end="141:32"><name pos:start="141:28" pos:end="141:32">nvram</name></expr></argument>, <argument pos:start="141:35" pos:end="141:44"><expr pos:start="141:35" pos:end="141:44"><name pos:start="141:35" pos:end="141:44">NVRAM_SIZE</name></expr></argument>, <argument pos:start="141:47" pos:end="141:53"><expr pos:start="141:47" pos:end="141:53"><literal type="string" pos:start="141:47" pos:end="141:53">"Sun4u"</literal></expr></argument>, <argument pos:start="141:56" pos:end="141:72"><expr pos:start="141:56" pos:end="141:72"><name pos:start="141:56" pos:end="141:72"><name pos:start="141:56" pos:end="141:62">machine</name><operator pos:start="141:63" pos:end="141:64">-&gt;</operator><name pos:start="141:65" pos:end="141:72">ram_size</name></name></expr></argument>,

                           <argument pos:start="143:28" pos:end="143:46"><expr pos:start="143:28" pos:end="143:46"><name pos:start="143:28" pos:end="143:46"><name pos:start="143:28" pos:end="143:34">machine</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:46">boot_order</name></name></expr></argument>,

                           <argument pos:start="145:28" pos:end="145:38"><expr pos:start="145:28" pos:end="145:38"><name pos:start="145:28" pos:end="145:38">kernel_addr</name></expr></argument>, <argument pos:start="145:41" pos:end="145:51"><expr pos:start="145:41" pos:end="145:51"><name pos:start="145:41" pos:end="145:51">kernel_size</name></expr></argument>,

                           <argument pos:start="147:28" pos:end="147:50"><expr pos:start="147:28" pos:end="147:50"><name pos:start="147:28" pos:end="147:50"><name pos:start="147:28" pos:end="147:34">machine</name><operator pos:start="147:35" pos:end="147:36">-&gt;</operator><name pos:start="147:37" pos:end="147:50">kernel_cmdline</name></name></expr></argument>,

                           <argument pos:start="149:28" pos:end="149:38"><expr pos:start="149:28" pos:end="149:38"><name pos:start="149:28" pos:end="149:38">initrd_addr</name></expr></argument>, <argument pos:start="149:41" pos:end="149:51"><expr pos:start="149:41" pos:end="149:51"><name pos:start="149:41" pos:end="149:51">initrd_size</name></expr></argument>,

                           <comment type="block" pos:start="151:28" pos:end="151:74">/* XXX: need an option to load a NVRAM image */</comment>

                           <argument pos:start="153:28" pos:end="153:28"><expr pos:start="153:28" pos:end="153:28"><literal type="number" pos:start="153:28" pos:end="153:28">0</literal></expr></argument>,

                           <argument pos:start="155:28" pos:end="155:40"><expr pos:start="155:28" pos:end="155:40"><name pos:start="155:28" pos:end="155:40">graphic_width</name></expr></argument>, <argument pos:start="155:43" pos:end="155:56"><expr pos:start="155:43" pos:end="155:56"><name pos:start="155:43" pos:end="155:56">graphic_height</name></expr></argument>, <argument pos:start="155:59" pos:end="155:71"><expr pos:start="155:59" pos:end="155:71"><name pos:start="155:59" pos:end="155:71">graphic_depth</name></expr></argument>,

                           <argument pos:start="157:28" pos:end="157:58"><expr pos:start="157:28" pos:end="157:58"><operator pos:start="157:28" pos:end="157:28">(</operator><name pos:start="157:29" pos:end="157:35">uint8_t</name> <operator pos:start="157:37" pos:end="157:37">*</operator><operator pos:start="157:38" pos:end="157:38">)</operator><operator pos:start="157:39" pos:end="157:39">&amp;</operator><name pos:start="157:40" pos:end="157:50"><name pos:start="157:40" pos:end="157:47">nd_table</name><index pos:start="157:48" pos:end="157:50">[<expr pos:start="157:49" pos:end="157:49"><literal type="number" pos:start="157:49" pos:end="157:49">0</literal></expr>]</index></name><operator pos:start="157:51" pos:end="157:51">.</operator><name pos:start="157:52" pos:end="157:58">macaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:69"><expr pos:start="161:5" pos:end="161:68"><name pos:start="161:5" pos:end="161:10">fw_cfg</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <call pos:start="161:14" pos:end="161:68"><name pos:start="161:14" pos:end="161:24">fw_cfg_init</name><argument_list pos:start="161:25" pos:end="161:68">(<argument pos:start="161:26" pos:end="161:40"><expr pos:start="161:26" pos:end="161:40"><name pos:start="161:26" pos:end="161:40">BIOS_CFG_IOPORT</name></expr></argument>, <argument pos:start="161:43" pos:end="161:61"><expr pos:start="161:43" pos:end="161:61"><name pos:start="161:43" pos:end="161:57">BIOS_CFG_IOPORT</name> <operator pos:start="161:59" pos:end="161:59">+</operator> <literal type="number" pos:start="161:61" pos:end="161:61">1</literal></expr></argument>, <argument pos:start="161:64" pos:end="161:64"><expr pos:start="161:64" pos:end="161:64"><literal type="number" pos:start="161:64" pos:end="161:64">0</literal></expr></argument>, <argument pos:start="161:67" pos:end="161:67"><expr pos:start="161:67" pos:end="161:67"><literal type="number" pos:start="161:67" pos:end="161:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:64"><expr pos:start="163:5" pos:end="163:63"><call pos:start="163:5" pos:end="163:63"><name pos:start="163:5" pos:end="163:18">fw_cfg_add_i16</name><argument_list pos:start="163:19" pos:end="163:63">(<argument pos:start="163:20" pos:end="163:25"><expr pos:start="163:20" pos:end="163:25"><name pos:start="163:20" pos:end="163:25">fw_cfg</name></expr></argument>, <argument pos:start="163:28" pos:end="163:42"><expr pos:start="163:28" pos:end="163:42"><name pos:start="163:28" pos:end="163:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="163:45" pos:end="163:62"><expr pos:start="163:45" pos:end="163:62"><operator pos:start="163:45" pos:end="163:45">(</operator><name pos:start="163:46" pos:end="163:53">uint16_t</name><operator pos:start="163:54" pos:end="163:54">)</operator><name pos:start="163:55" pos:end="163:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:41"><expr pos:start="165:5" pos:end="165:40"><call pos:start="165:5" pos:end="165:40"><name pos:start="165:5" pos:end="165:18">fw_cfg_add_i32</name><argument_list pos:start="165:19" pos:end="165:40">(<argument pos:start="165:20" pos:end="165:25"><expr pos:start="165:20" pos:end="165:25"><name pos:start="165:20" pos:end="165:25">fw_cfg</name></expr></argument>, <argument pos:start="165:28" pos:end="165:36"><expr pos:start="165:28" pos:end="165:36"><name pos:start="165:28" pos:end="165:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="165:39" pos:end="165:39"><expr pos:start="165:39" pos:end="165:39"><literal type="number" pos:start="165:39" pos:end="165:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:64"><expr pos:start="167:5" pos:end="167:63"><call pos:start="167:5" pos:end="167:63"><name pos:start="167:5" pos:end="167:18">fw_cfg_add_i64</name><argument_list pos:start="167:19" pos:end="167:63">(<argument pos:start="167:20" pos:end="167:25"><expr pos:start="167:20" pos:end="167:25"><name pos:start="167:20" pos:end="167:25">fw_cfg</name></expr></argument>, <argument pos:start="167:28" pos:end="167:42"><expr pos:start="167:28" pos:end="167:42"><name pos:start="167:28" pos:end="167:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="167:45" pos:end="167:62"><expr pos:start="167:45" pos:end="167:62"><operator pos:start="167:45" pos:end="167:45">(</operator><name pos:start="167:46" pos:end="167:53">uint64_t</name><operator pos:start="167:54" pos:end="167:54">)</operator><name pos:start="167:55" pos:end="167:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:65"><expr pos:start="169:5" pos:end="169:64"><call pos:start="169:5" pos:end="169:64"><name pos:start="169:5" pos:end="169:18">fw_cfg_add_i16</name><argument_list pos:start="169:19" pos:end="169:64">(<argument pos:start="169:20" pos:end="169:25"><expr pos:start="169:20" pos:end="169:25"><name pos:start="169:20" pos:end="169:25">fw_cfg</name></expr></argument>, <argument pos:start="169:28" pos:end="169:44"><expr pos:start="169:28" pos:end="169:44"><name pos:start="169:28" pos:end="169:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="169:47" pos:end="169:63"><expr pos:start="169:47" pos:end="169:63"><name pos:start="169:47" pos:end="169:63"><name pos:start="169:47" pos:end="169:51">hwdef</name><operator pos:start="169:52" pos:end="169:53">-&gt;</operator><name pos:start="169:54" pos:end="169:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:61"><expr pos:start="171:5" pos:end="171:60"><call pos:start="171:5" pos:end="171:60"><name pos:start="171:5" pos:end="171:18">fw_cfg_add_i64</name><argument_list pos:start="171:19" pos:end="171:60">(<argument pos:start="171:20" pos:end="171:25"><expr pos:start="171:20" pos:end="171:25"><name pos:start="171:20" pos:end="171:25">fw_cfg</name></expr></argument>, <argument pos:start="171:28" pos:end="171:45"><expr pos:start="171:28" pos:end="171:45"><name pos:start="171:28" pos:end="171:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="171:48" pos:end="171:59"><expr pos:start="171:48" pos:end="171:59"><name pos:start="171:48" pos:end="171:59">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:60"><expr pos:start="173:5" pos:end="173:59"><call pos:start="173:5" pos:end="173:59"><name pos:start="173:5" pos:end="173:18">fw_cfg_add_i64</name><argument_list pos:start="173:19" pos:end="173:59">(<argument pos:start="173:20" pos:end="173:25"><expr pos:start="173:20" pos:end="173:25"><name pos:start="173:20" pos:end="173:25">fw_cfg</name></expr></argument>, <argument pos:start="173:28" pos:end="173:45"><expr pos:start="173:28" pos:end="173:45"><name pos:start="173:28" pos:end="173:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="173:48" pos:end="173:58"><expr pos:start="173:48" pos:end="173:58"><name pos:start="173:48" pos:end="173:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="187:5"><if pos:start="175:5" pos:end="183:5">if <condition pos:start="175:8" pos:end="175:32">(<expr pos:start="175:9" pos:end="175:31"><name pos:start="175:9" pos:end="175:31"><name pos:start="175:9" pos:end="175:15">machine</name><operator pos:start="175:16" pos:end="175:17">-&gt;</operator><name pos:start="175:18" pos:end="175:31">kernel_cmdline</name></name></expr>)</condition> <block pos:start="175:34" pos:end="183:5">{<block_content pos:start="177:9" pos:end="181:80">

        <expr_stmt pos:start="177:9" pos:end="179:60"><expr pos:start="177:9" pos:end="179:59"><call pos:start="177:9" pos:end="179:59"><name pos:start="177:9" pos:end="177:22">fw_cfg_add_i32</name><argument_list pos:start="177:23" pos:end="179:59">(<argument pos:start="177:24" pos:end="177:29"><expr pos:start="177:24" pos:end="177:29"><name pos:start="177:24" pos:end="177:29">fw_cfg</name></expr></argument>, <argument pos:start="177:32" pos:end="177:50"><expr pos:start="177:32" pos:end="177:50"><name pos:start="177:32" pos:end="177:50">FW_CFG_CMDLINE_SIZE</name></expr></argument>,

                       <argument pos:start="179:24" pos:end="179:58"><expr pos:start="179:24" pos:end="179:58"><call pos:start="179:24" pos:end="179:54"><name pos:start="179:24" pos:end="179:29">strlen</name><argument_list pos:start="179:30" pos:end="179:54">(<argument pos:start="179:31" pos:end="179:53"><expr pos:start="179:31" pos:end="179:53"><name pos:start="179:31" pos:end="179:53"><name pos:start="179:31" pos:end="179:37">machine</name><operator pos:start="179:38" pos:end="179:39">-&gt;</operator><name pos:start="179:40" pos:end="179:53">kernel_cmdline</name></name></expr></argument>)</argument_list></call> <operator pos:start="179:56" pos:end="179:56">+</operator> <literal type="number" pos:start="179:58" pos:end="179:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:80"><expr pos:start="181:9" pos:end="181:79"><call pos:start="181:9" pos:end="181:79"><name pos:start="181:9" pos:end="181:25">fw_cfg_add_string</name><argument_list pos:start="181:26" pos:end="181:79">(<argument pos:start="181:27" pos:end="181:32"><expr pos:start="181:27" pos:end="181:32"><name pos:start="181:27" pos:end="181:32">fw_cfg</name></expr></argument>, <argument pos:start="181:35" pos:end="181:53"><expr pos:start="181:35" pos:end="181:53"><name pos:start="181:35" pos:end="181:53">FW_CFG_CMDLINE_DATA</name></expr></argument>, <argument pos:start="181:56" pos:end="181:78"><expr pos:start="181:56" pos:end="181:78"><name pos:start="181:56" pos:end="181:78"><name pos:start="181:56" pos:end="181:62">machine</name><operator pos:start="181:63" pos:end="181:64">-&gt;</operator><name pos:start="181:65" pos:end="181:78">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="187:5">else <block pos:start="183:12" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:55">

        <expr_stmt pos:start="185:9" pos:end="185:55"><expr pos:start="185:9" pos:end="185:54"><call pos:start="185:9" pos:end="185:54"><name pos:start="185:9" pos:end="185:22">fw_cfg_add_i32</name><argument_list pos:start="185:23" pos:end="185:54">(<argument pos:start="185:24" pos:end="185:29"><expr pos:start="185:24" pos:end="185:29"><name pos:start="185:24" pos:end="185:29">fw_cfg</name></expr></argument>, <argument pos:start="185:32" pos:end="185:50"><expr pos:start="185:32" pos:end="185:50"><name pos:start="185:32" pos:end="185:50">FW_CFG_CMDLINE_SIZE</name></expr></argument>, <argument pos:start="185:53" pos:end="185:53"><expr pos:start="185:53" pos:end="185:53"><literal type="number" pos:start="185:53" pos:end="185:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:60"><expr pos:start="189:5" pos:end="189:59"><call pos:start="189:5" pos:end="189:59"><name pos:start="189:5" pos:end="189:18">fw_cfg_add_i64</name><argument_list pos:start="189:19" pos:end="189:59">(<argument pos:start="189:20" pos:end="189:25"><expr pos:start="189:20" pos:end="189:25"><name pos:start="189:20" pos:end="189:25">fw_cfg</name></expr></argument>, <argument pos:start="189:28" pos:end="189:45"><expr pos:start="189:28" pos:end="189:45"><name pos:start="189:28" pos:end="189:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="189:48" pos:end="189:58"><expr pos:start="189:48" pos:end="189:58"><name pos:start="189:48" pos:end="189:58">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:60"><expr pos:start="191:5" pos:end="191:59"><call pos:start="191:5" pos:end="191:59"><name pos:start="191:5" pos:end="191:18">fw_cfg_add_i64</name><argument_list pos:start="191:19" pos:end="191:59">(<argument pos:start="191:20" pos:end="191:25"><expr pos:start="191:20" pos:end="191:25"><name pos:start="191:20" pos:end="191:25">fw_cfg</name></expr></argument>, <argument pos:start="191:28" pos:end="191:45"><expr pos:start="191:28" pos:end="191:45"><name pos:start="191:28" pos:end="191:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="191:48" pos:end="191:58"><expr pos:start="191:48" pos:end="191:58"><name pos:start="191:48" pos:end="191:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:71"><expr pos:start="193:5" pos:end="193:70"><call pos:start="193:5" pos:end="193:70"><name pos:start="193:5" pos:end="193:18">fw_cfg_add_i16</name><argument_list pos:start="193:19" pos:end="193:70">(<argument pos:start="193:20" pos:end="193:25"><expr pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:25">fw_cfg</name></expr></argument>, <argument pos:start="193:28" pos:end="193:45"><expr pos:start="193:28" pos:end="193:45"><name pos:start="193:28" pos:end="193:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="193:48" pos:end="193:69"><expr pos:start="193:48" pos:end="193:69"><name pos:start="193:48" pos:end="193:69"><name pos:start="193:48" pos:end="193:54">machine</name><operator pos:start="193:55" pos:end="193:56">-&gt;</operator><name pos:start="193:57" pos:end="193:66">boot_order</name><index pos:start="193:67" pos:end="193:69">[<expr pos:start="193:68" pos:end="193:68"><literal type="number" pos:start="193:68" pos:end="193:68">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:64"><expr pos:start="197:5" pos:end="197:63"><call pos:start="197:5" pos:end="197:63"><name pos:start="197:5" pos:end="197:18">fw_cfg_add_i16</name><argument_list pos:start="197:19" pos:end="197:63">(<argument pos:start="197:20" pos:end="197:25"><expr pos:start="197:20" pos:end="197:25"><name pos:start="197:20" pos:end="197:25">fw_cfg</name></expr></argument>, <argument pos:start="197:28" pos:end="197:47"><expr pos:start="197:28" pos:end="197:47"><name pos:start="197:28" pos:end="197:47">FW_CFG_SPARC64_WIDTH</name></expr></argument>, <argument pos:start="197:50" pos:end="197:62"><expr pos:start="197:50" pos:end="197:62"><name pos:start="197:50" pos:end="197:62">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:66"><expr pos:start="199:5" pos:end="199:65"><call pos:start="199:5" pos:end="199:65"><name pos:start="199:5" pos:end="199:18">fw_cfg_add_i16</name><argument_list pos:start="199:19" pos:end="199:65">(<argument pos:start="199:20" pos:end="199:25"><expr pos:start="199:20" pos:end="199:25"><name pos:start="199:20" pos:end="199:25">fw_cfg</name></expr></argument>, <argument pos:start="199:28" pos:end="199:48"><expr pos:start="199:28" pos:end="199:48"><name pos:start="199:28" pos:end="199:48">FW_CFG_SPARC64_HEIGHT</name></expr></argument>, <argument pos:start="199:51" pos:end="199:64"><expr pos:start="199:51" pos:end="199:64"><name pos:start="199:51" pos:end="199:64">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:64"><expr pos:start="201:5" pos:end="201:63"><call pos:start="201:5" pos:end="201:63"><name pos:start="201:5" pos:end="201:18">fw_cfg_add_i16</name><argument_list pos:start="201:19" pos:end="201:63">(<argument pos:start="201:20" pos:end="201:25"><expr pos:start="201:20" pos:end="201:25"><name pos:start="201:20" pos:end="201:25">fw_cfg</name></expr></argument>, <argument pos:start="201:28" pos:end="201:47"><expr pos:start="201:28" pos:end="201:47"><name pos:start="201:28" pos:end="201:47">FW_CFG_SPARC64_DEPTH</name></expr></argument>, <argument pos:start="201:50" pos:end="201:62"><expr pos:start="201:50" pos:end="201:62"><name pos:start="201:50" pos:end="201:62">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:52"><expr pos:start="205:5" pos:end="205:51"><call pos:start="205:5" pos:end="205:51"><name pos:start="205:5" pos:end="205:26">qemu_register_boot_set</name><argument_list pos:start="205:27" pos:end="205:51">(<argument pos:start="205:28" pos:end="205:42"><expr pos:start="205:28" pos:end="205:42"><name pos:start="205:28" pos:end="205:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="205:45" pos:end="205:50"><expr pos:start="205:45" pos:end="205:50"><name pos:start="205:45" pos:end="205:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
