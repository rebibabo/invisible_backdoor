<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22231.c" pos:tabs="8"><function pos:start="1:1" pos:end="499:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">load_sofa</name><parameter_list pos:start="1:21" pos:end="1:77">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:36">AVFilterContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ctx</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:47">char</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:57">filename</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:76"><decl pos:start="1:60" pos:end="1:76"><type pos:start="1:60" pos:end="1:76"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:76">samplingrate</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="499:1">{<block_content pos:start="5:5" pos:end="497:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:27">SOFAlizerContext</name></name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">s</name> <init pos:start="5:32" pos:end="5:42">= <expr pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:36">ctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:42">priv</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="7:5" pos:end="7:57">/* variables associated with content of SOFA file: */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:62"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">ncid</name></decl>, <decl pos:start="9:15" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:20">n_dims</name></decl>, <decl pos:start="9:23" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:28">n_vars</name></decl>, <decl pos:start="9:31" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:31" pos:end="9:37">n_gatts</name></decl>, <decl pos:start="9:40" pos:end="9:53"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:53">n_unlim_dim_id</name></decl>, <decl pos:start="9:56" pos:end="9:61"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:56" pos:end="9:61">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:41"><name pos:start="11:10" pos:end="11:28">data_delay_dim_name</name><index pos:start="11:29" pos:end="11:41">[<expr pos:start="11:30" pos:end="11:40"><name pos:start="11:30" pos:end="11:40">NC_MAX_NAME</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">float</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:15">sp_a</name></decl>, <decl pos:start="13:18" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:11"><modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">sp_e</name></decl>, <decl pos:start="13:25" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:11"><modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:29">sp_r</name></decl>, <decl pos:start="13:32" pos:end="13:39"><type ref="prev" pos:start="13:5" pos:end="13:11"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:39">data_ir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:26">sofa_conventions</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:30"><name pos:start="17:10" pos:end="17:17">dim_name</name><index pos:start="17:18" pos:end="17:30">[<expr pos:start="17:19" pos:end="17:29"><name pos:start="17:19" pos:end="17:29">NC_MAX_NAME</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block" pos:start="17:35" pos:end="17:66">/* names of netCDF dimensions */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">size_t</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:22">dim_length</name></decl>;</decl_stmt>           <comment type="block" pos:start="19:35" pos:end="19:68">/* lengths of netCDF dimensions */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:14">text</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:28">sample_rate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:29"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:25">data_delay_dim_id</name><index pos:start="25:26" pos:end="25:28">[<expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:23">samplingrate_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:21">data_delay_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:18"><decl pos:start="31:5" pos:end="31:17"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:17">n_samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:16">m_dim_id</name> <init pos:start="33:18" pos:end="33:21">= <expr pos:start="33:20" pos:end="33:21"><operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:16">n_dim_id</name> <init pos:start="35:18" pos:end="35:21">= <expr pos:start="35:20" pos:end="35:21"><operator pos:start="35:20" pos:end="35:20">-</operator><literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:19"><decl pos:start="37:5" pos:end="37:18"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:18">data_ir_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:19"><decl pos:start="39:5" pos:end="39:18"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">size_t</name></type> <name pos:start="39:12" pos:end="39:18">att_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">m_dim</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:20"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:7">int</name> <modifier pos:start="43:9" pos:end="43:9">*</modifier></type><name pos:start="43:10" pos:end="43:19">data_delay</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:14"><decl pos:start="45:5" pos:end="45:13"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:13">sp_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:15"><decl pos:start="47:5" pos:end="47:9"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:9">i</name></decl>, <decl pos:start="47:12" pos:end="47:14"><type ref="prev" pos:start="47:5" pos:end="47:7"/><name pos:start="47:12" pos:end="47:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:21"><expr pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:11">sofa</name><operator pos:start="51:12" pos:end="51:12">.</operator><name pos:start="51:13" pos:end="51:16">ncid</name></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:10">status</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <call pos:start="53:14" pos:end="53:49"><name pos:start="53:14" pos:end="53:20">nc_open</name><argument_list pos:start="53:21" pos:end="53:49">(<argument pos:start="53:22" pos:end="53:29"><expr pos:start="53:22" pos:end="53:29"><name pos:start="53:22" pos:end="53:29">filename</name></expr></argument>, <argument pos:start="53:32" pos:end="53:41"><expr pos:start="53:32" pos:end="53:41"><name pos:start="53:32" pos:end="53:41">NC_NOWRITE</name></expr></argument>, <argument pos:start="53:44" pos:end="53:48"><expr pos:start="53:44" pos:end="53:48"><operator pos:start="53:44" pos:end="53:44">&amp;</operator><name pos:start="53:45" pos:end="53:48">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="53:52" pos:end="53:81">/* open SOFA file read-only */</comment>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:27">(<expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:14">status</name> <operator pos:start="55:16" pos:end="55:17">!=</operator> <name pos:start="55:19" pos:end="55:26">NC_NOERR</name></expr>)</condition> <block pos:start="55:29" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:31">

        <expr_stmt pos:start="57:9" pos:end="57:75"><expr pos:start="57:9" pos:end="57:74"><call pos:start="57:9" pos:end="57:74"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:74">(<argument pos:start="57:16" pos:end="57:18"><expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">ctx</name></expr></argument>, <argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:35" pos:end="57:63"><expr pos:start="57:35" pos:end="57:63"><literal type="string" pos:start="57:35" pos:end="57:63">"Can't find SOFA-file '%s'\n"</literal></expr></argument>, <argument pos:start="57:66" pos:end="57:73"><expr pos:start="57:66" pos:end="57:73"><name pos:start="57:66" pos:end="57:73">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:31">return <expr pos:start="59:16" pos:end="59:30"><call pos:start="59:16" pos:end="59:30"><name pos:start="59:16" pos:end="59:22">AVERROR</name><argument_list pos:start="59:23" pos:end="59:30">(<argument pos:start="59:24" pos:end="59:29"><expr pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:91">/* get number of dimensions, vars, global attributes and Id of unlimited dimensions: */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:62"><expr pos:start="67:5" pos:end="67:61"><call pos:start="67:5" pos:end="67:61"><name pos:start="67:5" pos:end="67:10">nc_inq</name><argument_list pos:start="67:11" pos:end="67:61">(<argument pos:start="67:12" pos:end="67:15"><expr pos:start="67:12" pos:end="67:15"><name pos:start="67:12" pos:end="67:15">ncid</name></expr></argument>, <argument pos:start="67:18" pos:end="67:24"><expr pos:start="67:18" pos:end="67:24"><operator pos:start="67:18" pos:end="67:18">&amp;</operator><name pos:start="67:19" pos:end="67:24">n_dims</name></expr></argument>, <argument pos:start="67:27" pos:end="67:33"><expr pos:start="67:27" pos:end="67:33"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:33">n_vars</name></expr></argument>, <argument pos:start="67:36" pos:end="67:43"><expr pos:start="67:36" pos:end="67:43"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:43">n_gatts</name></expr></argument>, <argument pos:start="67:46" pos:end="67:60"><expr pos:start="67:46" pos:end="67:60"><operator pos:start="67:46" pos:end="67:46">&amp;</operator><name pos:start="67:47" pos:end="67:60">n_unlim_dim_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:75">/* -- get number of measurements ("M") and length of one IR ("N") -- */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:62"><expr pos:start="73:5" pos:end="73:61"><name pos:start="73:5" pos:end="73:14">dim_length</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <call pos:start="73:18" pos:end="73:61"><name pos:start="73:18" pos:end="73:32">av_malloc_array</name><argument_list pos:start="73:33" pos:end="73:61">(<argument pos:start="73:34" pos:end="73:39"><expr pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:39">n_dims</name></expr></argument>, <argument pos:start="73:42" pos:end="73:60"><expr pos:start="73:42" pos:end="73:60"><sizeof pos:start="73:42" pos:end="73:60">sizeof<argument_list pos:start="73:48" pos:end="73:60">(<argument pos:start="73:49" pos:end="73:59"><expr pos:start="73:49" pos:end="73:59"><operator pos:start="73:49" pos:end="73:49">*</operator><name pos:start="73:50" pos:end="73:59">dim_length</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:20">(<expr pos:start="75:9" pos:end="75:19"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:19">dim_length</name></expr>)</condition> <block pos:start="75:22" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:31">

        <expr_stmt pos:start="77:9" pos:end="77:23"><expr pos:start="77:9" pos:end="77:22"><call pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:16">nc_close</name><argument_list pos:start="77:17" pos:end="77:22">(<argument pos:start="77:18" pos:end="77:21"><expr pos:start="77:18" pos:end="77:21"><name pos:start="77:18" pos:end="77:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:31">return <expr pos:start="79:16" pos:end="79:30"><call pos:start="79:16" pos:end="79:30"><name pos:start="79:16" pos:end="79:22">AVERROR</name><argument_list pos:start="79:23" pos:end="79:30">(<argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="85:5" pos:end="97:5">for <control pos:start="85:9" pos:end="85:32">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:27"><expr pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <name pos:start="85:21" pos:end="85:26">n_dims</name></expr>;</condition> <incr pos:start="85:29" pos:end="85:31"><expr pos:start="85:29" pos:end="85:31"><name pos:start="85:29" pos:end="85:29">i</name><operator pos:start="85:30" pos:end="85:31">++</operator></expr></incr>)</control> <block pos:start="85:34" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:25"> <comment type="block" pos:start="85:36" pos:end="85:74">/* go through all dimensions of file */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:63"><expr pos:start="87:9" pos:end="87:62"><call pos:start="87:9" pos:end="87:62"><name pos:start="87:9" pos:end="87:18">nc_inq_dim</name><argument_list pos:start="87:19" pos:end="87:62">(<argument pos:start="87:20" pos:end="87:23"><expr pos:start="87:20" pos:end="87:23"><name pos:start="87:20" pos:end="87:23">ncid</name></expr></argument>, <argument pos:start="87:26" pos:end="87:26"><expr pos:start="87:26" pos:end="87:26"><name pos:start="87:26" pos:end="87:26">i</name></expr></argument>, <argument pos:start="87:29" pos:end="87:45"><expr pos:start="87:29" pos:end="87:45"><operator pos:start="87:29" pos:end="87:29">(</operator><name pos:start="87:30" pos:end="87:33">char</name> <operator pos:start="87:35" pos:end="87:35">*</operator><operator pos:start="87:36" pos:end="87:36">)</operator><operator pos:start="87:37" pos:end="87:37">&amp;</operator><name pos:start="87:38" pos:end="87:45">dim_name</name></expr></argument>, <argument pos:start="87:48" pos:end="87:61"><expr pos:start="87:48" pos:end="87:61"><operator pos:start="87:48" pos:end="87:48">&amp;</operator><name pos:start="87:49" pos:end="87:61"><name pos:start="87:49" pos:end="87:58">dim_length</name><index pos:start="87:59" pos:end="87:61">[<expr pos:start="87:60" pos:end="87:60"><name pos:start="87:60" pos:end="87:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:65" pos:end="87:84">/* get dimensions */</comment>

        <if_stmt pos:start="89:9" pos:end="91:25"><if pos:start="89:9" pos:end="91:25">if <condition pos:start="89:12" pos:end="89:54">(<expr pos:start="89:13" pos:end="89:53"><operator pos:start="89:13" pos:end="89:13">!</operator><call pos:start="89:14" pos:end="89:53"><name pos:start="89:14" pos:end="89:20">strncmp</name><argument_list pos:start="89:21" pos:end="89:53">(<argument pos:start="89:22" pos:end="89:24"><expr pos:start="89:22" pos:end="89:24"><literal type="string" pos:start="89:22" pos:end="89:24">"M"</literal></expr></argument>, <argument pos:start="89:27" pos:end="89:49"><expr pos:start="89:27" pos:end="89:49"><operator pos:start="89:27" pos:end="89:27">(</operator><specifier pos:start="89:28" pos:end="89:32">const</specifier> <name pos:start="89:34" pos:end="89:37">char</name> <operator pos:start="89:39" pos:end="89:39">*</operator><operator pos:start="89:40" pos:end="89:40">)</operator><operator pos:start="89:41" pos:end="89:41">&amp;</operator><name pos:start="89:42" pos:end="89:49">dim_name</name></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><literal type="number" pos:start="89:52" pos:end="89:52">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:25"><block_content pos:start="91:13" pos:end="91:25"> <comment type="block" pos:start="89:56" pos:end="89:84">/* get ID of dimension "M" */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:25"><expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:20">m_dim_id</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <name pos:start="91:24" pos:end="91:24">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="95:25"><if pos:start="93:9" pos:end="95:25">if <condition pos:start="93:12" pos:end="93:54">(<expr pos:start="93:13" pos:end="93:53"><operator pos:start="93:13" pos:end="93:13">!</operator><call pos:start="93:14" pos:end="93:53"><name pos:start="93:14" pos:end="93:20">strncmp</name><argument_list pos:start="93:21" pos:end="93:53">(<argument pos:start="93:22" pos:end="93:24"><expr pos:start="93:22" pos:end="93:24"><literal type="string" pos:start="93:22" pos:end="93:24">"N"</literal></expr></argument>, <argument pos:start="93:27" pos:end="93:49"><expr pos:start="93:27" pos:end="93:49"><operator pos:start="93:27" pos:end="93:27">(</operator><specifier pos:start="93:28" pos:end="93:32">const</specifier> <name pos:start="93:34" pos:end="93:37">char</name> <operator pos:start="93:39" pos:end="93:39">*</operator><operator pos:start="93:40" pos:end="93:40">)</operator><operator pos:start="93:41" pos:end="93:41">&amp;</operator><name pos:start="93:42" pos:end="93:49">dim_name</name></expr></argument>, <argument pos:start="93:52" pos:end="93:52"><expr pos:start="93:52" pos:end="93:52"><literal type="number" pos:start="93:52" pos:end="93:52">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:25"><block_content pos:start="95:13" pos:end="95:25"> <comment type="block" pos:start="93:56" pos:end="93:84">/* get ID of dimension "N" */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:25"><expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:20">n_dim_id</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:24">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:45">(<expr pos:start="101:9" pos:end="101:44"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:17">m_dim_id</name> <operator pos:start="101:19" pos:end="101:20">==</operator> <operator pos:start="101:22" pos:end="101:22">-</operator><literal type="number" pos:start="101:23" pos:end="101:23">1</literal><operator pos:start="101:24" pos:end="101:24">)</operator> <operator pos:start="101:26" pos:end="101:27">||</operator> <operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:37">n_dim_id</name> <operator pos:start="101:39" pos:end="101:40">==</operator> <operator pos:start="101:42" pos:end="101:42">-</operator><literal type="number" pos:start="101:43" pos:end="101:43">1</literal><operator pos:start="101:44" pos:end="101:44">)</operator></expr>)</condition> <block pos:start="101:47" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:31"> <comment type="block" pos:start="101:49" pos:end="101:92">/* dimension "M" or "N" couldn't be found */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:84"><expr pos:start="103:9" pos:end="103:83"><call pos:start="103:9" pos:end="103:83"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="103:83">(<argument pos:start="103:16" pos:end="103:18"><expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ctx</name></expr></argument>, <argument pos:start="103:21" pos:end="103:32"><expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:35" pos:end="103:82"><expr pos:start="103:35" pos:end="103:82"><literal type="string" pos:start="103:35" pos:end="103:82">"Can't find required dimensions in SOFA file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:30"><expr pos:start="105:9" pos:end="105:29"><call pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:16">av_freep</name><argument_list pos:start="105:17" pos:end="105:29">(<argument pos:start="105:18" pos:end="105:28"><expr pos:start="105:18" pos:end="105:28"><operator pos:start="105:18" pos:end="105:18">&amp;</operator><name pos:start="105:19" pos:end="105:28">dim_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><call pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:16">nc_close</name><argument_list pos:start="107:17" pos:end="107:22">(<argument pos:start="107:18" pos:end="107:21"><expr pos:start="107:18" pos:end="107:21"><name pos:start="107:18" pos:end="107:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:31">return <expr pos:start="109:16" pos:end="109:30"><call pos:start="109:16" pos:end="109:30"><name pos:start="109:16" pos:end="109:22">AVERROR</name><argument_list pos:start="109:23" pos:end="109:30">(<argument pos:start="109:24" pos:end="109:29"><expr pos:start="109:24" pos:end="109:29"><name pos:start="109:24" pos:end="109:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:37"><expr pos:start="115:5" pos:end="115:36"><name pos:start="115:5" pos:end="115:13">n_samples</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:36"><name pos:start="115:17" pos:end="115:26">dim_length</name><index pos:start="115:27" pos:end="115:36">[<expr pos:start="115:28" pos:end="115:35"><name pos:start="115:28" pos:end="115:35">n_dim_id</name></expr>]</index></name></expr>;</expr_stmt> <comment type="block" pos:start="115:39" pos:end="115:64">/* get length of one IR */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:9">m_dim</name>     <operator pos:start="117:15" pos:end="117:15">=</operator> <name pos:start="117:17" pos:end="117:36"><name pos:start="117:17" pos:end="117:26">dim_length</name><index pos:start="117:27" pos:end="117:36">[<expr pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:35">m_dim_id</name></expr>]</index></name></expr>;</expr_stmt> <comment type="block" pos:start="117:39" pos:end="117:70">/* get number of measurements */</comment>



    <expr_stmt pos:start="121:5" pos:end="121:26"><expr pos:start="121:5" pos:end="121:25"><call pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:12">av_freep</name><argument_list pos:start="121:13" pos:end="121:25">(<argument pos:start="121:14" pos:end="121:24"><expr pos:start="121:14" pos:end="121:24"><operator pos:start="121:14" pos:end="121:14">&amp;</operator><name pos:start="121:15" pos:end="121:24">dim_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:31">/* -- check file type -- */</comment>

    <comment type="block" pos:start="127:5" pos:end="127:47">/* get length of attritube "Conventions" */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:69"><expr pos:start="129:5" pos:end="129:68"><name pos:start="129:5" pos:end="129:10">status</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <call pos:start="129:14" pos:end="129:68"><name pos:start="129:14" pos:end="129:26">nc_inq_attlen</name><argument_list pos:start="129:27" pos:end="129:68">(<argument pos:start="129:28" pos:end="129:31"><expr pos:start="129:28" pos:end="129:31"><name pos:start="129:28" pos:end="129:31">ncid</name></expr></argument>, <argument pos:start="129:34" pos:end="129:42"><expr pos:start="129:34" pos:end="129:42"><name pos:start="129:34" pos:end="129:42">NC_GLOBAL</name></expr></argument>, <argument pos:start="129:45" pos:end="129:57"><expr pos:start="129:45" pos:end="129:57"><literal type="string" pos:start="129:45" pos:end="129:57">"Conventions"</literal></expr></argument>, <argument pos:start="129:60" pos:end="129:67"><expr pos:start="129:60" pos:end="129:67"><operator pos:start="129:60" pos:end="129:60">&amp;</operator><name pos:start="129:61" pos:end="129:67">att_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:27">(<expr pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:14">status</name> <operator pos:start="131:16" pos:end="131:17">!=</operator> <name pos:start="131:19" pos:end="131:26">NC_NOERR</name></expr>)</condition> <block pos:start="131:29" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:35">

        <expr_stmt pos:start="133:9" pos:end="133:86"><expr pos:start="133:9" pos:end="133:85"><call pos:start="133:9" pos:end="133:85"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="133:85">(<argument pos:start="133:16" pos:end="133:18"><expr pos:start="133:16" pos:end="133:18"><name pos:start="133:16" pos:end="133:18">ctx</name></expr></argument>, <argument pos:start="133:21" pos:end="133:32"><expr pos:start="133:21" pos:end="133:32"><name pos:start="133:21" pos:end="133:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:35" pos:end="133:84"><expr pos:start="133:35" pos:end="133:84"><literal type="string" pos:start="133:35" pos:end="133:84">"Can't get length of attribute \"Conventions\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><call pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:16">nc_close</name><argument_list pos:start="135:17" pos:end="135:22">(<argument pos:start="135:18" pos:end="135:21"><expr pos:start="135:18" pos:end="135:21"><name pos:start="135:18" pos:end="135:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:35">return <expr pos:start="137:16" pos:end="137:34"><name pos:start="137:16" pos:end="137:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:41">/* check whether file is SOFA file */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:34"><expr pos:start="145:5" pos:end="145:33"><name pos:start="145:5" pos:end="145:8">text</name> <operator pos:start="145:10" pos:end="145:10">=</operator> <call pos:start="145:12" pos:end="145:33"><name pos:start="145:12" pos:end="145:20">av_malloc</name><argument_list pos:start="145:21" pos:end="145:33">(<argument pos:start="145:22" pos:end="145:32"><expr pos:start="145:22" pos:end="145:32"><name pos:start="145:22" pos:end="145:28">att_len</name> <operator pos:start="145:30" pos:end="145:30">+</operator> <literal type="number" pos:start="145:32" pos:end="145:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:14">(<expr pos:start="147:9" pos:end="147:13"><operator pos:start="147:9" pos:end="147:9">!</operator><name pos:start="147:10" pos:end="147:13">text</name></expr>)</condition> <block pos:start="147:16" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:31">

        <expr_stmt pos:start="149:9" pos:end="149:23"><expr pos:start="149:9" pos:end="149:22"><call pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:16">nc_close</name><argument_list pos:start="149:17" pos:end="149:22">(<argument pos:start="149:18" pos:end="149:21"><expr pos:start="149:18" pos:end="149:21"><name pos:start="149:18" pos:end="149:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:31">return <expr pos:start="151:16" pos:end="151:30"><call pos:start="151:16" pos:end="151:30"><name pos:start="151:16" pos:end="151:22">AVERROR</name><argument_list pos:start="151:23" pos:end="151:30">(<argument pos:start="151:24" pos:end="151:29"><expr pos:start="151:24" pos:end="151:29"><name pos:start="151:24" pos:end="151:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:58"><expr pos:start="157:5" pos:end="157:57"><call pos:start="157:5" pos:end="157:57"><name pos:start="157:5" pos:end="157:19">nc_get_att_text</name><argument_list pos:start="157:20" pos:end="157:57">(<argument pos:start="157:21" pos:end="157:24"><expr pos:start="157:21" pos:end="157:24"><name pos:start="157:21" pos:end="157:24">ncid</name></expr></argument>, <argument pos:start="157:27" pos:end="157:35"><expr pos:start="157:27" pos:end="157:35"><name pos:start="157:27" pos:end="157:35">NC_GLOBAL</name></expr></argument>, <argument pos:start="157:38" pos:end="157:50"><expr pos:start="157:38" pos:end="157:50"><literal type="string" pos:start="157:38" pos:end="157:50">"Conventions"</literal></expr></argument>, <argument pos:start="157:53" pos:end="157:56"><expr pos:start="157:53" pos:end="157:56"><name pos:start="157:53" pos:end="157:56">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:26"><expr pos:start="159:5" pos:end="159:25"><operator pos:start="159:5" pos:end="159:5">*</operator><operator pos:start="159:6" pos:end="159:6">(</operator><name pos:start="159:7" pos:end="159:10">text</name> <operator pos:start="159:12" pos:end="159:12">+</operator> <name pos:start="159:14" pos:end="159:20">att_len</name><operator pos:start="159:21" pos:end="159:21">)</operator> <operator pos:start="159:23" pos:end="159:23">=</operator> <literal type="number" pos:start="159:25" pos:end="159:25">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="171:5"><if pos:start="161:5" pos:end="171:5">if <condition pos:start="161:8" pos:end="161:33">(<expr pos:start="161:9" pos:end="161:32"><call pos:start="161:9" pos:end="161:32"><name pos:start="161:9" pos:end="161:15">strncmp</name><argument_list pos:start="161:16" pos:end="161:32">(<argument pos:start="161:17" pos:end="161:22"><expr pos:start="161:17" pos:end="161:22"><literal type="string" pos:start="161:17" pos:end="161:22">"SOFA"</literal></expr></argument>, <argument pos:start="161:25" pos:end="161:28"><expr pos:start="161:25" pos:end="161:28"><name pos:start="161:25" pos:end="161:28">text</name></expr></argument>, <argument pos:start="161:31" pos:end="161:31"><expr pos:start="161:31" pos:end="161:31"><literal type="number" pos:start="161:31" pos:end="161:31">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:35" pos:end="171:5">{<block_content pos:start="163:9" pos:end="169:31">

        <expr_stmt pos:start="163:9" pos:end="163:56"><expr pos:start="163:9" pos:end="163:55"><call pos:start="163:9" pos:end="163:55"><name pos:start="163:9" pos:end="163:14">av_log</name><argument_list pos:start="163:15" pos:end="163:55">(<argument pos:start="163:16" pos:end="163:18"><expr pos:start="163:16" pos:end="163:18"><name pos:start="163:16" pos:end="163:18">ctx</name></expr></argument>, <argument pos:start="163:21" pos:end="163:32"><expr pos:start="163:21" pos:end="163:32"><name pos:start="163:21" pos:end="163:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:35" pos:end="163:54"><expr pos:start="163:35" pos:end="163:54"><literal type="string" pos:start="163:35" pos:end="163:54">"Not a SOFA file!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:24"><expr pos:start="165:9" pos:end="165:23"><call pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:16">av_freep</name><argument_list pos:start="165:17" pos:end="165:23">(<argument pos:start="165:18" pos:end="165:22"><expr pos:start="165:18" pos:end="165:22"><operator pos:start="165:18" pos:end="165:18">&amp;</operator><name pos:start="165:19" pos:end="165:22">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:23"><expr pos:start="167:9" pos:end="167:22"><call pos:start="167:9" pos:end="167:22"><name pos:start="167:9" pos:end="167:16">nc_close</name><argument_list pos:start="167:17" pos:end="167:22">(<argument pos:start="167:18" pos:end="167:21"><expr pos:start="167:18" pos:end="167:21"><name pos:start="167:18" pos:end="167:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="169:9" pos:end="169:31">return <expr pos:start="169:16" pos:end="169:30"><call pos:start="169:16" pos:end="169:30"><name pos:start="169:16" pos:end="169:22">AVERROR</name><argument_list pos:start="169:23" pos:end="169:30">(<argument pos:start="169:24" pos:end="169:29"><expr pos:start="169:24" pos:end="169:29"><name pos:start="169:24" pos:end="169:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:20"><expr pos:start="173:5" pos:end="173:19"><call pos:start="173:5" pos:end="173:19"><name pos:start="173:5" pos:end="173:12">av_freep</name><argument_list pos:start="173:13" pos:end="173:19">(<argument pos:start="173:14" pos:end="173:18"><expr pos:start="173:14" pos:end="173:18"><operator pos:start="173:14" pos:end="173:14">&amp;</operator><name pos:start="173:15" pos:end="173:18">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:65"><expr pos:start="177:5" pos:end="177:64"><name pos:start="177:5" pos:end="177:10">status</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <call pos:start="177:14" pos:end="177:64"><name pos:start="177:14" pos:end="177:26">nc_inq_attlen</name><argument_list pos:start="177:27" pos:end="177:64">(<argument pos:start="177:28" pos:end="177:31"><expr pos:start="177:28" pos:end="177:31"><name pos:start="177:28" pos:end="177:31">ncid</name></expr></argument>, <argument pos:start="177:34" pos:end="177:42"><expr pos:start="177:34" pos:end="177:42"><name pos:start="177:34" pos:end="177:42">NC_GLOBAL</name></expr></argument>, <argument pos:start="177:45" pos:end="177:53"><expr pos:start="177:45" pos:end="177:53"><literal type="string" pos:start="177:45" pos:end="177:53">"License"</literal></expr></argument>, <argument pos:start="177:56" pos:end="177:63"><expr pos:start="177:56" pos:end="177:63"><operator pos:start="177:56" pos:end="177:56">&amp;</operator><name pos:start="177:57" pos:end="177:63">att_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="195:5"><if pos:start="179:5" pos:end="195:5">if <condition pos:start="179:8" pos:end="179:27">(<expr pos:start="179:9" pos:end="179:26"><name pos:start="179:9" pos:end="179:14">status</name> <operator pos:start="179:16" pos:end="179:17">==</operator> <name pos:start="179:19" pos:end="179:26">NC_NOERR</name></expr>)</condition> <block pos:start="179:29" pos:end="195:5">{<block_content pos:start="181:9" pos:end="193:9">

        <expr_stmt pos:start="181:9" pos:end="181:38"><expr pos:start="181:9" pos:end="181:37"><name pos:start="181:9" pos:end="181:12">text</name> <operator pos:start="181:14" pos:end="181:14">=</operator> <call pos:start="181:16" pos:end="181:37"><name pos:start="181:16" pos:end="181:24">av_malloc</name><argument_list pos:start="181:25" pos:end="181:37">(<argument pos:start="181:26" pos:end="181:36"><expr pos:start="181:26" pos:end="181:36"><name pos:start="181:26" pos:end="181:32">att_len</name> <operator pos:start="181:34" pos:end="181:34">+</operator> <literal type="number" pos:start="181:36" pos:end="181:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="193:9"><if pos:start="183:9" pos:end="193:9">if <condition pos:start="183:12" pos:end="183:17">(<expr pos:start="183:13" pos:end="183:16"><name pos:start="183:13" pos:end="183:16">text</name></expr>)</condition> <block pos:start="183:19" pos:end="193:9">{<block_content pos:start="185:13" pos:end="191:28">

            <expr_stmt pos:start="185:13" pos:end="185:62"><expr pos:start="185:13" pos:end="185:61"><call pos:start="185:13" pos:end="185:61"><name pos:start="185:13" pos:end="185:27">nc_get_att_text</name><argument_list pos:start="185:28" pos:end="185:61">(<argument pos:start="185:29" pos:end="185:32"><expr pos:start="185:29" pos:end="185:32"><name pos:start="185:29" pos:end="185:32">ncid</name></expr></argument>, <argument pos:start="185:35" pos:end="185:43"><expr pos:start="185:35" pos:end="185:43"><name pos:start="185:35" pos:end="185:43">NC_GLOBAL</name></expr></argument>, <argument pos:start="185:46" pos:end="185:54"><expr pos:start="185:46" pos:end="185:54"><literal type="string" pos:start="185:46" pos:end="185:54">"License"</literal></expr></argument>, <argument pos:start="185:57" pos:end="185:60"><expr pos:start="185:57" pos:end="185:60"><name pos:start="185:57" pos:end="185:60">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:34"><expr pos:start="187:13" pos:end="187:33"><operator pos:start="187:13" pos:end="187:13">*</operator><operator pos:start="187:14" pos:end="187:14">(</operator><name pos:start="187:15" pos:end="187:18">text</name> <operator pos:start="187:20" pos:end="187:20">+</operator> <name pos:start="187:22" pos:end="187:28">att_len</name><operator pos:start="187:29" pos:end="187:29">)</operator> <operator pos:start="187:31" pos:end="187:31">=</operator> <literal type="number" pos:start="187:33" pos:end="187:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:70"><expr pos:start="189:13" pos:end="189:69"><call pos:start="189:13" pos:end="189:69"><name pos:start="189:13" pos:end="189:18">av_log</name><argument_list pos:start="189:19" pos:end="189:69">(<argument pos:start="189:20" pos:end="189:22"><expr pos:start="189:20" pos:end="189:22"><name pos:start="189:20" pos:end="189:22">ctx</name></expr></argument>, <argument pos:start="189:25" pos:end="189:35"><expr pos:start="189:25" pos:end="189:35"><name pos:start="189:25" pos:end="189:35">AV_LOG_INFO</name></expr></argument>, <argument pos:start="189:38" pos:end="189:62"><expr pos:start="189:38" pos:end="189:62"><literal type="string" pos:start="189:38" pos:end="189:62">"SOFA file License: %s\n"</literal></expr></argument>, <argument pos:start="189:65" pos:end="189:68"><expr pos:start="189:65" pos:end="189:68"><name pos:start="189:65" pos:end="189:68">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:28"><expr pos:start="191:13" pos:end="191:27"><call pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:20">av_freep</name><argument_list pos:start="191:21" pos:end="191:27">(<argument pos:start="191:22" pos:end="191:26"><expr pos:start="191:22" pos:end="191:26"><operator pos:start="191:22" pos:end="191:22">&amp;</operator><name pos:start="191:23" pos:end="191:26">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:75"><expr pos:start="199:5" pos:end="199:74"><name pos:start="199:5" pos:end="199:10">status</name> <operator pos:start="199:12" pos:end="199:12">=</operator> <call pos:start="199:14" pos:end="199:74"><name pos:start="199:14" pos:end="199:26">nc_inq_attlen</name><argument_list pos:start="199:27" pos:end="199:74">(<argument pos:start="199:28" pos:end="199:31"><expr pos:start="199:28" pos:end="199:31"><name pos:start="199:28" pos:end="199:31">ncid</name></expr></argument>, <argument pos:start="199:34" pos:end="199:42"><expr pos:start="199:34" pos:end="199:42"><name pos:start="199:34" pos:end="199:42">NC_GLOBAL</name></expr></argument>, <argument pos:start="199:45" pos:end="199:63"><expr pos:start="199:45" pos:end="199:63"><literal type="string" pos:start="199:45" pos:end="199:63">"SourceDescription"</literal></expr></argument>, <argument pos:start="199:66" pos:end="199:73"><expr pos:start="199:66" pos:end="199:73"><operator pos:start="199:66" pos:end="199:66">&amp;</operator><name pos:start="199:67" pos:end="199:73">att_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="201:5" pos:end="217:5"><if pos:start="201:5" pos:end="217:5">if <condition pos:start="201:8" pos:end="201:27">(<expr pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:14">status</name> <operator pos:start="201:16" pos:end="201:17">==</operator> <name pos:start="201:19" pos:end="201:26">NC_NOERR</name></expr>)</condition> <block pos:start="201:29" pos:end="217:5">{<block_content pos:start="203:9" pos:end="215:9">

        <expr_stmt pos:start="203:9" pos:end="203:38"><expr pos:start="203:9" pos:end="203:37"><name pos:start="203:9" pos:end="203:12">text</name> <operator pos:start="203:14" pos:end="203:14">=</operator> <call pos:start="203:16" pos:end="203:37"><name pos:start="203:16" pos:end="203:24">av_malloc</name><argument_list pos:start="203:25" pos:end="203:37">(<argument pos:start="203:26" pos:end="203:36"><expr pos:start="203:26" pos:end="203:36"><name pos:start="203:26" pos:end="203:32">att_len</name> <operator pos:start="203:34" pos:end="203:34">+</operator> <literal type="number" pos:start="203:36" pos:end="203:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="215:9"><if pos:start="205:9" pos:end="215:9">if <condition pos:start="205:12" pos:end="205:17">(<expr pos:start="205:13" pos:end="205:16"><name pos:start="205:13" pos:end="205:16">text</name></expr>)</condition> <block pos:start="205:19" pos:end="215:9">{<block_content pos:start="207:13" pos:end="213:28">

            <expr_stmt pos:start="207:13" pos:end="207:72"><expr pos:start="207:13" pos:end="207:71"><call pos:start="207:13" pos:end="207:71"><name pos:start="207:13" pos:end="207:27">nc_get_att_text</name><argument_list pos:start="207:28" pos:end="207:71">(<argument pos:start="207:29" pos:end="207:32"><expr pos:start="207:29" pos:end="207:32"><name pos:start="207:29" pos:end="207:32">ncid</name></expr></argument>, <argument pos:start="207:35" pos:end="207:43"><expr pos:start="207:35" pos:end="207:43"><name pos:start="207:35" pos:end="207:43">NC_GLOBAL</name></expr></argument>, <argument pos:start="207:46" pos:end="207:64"><expr pos:start="207:46" pos:end="207:64"><literal type="string" pos:start="207:46" pos:end="207:64">"SourceDescription"</literal></expr></argument>, <argument pos:start="207:67" pos:end="207:70"><expr pos:start="207:67" pos:end="207:70"><name pos:start="207:67" pos:end="207:70">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:34"><expr pos:start="209:13" pos:end="209:33"><operator pos:start="209:13" pos:end="209:13">*</operator><operator pos:start="209:14" pos:end="209:14">(</operator><name pos:start="209:15" pos:end="209:18">text</name> <operator pos:start="209:20" pos:end="209:20">+</operator> <name pos:start="209:22" pos:end="209:28">att_len</name><operator pos:start="209:29" pos:end="209:29">)</operator> <operator pos:start="209:31" pos:end="209:31">=</operator> <literal type="number" pos:start="209:33" pos:end="209:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:80"><expr pos:start="211:13" pos:end="211:79"><call pos:start="211:13" pos:end="211:79"><name pos:start="211:13" pos:end="211:18">av_log</name><argument_list pos:start="211:19" pos:end="211:79">(<argument pos:start="211:20" pos:end="211:22"><expr pos:start="211:20" pos:end="211:22"><name pos:start="211:20" pos:end="211:22">ctx</name></expr></argument>, <argument pos:start="211:25" pos:end="211:35"><expr pos:start="211:25" pos:end="211:35"><name pos:start="211:25" pos:end="211:35">AV_LOG_INFO</name></expr></argument>, <argument pos:start="211:38" pos:end="211:72"><expr pos:start="211:38" pos:end="211:72"><literal type="string" pos:start="211:38" pos:end="211:72">"SOFA file SourceDescription: %s\n"</literal></expr></argument>, <argument pos:start="211:75" pos:end="211:78"><expr pos:start="211:75" pos:end="211:78"><name pos:start="211:75" pos:end="211:78">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:28"><expr pos:start="213:13" pos:end="213:27"><call pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:20">av_freep</name><argument_list pos:start="213:21" pos:end="213:27">(<argument pos:start="213:22" pos:end="213:26"><expr pos:start="213:22" pos:end="213:26"><operator pos:start="213:22" pos:end="213:22">&amp;</operator><name pos:start="213:23" pos:end="213:26">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:65"><expr pos:start="221:5" pos:end="221:64"><name pos:start="221:5" pos:end="221:10">status</name> <operator pos:start="221:12" pos:end="221:12">=</operator> <call pos:start="221:14" pos:end="221:64"><name pos:start="221:14" pos:end="221:26">nc_inq_attlen</name><argument_list pos:start="221:27" pos:end="221:64">(<argument pos:start="221:28" pos:end="221:31"><expr pos:start="221:28" pos:end="221:31"><name pos:start="221:28" pos:end="221:31">ncid</name></expr></argument>, <argument pos:start="221:34" pos:end="221:42"><expr pos:start="221:34" pos:end="221:42"><name pos:start="221:34" pos:end="221:42">NC_GLOBAL</name></expr></argument>, <argument pos:start="221:45" pos:end="221:53"><expr pos:start="221:45" pos:end="221:53"><literal type="string" pos:start="221:45" pos:end="221:53">"Comment"</literal></expr></argument>, <argument pos:start="221:56" pos:end="221:63"><expr pos:start="221:56" pos:end="221:63"><operator pos:start="221:56" pos:end="221:56">&amp;</operator><name pos:start="221:57" pos:end="221:63">att_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="223:5" pos:end="239:5"><if pos:start="223:5" pos:end="239:5">if <condition pos:start="223:8" pos:end="223:27">(<expr pos:start="223:9" pos:end="223:26"><name pos:start="223:9" pos:end="223:14">status</name> <operator pos:start="223:16" pos:end="223:17">==</operator> <name pos:start="223:19" pos:end="223:26">NC_NOERR</name></expr>)</condition> <block pos:start="223:29" pos:end="239:5">{<block_content pos:start="225:9" pos:end="237:9">

        <expr_stmt pos:start="225:9" pos:end="225:38"><expr pos:start="225:9" pos:end="225:37"><name pos:start="225:9" pos:end="225:12">text</name> <operator pos:start="225:14" pos:end="225:14">=</operator> <call pos:start="225:16" pos:end="225:37"><name pos:start="225:16" pos:end="225:24">av_malloc</name><argument_list pos:start="225:25" pos:end="225:37">(<argument pos:start="225:26" pos:end="225:36"><expr pos:start="225:26" pos:end="225:36"><name pos:start="225:26" pos:end="225:32">att_len</name> <operator pos:start="225:34" pos:end="225:34">+</operator> <literal type="number" pos:start="225:36" pos:end="225:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="227:9" pos:end="237:9"><if pos:start="227:9" pos:end="237:9">if <condition pos:start="227:12" pos:end="227:17">(<expr pos:start="227:13" pos:end="227:16"><name pos:start="227:13" pos:end="227:16">text</name></expr>)</condition> <block pos:start="227:19" pos:end="237:9">{<block_content pos:start="229:13" pos:end="235:28">

            <expr_stmt pos:start="229:13" pos:end="229:62"><expr pos:start="229:13" pos:end="229:61"><call pos:start="229:13" pos:end="229:61"><name pos:start="229:13" pos:end="229:27">nc_get_att_text</name><argument_list pos:start="229:28" pos:end="229:61">(<argument pos:start="229:29" pos:end="229:32"><expr pos:start="229:29" pos:end="229:32"><name pos:start="229:29" pos:end="229:32">ncid</name></expr></argument>, <argument pos:start="229:35" pos:end="229:43"><expr pos:start="229:35" pos:end="229:43"><name pos:start="229:35" pos:end="229:43">NC_GLOBAL</name></expr></argument>, <argument pos:start="229:46" pos:end="229:54"><expr pos:start="229:46" pos:end="229:54"><literal type="string" pos:start="229:46" pos:end="229:54">"Comment"</literal></expr></argument>, <argument pos:start="229:57" pos:end="229:60"><expr pos:start="229:57" pos:end="229:60"><name pos:start="229:57" pos:end="229:60">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:34"><expr pos:start="231:13" pos:end="231:33"><operator pos:start="231:13" pos:end="231:13">*</operator><operator pos:start="231:14" pos:end="231:14">(</operator><name pos:start="231:15" pos:end="231:18">text</name> <operator pos:start="231:20" pos:end="231:20">+</operator> <name pos:start="231:22" pos:end="231:28">att_len</name><operator pos:start="231:29" pos:end="231:29">)</operator> <operator pos:start="231:31" pos:end="231:31">=</operator> <literal type="number" pos:start="231:33" pos:end="231:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:70"><expr pos:start="233:13" pos:end="233:69"><call pos:start="233:13" pos:end="233:69"><name pos:start="233:13" pos:end="233:18">av_log</name><argument_list pos:start="233:19" pos:end="233:69">(<argument pos:start="233:20" pos:end="233:22"><expr pos:start="233:20" pos:end="233:22"><name pos:start="233:20" pos:end="233:22">ctx</name></expr></argument>, <argument pos:start="233:25" pos:end="233:35"><expr pos:start="233:25" pos:end="233:35"><name pos:start="233:25" pos:end="233:35">AV_LOG_INFO</name></expr></argument>, <argument pos:start="233:38" pos:end="233:62"><expr pos:start="233:38" pos:end="233:62"><literal type="string" pos:start="233:38" pos:end="233:62">"SOFA file Comment: %s\n"</literal></expr></argument>, <argument pos:start="233:65" pos:end="233:68"><expr pos:start="233:65" pos:end="233:68"><name pos:start="233:65" pos:end="233:68">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:28"><expr pos:start="235:13" pos:end="235:27"><call pos:start="235:13" pos:end="235:27"><name pos:start="235:13" pos:end="235:20">av_freep</name><argument_list pos:start="235:21" pos:end="235:27">(<argument pos:start="235:22" pos:end="235:26"><expr pos:start="235:22" pos:end="235:26"><operator pos:start="235:22" pos:end="235:22">&amp;</operator><name pos:start="235:23" pos:end="235:26">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:73"><expr pos:start="243:5" pos:end="243:72"><name pos:start="243:5" pos:end="243:10">status</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <call pos:start="243:14" pos:end="243:72"><name pos:start="243:14" pos:end="243:26">nc_inq_attlen</name><argument_list pos:start="243:27" pos:end="243:72">(<argument pos:start="243:28" pos:end="243:31"><expr pos:start="243:28" pos:end="243:31"><name pos:start="243:28" pos:end="243:31">ncid</name></expr></argument>, <argument pos:start="243:34" pos:end="243:42"><expr pos:start="243:34" pos:end="243:42"><name pos:start="243:34" pos:end="243:42">NC_GLOBAL</name></expr></argument>, <argument pos:start="243:45" pos:end="243:61"><expr pos:start="243:45" pos:end="243:61"><literal type="string" pos:start="243:45" pos:end="243:61">"SOFAConventions"</literal></expr></argument>, <argument pos:start="243:64" pos:end="243:71"><expr pos:start="243:64" pos:end="243:71"><operator pos:start="243:64" pos:end="243:64">&amp;</operator><name pos:start="243:65" pos:end="243:71">att_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="245:5" pos:end="253:5"><if pos:start="245:5" pos:end="253:5">if <condition pos:start="245:8" pos:end="245:27">(<expr pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:14">status</name> <operator pos:start="245:16" pos:end="245:17">!=</operator> <name pos:start="245:19" pos:end="245:26">NC_NOERR</name></expr>)</condition> <block pos:start="245:29" pos:end="253:5">{<block_content pos:start="247:9" pos:end="251:35">

        <expr_stmt pos:start="247:9" pos:end="247:90"><expr pos:start="247:9" pos:end="247:89"><call pos:start="247:9" pos:end="247:89"><name pos:start="247:9" pos:end="247:14">av_log</name><argument_list pos:start="247:15" pos:end="247:89">(<argument pos:start="247:16" pos:end="247:18"><expr pos:start="247:16" pos:end="247:18"><name pos:start="247:16" pos:end="247:18">ctx</name></expr></argument>, <argument pos:start="247:21" pos:end="247:32"><expr pos:start="247:21" pos:end="247:32"><name pos:start="247:21" pos:end="247:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="247:35" pos:end="247:88"><expr pos:start="247:35" pos:end="247:88"><literal type="string" pos:start="247:35" pos:end="247:88">"Can't get length of attribute \"SOFAConventions\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:23"><expr pos:start="249:9" pos:end="249:22"><call pos:start="249:9" pos:end="249:22"><name pos:start="249:9" pos:end="249:16">nc_close</name><argument_list pos:start="249:17" pos:end="249:22">(<argument pos:start="249:18" pos:end="249:21"><expr pos:start="249:18" pos:end="249:21"><name pos:start="249:18" pos:end="249:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="251:9" pos:end="251:35">return <expr pos:start="251:16" pos:end="251:34"><name pos:start="251:16" pos:end="251:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:46"><expr pos:start="257:5" pos:end="257:45"><name pos:start="257:5" pos:end="257:20">sofa_conventions</name> <operator pos:start="257:22" pos:end="257:22">=</operator> <call pos:start="257:24" pos:end="257:45"><name pos:start="257:24" pos:end="257:32">av_malloc</name><argument_list pos:start="257:33" pos:end="257:45">(<argument pos:start="257:34" pos:end="257:44"><expr pos:start="257:34" pos:end="257:44"><name pos:start="257:34" pos:end="257:40">att_len</name> <operator pos:start="257:42" pos:end="257:42">+</operator> <literal type="number" pos:start="257:44" pos:end="257:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="259:5" pos:end="265:5"><if pos:start="259:5" pos:end="265:5">if <condition pos:start="259:8" pos:end="259:26">(<expr pos:start="259:9" pos:end="259:25"><operator pos:start="259:9" pos:end="259:9">!</operator><name pos:start="259:10" pos:end="259:25">sofa_conventions</name></expr>)</condition> <block pos:start="259:28" pos:end="265:5">{<block_content pos:start="261:9" pos:end="263:31">

        <expr_stmt pos:start="261:9" pos:end="261:23"><expr pos:start="261:9" pos:end="261:22"><call pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:16">nc_close</name><argument_list pos:start="261:17" pos:end="261:22">(<argument pos:start="261:18" pos:end="261:21"><expr pos:start="261:18" pos:end="261:21"><name pos:start="261:18" pos:end="261:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="263:9" pos:end="263:31">return <expr pos:start="263:16" pos:end="263:30"><call pos:start="263:16" pos:end="263:30"><name pos:start="263:16" pos:end="263:22">AVERROR</name><argument_list pos:start="263:23" pos:end="263:30">(<argument pos:start="263:24" pos:end="263:29"><expr pos:start="263:24" pos:end="263:29"><name pos:start="263:24" pos:end="263:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:74"><expr pos:start="269:5" pos:end="269:73"><call pos:start="269:5" pos:end="269:73"><name pos:start="269:5" pos:end="269:19">nc_get_att_text</name><argument_list pos:start="269:20" pos:end="269:73">(<argument pos:start="269:21" pos:end="269:24"><expr pos:start="269:21" pos:end="269:24"><name pos:start="269:21" pos:end="269:24">ncid</name></expr></argument>, <argument pos:start="269:27" pos:end="269:35"><expr pos:start="269:27" pos:end="269:35"><name pos:start="269:27" pos:end="269:35">NC_GLOBAL</name></expr></argument>, <argument pos:start="269:38" pos:end="269:54"><expr pos:start="269:38" pos:end="269:54"><literal type="string" pos:start="269:38" pos:end="269:54">"SOFAConventions"</literal></expr></argument>, <argument pos:start="269:57" pos:end="269:72"><expr pos:start="269:57" pos:end="269:72"><name pos:start="269:57" pos:end="269:72">sofa_conventions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:38"><expr pos:start="271:5" pos:end="271:37"><operator pos:start="271:5" pos:end="271:5">*</operator><operator pos:start="271:6" pos:end="271:6">(</operator><name pos:start="271:7" pos:end="271:22">sofa_conventions</name> <operator pos:start="271:24" pos:end="271:24">+</operator> <name pos:start="271:26" pos:end="271:32">att_len</name><operator pos:start="271:33" pos:end="271:33">)</operator> <operator pos:start="271:35" pos:end="271:35">=</operator> <literal type="number" pos:start="271:37" pos:end="271:37">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="273:5" pos:end="283:5"><if pos:start="273:5" pos:end="283:5">if <condition pos:start="273:8" pos:end="273:66">(<expr pos:start="273:9" pos:end="273:65"><call pos:start="273:9" pos:end="273:65"><name pos:start="273:9" pos:end="273:15">strncmp</name><argument_list pos:start="273:16" pos:end="273:65">(<argument pos:start="273:17" pos:end="273:37"><expr pos:start="273:17" pos:end="273:37"><literal type="string" pos:start="273:17" pos:end="273:37">"SimpleFreeFieldHRIR"</literal></expr></argument>, <argument pos:start="273:40" pos:end="273:55"><expr pos:start="273:40" pos:end="273:55"><name pos:start="273:40" pos:end="273:55">sofa_conventions</name></expr></argument>, <argument pos:start="273:58" pos:end="273:64"><expr pos:start="273:58" pos:end="273:64"><name pos:start="273:58" pos:end="273:64">att_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="273:68" pos:end="283:5">{<block_content pos:start="275:9" pos:end="281:31">

        <expr_stmt pos:start="275:9" pos:end="275:71"><expr pos:start="275:9" pos:end="275:70"><call pos:start="275:9" pos:end="275:70"><name pos:start="275:9" pos:end="275:14">av_log</name><argument_list pos:start="275:15" pos:end="275:70">(<argument pos:start="275:16" pos:end="275:18"><expr pos:start="275:16" pos:end="275:18"><name pos:start="275:16" pos:end="275:18">ctx</name></expr></argument>, <argument pos:start="275:21" pos:end="275:32"><expr pos:start="275:21" pos:end="275:32"><name pos:start="275:21" pos:end="275:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="275:35" pos:end="275:69"><expr pos:start="275:35" pos:end="275:69"><literal type="string" pos:start="275:35" pos:end="275:69">"Not a SimpleFreeFieldHRIR file!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:36"><expr pos:start="277:9" pos:end="277:35"><call pos:start="277:9" pos:end="277:35"><name pos:start="277:9" pos:end="277:16">av_freep</name><argument_list pos:start="277:17" pos:end="277:35">(<argument pos:start="277:18" pos:end="277:34"><expr pos:start="277:18" pos:end="277:34"><operator pos:start="277:18" pos:end="277:18">&amp;</operator><name pos:start="277:19" pos:end="277:34">sofa_conventions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:23"><expr pos:start="279:9" pos:end="279:22"><call pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:16">nc_close</name><argument_list pos:start="279:17" pos:end="279:22">(<argument pos:start="279:18" pos:end="279:21"><expr pos:start="279:18" pos:end="279:21"><name pos:start="279:18" pos:end="279:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="281:9" pos:end="281:31">return <expr pos:start="281:16" pos:end="281:30"><call pos:start="281:16" pos:end="281:30"><name pos:start="281:16" pos:end="281:22">AVERROR</name><argument_list pos:start="281:23" pos:end="281:30">(<argument pos:start="281:24" pos:end="281:29"><expr pos:start="281:24" pos:end="281:29"><name pos:start="281:24" pos:end="281:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:32"><expr pos:start="285:5" pos:end="285:31"><call pos:start="285:5" pos:end="285:31"><name pos:start="285:5" pos:end="285:12">av_freep</name><argument_list pos:start="285:13" pos:end="285:31">(<argument pos:start="285:14" pos:end="285:30"><expr pos:start="285:14" pos:end="285:30"><operator pos:start="285:14" pos:end="285:14">&amp;</operator><name pos:start="285:15" pos:end="285:30">sofa_conventions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="289:5" pos:end="289:42">/* -- get sampling rate of HRTFs -- */</comment>

    <comment type="block" pos:start="291:5" pos:end="291:29">/* read ID, then value */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:72"><expr pos:start="293:5" pos:end="293:71"><name pos:start="293:5" pos:end="293:10">status</name>  <operator pos:start="293:13" pos:end="293:13">=</operator> <call pos:start="293:15" pos:end="293:71"><name pos:start="293:15" pos:end="293:26">nc_inq_varid</name><argument_list pos:start="293:27" pos:end="293:71">(<argument pos:start="293:28" pos:end="293:31"><expr pos:start="293:28" pos:end="293:31"><name pos:start="293:28" pos:end="293:31">ncid</name></expr></argument>, <argument pos:start="293:34" pos:end="293:52"><expr pos:start="293:34" pos:end="293:52"><literal type="string" pos:start="293:34" pos:end="293:52">"Data.SamplingRate"</literal></expr></argument>, <argument pos:start="293:55" pos:end="293:70"><expr pos:start="293:55" pos:end="293:70"><operator pos:start="293:55" pos:end="293:55">&amp;</operator><name pos:start="293:56" pos:end="293:70">samplingrate_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:67"><expr pos:start="295:5" pos:end="295:66"><name pos:start="295:5" pos:end="295:10">status</name> <operator pos:start="295:12" pos:end="295:13">+=</operator> <call pos:start="295:15" pos:end="295:66"><name pos:start="295:15" pos:end="295:29">nc_get_var_uint</name><argument_list pos:start="295:30" pos:end="295:66">(<argument pos:start="295:31" pos:end="295:34"><expr pos:start="295:31" pos:end="295:34"><name pos:start="295:31" pos:end="295:34">ncid</name></expr></argument>, <argument pos:start="295:37" pos:end="295:51"><expr pos:start="295:37" pos:end="295:51"><name pos:start="295:37" pos:end="295:51">samplingrate_id</name></expr></argument>, <argument pos:start="295:54" pos:end="295:65"><expr pos:start="295:54" pos:end="295:65"><operator pos:start="295:54" pos:end="295:54">&amp;</operator><name pos:start="295:55" pos:end="295:65">sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="305:5"><if pos:start="297:5" pos:end="305:5">if <condition pos:start="297:8" pos:end="297:27">(<expr pos:start="297:9" pos:end="297:26"><name pos:start="297:9" pos:end="297:14">status</name> <operator pos:start="297:16" pos:end="297:17">!=</operator> <name pos:start="297:19" pos:end="297:26">NC_NOERR</name></expr>)</condition> <block pos:start="297:29" pos:end="305:5">{<block_content pos:start="299:9" pos:end="303:31">

        <expr_stmt pos:start="299:9" pos:end="299:72"><expr pos:start="299:9" pos:end="299:71"><call pos:start="299:9" pos:end="299:71"><name pos:start="299:9" pos:end="299:14">av_log</name><argument_list pos:start="299:15" pos:end="299:71">(<argument pos:start="299:16" pos:end="299:18"><expr pos:start="299:16" pos:end="299:18"><name pos:start="299:16" pos:end="299:18">ctx</name></expr></argument>, <argument pos:start="299:21" pos:end="299:32"><expr pos:start="299:21" pos:end="299:32"><name pos:start="299:21" pos:end="299:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="299:35" pos:end="299:70"><expr pos:start="299:35" pos:end="299:70"><literal type="string" pos:start="299:35" pos:end="299:70">"Couldn't read Data.SamplingRate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:23"><expr pos:start="301:9" pos:end="301:22"><call pos:start="301:9" pos:end="301:22"><name pos:start="301:9" pos:end="301:16">nc_close</name><argument_list pos:start="301:17" pos:end="301:22">(<argument pos:start="301:18" pos:end="301:21"><expr pos:start="301:18" pos:end="301:21"><name pos:start="301:18" pos:end="301:21">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="303:9" pos:end="303:31">return <expr pos:start="303:16" pos:end="303:30"><call pos:start="303:16" pos:end="303:30"><name pos:start="303:16" pos:end="303:22">AVERROR</name><argument_list pos:start="303:23" pos:end="303:30">(<argument pos:start="303:24" pos:end="303:29"><expr pos:start="303:24" pos:end="303:29"><name pos:start="303:24" pos:end="303:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:32"><expr pos:start="307:5" pos:end="307:31"><operator pos:start="307:5" pos:end="307:5">*</operator><name pos:start="307:6" pos:end="307:17">samplingrate</name> <operator pos:start="307:19" pos:end="307:19">=</operator> <name pos:start="307:21" pos:end="307:31">sample_rate</name></expr>;</expr_stmt> <comment type="block" pos:start="307:34" pos:end="307:61">/* remember sampling rate */</comment>



    <comment type="block" pos:start="311:5" pos:end="311:76">/* -- allocate memory for one value for each measurement position: -- */</comment>

    <expr_stmt pos:start="313:5" pos:end="313:64"><expr pos:start="313:5" pos:end="313:63"><name pos:start="313:5" pos:end="313:8">sp_a</name> <operator pos:start="313:10" pos:end="313:10">=</operator> <name pos:start="313:12" pos:end="313:23"><name pos:start="313:12" pos:end="313:12">s</name><operator pos:start="313:13" pos:end="313:14">-&gt;</operator><name pos:start="313:15" pos:end="313:18">sofa</name><operator pos:start="313:19" pos:end="313:19">.</operator><name pos:start="313:20" pos:end="313:23">sp_a</name></name> <operator pos:start="313:25" pos:end="313:25">=</operator> <call pos:start="313:27" pos:end="313:63"><name pos:start="313:27" pos:end="313:41">av_malloc_array</name><argument_list pos:start="313:42" pos:end="313:63">(<argument pos:start="313:43" pos:end="313:47"><expr pos:start="313:43" pos:end="313:47"><name pos:start="313:43" pos:end="313:47">m_dim</name></expr></argument>, <argument pos:start="313:50" pos:end="313:62"><expr pos:start="313:50" pos:end="313:62"><sizeof pos:start="313:50" pos:end="313:62">sizeof<argument_list pos:start="313:56" pos:end="313:62">(<argument pos:start="313:57" pos:end="313:61"><expr pos:start="313:57" pos:end="313:61"><name pos:start="313:57" pos:end="313:61">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:64"><expr pos:start="315:5" pos:end="315:63"><name pos:start="315:5" pos:end="315:8">sp_e</name> <operator pos:start="315:10" pos:end="315:10">=</operator> <name pos:start="315:12" pos:end="315:23"><name pos:start="315:12" pos:end="315:12">s</name><operator pos:start="315:13" pos:end="315:14">-&gt;</operator><name pos:start="315:15" pos:end="315:18">sofa</name><operator pos:start="315:19" pos:end="315:19">.</operator><name pos:start="315:20" pos:end="315:23">sp_e</name></name> <operator pos:start="315:25" pos:end="315:25">=</operator> <call pos:start="315:27" pos:end="315:63"><name pos:start="315:27" pos:end="315:41">av_malloc_array</name><argument_list pos:start="315:42" pos:end="315:63">(<argument pos:start="315:43" pos:end="315:47"><expr pos:start="315:43" pos:end="315:47"><name pos:start="315:43" pos:end="315:47">m_dim</name></expr></argument>, <argument pos:start="315:50" pos:end="315:62"><expr pos:start="315:50" pos:end="315:62"><sizeof pos:start="315:50" pos:end="315:62">sizeof<argument_list pos:start="315:56" pos:end="315:62">(<argument pos:start="315:57" pos:end="315:61"><expr pos:start="315:57" pos:end="315:61"><name pos:start="315:57" pos:end="315:61">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:64"><expr pos:start="317:5" pos:end="317:63"><name pos:start="317:5" pos:end="317:8">sp_r</name> <operator pos:start="317:10" pos:end="317:10">=</operator> <name pos:start="317:12" pos:end="317:23"><name pos:start="317:12" pos:end="317:12">s</name><operator pos:start="317:13" pos:end="317:14">-&gt;</operator><name pos:start="317:15" pos:end="317:18">sofa</name><operator pos:start="317:19" pos:end="317:19">.</operator><name pos:start="317:20" pos:end="317:23">sp_r</name></name> <operator pos:start="317:25" pos:end="317:25">=</operator> <call pos:start="317:27" pos:end="317:63"><name pos:start="317:27" pos:end="317:41">av_malloc_array</name><argument_list pos:start="317:42" pos:end="317:63">(<argument pos:start="317:43" pos:end="317:47"><expr pos:start="317:43" pos:end="317:47"><name pos:start="317:43" pos:end="317:47">m_dim</name></expr></argument>, <argument pos:start="317:50" pos:end="317:62"><expr pos:start="317:50" pos:end="317:62"><sizeof pos:start="317:50" pos:end="317:62">sizeof<argument_list pos:start="317:56" pos:end="317:62">(<argument pos:start="317:57" pos:end="317:61"><expr pos:start="317:57" pos:end="317:61"><name pos:start="317:57" pos:end="317:61">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="319:5" pos:end="319:77">/* delay and IR values required for each ear and measurement position: */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:72"><expr pos:start="321:5" pos:end="321:71"><name pos:start="321:5" pos:end="321:14">data_delay</name> <operator pos:start="321:16" pos:end="321:16">=</operator> <name pos:start="321:18" pos:end="321:35"><name pos:start="321:18" pos:end="321:18">s</name><operator pos:start="321:19" pos:end="321:20">-&gt;</operator><name pos:start="321:21" pos:end="321:24">sofa</name><operator pos:start="321:25" pos:end="321:25">.</operator><name pos:start="321:26" pos:end="321:35">data_delay</name></name> <operator pos:start="321:37" pos:end="321:37">=</operator> <call pos:start="321:39" pos:end="321:71"><name pos:start="321:39" pos:end="321:47">av_calloc</name><argument_list pos:start="321:48" pos:end="321:71">(<argument pos:start="321:49" pos:end="321:53"><expr pos:start="321:49" pos:end="321:53"><name pos:start="321:49" pos:end="321:53">m_dim</name></expr></argument>, <argument pos:start="321:56" pos:end="321:70"><expr pos:start="321:56" pos:end="321:70"><literal type="number" pos:start="321:56" pos:end="321:56">2</literal> <operator pos:start="321:58" pos:end="321:58">*</operator> <sizeof pos:start="321:60" pos:end="321:70">sizeof<argument_list pos:start="321:66" pos:end="321:70">(<argument pos:start="321:67" pos:end="321:69"><expr pos:start="321:67" pos:end="321:69"><name pos:start="321:67" pos:end="321:69">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:86"><expr pos:start="323:5" pos:end="323:85"><name pos:start="323:5" pos:end="323:11">data_ir</name> <operator pos:start="323:13" pos:end="323:13">=</operator> <name pos:start="323:15" pos:end="323:29"><name pos:start="323:15" pos:end="323:15">s</name><operator pos:start="323:16" pos:end="323:17">-&gt;</operator><name pos:start="323:18" pos:end="323:21">sofa</name><operator pos:start="323:22" pos:end="323:22">.</operator><name pos:start="323:23" pos:end="323:29">data_ir</name></name> <operator pos:start="323:31" pos:end="323:31">=</operator> <call pos:start="323:33" pos:end="323:85"><name pos:start="323:33" pos:end="323:47">av_malloc_array</name><argument_list pos:start="323:48" pos:end="323:85">(<argument pos:start="323:49" pos:end="323:65"><expr pos:start="323:49" pos:end="323:65"><name pos:start="323:49" pos:end="323:53">m_dim</name> <operator pos:start="323:55" pos:end="323:55">*</operator> <name pos:start="323:57" pos:end="323:65">n_samples</name></expr></argument>, <argument pos:start="323:68" pos:end="323:84"><expr pos:start="323:68" pos:end="323:84"><sizeof pos:start="323:68" pos:end="323:80">sizeof<argument_list pos:start="323:74" pos:end="323:80">(<argument pos:start="323:75" pos:end="323:79"><expr pos:start="323:75" pos:end="323:79"><name pos:start="323:75" pos:end="323:79">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="323:82" pos:end="323:82">*</operator> <literal type="number" pos:start="323:84" pos:end="323:84">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="327:5" pos:end="335:5"><if pos:start="327:5" pos:end="335:5">if <condition pos:start="327:8" pos:end="327:59">(<expr pos:start="327:9" pos:end="327:58"><operator pos:start="327:9" pos:end="327:9">!</operator><name pos:start="327:10" pos:end="327:19">data_delay</name> <operator pos:start="327:21" pos:end="327:22">||</operator> <operator pos:start="327:24" pos:end="327:24">!</operator><name pos:start="327:25" pos:end="327:28">sp_a</name> <operator pos:start="327:30" pos:end="327:31">||</operator> <operator pos:start="327:33" pos:end="327:33">!</operator><name pos:start="327:34" pos:end="327:37">sp_e</name> <operator pos:start="327:39" pos:end="327:40">||</operator> <operator pos:start="327:42" pos:end="327:42">!</operator><name pos:start="327:43" pos:end="327:46">sp_r</name> <operator pos:start="327:48" pos:end="327:49">||</operator> <operator pos:start="327:51" pos:end="327:51">!</operator><name pos:start="327:52" pos:end="327:58">data_ir</name></expr>)</condition> <block pos:start="327:61" pos:end="335:5">{<block_content pos:start="331:9" pos:end="333:31">

        <comment type="block" pos:start="329:9" pos:end="329:46">/* if memory could not be allocated */</comment>

        <expr_stmt pos:start="331:9" pos:end="331:29"><expr pos:start="331:9" pos:end="331:28"><call pos:start="331:9" pos:end="331:28"><name pos:start="331:9" pos:end="331:18">close_sofa</name><argument_list pos:start="331:19" pos:end="331:28">(<argument pos:start="331:20" pos:end="331:27"><expr pos:start="331:20" pos:end="331:27"><operator pos:start="331:20" pos:end="331:20">&amp;</operator><name pos:start="331:21" pos:end="331:27"><name pos:start="331:21" pos:end="331:21">s</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:27">sofa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="333:9" pos:end="333:31">return <expr pos:start="333:16" pos:end="333:30"><call pos:start="333:16" pos:end="333:30"><name pos:start="333:16" pos:end="333:22">AVERROR</name><argument_list pos:start="333:23" pos:end="333:30">(<argument pos:start="333:24" pos:end="333:29"><expr pos:start="333:24" pos:end="333:29"><name pos:start="333:24" pos:end="333:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="339:5" pos:end="339:40">/* get impulse responses (HRTFs): */</comment>

    <comment type="block" pos:start="341:5" pos:end="341:30">/* get corresponding ID */</comment>

    <expr_stmt pos:start="343:5" pos:end="343:56"><expr pos:start="343:5" pos:end="343:55"><name pos:start="343:5" pos:end="343:10">status</name> <operator pos:start="343:12" pos:end="343:12">=</operator> <call pos:start="343:14" pos:end="343:55"><name pos:start="343:14" pos:end="343:25">nc_inq_varid</name><argument_list pos:start="343:26" pos:end="343:55">(<argument pos:start="343:27" pos:end="343:30"><expr pos:start="343:27" pos:end="343:30"><name pos:start="343:27" pos:end="343:30">ncid</name></expr></argument>, <argument pos:start="343:33" pos:end="343:41"><expr pos:start="343:33" pos:end="343:41"><literal type="string" pos:start="343:33" pos:end="343:41">"Data.IR"</literal></expr></argument>, <argument pos:start="343:44" pos:end="343:54"><expr pos:start="343:44" pos:end="343:54"><operator pos:start="343:44" pos:end="343:44">&amp;</operator><name pos:start="343:45" pos:end="343:54">data_ir_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:58"><expr pos:start="345:5" pos:end="345:57"><name pos:start="345:5" pos:end="345:10">status</name> <operator pos:start="345:12" pos:end="345:13">+=</operator> <call pos:start="345:15" pos:end="345:57"><name pos:start="345:15" pos:end="345:30">nc_get_var_float</name><argument_list pos:start="345:31" pos:end="345:57">(<argument pos:start="345:32" pos:end="345:35"><expr pos:start="345:32" pos:end="345:35"><name pos:start="345:32" pos:end="345:35">ncid</name></expr></argument>, <argument pos:start="345:38" pos:end="345:47"><expr pos:start="345:38" pos:end="345:47"><name pos:start="345:38" pos:end="345:47">data_ir_id</name></expr></argument>, <argument pos:start="345:50" pos:end="345:56"><expr pos:start="345:50" pos:end="345:56"><name pos:start="345:50" pos:end="345:56">data_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="345:60" pos:end="345:83">/* read and store IRs */</comment>

    <if_stmt pos:start="347:5" pos:end="355:5"><if pos:start="347:5" pos:end="355:5">if <condition pos:start="347:8" pos:end="347:27">(<expr pos:start="347:9" pos:end="347:26"><name pos:start="347:9" pos:end="347:14">status</name> <operator pos:start="347:16" pos:end="347:17">!=</operator> <name pos:start="347:19" pos:end="347:26">NC_NOERR</name></expr>)</condition> <block pos:start="347:29" pos:end="355:5">{<block_content pos:start="349:9" pos:end="353:19">

        <expr_stmt pos:start="349:9" pos:end="349:62"><expr pos:start="349:9" pos:end="349:61"><call pos:start="349:9" pos:end="349:61"><name pos:start="349:9" pos:end="349:14">av_log</name><argument_list pos:start="349:15" pos:end="349:61">(<argument pos:start="349:16" pos:end="349:18"><expr pos:start="349:16" pos:end="349:18"><name pos:start="349:16" pos:end="349:18">ctx</name></expr></argument>, <argument pos:start="349:21" pos:end="349:32"><expr pos:start="349:21" pos:end="349:32"><name pos:start="349:21" pos:end="349:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="349:35" pos:end="349:60"><expr pos:start="349:35" pos:end="349:60"><literal type="string" pos:start="349:35" pos:end="349:60">"Couldn't read Data.IR!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:30"><expr pos:start="351:9" pos:end="351:29"><name pos:start="351:9" pos:end="351:11">ret</name> <operator pos:start="351:13" pos:end="351:13">=</operator> <call pos:start="351:15" pos:end="351:29"><name pos:start="351:15" pos:end="351:21">AVERROR</name><argument_list pos:start="351:22" pos:end="351:29">(<argument pos:start="351:23" pos:end="351:28"><expr pos:start="351:23" pos:end="351:28"><name pos:start="351:23" pos:end="351:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="353:9" pos:end="353:19">goto <name pos:start="353:14" pos:end="353:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="359:5" pos:end="359:61">/* get source positions of the HRTFs in the SOFA file: */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:59"><expr pos:start="361:5" pos:end="361:58"><name pos:start="361:5" pos:end="361:10">status</name>  <operator pos:start="361:13" pos:end="361:13">=</operator> <call pos:start="361:15" pos:end="361:58"><name pos:start="361:15" pos:end="361:26">nc_inq_varid</name><argument_list pos:start="361:27" pos:end="361:58">(<argument pos:start="361:28" pos:end="361:31"><expr pos:start="361:28" pos:end="361:31"><name pos:start="361:28" pos:end="361:31">ncid</name></expr></argument>, <argument pos:start="361:34" pos:end="361:49"><expr pos:start="361:34" pos:end="361:49"><literal type="string" pos:start="361:34" pos:end="361:49">"SourcePosition"</literal></expr></argument>, <argument pos:start="361:52" pos:end="361:57"><expr pos:start="361:52" pos:end="361:57"><operator pos:start="361:52" pos:end="361:52">&amp;</operator><name pos:start="361:53" pos:end="361:57">sp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="361:61" pos:end="361:86">/* get corresponding ID */</comment>

    <expr_stmt pos:start="363:5" pos:end="365:46"><expr pos:start="363:5" pos:end="365:45"><name pos:start="363:5" pos:end="363:10">status</name> <operator pos:start="363:12" pos:end="363:13">+=</operator> <macro pos:start="363:15" pos:end="365:45"><name pos:start="363:15" pos:end="363:31">nc_get_vara_float</name><argument_list pos:start="363:32" pos:end="365:45">(<argument pos:start="363:33" pos:end="363:36">ncid</argument>, <argument pos:start="363:39" pos:end="363:43">sp_id</argument>, <argument pos:start="363:46" pos:end="363:59">(size_t[<literal type="number" pos:start="363:54" pos:end="363:54">2</literal>]){ <literal type="number" pos:start="363:59" pos:end="363:59">0</literal></argument>, <argument pos:start="363:62" pos:end="363:64"><literal type="number" pos:start="363:62" pos:end="363:62">0</literal> }</argument> ,

                <argument pos:start="365:17" pos:end="365:34">(size_t[<literal type="number" pos:start="365:25" pos:end="365:25">2</literal>]){ m_dim</argument>, <argument pos:start="365:37" pos:end="365:38"><literal type="number" pos:start="365:37" pos:end="365:37">1</literal>}</argument>, <argument pos:start="365:41" pos:end="365:44">sp_a</argument>)</argument_list></macro></expr>;</expr_stmt> <comment type="block" pos:start="365:48" pos:end="365:80">/* read &amp; store azimuth angles */</comment>

    <expr_stmt pos:start="367:5" pos:end="369:46"><expr pos:start="367:5" pos:end="369:45"><name pos:start="367:5" pos:end="367:10">status</name> <operator pos:start="367:12" pos:end="367:13">+=</operator> <macro pos:start="367:15" pos:end="369:45"><name pos:start="367:15" pos:end="367:31">nc_get_vara_float</name><argument_list pos:start="367:32" pos:end="369:45">(<argument pos:start="367:33" pos:end="367:36">ncid</argument>, <argument pos:start="367:39" pos:end="367:43">sp_id</argument>, <argument pos:start="367:46" pos:end="367:59">(size_t[<literal type="number" pos:start="367:54" pos:end="367:54">2</literal>]){ <literal type="number" pos:start="367:59" pos:end="367:59">0</literal></argument>, <argument pos:start="367:62" pos:end="367:64"><literal type="number" pos:start="367:62" pos:end="367:62">1</literal> }</argument> ,

                <argument pos:start="369:17" pos:end="369:34">(size_t[<literal type="number" pos:start="369:25" pos:end="369:25">2</literal>]){ m_dim</argument>, <argument pos:start="369:37" pos:end="369:38"><literal type="number" pos:start="369:37" pos:end="369:37">1</literal>}</argument>, <argument pos:start="369:41" pos:end="369:44">sp_e</argument>)</argument_list></macro></expr>;</expr_stmt> <comment type="block" pos:start="369:48" pos:end="369:82">/* read &amp; store elevation angles */</comment>

    <expr_stmt pos:start="371:5" pos:end="373:46"><expr pos:start="371:5" pos:end="373:45"><name pos:start="371:5" pos:end="371:10">status</name> <operator pos:start="371:12" pos:end="371:13">+=</operator> <macro pos:start="371:15" pos:end="373:45"><name pos:start="371:15" pos:end="371:31">nc_get_vara_float</name><argument_list pos:start="371:32" pos:end="373:45">(<argument pos:start="371:33" pos:end="371:36">ncid</argument>, <argument pos:start="371:39" pos:end="371:43">sp_id</argument>, <argument pos:start="371:46" pos:end="371:59">(size_t[<literal type="number" pos:start="371:54" pos:end="371:54">2</literal>]){ <literal type="number" pos:start="371:59" pos:end="371:59">0</literal></argument>, <argument pos:start="371:62" pos:end="371:64"><literal type="number" pos:start="371:62" pos:end="371:62">2</literal> }</argument> ,

                <argument pos:start="373:17" pos:end="373:34">(size_t[<literal type="number" pos:start="373:25" pos:end="373:25">2</literal>]){ m_dim</argument>, <argument pos:start="373:37" pos:end="373:38"><literal type="number" pos:start="373:37" pos:end="373:37">1</literal>}</argument>, <argument pos:start="373:41" pos:end="373:44">sp_r</argument>)</argument_list></macro></expr>;</expr_stmt> <comment type="block" pos:start="373:48" pos:end="373:71">/* read &amp; store radii */</comment>

    <if_stmt pos:start="375:5" pos:end="383:5"><if pos:start="375:5" pos:end="383:5">if <condition pos:start="375:8" pos:end="375:27">(<expr pos:start="375:9" pos:end="375:26"><name pos:start="375:9" pos:end="375:14">status</name> <operator pos:start="375:16" pos:end="375:17">!=</operator> <name pos:start="375:19" pos:end="375:26">NC_NOERR</name></expr>)</condition> <block pos:start="375:29" pos:end="383:5">{<block_content pos:start="377:9" pos:end="381:19"> <comment type="block" pos:start="375:31" pos:end="375:83">/* if any source position variable coudn't be read */</comment>

        <expr_stmt pos:start="377:9" pos:end="377:69"><expr pos:start="377:9" pos:end="377:68"><call pos:start="377:9" pos:end="377:68"><name pos:start="377:9" pos:end="377:14">av_log</name><argument_list pos:start="377:15" pos:end="377:68">(<argument pos:start="377:16" pos:end="377:18"><expr pos:start="377:16" pos:end="377:18"><name pos:start="377:16" pos:end="377:18">ctx</name></expr></argument>, <argument pos:start="377:21" pos:end="377:32"><expr pos:start="377:21" pos:end="377:32"><name pos:start="377:21" pos:end="377:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="377:35" pos:end="377:67"><expr pos:start="377:35" pos:end="377:67"><literal type="string" pos:start="377:35" pos:end="377:67">"Couldn't read SourcePosition.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:30"><expr pos:start="379:9" pos:end="379:29"><name pos:start="379:9" pos:end="379:11">ret</name> <operator pos:start="379:13" pos:end="379:13">=</operator> <call pos:start="379:15" pos:end="379:29"><name pos:start="379:15" pos:end="379:21">AVERROR</name><argument_list pos:start="379:22" pos:end="379:29">(<argument pos:start="379:23" pos:end="379:28"><expr pos:start="379:23" pos:end="379:28"><name pos:start="379:23" pos:end="379:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="381:9" pos:end="381:19">goto <name pos:start="381:14" pos:end="381:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="387:5" pos:end="387:68">/* read Data.Delay, check for errors and fit it to data_delay */</comment>

    <expr_stmt pos:start="389:5" pos:end="389:63"><expr pos:start="389:5" pos:end="389:62"><name pos:start="389:5" pos:end="389:10">status</name>  <operator pos:start="389:13" pos:end="389:13">=</operator> <call pos:start="389:15" pos:end="389:62"><name pos:start="389:15" pos:end="389:26">nc_inq_varid</name><argument_list pos:start="389:27" pos:end="389:62">(<argument pos:start="389:28" pos:end="389:31"><expr pos:start="389:28" pos:end="389:31"><name pos:start="389:28" pos:end="389:31">ncid</name></expr></argument>, <argument pos:start="389:34" pos:end="389:45"><expr pos:start="389:34" pos:end="389:45"><literal type="string" pos:start="389:34" pos:end="389:45">"Data.Delay"</literal></expr></argument>, <argument pos:start="389:48" pos:end="389:61"><expr pos:start="389:48" pos:end="389:61"><operator pos:start="389:48" pos:end="389:48">&amp;</operator><name pos:start="389:49" pos:end="389:61">data_delay_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:74"><expr pos:start="391:5" pos:end="391:73"><name pos:start="391:5" pos:end="391:10">status</name> <operator pos:start="391:12" pos:end="391:13">+=</operator> <call pos:start="391:15" pos:end="391:73"><name pos:start="391:15" pos:end="391:29">nc_inq_vardimid</name><argument_list pos:start="391:30" pos:end="391:73">(<argument pos:start="391:31" pos:end="391:34"><expr pos:start="391:31" pos:end="391:34"><name pos:start="391:31" pos:end="391:34">ncid</name></expr></argument>, <argument pos:start="391:37" pos:end="391:49"><expr pos:start="391:37" pos:end="391:49"><name pos:start="391:37" pos:end="391:49">data_delay_id</name></expr></argument>, <argument pos:start="391:52" pos:end="391:72"><expr pos:start="391:52" pos:end="391:72"><operator pos:start="391:52" pos:end="391:52">&amp;</operator><name pos:start="391:53" pos:end="391:72"><name pos:start="391:53" pos:end="391:69">data_delay_dim_id</name><index pos:start="391:70" pos:end="391:72">[<expr pos:start="391:71" pos:end="391:71"><literal type="number" pos:start="391:71" pos:end="391:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:78"><expr pos:start="393:5" pos:end="393:77"><name pos:start="393:5" pos:end="393:10">status</name> <operator pos:start="393:12" pos:end="393:13">+=</operator> <call pos:start="393:15" pos:end="393:77"><name pos:start="393:15" pos:end="393:28">nc_inq_dimname</name><argument_list pos:start="393:29" pos:end="393:77">(<argument pos:start="393:30" pos:end="393:33"><expr pos:start="393:30" pos:end="393:33"><name pos:start="393:30" pos:end="393:33">ncid</name></expr></argument>, <argument pos:start="393:36" pos:end="393:55"><expr pos:start="393:36" pos:end="393:55"><name pos:start="393:36" pos:end="393:55"><name pos:start="393:36" pos:end="393:52">data_delay_dim_id</name><index pos:start="393:53" pos:end="393:55">[<expr pos:start="393:54" pos:end="393:54"><literal type="number" pos:start="393:54" pos:end="393:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="393:58" pos:end="393:76"><expr pos:start="393:58" pos:end="393:76"><name pos:start="393:58" pos:end="393:76">data_delay_dim_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="395:5" pos:end="403:5"><if pos:start="395:5" pos:end="403:5">if <condition pos:start="395:8" pos:end="395:27">(<expr pos:start="395:9" pos:end="395:26"><name pos:start="395:9" pos:end="395:14">status</name> <operator pos:start="395:16" pos:end="395:17">!=</operator> <name pos:start="395:19" pos:end="395:26">NC_NOERR</name></expr>)</condition> <block pos:start="395:29" pos:end="403:5">{<block_content pos:start="397:9" pos:end="401:19">

        <expr_stmt pos:start="397:9" pos:end="397:65"><expr pos:start="397:9" pos:end="397:64"><call pos:start="397:9" pos:end="397:64"><name pos:start="397:9" pos:end="397:14">av_log</name><argument_list pos:start="397:15" pos:end="397:64">(<argument pos:start="397:16" pos:end="397:18"><expr pos:start="397:16" pos:end="397:18"><name pos:start="397:16" pos:end="397:18">ctx</name></expr></argument>, <argument pos:start="397:21" pos:end="397:32"><expr pos:start="397:21" pos:end="397:32"><name pos:start="397:21" pos:end="397:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="397:35" pos:end="397:63"><expr pos:start="397:35" pos:end="397:63"><literal type="string" pos:start="397:35" pos:end="397:63">"Couldn't read Data.Delay.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:30"><expr pos:start="399:9" pos:end="399:29"><name pos:start="399:9" pos:end="399:11">ret</name> <operator pos:start="399:13" pos:end="399:13">=</operator> <call pos:start="399:15" pos:end="399:29"><name pos:start="399:15" pos:end="399:21">AVERROR</name><argument_list pos:start="399:22" pos:end="399:29">(<argument pos:start="399:23" pos:end="399:28"><expr pos:start="399:23" pos:end="399:28"><name pos:start="399:23" pos:end="399:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="401:9" pos:end="401:19">goto <name pos:start="401:14" pos:end="401:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="407:5" pos:end="407:36">/* Data.Delay dimension check */</comment>

    <comment type="block" pos:start="409:5" pos:end="409:43">/* dimension of Data.Delay is [I R]: */</comment>

    <if_stmt pos:start="411:5" pos:end="473:5"><if pos:start="411:5" pos:end="447:5">if <condition pos:start="411:8" pos:end="411:46">(<expr pos:start="411:9" pos:end="411:45"><operator pos:start="411:9" pos:end="411:9">!</operator><call pos:start="411:10" pos:end="411:45"><name pos:start="411:10" pos:end="411:16">strncmp</name><argument_list pos:start="411:17" pos:end="411:45">(<argument pos:start="411:18" pos:end="411:36"><expr pos:start="411:18" pos:end="411:36"><name pos:start="411:18" pos:end="411:36">data_delay_dim_name</name></expr></argument>, <argument pos:start="411:39" pos:end="411:41"><expr pos:start="411:39" pos:end="411:41"><literal type="string" pos:start="411:39" pos:end="411:41">"I"</literal></expr></argument>, <argument pos:start="411:44" pos:end="411:44"><expr pos:start="411:44" pos:end="411:44"><literal type="number" pos:start="411:44" pos:end="411:44">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="411:48" pos:end="447:5">{<block_content pos:start="415:9" pos:end="443:9">

        <comment type="block" pos:start="413:9" pos:end="413:75">/* check 2 characters to assure string is 0-terminated after "I" */</comment>

        <decl_stmt pos:start="415:9" pos:end="415:21"><decl pos:start="415:9" pos:end="415:20"><type pos:start="415:9" pos:end="415:11"><name pos:start="415:9" pos:end="415:11">int</name></type> <name pos:start="415:13" pos:end="415:20"><name pos:start="415:13" pos:end="415:17">delay</name><index pos:start="415:18" pos:end="415:20">[<expr pos:start="415:19" pos:end="415:19"><literal type="number" pos:start="415:19" pos:end="415:19">2</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="415:23" pos:end="415:54">/* delays get from SOFA file: */</comment>



        <expr_stmt pos:start="419:9" pos:end="419:70"><expr pos:start="419:9" pos:end="419:69"><call pos:start="419:9" pos:end="419:69"><name pos:start="419:9" pos:end="419:14">av_log</name><argument_list pos:start="419:15" pos:end="419:69">(<argument pos:start="419:16" pos:end="419:18"><expr pos:start="419:16" pos:end="419:18"><name pos:start="419:16" pos:end="419:18">ctx</name></expr></argument>, <argument pos:start="419:21" pos:end="419:32"><expr pos:start="419:21" pos:end="419:32"><name pos:start="419:21" pos:end="419:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="419:35" pos:end="419:68"><expr pos:start="419:35" pos:end="419:68"><literal type="string" pos:start="419:35" pos:end="419:68">"Data.Delay has dimension [I R]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="421:64"><expr pos:start="421:9" pos:end="421:63"><name pos:start="421:9" pos:end="421:14">status</name> <operator pos:start="421:16" pos:end="421:16">=</operator> <call pos:start="421:18" pos:end="421:63"><name pos:start="421:18" pos:end="421:31">nc_get_var_int</name><argument_list pos:start="421:32" pos:end="421:63">(<argument pos:start="421:33" pos:end="421:36"><expr pos:start="421:33" pos:end="421:36"><name pos:start="421:33" pos:end="421:36">ncid</name></expr></argument>, <argument pos:start="421:39" pos:end="421:51"><expr pos:start="421:39" pos:end="421:51"><name pos:start="421:39" pos:end="421:51">data_delay_id</name></expr></argument>, <argument pos:start="421:54" pos:end="421:62"><expr pos:start="421:54" pos:end="421:62"><operator pos:start="421:54" pos:end="421:54">&amp;</operator><name pos:start="421:55" pos:end="421:62"><name pos:start="421:55" pos:end="421:59">delay</name><index pos:start="421:60" pos:end="421:62">[<expr pos:start="421:61" pos:end="421:61"><literal type="number" pos:start="421:61" pos:end="421:61">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="423:9" pos:end="431:9"><if pos:start="423:9" pos:end="431:9">if <condition pos:start="423:12" pos:end="423:31">(<expr pos:start="423:13" pos:end="423:30"><name pos:start="423:13" pos:end="423:18">status</name> <operator pos:start="423:20" pos:end="423:21">!=</operator> <name pos:start="423:23" pos:end="423:30">NC_NOERR</name></expr>)</condition> <block pos:start="423:33" pos:end="431:9">{<block_content pos:start="425:13" pos:end="429:23">

            <expr_stmt pos:start="425:13" pos:end="425:68"><expr pos:start="425:13" pos:end="425:67"><call pos:start="425:13" pos:end="425:67"><name pos:start="425:13" pos:end="425:18">av_log</name><argument_list pos:start="425:19" pos:end="425:67">(<argument pos:start="425:20" pos:end="425:22"><expr pos:start="425:20" pos:end="425:22"><name pos:start="425:20" pos:end="425:22">ctx</name></expr></argument>, <argument pos:start="425:25" pos:end="425:36"><expr pos:start="425:25" pos:end="425:36"><name pos:start="425:25" pos:end="425:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="425:39" pos:end="425:66"><expr pos:start="425:39" pos:end="425:66"><literal type="string" pos:start="425:39" pos:end="425:66">"Couldn't read Data.Delay\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:34"><expr pos:start="427:13" pos:end="427:33"><name pos:start="427:13" pos:end="427:15">ret</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <call pos:start="427:19" pos:end="427:33"><name pos:start="427:19" pos:end="427:25">AVERROR</name><argument_list pos:start="427:26" pos:end="427:33">(<argument pos:start="427:27" pos:end="427:32"><expr pos:start="427:27" pos:end="427:32"><name pos:start="427:27" pos:end="427:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="429:13" pos:end="429:23">goto <name pos:start="429:18" pos:end="429:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <decl_stmt pos:start="433:9" pos:end="433:47"><decl pos:start="433:9" pos:end="433:46"><type pos:start="433:9" pos:end="433:13"><name pos:start="433:9" pos:end="433:11">int</name> <modifier pos:start="433:13" pos:end="433:13">*</modifier></type><name pos:start="433:14" pos:end="433:25">data_delay_r</name> <init pos:start="433:27" pos:end="433:46">= <expr pos:start="433:29" pos:end="433:46"><name pos:start="433:29" pos:end="433:38">data_delay</name> <operator pos:start="433:40" pos:end="433:40">+</operator> <name pos:start="433:42" pos:end="433:46">m_dim</name></expr></init></decl>;</decl_stmt>

        <for pos:start="435:9" pos:end="443:9">for <control pos:start="435:13" pos:end="435:35">(<init pos:start="435:14" pos:end="435:19"><expr pos:start="435:14" pos:end="435:18"><name pos:start="435:14" pos:end="435:14">i</name> <operator pos:start="435:16" pos:end="435:16">=</operator> <literal type="number" pos:start="435:18" pos:end="435:18">0</literal></expr>;</init> <condition pos:start="435:21" pos:end="435:30"><expr pos:start="435:21" pos:end="435:29"><name pos:start="435:21" pos:end="435:21">i</name> <operator pos:start="435:23" pos:end="435:23">&lt;</operator> <name pos:start="435:25" pos:end="435:29">m_dim</name></expr>;</condition> <incr pos:start="435:32" pos:end="435:34"><expr pos:start="435:32" pos:end="435:34"><name pos:start="435:32" pos:end="435:32">i</name><operator pos:start="435:33" pos:end="435:34">++</operator></expr></incr>)</control> <block pos:start="435:37" pos:end="443:9">{<block_content pos:start="439:13" pos:end="441:39"> <comment type="block" pos:start="435:39" pos:end="435:81">/* extend given dimension [I R] to [M R] */</comment>

            <comment type="block" pos:start="437:13" pos:end="437:87">/* assign constant delay value for all measurements to data_delay fields */</comment>

            <expr_stmt pos:start="439:13" pos:end="439:39"><expr pos:start="439:13" pos:end="439:38"><name pos:start="439:13" pos:end="439:25"><name pos:start="439:13" pos:end="439:22">data_delay</name><index pos:start="439:23" pos:end="439:25">[<expr pos:start="439:24" pos:end="439:24"><name pos:start="439:24" pos:end="439:24">i</name></expr>]</index></name>   <operator pos:start="439:29" pos:end="439:29">=</operator> <name pos:start="439:31" pos:end="439:38"><name pos:start="439:31" pos:end="439:35">delay</name><index pos:start="439:36" pos:end="439:38">[<expr pos:start="439:37" pos:end="439:37"><literal type="number" pos:start="439:37" pos:end="439:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:39"><expr pos:start="441:13" pos:end="441:38"><name pos:start="441:13" pos:end="441:27"><name pos:start="441:13" pos:end="441:24">data_delay_r</name><index pos:start="441:25" pos:end="441:27">[<expr pos:start="441:26" pos:end="441:26"><name pos:start="441:26" pos:end="441:26">i</name></expr>]</index></name> <operator pos:start="441:29" pos:end="441:29">=</operator> <name pos:start="441:31" pos:end="441:38"><name pos:start="441:31" pos:end="441:35">delay</name><index pos:start="441:36" pos:end="441:38">[<expr pos:start="441:37" pos:end="441:37"><literal type="number" pos:start="441:37" pos:end="441:37">1</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="445:9" pos:end="445:46">/* dimension of Data.Delay is [M R] */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="447:7" pos:end="465:5">else if <condition pos:start="447:15" pos:end="447:53">(<expr pos:start="447:16" pos:end="447:52"><operator pos:start="447:16" pos:end="447:16">!</operator><call pos:start="447:17" pos:end="447:52"><name pos:start="447:17" pos:end="447:23">strncmp</name><argument_list pos:start="447:24" pos:end="447:52">(<argument pos:start="447:25" pos:end="447:43"><expr pos:start="447:25" pos:end="447:43"><name pos:start="447:25" pos:end="447:43">data_delay_dim_name</name></expr></argument>, <argument pos:start="447:46" pos:end="447:48"><expr pos:start="447:46" pos:end="447:48"><literal type="string" pos:start="447:46" pos:end="447:48">"M"</literal></expr></argument>, <argument pos:start="447:51" pos:end="447:51"><expr pos:start="447:51" pos:end="447:51"><literal type="number" pos:start="447:51" pos:end="447:51">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="447:55" pos:end="465:5">{<block_content pos:start="449:9" pos:end="463:9">

        <expr_stmt pos:start="449:9" pos:end="449:69"><expr pos:start="449:9" pos:end="449:68"><call pos:start="449:9" pos:end="449:68"><name pos:start="449:9" pos:end="449:14">av_log</name><argument_list pos:start="449:15" pos:end="449:68">(<argument pos:start="449:16" pos:end="449:18"><expr pos:start="449:16" pos:end="449:18"><name pos:start="449:16" pos:end="449:18">ctx</name></expr></argument>, <argument pos:start="449:21" pos:end="449:32"><expr pos:start="449:21" pos:end="449:32"><name pos:start="449:21" pos:end="449:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="449:35" pos:end="449:67"><expr pos:start="449:35" pos:end="449:67"><literal type="string" pos:start="449:35" pos:end="449:67">"Data.Delay in dimension [M R]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="451:9" pos:end="451:40">/* get delays from SOFA file: */</comment>

        <expr_stmt pos:start="453:9" pos:end="453:65"><expr pos:start="453:9" pos:end="453:64"><name pos:start="453:9" pos:end="453:14">status</name> <operator pos:start="453:16" pos:end="453:16">=</operator> <call pos:start="453:18" pos:end="453:64"><name pos:start="453:18" pos:end="453:31">nc_get_var_int</name><argument_list pos:start="453:32" pos:end="453:64">(<argument pos:start="453:33" pos:end="453:36"><expr pos:start="453:33" pos:end="453:36"><name pos:start="453:33" pos:end="453:36">ncid</name></expr></argument>, <argument pos:start="453:39" pos:end="453:51"><expr pos:start="453:39" pos:end="453:51"><name pos:start="453:39" pos:end="453:51">data_delay_id</name></expr></argument>, <argument pos:start="453:54" pos:end="453:63"><expr pos:start="453:54" pos:end="453:63"><name pos:start="453:54" pos:end="453:63">data_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="455:9" pos:end="463:9"><if pos:start="455:9" pos:end="463:9">if <condition pos:start="455:12" pos:end="455:31">(<expr pos:start="455:13" pos:end="455:30"><name pos:start="455:13" pos:end="455:18">status</name> <operator pos:start="455:20" pos:end="455:21">!=</operator> <name pos:start="455:23" pos:end="455:30">NC_NOERR</name></expr>)</condition> <block pos:start="455:33" pos:end="463:9">{<block_content pos:start="457:13" pos:end="461:23">

            <expr_stmt pos:start="457:13" pos:end="457:68"><expr pos:start="457:13" pos:end="457:67"><call pos:start="457:13" pos:end="457:67"><name pos:start="457:13" pos:end="457:18">av_log</name><argument_list pos:start="457:19" pos:end="457:67">(<argument pos:start="457:20" pos:end="457:22"><expr pos:start="457:20" pos:end="457:22"><name pos:start="457:20" pos:end="457:22">ctx</name></expr></argument>, <argument pos:start="457:25" pos:end="457:36"><expr pos:start="457:25" pos:end="457:36"><name pos:start="457:25" pos:end="457:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="457:39" pos:end="457:66"><expr pos:start="457:39" pos:end="457:66"><literal type="string" pos:start="457:39" pos:end="457:66">"Couldn't read Data.Delay\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:34"><expr pos:start="459:13" pos:end="459:33"><name pos:start="459:13" pos:end="459:15">ret</name> <operator pos:start="459:17" pos:end="459:17">=</operator> <call pos:start="459:19" pos:end="459:33"><name pos:start="459:19" pos:end="459:25">AVERROR</name><argument_list pos:start="459:26" pos:end="459:33">(<argument pos:start="459:27" pos:end="459:32"><expr pos:start="459:27" pos:end="459:32"><name pos:start="459:27" pos:end="459:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="461:13" pos:end="461:23">goto <name pos:start="461:18" pos:end="461:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="465:7" pos:end="473:5">else <block pos:start="465:12" pos:end="473:5">{<block_content pos:start="467:9" pos:end="471:19"> <comment type="block" pos:start="465:14" pos:end="465:69">/* dimension of Data.Delay is neither [I R] nor [M R] */</comment>

        <expr_stmt pos:start="467:9" pos:end="467:104"><expr pos:start="467:9" pos:end="467:103"><call pos:start="467:9" pos:end="467:103"><name pos:start="467:9" pos:end="467:14">av_log</name><argument_list pos:start="467:15" pos:end="467:103">(<argument pos:start="467:16" pos:end="467:18"><expr pos:start="467:16" pos:end="467:18"><name pos:start="467:16" pos:end="467:18">ctx</name></expr></argument>, <argument pos:start="467:21" pos:end="467:32"><expr pos:start="467:21" pos:end="467:32"><name pos:start="467:21" pos:end="467:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="467:35" pos:end="467:102"><expr pos:start="467:35" pos:end="467:102"><literal type="string" pos:start="467:35" pos:end="467:102">"Data.Delay does not have the required dimensions [I R] or [M R].\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:30"><expr pos:start="469:9" pos:end="469:29"><name pos:start="469:9" pos:end="469:11">ret</name> <operator pos:start="469:13" pos:end="469:13">=</operator> <call pos:start="469:15" pos:end="469:29"><name pos:start="469:15" pos:end="469:21">AVERROR</name><argument_list pos:start="469:22" pos:end="469:29">(<argument pos:start="469:23" pos:end="469:28"><expr pos:start="469:23" pos:end="469:28"><name pos:start="469:23" pos:end="469:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="471:9" pos:end="471:19">goto <name pos:start="471:14" pos:end="471:18">error</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="477:5" pos:end="477:42">/* save information in SOFA struct: */</comment>

    <expr_stmt pos:start="479:5" pos:end="479:26"><expr pos:start="479:5" pos:end="479:25"><name pos:start="479:5" pos:end="479:17"><name pos:start="479:5" pos:end="479:5">s</name><operator pos:start="479:6" pos:end="479:7">-&gt;</operator><name pos:start="479:8" pos:end="479:11">sofa</name><operator pos:start="479:12" pos:end="479:12">.</operator><name pos:start="479:13" pos:end="479:17">m_dim</name></name> <operator pos:start="479:19" pos:end="479:19">=</operator> <name pos:start="479:21" pos:end="479:25">m_dim</name></expr>;</expr_stmt> <comment type="block" pos:start="479:28" pos:end="479:58">/* no. measurement positions */</comment>

    <expr_stmt pos:start="481:5" pos:end="481:34"><expr pos:start="481:5" pos:end="481:33"><name pos:start="481:5" pos:end="481:21"><name pos:start="481:5" pos:end="481:5">s</name><operator pos:start="481:6" pos:end="481:7">-&gt;</operator><name pos:start="481:8" pos:end="481:11">sofa</name><operator pos:start="481:12" pos:end="481:12">.</operator><name pos:start="481:13" pos:end="481:21">n_samples</name></name> <operator pos:start="481:23" pos:end="481:23">=</operator> <name pos:start="481:25" pos:end="481:33">n_samples</name></expr>;</expr_stmt> <comment type="block" pos:start="481:36" pos:end="481:57">/* length on one IR */</comment>

    <expr_stmt pos:start="483:5" pos:end="483:24"><expr pos:start="483:5" pos:end="483:23"><name pos:start="483:5" pos:end="483:16"><name pos:start="483:5" pos:end="483:5">s</name><operator pos:start="483:6" pos:end="483:7">-&gt;</operator><name pos:start="483:8" pos:end="483:11">sofa</name><operator pos:start="483:12" pos:end="483:12">.</operator><name pos:start="483:13" pos:end="483:16">ncid</name></name> <operator pos:start="483:18" pos:end="483:18">=</operator> <name pos:start="483:20" pos:end="483:23">ncid</name></expr>;</expr_stmt> <comment type="block" pos:start="483:26" pos:end="483:53">/* netCDF ID of SOFA file */</comment>

    <expr_stmt pos:start="485:5" pos:end="485:19"><expr pos:start="485:5" pos:end="485:18"><call pos:start="485:5" pos:end="485:18"><name pos:start="485:5" pos:end="485:12">nc_close</name><argument_list pos:start="485:13" pos:end="485:18">(<argument pos:start="485:14" pos:end="485:17"><expr pos:start="485:14" pos:end="485:17"><name pos:start="485:14" pos:end="485:17">ncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="485:21" pos:end="485:41">/* close SOFA file */</comment>



    <return pos:start="489:5" pos:end="489:13">return <expr pos:start="489:12" pos:end="489:12"><literal type="number" pos:start="489:12" pos:end="489:12">0</literal></expr>;</return>



<label pos:start="493:1" pos:end="493:6"><name pos:start="493:1" pos:end="493:5">error</name>:</label>

    <expr_stmt pos:start="495:5" pos:end="495:25"><expr pos:start="495:5" pos:end="495:24"><call pos:start="495:5" pos:end="495:24"><name pos:start="495:5" pos:end="495:14">close_sofa</name><argument_list pos:start="495:15" pos:end="495:24">(<argument pos:start="495:16" pos:end="495:23"><expr pos:start="495:16" pos:end="495:23"><operator pos:start="495:16" pos:end="495:16">&amp;</operator><name pos:start="495:17" pos:end="495:23"><name pos:start="495:17" pos:end="495:17">s</name><operator pos:start="495:18" pos:end="495:19">-&gt;</operator><name pos:start="495:20" pos:end="495:23">sofa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="497:5" pos:end="497:15">return <expr pos:start="497:12" pos:end="497:14"><name pos:start="497:12" pos:end="497:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
