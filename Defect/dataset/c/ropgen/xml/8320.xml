<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8320.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">loader_exec</name><parameter_list pos:start="1:16" pos:end="5:39">(<parameter pos:start="1:17" pos:end="1:37"><decl pos:start="1:17" pos:end="1:37"><type pos:start="1:17" pos:end="1:37"><specifier pos:start="1:17" pos:end="1:21">const</specifier> <name pos:start="1:23" pos:end="1:26">char</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type> <name pos:start="1:30" pos:end="1:37">filename</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier><modifier pos:start="1:46" pos:end="1:46">*</modifier></type> <name pos:start="1:48" pos:end="1:51">argv</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type> <name pos:start="1:62" pos:end="1:65">envp</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:41"><decl pos:start="3:14" pos:end="3:41"><type pos:start="3:14" pos:end="3:41"><name pos:start="3:14" pos:end="3:34"><name pos:start="3:14" pos:end="3:19">struct</name> <name pos:start="3:21" pos:end="3:34">target_pt_regs</name></name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type> <name pos:start="3:38" pos:end="3:41">regs</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:67"><decl pos:start="3:44" pos:end="3:67"><type pos:start="3:44" pos:end="3:67"><name pos:start="3:44" pos:end="3:60"><name pos:start="3:44" pos:end="3:49">struct</name> <name pos:start="3:51" pos:end="3:60">image_info</name></name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:67">infop</name></decl></parameter>,

             <parameter pos:start="5:14" pos:end="5:38"><decl pos:start="5:14" pos:end="5:38"><type pos:start="5:14" pos:end="5:38"><name pos:start="5:14" pos:end="5:32"><name pos:start="5:14" pos:end="5:19">struct</name> <name pos:start="5:21" pos:end="5:32">linux_binprm</name></name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:38">bprm</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="103:1">{<block_content pos:start="9:5" pos:end="101:19">

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:66"><expr pos:start="15:5" pos:end="15:65"><name pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:8">bprm</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:11">p</name></name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:30">TARGET_PAGE_SIZE</name><operator pos:start="15:31" pos:end="15:31">*</operator><name pos:start="15:32" pos:end="15:44">MAX_ARG_PAGES</name><operator pos:start="15:45" pos:end="15:45">-</operator>sizeof<operator pos:start="15:52" pos:end="15:52">(</operator><name pos:start="15:53" pos:end="15:60">unsigned</name> <name pos:start="15:62" pos:end="15:64">int</name><operator pos:start="15:65" pos:end="15:65">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:46"><expr pos:start="17:5" pos:end="17:45"><call pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:10">memset</name><argument_list pos:start="17:11" pos:end="17:45">(<argument pos:start="17:12" pos:end="17:21"><expr pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:15">bprm</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:21">page</name></name></expr></argument>, <argument pos:start="17:24" pos:end="17:24"><expr pos:start="17:24" pos:end="17:24"><literal type="number" pos:start="17:24" pos:end="17:24">0</literal></expr></argument>, <argument pos:start="17:27" pos:end="17:44"><expr pos:start="17:27" pos:end="17:44"><sizeof pos:start="17:27" pos:end="17:44">sizeof<argument_list pos:start="17:33" pos:end="17:44">(<argument pos:start="17:34" pos:end="17:43"><expr pos:start="17:34" pos:end="17:43"><name pos:start="17:34" pos:end="17:43"><name pos:start="17:34" pos:end="17:37">bprm</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:43">page</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:38"><expr pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:10">retval</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:37"><name pos:start="19:14" pos:end="19:17">open</name><argument_list pos:start="19:18" pos:end="19:37">(<argument pos:start="19:19" pos:end="19:26"><expr pos:start="19:19" pos:end="19:26"><name pos:start="19:19" pos:end="19:26">filename</name></expr></argument>, <argument pos:start="19:29" pos:end="19:36"><expr pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:36">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:22"><if pos:start="21:5" pos:end="23:22">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:14">retval</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:22"><block_content pos:start="23:9" pos:end="23:22">

        <return pos:start="23:9" pos:end="23:22">return <expr pos:start="23:16" pos:end="23:21"><name pos:start="23:16" pos:end="23:21">retval</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:8">bprm</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:12">fd</name></name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:21">retval</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:8">bprm</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:18">filename</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <operator pos:start="27:22" pos:end="27:22">(</operator><name pos:start="27:23" pos:end="27:26">char</name> <operator pos:start="27:28" pos:end="27:28">*</operator><operator pos:start="27:29" pos:end="27:29">)</operator><name pos:start="27:30" pos:end="27:37">filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:8">bprm</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:14">argc</name></name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:22">count</name><argument_list pos:start="29:23" pos:end="29:28">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:8">bprm</name><operator pos:start="31:9" pos:end="31:10">-&gt;</operator><name pos:start="31:11" pos:end="31:14">argv</name></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:21">argv</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:8">bprm</name><operator pos:start="33:9" pos:end="33:10">-&gt;</operator><name pos:start="33:11" pos:end="33:14">envc</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:22">count</name><argument_list pos:start="33:23" pos:end="33:28">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:8">bprm</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:14">envp</name></name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:21">envp</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:10">retval</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:33"><name pos:start="39:14" pos:end="39:27">prepare_binprm</name><argument_list pos:start="39:28" pos:end="39:33">(<argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><name pos:start="39:29" pos:end="39:32">bprm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="77:5"><if pos:start="43:5" pos:end="77:5">if<condition pos:start="43:7" pos:end="43:17">(<expr pos:start="43:8" pos:end="43:16"><name pos:start="43:8" pos:end="43:13">retval</name><operator pos:start="43:14" pos:end="43:15">&gt;=</operator><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>)</condition> <block pos:start="43:19" pos:end="77:5">{<block_content pos:start="45:9" pos:end="75:9">

        <if_stmt pos:start="45:9" pos:end="75:9"><if pos:start="45:9" pos:end="57:9">if <condition pos:start="45:12" pos:end="51:39">(<expr pos:start="45:13" pos:end="51:38"><name pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:16">bprm</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:21">buf</name><index pos:start="45:22" pos:end="45:24">[<expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>]</index></name> <operator pos:start="45:26" pos:end="45:27">==</operator> <literal type="number" pos:start="45:29" pos:end="45:32">0x7f</literal>

                <operator pos:start="47:17" pos:end="47:18">&amp;&amp;</operator> <name pos:start="47:20" pos:end="47:31"><name pos:start="47:20" pos:end="47:23">bprm</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:28">buf</name><index pos:start="47:29" pos:end="47:31">[<expr pos:start="47:30" pos:end="47:30"><literal type="number" pos:start="47:30" pos:end="47:30">1</literal></expr>]</index></name> <operator pos:start="47:33" pos:end="47:34">==</operator> <literal type="char" pos:start="47:36" pos:end="47:38">'E'</literal>

                <operator pos:start="49:17" pos:end="49:18">&amp;&amp;</operator> <name pos:start="49:20" pos:end="49:31"><name pos:start="49:20" pos:end="49:23">bprm</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:28">buf</name><index pos:start="49:29" pos:end="49:31">[<expr pos:start="49:30" pos:end="49:30"><literal type="number" pos:start="49:30" pos:end="49:30">2</literal></expr>]</index></name> <operator pos:start="49:33" pos:end="49:34">==</operator> <literal type="char" pos:start="49:36" pos:end="49:38">'L'</literal>

                <operator pos:start="51:17" pos:end="51:18">&amp;&amp;</operator> <name pos:start="51:20" pos:end="51:31"><name pos:start="51:20" pos:end="51:23">bprm</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:28">buf</name><index pos:start="51:29" pos:end="51:31">[<expr pos:start="51:30" pos:end="51:30"><literal type="number" pos:start="51:30" pos:end="51:30">3</literal></expr>]</index></name> <operator pos:start="51:33" pos:end="51:34">==</operator> <literal type="char" pos:start="51:36" pos:end="51:38">'F'</literal></expr>)</condition> <block pos:start="51:41" pos:end="57:9">{<block_content pos:start="53:13" pos:end="56:0">

            <expr_stmt pos:start="53:13" pos:end="56:0"><expr pos:start="53:13" pos:end="53:55"><name pos:start="53:13" pos:end="53:18">retval</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <call pos:start="53:22" pos:end="53:55"><name pos:start="53:22" pos:end="53:36">load_elf_binary</name><argument_list pos:start="53:37" pos:end="53:55">(<argument pos:start="53:38" pos:end="53:41"><expr pos:start="53:38" pos:end="53:41"><name pos:start="53:38" pos:end="53:41">bprm</name></expr></argument>, <argument pos:start="53:44" pos:end="53:47"><expr pos:start="53:44" pos:end="53:47"><name pos:start="53:44" pos:end="53:47">regs</name></expr></argument>, <argument pos:start="53:50" pos:end="53:54"><expr pos:start="53:50" pos:end="53:54"><name pos:start="53:50" pos:end="53:54">infop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="55:1" pos:end="55:28">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:28"><call pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:28">(<argument pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:27">TARGET_HAS_BFLT</name></expr></argument>)</argument_list></call></expr></cpp:if>

        </block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="69:9">else if <condition pos:start="57:19" pos:end="63:39">(<expr pos:start="57:20" pos:end="63:38"><name pos:start="57:20" pos:end="57:31"><name pos:start="57:20" pos:end="57:23">bprm</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:28">buf</name><index pos:start="57:29" pos:end="57:31">[<expr pos:start="57:30" pos:end="57:30"><literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr>]</index></name> <operator pos:start="57:33" pos:end="57:34">==</operator> <literal type="char" pos:start="57:36" pos:end="57:38">'b'</literal>

                <operator pos:start="59:17" pos:end="59:18">&amp;&amp;</operator> <name pos:start="59:20" pos:end="59:31"><name pos:start="59:20" pos:end="59:23">bprm</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:28">buf</name><index pos:start="59:29" pos:end="59:31">[<expr pos:start="59:30" pos:end="59:30"><literal type="number" pos:start="59:30" pos:end="59:30">1</literal></expr>]</index></name> <operator pos:start="59:33" pos:end="59:34">==</operator> <literal type="char" pos:start="59:36" pos:end="59:38">'F'</literal>

                <operator pos:start="61:17" pos:end="61:18">&amp;&amp;</operator> <name pos:start="61:20" pos:end="61:31"><name pos:start="61:20" pos:end="61:23">bprm</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:28">buf</name><index pos:start="61:29" pos:end="61:31">[<expr pos:start="61:30" pos:end="61:30"><literal type="number" pos:start="61:30" pos:end="61:30">2</literal></expr>]</index></name> <operator pos:start="61:33" pos:end="61:34">==</operator> <literal type="char" pos:start="61:36" pos:end="61:38">'L'</literal>

                <operator pos:start="63:17" pos:end="63:18">&amp;&amp;</operator> <name pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:23">bprm</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:28">buf</name><index pos:start="63:29" pos:end="63:31">[<expr pos:start="63:30" pos:end="63:30"><literal type="number" pos:start="63:30" pos:end="63:30">3</literal></expr>]</index></name> <operator pos:start="63:33" pos:end="63:34">==</operator> <literal type="char" pos:start="63:36" pos:end="63:38">'T'</literal></expr>)</condition> <block pos:start="63:41" pos:end="69:9">{<block_content pos:start="65:13" pos:end="68:0">

            <expr_stmt pos:start="65:13" pos:end="68:0"><expr pos:start="65:13" pos:end="65:53"><name pos:start="65:13" pos:end="65:18">retval</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:53"><name pos:start="65:22" pos:end="65:36">load_flt_binary</name><argument_list pos:start="65:37" pos:end="65:53">(<argument pos:start="65:38" pos:end="65:41"><expr pos:start="65:38" pos:end="65:41"><name pos:start="65:38" pos:end="65:41">bprm</name></expr></argument>,<argument pos:start="65:43" pos:end="65:46"><expr pos:start="65:43" pos:end="65:46"><name pos:start="65:43" pos:end="65:46">regs</name></expr></argument>,<argument pos:start="65:48" pos:end="65:52"><expr pos:start="65:48" pos:end="65:52"><name pos:start="65:48" pos:end="65:52">infop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="75:9">else <block pos:start="69:16" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:22">

            <expr_stmt pos:start="71:13" pos:end="71:55"><expr pos:start="71:13" pos:end="71:54"><call pos:start="71:13" pos:end="71:54"><name pos:start="71:13" pos:end="71:19">fprintf</name><argument_list pos:start="71:20" pos:end="71:54">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">stderr</name></expr></argument>, <argument pos:start="71:29" pos:end="71:53"><expr pos:start="71:29" pos:end="71:53"><literal type="string" pos:start="71:29" pos:end="71:53">"Unknown binary format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if<condition pos:start="81:7" pos:end="81:17">(<expr pos:start="81:8" pos:end="81:16"><name pos:start="81:8" pos:end="81:13">retval</name><operator pos:start="81:14" pos:end="81:15">&gt;=</operator><literal type="number" pos:start="81:16" pos:end="81:16">0</literal></expr>)</condition> <block pos:start="81:19" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:22">

        <comment type="block" pos:start="83:9" pos:end="83:54">/* success.  Initialize important registers */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:36"><expr pos:start="85:9" pos:end="85:35"><call pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:22">do_init_thread</name><argument_list pos:start="85:23" pos:end="85:35">(<argument pos:start="85:24" pos:end="85:27"><expr pos:start="85:24" pos:end="85:27"><name pos:start="85:24" pos:end="85:27">regs</name></expr></argument>, <argument pos:start="85:30" pos:end="85:34"><expr pos:start="85:30" pos:end="85:34"><name pos:start="85:30" pos:end="85:34">infop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:22">return <expr pos:start="87:16" pos:end="87:21"><name pos:start="87:16" pos:end="87:21">retval</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:75">/* Something went wrong, return the inode and free the argument pages*/</comment>

    <for pos:start="95:5" pos:end="99:5">for <control pos:start="95:9" pos:end="95:37">(<init pos:start="95:10" pos:end="95:14"><expr pos:start="95:10" pos:end="95:12"><name pos:start="95:10" pos:end="95:10">i</name><operator pos:start="95:11" pos:end="95:11">=</operator><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr> ;</init> <condition pos:start="95:16" pos:end="95:32"><expr pos:start="95:16" pos:end="95:30"><name pos:start="95:16" pos:end="95:16">i</name><operator pos:start="95:17" pos:end="95:17">&lt;</operator><name pos:start="95:18" pos:end="95:30">MAX_ARG_PAGES</name></expr> ;</condition> <incr pos:start="95:34" pos:end="95:36"><expr pos:start="95:34" pos:end="95:36"><name pos:start="95:34" pos:end="95:34">i</name><operator pos:start="95:35" pos:end="95:36">++</operator></expr></incr>)</control> <block pos:start="95:39" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:28">

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><call pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:12">free</name><argument_list pos:start="97:13" pos:end="97:27">(<argument pos:start="97:14" pos:end="97:26"><expr pos:start="97:14" pos:end="97:26"><name pos:start="97:14" pos:end="97:26"><name pos:start="97:14" pos:end="97:17">bprm</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:23">page</name><index pos:start="97:24" pos:end="97:26">[<expr pos:start="97:25" pos:end="97:25"><name pos:start="97:25" pos:end="97:25">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="101:5" pos:end="101:19">return<expr pos:start="101:11" pos:end="101:18"><operator pos:start="101:11" pos:end="101:11">(</operator><name pos:start="101:12" pos:end="101:17">retval</name><operator pos:start="101:18" pos:end="101:18">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
