<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5578.c" pos:tabs="8"><function pos:start="1:1" pos:end="359:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">synthfilt_build_sb_samples</name><parameter_list pos:start="1:39" pos:end="3:74">(<parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:50">QDM2Context</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">q</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:72"><decl pos:start="1:56" pos:end="1:72"><type pos:start="1:56" pos:end="1:72"><name pos:start="1:56" pos:end="1:68">GetBitContext</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">gb</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:49"><decl pos:start="3:40" pos:end="3:49"><type pos:start="3:40" pos:end="3:49"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:49">length</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:61"><decl pos:start="3:52" pos:end="3:61"><type pos:start="3:52" pos:end="3:61"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:61">sb_min</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:73"><decl pos:start="3:64" pos:end="3:73"><type pos:start="3:64" pos:end="3:73"><name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:73">sb_max</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="359:1">{<block_content pos:start="7:5" pos:end="357:5">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">sb</name></decl>, <decl pos:start="7:13" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:13">j</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">k</name></decl>, <decl pos:start="7:19" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:19">n</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:23">ch</name></decl>, <decl pos:start="7:26" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:28">run</name></decl>, <decl pos:start="7:31" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:38">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">joined_stereo</name></decl>, <decl pos:start="9:24" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:36">zero_encoding</name></decl>, <decl pos:start="9:39" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:39" pos:end="9:41">chs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">type34_first</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">float</name></type> <name pos:start="13:11" pos:end="13:20">type34_div</name> <init pos:start="13:22" pos:end="13:24">= <expr pos:start="13:24" pos:end="13:24"><literal type="number" pos:start="13:24" pos:end="13:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:26">type34_predictor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">float</name></type> <name pos:start="17:11" pos:end="17:21"><name pos:start="17:11" pos:end="17:17">samples</name><index pos:start="17:18" pos:end="17:21">[<expr pos:start="17:19" pos:end="17:20"><literal type="number" pos:start="17:19" pos:end="17:20">10</literal></expr>]</index></name></decl>, <decl pos:start="17:24" pos:end="17:36"><type ref="prev" pos:start="17:5" pos:end="17:9"/><name pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:32">sign_bits</name><index pos:start="17:33" pos:end="17:36">[<expr pos:start="17:34" pos:end="17:35"><literal type="number" pos:start="17:34" pos:end="17:35">16</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="33:5">if <condition pos:start="21:8" pos:end="21:20">(<expr pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:14">length</name> <operator pos:start="21:16" pos:end="21:17">==</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:15">

        <comment type="line" pos:start="23:9" pos:end="23:31">// If no data use noise</comment>

        <for pos:start="25:9" pos:end="27:48">for <control pos:start="25:13" pos:end="25:42">(<init pos:start="25:14" pos:end="25:23"><expr pos:start="25:14" pos:end="25:22"><name pos:start="25:14" pos:end="25:15">sb</name><operator pos:start="25:16" pos:end="25:16">=</operator><name pos:start="25:17" pos:end="25:22">sb_min</name></expr>;</init> <condition pos:start="25:25" pos:end="25:36"><expr pos:start="25:25" pos:end="25:35"><name pos:start="25:25" pos:end="25:26">sb</name> <operator pos:start="25:28" pos:end="25:28">&lt;</operator> <name pos:start="25:30" pos:end="25:35">sb_max</name></expr>;</condition> <incr pos:start="25:38" pos:end="25:41"><expr pos:start="25:38" pos:end="25:41"><name pos:start="25:38" pos:end="25:39">sb</name><operator pos:start="25:40" pos:end="25:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:13" pos:end="27:48"><block_content pos:start="27:13" pos:end="27:48">

            <expr_stmt pos:start="27:13" pos:end="27:48"><expr pos:start="27:13" pos:end="27:47"><call pos:start="27:13" pos:end="27:47"><name pos:start="27:13" pos:end="27:39">build_sb_samples_from_noise</name> <argument_list pos:start="27:41" pos:end="27:47">(<argument pos:start="27:42" pos:end="27:42"><expr pos:start="27:42" pos:end="27:42"><name pos:start="27:42" pos:end="27:42">q</name></expr></argument>, <argument pos:start="27:45" pos:end="27:46"><expr pos:start="27:45" pos:end="27:46"><name pos:start="27:45" pos:end="27:46">sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="37:5" pos:end="357:5">for <control pos:start="37:9" pos:end="37:40">(<init pos:start="37:10" pos:end="37:21"><expr pos:start="37:10" pos:end="37:20"><name pos:start="37:10" pos:end="37:11">sb</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:20">sb_min</name></expr>;</init> <condition pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:33"><name pos:start="37:23" pos:end="37:24">sb</name> <operator pos:start="37:26" pos:end="37:26">&lt;</operator> <name pos:start="37:28" pos:end="37:33">sb_max</name></expr>;</condition> <incr pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><name pos:start="37:36" pos:end="37:37">sb</name><operator pos:start="37:38" pos:end="37:39">++</operator></expr></incr>)</control> <block pos:start="37:42" pos:end="357:5">{<block_content pos:start="39:9" pos:end="355:9">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><call pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:21">FIX_NOISE_IDX</name><argument_list pos:start="39:22" pos:end="39:35">(<argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:23">q</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:34">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:16">channels</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:33"><name pos:start="43:20" pos:end="43:20">q</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:33">nb_channels</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="47:9" pos:end="57:74"><if pos:start="47:9" pos:end="49:30">if <condition pos:start="47:12" pos:end="47:43">(<expr pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:13">q</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">nb_channels</name></name> <operator pos:start="47:28" pos:end="47:29">&lt;=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">1</literal> <operator pos:start="47:33" pos:end="47:34">||</operator> <name pos:start="47:36" pos:end="47:37">sb</name> <operator pos:start="47:39" pos:end="47:39">&lt;</operator> <literal type="number" pos:start="47:41" pos:end="47:42">12</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:30"><block_content pos:start="49:13" pos:end="49:30">

            <expr_stmt pos:start="49:13" pos:end="49:30"><expr pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:25">joined_stereo</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <literal type="number" pos:start="49:29" pos:end="49:29">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="51:9" pos:end="53:30">else if <condition pos:start="51:17" pos:end="51:26">(<expr pos:start="51:18" pos:end="51:25"><name pos:start="51:18" pos:end="51:19">sb</name> <operator pos:start="51:21" pos:end="51:22">&gt;=</operator> <literal type="number" pos:start="51:24" pos:end="51:25">24</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:30"><block_content pos:start="53:13" pos:end="53:30">

            <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:25">joined_stereo</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">1</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="55:9" pos:end="57:74">else<block type="pseudo" pos:start="57:13" pos:end="57:74"><block_content pos:start="57:13" pos:end="57:74">

            <expr_stmt pos:start="57:13" pos:end="57:74"><expr pos:start="57:13" pos:end="57:73"><name pos:start="57:13" pos:end="57:25">joined_stereo</name> <operator pos:start="57:27" pos:end="57:27">=</operator> <ternary pos:start="57:29" pos:end="57:73"><condition pos:start="57:29" pos:end="57:54"><expr pos:start="57:29" pos:end="57:52"><operator pos:start="57:29" pos:end="57:29">(</operator><call pos:start="57:30" pos:end="57:46"><name pos:start="57:30" pos:end="57:42">get_bits_left</name><argument_list pos:start="57:43" pos:end="57:46">(<argument pos:start="57:44" pos:end="57:45"><expr pos:start="57:44" pos:end="57:45"><name pos:start="57:44" pos:end="57:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="57:48" pos:end="57:49">&gt;=</operator> <literal type="number" pos:start="57:51" pos:end="57:51">1</literal><operator pos:start="57:52" pos:end="57:52">)</operator></expr> ?</condition><then pos:start="57:56" pos:end="57:69"> <expr pos:start="57:56" pos:end="57:69"><call pos:start="57:56" pos:end="57:69"><name pos:start="57:56" pos:end="57:64">get_bits1</name> <argument_list pos:start="57:66" pos:end="57:69">(<argument pos:start="57:67" pos:end="57:68"><expr pos:start="57:67" pos:end="57:68"><name pos:start="57:67" pos:end="57:68">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="57:71" pos:end="57:73">: <expr pos:start="57:73" pos:end="57:73"><literal type="number" pos:start="57:73" pos:end="57:73">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="61:9" pos:end="83:9"><if pos:start="61:9" pos:end="83:9">if <condition pos:start="61:12" pos:end="61:26">(<expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:25">joined_stereo</name></expr>)</condition> <block pos:start="61:28" pos:end="83:9">{<block_content pos:start="63:13" pos:end="81:25">

            <if_stmt pos:start="63:13" pos:end="67:50"><if pos:start="63:13" pos:end="67:50">if <condition pos:start="63:16" pos:end="63:40">(<expr pos:start="63:17" pos:end="63:39"><call pos:start="63:17" pos:end="63:33"><name pos:start="63:17" pos:end="63:29">get_bits_left</name><argument_list pos:start="63:30" pos:end="63:33">(<argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><name pos:start="63:31" pos:end="63:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="63:35" pos:end="63:36">&gt;=</operator> <literal type="number" pos:start="63:38" pos:end="63:39">16</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="67:50"><block_content pos:start="65:17" pos:end="67:50">

                <for pos:start="65:17" pos:end="67:50">for <control pos:start="65:21" pos:end="65:40">(<init pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:26"><name pos:start="65:22" pos:end="65:22">j</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr>;</init> <condition pos:start="65:29" pos:end="65:35"><expr pos:start="65:29" pos:end="65:34"><name pos:start="65:29" pos:end="65:29">j</name> <operator pos:start="65:31" pos:end="65:31">&lt;</operator> <literal type="number" pos:start="65:33" pos:end="65:34">16</literal></expr>;</condition> <incr pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:37">j</name><operator pos:start="65:38" pos:end="65:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:21" pos:end="67:50"><block_content pos:start="67:21" pos:end="67:50">

                    <expr_stmt pos:start="67:21" pos:end="67:50"><expr pos:start="67:21" pos:end="67:49"><name pos:start="67:21" pos:end="67:32"><name pos:start="67:21" pos:end="67:29">sign_bits</name><index pos:start="67:30" pos:end="67:32">[<expr pos:start="67:31" pos:end="67:31"><name pos:start="67:31" pos:end="67:31">j</name></expr>]</index></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <call pos:start="67:36" pos:end="67:49"><name pos:start="67:36" pos:end="67:44">get_bits1</name> <argument_list pos:start="67:46" pos:end="67:49">(<argument pos:start="67:47" pos:end="67:48"><expr pos:start="67:47" pos:end="67:48"><name pos:start="67:47" pos:end="67:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



            <for pos:start="71:13" pos:end="75:76">for <control pos:start="71:17" pos:end="71:36">(<init pos:start="71:18" pos:end="71:23"><expr pos:start="71:18" pos:end="71:22"><name pos:start="71:18" pos:end="71:18">j</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>;</init> <condition pos:start="71:25" pos:end="71:31"><expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:25">j</name> <operator pos:start="71:27" pos:end="71:27">&lt;</operator> <literal type="number" pos:start="71:29" pos:end="71:30">64</literal></expr>;</condition> <incr pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><name pos:start="71:33" pos:end="71:33">j</name><operator pos:start="71:34" pos:end="71:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:17" pos:end="75:76"><block_content pos:start="73:17" pos:end="75:76">

                <if_stmt pos:start="73:17" pos:end="75:76"><if pos:start="73:17" pos:end="75:76">if <condition pos:start="73:20" pos:end="73:76">(<expr pos:start="73:21" pos:end="73:75"><name pos:start="73:21" pos:end="73:46"><name pos:start="73:21" pos:end="73:21">q</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:36">coding_method</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">1</literal></expr>]</index><index pos:start="73:40" pos:end="73:43">[<expr pos:start="73:41" pos:end="73:42"><name pos:start="73:41" pos:end="73:42">sb</name></expr>]</index><index pos:start="73:44" pos:end="73:46">[<expr pos:start="73:45" pos:end="73:45"><name pos:start="73:45" pos:end="73:45">j</name></expr>]</index></name> <operator pos:start="73:48" pos:end="73:48">&gt;</operator> <name pos:start="73:50" pos:end="73:75"><name pos:start="73:50" pos:end="73:50">q</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:65">coding_method</name><index pos:start="73:66" pos:end="73:68">[<expr pos:start="73:67" pos:end="73:67"><literal type="number" pos:start="73:67" pos:end="73:67">0</literal></expr>]</index><index pos:start="73:69" pos:end="73:72">[<expr pos:start="73:70" pos:end="73:71"><name pos:start="73:70" pos:end="73:71">sb</name></expr>]</index><index pos:start="73:73" pos:end="73:75">[<expr pos:start="73:74" pos:end="73:74"><name pos:start="73:74" pos:end="73:74">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:76"><block_content pos:start="75:21" pos:end="75:76">

                    <expr_stmt pos:start="75:21" pos:end="75:76"><expr pos:start="75:21" pos:end="75:75"><name pos:start="75:21" pos:end="75:46"><name pos:start="75:21" pos:end="75:21">q</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:36">coding_method</name><index pos:start="75:37" pos:end="75:39">[<expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">0</literal></expr>]</index><index pos:start="75:40" pos:end="75:43">[<expr pos:start="75:41" pos:end="75:42"><name pos:start="75:41" pos:end="75:42">sb</name></expr>]</index><index pos:start="75:44" pos:end="75:46">[<expr pos:start="75:45" pos:end="75:45"><name pos:start="75:45" pos:end="75:45">j</name></expr>]</index></name> <operator pos:start="75:48" pos:end="75:48">=</operator> <name pos:start="75:50" pos:end="75:75"><name pos:start="75:50" pos:end="75:50">q</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:65">coding_method</name><index pos:start="75:66" pos:end="75:68">[<expr pos:start="75:67" pos:end="75:67"><literal type="number" pos:start="75:67" pos:end="75:67">1</literal></expr>]</index><index pos:start="75:69" pos:end="75:72">[<expr pos:start="75:70" pos:end="75:71"><name pos:start="75:70" pos:end="75:71">sb</name></expr>]</index><index pos:start="75:73" pos:end="75:75">[<expr pos:start="75:74" pos:end="75:74"><name pos:start="75:74" pos:end="75:74">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



            <expr_stmt pos:start="79:13" pos:end="79:74"><expr pos:start="79:13" pos:end="79:73"><call pos:start="79:13" pos:end="79:73"><name pos:start="79:13" pos:end="79:35">fix_coding_method_array</name><argument_list pos:start="79:36" pos:end="79:73">(<argument pos:start="79:37" pos:end="79:38"><expr pos:start="79:37" pos:end="79:38"><name pos:start="79:37" pos:end="79:38">sb</name></expr></argument>, <argument pos:start="79:41" pos:end="79:54"><expr pos:start="79:41" pos:end="79:54"><name pos:start="79:41" pos:end="79:54"><name pos:start="79:41" pos:end="79:41">q</name><operator pos:start="79:42" pos:end="79:43">-&gt;</operator><name pos:start="79:44" pos:end="79:54">nb_channels</name></name></expr></argument>, <argument pos:start="79:57" pos:end="79:72"><expr pos:start="79:57" pos:end="79:72"><name pos:start="79:57" pos:end="79:72"><name pos:start="79:57" pos:end="79:57">q</name><operator pos:start="79:58" pos:end="79:59">-&gt;</operator><name pos:start="79:60" pos:end="79:72">coding_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:25"><expr pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:20">channels</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <literal type="number" pos:start="81:24" pos:end="81:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="87:9" pos:end="355:9">for <control pos:start="87:13" pos:end="87:41">(<init pos:start="87:14" pos:end="87:20"><expr pos:start="87:14" pos:end="87:19"><name pos:start="87:14" pos:end="87:15">ch</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr>;</init> <condition pos:start="87:22" pos:end="87:35"><expr pos:start="87:22" pos:end="87:34"><name pos:start="87:22" pos:end="87:23">ch</name> <operator pos:start="87:25" pos:end="87:25">&lt;</operator> <name pos:start="87:27" pos:end="87:34">channels</name></expr>;</condition> <incr pos:start="87:37" pos:end="87:40"><expr pos:start="87:37" pos:end="87:40"><name pos:start="87:37" pos:end="87:38">ch</name><operator pos:start="87:39" pos:end="87:40">++</operator></expr></incr>)</control> <block pos:start="87:43" pos:end="355:9">{<block_content pos:start="89:13" pos:end="353:13">

            <expr_stmt pos:start="89:13" pos:end="89:73"><expr pos:start="89:13" pos:end="89:72"><name pos:start="89:13" pos:end="89:25">zero_encoding</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <ternary pos:start="89:29" pos:end="89:72"><condition pos:start="89:29" pos:end="89:54"><expr pos:start="89:29" pos:end="89:52"><operator pos:start="89:29" pos:end="89:29">(</operator><call pos:start="89:30" pos:end="89:46"><name pos:start="89:30" pos:end="89:42">get_bits_left</name><argument_list pos:start="89:43" pos:end="89:46">(<argument pos:start="89:44" pos:end="89:45"><expr pos:start="89:44" pos:end="89:45"><name pos:start="89:44" pos:end="89:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="89:48" pos:end="89:49">&gt;=</operator> <literal type="number" pos:start="89:51" pos:end="89:51">1</literal><operator pos:start="89:52" pos:end="89:52">)</operator></expr> ?</condition><then pos:start="89:56" pos:end="89:68"> <expr pos:start="89:56" pos:end="89:68"><call pos:start="89:56" pos:end="89:68"><name pos:start="89:56" pos:end="89:64">get_bits1</name><argument_list pos:start="89:65" pos:end="89:68">(<argument pos:start="89:66" pos:end="89:67"><expr pos:start="89:66" pos:end="89:67"><name pos:start="89:66" pos:end="89:67">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="89:70" pos:end="89:72">: <expr pos:start="89:72" pos:end="89:72"><literal type="number" pos:start="89:72" pos:end="89:72">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:35"><expr pos:start="91:13" pos:end="91:34"><name pos:start="91:13" pos:end="91:28">type34_predictor</name> <operator pos:start="91:30" pos:end="91:30">=</operator> <literal type="number" pos:start="91:32" pos:end="91:34">0.0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:29"><expr pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:24">type34_first</name> <operator pos:start="93:26" pos:end="93:26">=</operator> <literal type="number" pos:start="93:28" pos:end="93:28">1</literal></expr>;</expr_stmt>



            <for pos:start="97:13" pos:end="353:13">for <control pos:start="97:17" pos:end="97:34">(<init pos:start="97:18" pos:end="97:23"><expr pos:start="97:18" pos:end="97:22"><name pos:start="97:18" pos:end="97:18">j</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>;</init> <condition pos:start="97:25" pos:end="97:32"><expr pos:start="97:25" pos:end="97:31"><name pos:start="97:25" pos:end="97:25">j</name> <operator pos:start="97:27" pos:end="97:27">&lt;</operator> <literal type="number" pos:start="97:29" pos:end="97:31">128</literal></expr>;</condition> <incr/>)</control> <block pos:start="97:36" pos:end="353:13">{<block_content pos:start="99:17" pos:end="351:25">

                <switch pos:start="99:17" pos:end="313:17">switch <condition pos:start="99:24" pos:end="99:56">(<expr pos:start="99:25" pos:end="99:55"><name pos:start="99:25" pos:end="99:55"><name pos:start="99:25" pos:end="99:25">q</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:40">coding_method</name><index pos:start="99:41" pos:end="99:44">[<expr pos:start="99:42" pos:end="99:43"><name pos:start="99:42" pos:end="99:43">ch</name></expr>]</index><index pos:start="99:45" pos:end="99:48">[<expr pos:start="99:46" pos:end="99:47"><name pos:start="99:46" pos:end="99:47">sb</name></expr>]</index><index pos:start="99:49" pos:end="99:55">[<expr pos:start="99:50" pos:end="99:54"><name pos:start="99:50" pos:end="99:50">j</name> <operator pos:start="99:52" pos:end="99:52">/</operator> <literal type="number" pos:start="99:54" pos:end="99:54">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="99:58" pos:end="313:17">{<block_content pos:start="101:21" pos:end="311:30">

                    <case pos:start="101:21" pos:end="101:27">case <expr pos:start="101:26" pos:end="101:26"><literal type="number" pos:start="101:26" pos:end="101:26">8</literal></expr>:</case>

                        <if_stmt pos:start="103:25" pos:end="137:25"><if pos:start="103:25" pos:end="131:25">if <condition pos:start="103:28" pos:end="103:52">(<expr pos:start="103:29" pos:end="103:51"><call pos:start="103:29" pos:end="103:45"><name pos:start="103:29" pos:end="103:41">get_bits_left</name><argument_list pos:start="103:42" pos:end="103:45">(<argument pos:start="103:43" pos:end="103:44"><expr pos:start="103:43" pos:end="103:44"><name pos:start="103:43" pos:end="103:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="103:47" pos:end="103:48">&gt;=</operator> <literal type="number" pos:start="103:50" pos:end="103:51">10</literal></expr>)</condition> <block pos:start="103:54" pos:end="131:25">{<block_content pos:start="105:29" pos:end="129:89">

                            <if_stmt pos:start="105:29" pos:end="125:29"><if pos:start="105:29" pos:end="117:29">if <condition pos:start="105:32" pos:end="105:46">(<expr pos:start="105:33" pos:end="105:45"><name pos:start="105:33" pos:end="105:45">zero_encoding</name></expr>)</condition> <block pos:start="105:48" pos:end="117:29">{<block_content pos:start="107:33" pos:end="115:33">

                                <for pos:start="107:33" pos:end="115:33">for <control pos:start="107:37" pos:end="107:55">(<init pos:start="107:38" pos:end="107:43"><expr pos:start="107:38" pos:end="107:42"><name pos:start="107:38" pos:end="107:38">k</name> <operator pos:start="107:40" pos:end="107:40">=</operator> <literal type="number" pos:start="107:42" pos:end="107:42">0</literal></expr>;</init> <condition pos:start="107:45" pos:end="107:50"><expr pos:start="107:45" pos:end="107:49"><name pos:start="107:45" pos:end="107:45">k</name> <operator pos:start="107:47" pos:end="107:47">&lt;</operator> <literal type="number" pos:start="107:49" pos:end="107:49">5</literal></expr>;</condition> <incr pos:start="107:52" pos:end="107:54"><expr pos:start="107:52" pos:end="107:54"><name pos:start="107:52" pos:end="107:52">k</name><operator pos:start="107:53" pos:end="107:54">++</operator></expr></incr>)</control> <block pos:start="107:57" pos:end="115:33">{<block_content pos:start="109:37" pos:end="113:120">

                                    <if_stmt pos:start="109:37" pos:end="111:46"><if pos:start="109:37" pos:end="111:46">if <condition pos:start="109:40" pos:end="109:59">(<expr pos:start="109:41" pos:end="109:58"><operator pos:start="109:41" pos:end="109:41">(</operator><name pos:start="109:42" pos:end="109:42">j</name> <operator pos:start="109:44" pos:end="109:44">+</operator> <literal type="number" pos:start="109:46" pos:end="109:46">2</literal> <operator pos:start="109:48" pos:end="109:48">*</operator> <name pos:start="109:50" pos:end="109:50">k</name><operator pos:start="109:51" pos:end="109:51">)</operator> <operator pos:start="109:53" pos:end="109:54">&gt;=</operator> <literal type="number" pos:start="109:56" pos:end="109:58">128</literal></expr>)</condition><block type="pseudo" pos:start="111:41" pos:end="111:46"><block_content pos:start="111:41" pos:end="111:46">

                                        <break pos:start="111:41" pos:end="111:46">break;</break></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="113:37" pos:end="113:120"><expr pos:start="113:37" pos:end="113:119"><name pos:start="113:37" pos:end="113:50"><name pos:start="113:37" pos:end="113:43">samples</name><index pos:start="113:44" pos:end="113:50">[<expr pos:start="113:45" pos:end="113:49"><literal type="number" pos:start="113:45" pos:end="113:45">2</literal> <operator pos:start="113:47" pos:end="113:47">*</operator> <name pos:start="113:49" pos:end="113:49">k</name></expr>]</index></name> <operator pos:start="113:52" pos:end="113:52">=</operator> <ternary pos:start="113:54" pos:end="113:119"><condition pos:start="113:54" pos:end="113:68"><expr pos:start="113:54" pos:end="113:66"><call pos:start="113:54" pos:end="113:66"><name pos:start="113:54" pos:end="113:62">get_bits1</name><argument_list pos:start="113:63" pos:end="113:66">(<argument pos:start="113:64" pos:end="113:65"><expr pos:start="113:64" pos:end="113:65"><name pos:start="113:64" pos:end="113:65">gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="113:70" pos:end="113:115"> <expr pos:start="113:70" pos:end="113:115"><name pos:start="113:70" pos:end="113:115"><name pos:start="113:70" pos:end="113:81">dequant_1bit</name><index pos:start="113:82" pos:end="113:96">[<expr pos:start="113:83" pos:end="113:95"><name pos:start="113:83" pos:end="113:95">joined_stereo</name></expr>]</index><index pos:start="113:97" pos:end="113:115">[<expr pos:start="113:98" pos:end="113:114"><literal type="number" pos:start="113:98" pos:end="113:98">2</literal> <operator pos:start="113:100" pos:end="113:100">*</operator> <call pos:start="113:102" pos:end="113:114"><name pos:start="113:102" pos:end="113:110">get_bits1</name><argument_list pos:start="113:111" pos:end="113:114">(<argument pos:start="113:112" pos:end="113:113"><expr pos:start="113:112" pos:end="113:113"><name pos:start="113:112" pos:end="113:113">gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else pos:start="113:117" pos:end="113:119">: <expr pos:start="113:119" pos:end="113:119"><literal type="number" pos:start="113:119" pos:end="113:119">0</literal></expr></else></ternary></expr>;</expr_stmt>

                                </block_content>}</block></for>

                            </block_content>}</block></if> <else pos:start="117:31" pos:end="125:29">else <block pos:start="117:36" pos:end="125:29">{<block_content pos:start="119:33" pos:end="123:109">

                                <expr_stmt pos:start="119:33" pos:end="119:52"><expr pos:start="119:33" pos:end="119:51"><name pos:start="119:33" pos:end="119:33">n</name> <operator pos:start="119:35" pos:end="119:35">=</operator> <call pos:start="119:37" pos:end="119:51"><name pos:start="119:37" pos:end="119:44">get_bits</name><argument_list pos:start="119:45" pos:end="119:51">(<argument pos:start="119:46" pos:end="119:47"><expr pos:start="119:46" pos:end="119:47"><name pos:start="119:46" pos:end="119:47">gb</name></expr></argument>, <argument pos:start="119:50" pos:end="119:50"><expr pos:start="119:50" pos:end="119:50"><literal type="number" pos:start="119:50" pos:end="119:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <for pos:start="121:33" pos:end="123:109">for <control pos:start="121:37" pos:end="121:55">(<init pos:start="121:38" pos:end="121:43"><expr pos:start="121:38" pos:end="121:42"><name pos:start="121:38" pos:end="121:38">k</name> <operator pos:start="121:40" pos:end="121:40">=</operator> <literal type="number" pos:start="121:42" pos:end="121:42">0</literal></expr>;</init> <condition pos:start="121:45" pos:end="121:50"><expr pos:start="121:45" pos:end="121:49"><name pos:start="121:45" pos:end="121:45">k</name> <operator pos:start="121:47" pos:end="121:47">&lt;</operator> <literal type="number" pos:start="121:49" pos:end="121:49">5</literal></expr>;</condition> <incr pos:start="121:52" pos:end="121:54"><expr pos:start="121:52" pos:end="121:54"><name pos:start="121:52" pos:end="121:52">k</name><operator pos:start="121:53" pos:end="121:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:37" pos:end="123:109"><block_content pos:start="123:37" pos:end="123:109">

                                    <expr_stmt pos:start="123:37" pos:end="123:109"><expr pos:start="123:37" pos:end="123:108"><name pos:start="123:37" pos:end="123:50"><name pos:start="123:37" pos:end="123:43">samples</name><index pos:start="123:44" pos:end="123:50">[<expr pos:start="123:45" pos:end="123:49"><literal type="number" pos:start="123:45" pos:end="123:45">2</literal> <operator pos:start="123:47" pos:end="123:47">*</operator> <name pos:start="123:49" pos:end="123:49">k</name></expr>]</index></name> <operator pos:start="123:52" pos:end="123:52">=</operator> <name pos:start="123:54" pos:end="123:108"><name pos:start="123:54" pos:end="123:65">dequant_1bit</name><index pos:start="123:66" pos:end="123:80">[<expr pos:start="123:67" pos:end="123:79"><name pos:start="123:67" pos:end="123:79">joined_stereo</name></expr>]</index><index pos:start="123:81" pos:end="123:108">[<expr pos:start="123:82" pos:end="123:107"><name pos:start="123:82" pos:end="123:107"><name pos:start="123:82" pos:end="123:101">random_dequant_index</name><index pos:start="123:102" pos:end="123:104">[<expr pos:start="123:103" pos:end="123:103"><name pos:start="123:103" pos:end="123:103">n</name></expr>]</index><index pos:start="123:105" pos:end="123:107">[<expr pos:start="123:106" pos:end="123:106"><name pos:start="123:106" pos:end="123:106">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                            <for pos:start="127:29" pos:end="129:89">for <control pos:start="127:33" pos:end="127:51">(<init pos:start="127:34" pos:end="127:39"><expr pos:start="127:34" pos:end="127:38"><name pos:start="127:34" pos:end="127:34">k</name> <operator pos:start="127:36" pos:end="127:36">=</operator> <literal type="number" pos:start="127:38" pos:end="127:38">0</literal></expr>;</init> <condition pos:start="127:41" pos:end="127:46"><expr pos:start="127:41" pos:end="127:45"><name pos:start="127:41" pos:end="127:41">k</name> <operator pos:start="127:43" pos:end="127:43">&lt;</operator> <literal type="number" pos:start="127:45" pos:end="127:45">5</literal></expr>;</condition> <incr pos:start="127:48" pos:end="127:50"><expr pos:start="127:48" pos:end="127:50"><name pos:start="127:48" pos:end="127:48">k</name><operator pos:start="127:49" pos:end="127:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:33" pos:end="129:89"><block_content pos:start="129:33" pos:end="129:89">

                                <expr_stmt pos:start="129:33" pos:end="129:89"><expr pos:start="129:33" pos:end="129:88"><name pos:start="129:33" pos:end="129:50"><name pos:start="129:33" pos:end="129:39">samples</name><index pos:start="129:40" pos:end="129:50">[<expr pos:start="129:41" pos:end="129:49"><literal type="number" pos:start="129:41" pos:end="129:41">2</literal> <operator pos:start="129:43" pos:end="129:43">*</operator> <name pos:start="129:45" pos:end="129:45">k</name> <operator pos:start="129:47" pos:end="129:47">+</operator> <literal type="number" pos:start="129:49" pos:end="129:49">1</literal></expr>]</index></name> <operator pos:start="129:52" pos:end="129:52">=</operator> <call pos:start="129:54" pos:end="129:88"><name pos:start="129:54" pos:end="129:71">SB_DITHERING_NOISE</name><argument_list pos:start="129:72" pos:end="129:88">(<argument pos:start="129:73" pos:end="129:74"><expr pos:start="129:73" pos:end="129:74"><name pos:start="129:73" pos:end="129:74">sb</name></expr></argument>,<argument pos:start="129:76" pos:end="129:87"><expr pos:start="129:76" pos:end="129:87"><name pos:start="129:76" pos:end="129:87"><name pos:start="129:76" pos:end="129:76">q</name><operator pos:start="129:77" pos:end="129:78">-&gt;</operator><name pos:start="129:79" pos:end="129:87">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="131:27" pos:end="137:25">else <block pos:start="131:32" pos:end="137:25">{<block_content pos:start="133:29" pos:end="135:81">

                            <for pos:start="133:29" pos:end="135:81">for <control pos:start="133:33" pos:end="133:52">(<init pos:start="133:34" pos:end="133:39"><expr pos:start="133:34" pos:end="133:38"><name pos:start="133:34" pos:end="133:34">k</name> <operator pos:start="133:36" pos:end="133:36">=</operator> <literal type="number" pos:start="133:38" pos:end="133:38">0</literal></expr>;</init> <condition pos:start="133:41" pos:end="133:47"><expr pos:start="133:41" pos:end="133:46"><name pos:start="133:41" pos:end="133:41">k</name> <operator pos:start="133:43" pos:end="133:43">&lt;</operator> <literal type="number" pos:start="133:45" pos:end="133:46">10</literal></expr>;</condition> <incr pos:start="133:49" pos:end="133:51"><expr pos:start="133:49" pos:end="133:51"><name pos:start="133:49" pos:end="133:49">k</name><operator pos:start="133:50" pos:end="133:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="135:33" pos:end="135:81"><block_content pos:start="135:33" pos:end="135:81">

                                <expr_stmt pos:start="135:33" pos:end="135:81"><expr pos:start="135:33" pos:end="135:80"><name pos:start="135:33" pos:end="135:42"><name pos:start="135:33" pos:end="135:39">samples</name><index pos:start="135:40" pos:end="135:42">[<expr pos:start="135:41" pos:end="135:41"><name pos:start="135:41" pos:end="135:41">k</name></expr>]</index></name> <operator pos:start="135:44" pos:end="135:44">=</operator> <call pos:start="135:46" pos:end="135:80"><name pos:start="135:46" pos:end="135:63">SB_DITHERING_NOISE</name><argument_list pos:start="135:64" pos:end="135:80">(<argument pos:start="135:65" pos:end="135:66"><expr pos:start="135:65" pos:end="135:66"><name pos:start="135:65" pos:end="135:66">sb</name></expr></argument>,<argument pos:start="135:68" pos:end="135:79"><expr pos:start="135:68" pos:end="135:79"><name pos:start="135:68" pos:end="135:79"><name pos:start="135:68" pos:end="135:68">q</name><operator pos:start="135:69" pos:end="135:70">-&gt;</operator><name pos:start="135:71" pos:end="135:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="139:25" pos:end="139:33"><expr pos:start="139:25" pos:end="139:32"><name pos:start="139:25" pos:end="139:27">run</name> <operator pos:start="139:29" pos:end="139:29">=</operator> <literal type="number" pos:start="139:31" pos:end="139:32">10</literal></expr>;</expr_stmt>

                        <break pos:start="141:25" pos:end="141:30">break;</break>



                    <case pos:start="145:21" pos:end="145:28">case <expr pos:start="145:26" pos:end="145:27"><literal type="number" pos:start="145:26" pos:end="145:27">10</literal></expr>:</case>

                        <if_stmt pos:start="147:25" pos:end="165:25"><if pos:start="147:25" pos:end="161:25">if <condition pos:start="147:28" pos:end="147:51">(<expr pos:start="147:29" pos:end="147:50"><call pos:start="147:29" pos:end="147:45"><name pos:start="147:29" pos:end="147:41">get_bits_left</name><argument_list pos:start="147:42" pos:end="147:45">(<argument pos:start="147:43" pos:end="147:44"><expr pos:start="147:43" pos:end="147:44"><name pos:start="147:43" pos:end="147:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="147:47" pos:end="147:48">&gt;=</operator> <literal type="number" pos:start="147:50" pos:end="147:50">1</literal></expr>)</condition> <block pos:start="147:53" pos:end="161:25">{<block_content pos:start="149:29" pos:end="159:43">

                            <decl_stmt pos:start="149:29" pos:end="149:43"><decl pos:start="149:29" pos:end="149:42"><type pos:start="149:29" pos:end="149:33"><name pos:start="149:29" pos:end="149:33">float</name></type> <name pos:start="149:35" pos:end="149:35">f</name> <init pos:start="149:37" pos:end="149:42">= <expr pos:start="149:39" pos:end="149:42"><literal type="number" pos:start="149:39" pos:end="149:42">0.81</literal></expr></init></decl>;</decl_stmt>



                            <if_stmt pos:start="153:29" pos:end="155:39"><if pos:start="153:29" pos:end="155:39">if <condition pos:start="153:32" pos:end="153:46">(<expr pos:start="153:33" pos:end="153:45"><call pos:start="153:33" pos:end="153:45"><name pos:start="153:33" pos:end="153:41">get_bits1</name><argument_list pos:start="153:42" pos:end="153:45">(<argument pos:start="153:43" pos:end="153:44"><expr pos:start="153:43" pos:end="153:44"><name pos:start="153:43" pos:end="153:44">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="155:33" pos:end="155:39"><block_content pos:start="155:33" pos:end="155:39">

                                <expr_stmt pos:start="155:33" pos:end="155:39"><expr pos:start="155:33" pos:end="155:38"><name pos:start="155:33" pos:end="155:33">f</name> <operator pos:start="155:35" pos:end="155:35">=</operator> <operator pos:start="155:37" pos:end="155:37">-</operator><name pos:start="155:38" pos:end="155:38">f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="157:29" pos:end="157:96"><expr pos:start="157:29" pos:end="157:95"><name pos:start="157:29" pos:end="157:29">f</name> <operator pos:start="157:31" pos:end="157:32">-=</operator> <name pos:start="157:34" pos:end="157:82"><name pos:start="157:34" pos:end="157:46">noise_samples</name><index pos:start="157:47" pos:end="157:82">[<expr pos:start="157:48" pos:end="157:81"><operator pos:start="157:48" pos:end="157:48">(</operator><operator pos:start="157:49" pos:end="157:49">(</operator><name pos:start="157:50" pos:end="157:51">sb</name> <operator pos:start="157:53" pos:end="157:53">+</operator> <literal type="number" pos:start="157:55" pos:end="157:55">1</literal><operator pos:start="157:56" pos:end="157:56">)</operator> <operator pos:start="157:58" pos:end="157:58">*</operator> <operator pos:start="157:60" pos:end="157:60">(</operator><name pos:start="157:61" pos:end="157:61">j</name> <operator pos:start="157:63" pos:end="157:63">+</operator><literal type="number" pos:start="157:64" pos:end="157:64">5</literal> <operator pos:start="157:66" pos:end="157:66">*</operator> <name pos:start="157:68" pos:end="157:69">ch</name> <operator pos:start="157:71" pos:end="157:71">+</operator> <literal type="number" pos:start="157:73" pos:end="157:73">1</literal><operator pos:start="157:74" pos:end="157:74">)</operator><operator pos:start="157:75" pos:end="157:75">)</operator> <operator pos:start="157:77" pos:end="157:77">&amp;</operator> <literal type="number" pos:start="157:79" pos:end="157:81">127</literal></expr>]</index></name> <operator pos:start="157:84" pos:end="157:84">*</operator> <literal type="number" pos:start="157:86" pos:end="157:88">9.0</literal> <operator pos:start="157:90" pos:end="157:90">/</operator> <literal type="number" pos:start="157:92" pos:end="157:95">40.0</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="159:29" pos:end="159:43"><expr pos:start="159:29" pos:end="159:42"><name pos:start="159:29" pos:end="159:38"><name pos:start="159:29" pos:end="159:35">samples</name><index pos:start="159:36" pos:end="159:38">[<expr pos:start="159:37" pos:end="159:37"><literal type="number" pos:start="159:37" pos:end="159:37">0</literal></expr>]</index></name> <operator pos:start="159:40" pos:end="159:40">=</operator> <name pos:start="159:42" pos:end="159:42">f</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="161:27" pos:end="165:25">else <block pos:start="161:32" pos:end="165:25">{<block_content pos:start="163:29" pos:end="163:77">

                            <expr_stmt pos:start="163:29" pos:end="163:77"><expr pos:start="163:29" pos:end="163:76"><name pos:start="163:29" pos:end="163:38"><name pos:start="163:29" pos:end="163:35">samples</name><index pos:start="163:36" pos:end="163:38">[<expr pos:start="163:37" pos:end="163:37"><literal type="number" pos:start="163:37" pos:end="163:37">0</literal></expr>]</index></name> <operator pos:start="163:40" pos:end="163:40">=</operator> <call pos:start="163:42" pos:end="163:76"><name pos:start="163:42" pos:end="163:59">SB_DITHERING_NOISE</name><argument_list pos:start="163:60" pos:end="163:76">(<argument pos:start="163:61" pos:end="163:62"><expr pos:start="163:61" pos:end="163:62"><name pos:start="163:61" pos:end="163:62">sb</name></expr></argument>,<argument pos:start="163:64" pos:end="163:75"><expr pos:start="163:64" pos:end="163:75"><name pos:start="163:64" pos:end="163:75"><name pos:start="163:64" pos:end="163:64">q</name><operator pos:start="163:65" pos:end="163:66">-&gt;</operator><name pos:start="163:67" pos:end="163:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="167:25" pos:end="167:32"><expr pos:start="167:25" pos:end="167:31"><name pos:start="167:25" pos:end="167:27">run</name> <operator pos:start="167:29" pos:end="167:29">=</operator> <literal type="number" pos:start="167:31" pos:end="167:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="169:25" pos:end="169:30">break;</break>



                    <case pos:start="173:21" pos:end="173:28">case <expr pos:start="173:26" pos:end="173:27"><literal type="number" pos:start="173:26" pos:end="173:27">16</literal></expr>:</case>

                        <if_stmt pos:start="175:25" pos:end="205:25"><if pos:start="175:25" pos:end="199:25">if <condition pos:start="175:28" pos:end="175:52">(<expr pos:start="175:29" pos:end="175:51"><call pos:start="175:29" pos:end="175:45"><name pos:start="175:29" pos:end="175:41">get_bits_left</name><argument_list pos:start="175:42" pos:end="175:45">(<argument pos:start="175:43" pos:end="175:44"><expr pos:start="175:43" pos:end="175:44"><name pos:start="175:43" pos:end="175:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="175:47" pos:end="175:48">&gt;=</operator> <literal type="number" pos:start="175:50" pos:end="175:51">10</literal></expr>)</condition> <block pos:start="175:54" pos:end="199:25">{<block_content pos:start="177:29" pos:end="197:29">

                            <if_stmt pos:start="177:29" pos:end="197:29"><if pos:start="177:29" pos:end="189:29">if <condition pos:start="177:32" pos:end="177:46">(<expr pos:start="177:33" pos:end="177:45"><name pos:start="177:33" pos:end="177:45">zero_encoding</name></expr>)</condition> <block pos:start="177:48" pos:end="189:29">{<block_content pos:start="179:33" pos:end="187:33">

                                <for pos:start="179:33" pos:end="187:33">for <control pos:start="179:37" pos:end="179:55">(<init pos:start="179:38" pos:end="179:43"><expr pos:start="179:38" pos:end="179:42"><name pos:start="179:38" pos:end="179:38">k</name> <operator pos:start="179:40" pos:end="179:40">=</operator> <literal type="number" pos:start="179:42" pos:end="179:42">0</literal></expr>;</init> <condition pos:start="179:45" pos:end="179:50"><expr pos:start="179:45" pos:end="179:49"><name pos:start="179:45" pos:end="179:45">k</name> <operator pos:start="179:47" pos:end="179:47">&lt;</operator> <literal type="number" pos:start="179:49" pos:end="179:49">5</literal></expr>;</condition> <incr pos:start="179:52" pos:end="179:54"><expr pos:start="179:52" pos:end="179:54"><name pos:start="179:52" pos:end="179:52">k</name><operator pos:start="179:53" pos:end="179:54">++</operator></expr></incr>)</control> <block pos:start="179:57" pos:end="187:33">{<block_content pos:start="181:37" pos:end="185:123">

                                    <if_stmt pos:start="181:37" pos:end="183:46"><if pos:start="181:37" pos:end="183:46">if <condition pos:start="181:40" pos:end="181:55">(<expr pos:start="181:41" pos:end="181:54"><operator pos:start="181:41" pos:end="181:41">(</operator><name pos:start="181:42" pos:end="181:42">j</name> <operator pos:start="181:44" pos:end="181:44">+</operator> <name pos:start="181:46" pos:end="181:46">k</name><operator pos:start="181:47" pos:end="181:47">)</operator> <operator pos:start="181:49" pos:end="181:50">&gt;=</operator> <literal type="number" pos:start="181:52" pos:end="181:54">128</literal></expr>)</condition><block type="pseudo" pos:start="183:41" pos:end="183:46"><block_content pos:start="183:41" pos:end="183:46">

                                        <break pos:start="183:41" pos:end="183:46">break;</break></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="185:37" pos:end="185:123"><expr pos:start="185:37" pos:end="185:122"><name pos:start="185:37" pos:end="185:46"><name pos:start="185:37" pos:end="185:43">samples</name><index pos:start="185:44" pos:end="185:46">[<expr pos:start="185:45" pos:end="185:45"><name pos:start="185:45" pos:end="185:45">k</name></expr>]</index></name> <operator pos:start="185:48" pos:end="185:48">=</operator> <ternary pos:start="185:50" pos:end="185:122"><condition pos:start="185:50" pos:end="185:71"><expr pos:start="185:50" pos:end="185:69"><operator pos:start="185:50" pos:end="185:50">(</operator><call pos:start="185:51" pos:end="185:63"><name pos:start="185:51" pos:end="185:59">get_bits1</name><argument_list pos:start="185:60" pos:end="185:63">(<argument pos:start="185:61" pos:end="185:62"><expr pos:start="185:61" pos:end="185:62"><name pos:start="185:61" pos:end="185:62">gb</name></expr></argument>)</argument_list></call> <operator pos:start="185:65" pos:end="185:66">==</operator> <literal type="number" pos:start="185:68" pos:end="185:68">0</literal><operator pos:start="185:69" pos:end="185:69">)</operator></expr> ?</condition><then pos:start="185:73" pos:end="185:73"> <expr pos:start="185:73" pos:end="185:73"><literal type="number" pos:start="185:73" pos:end="185:73">0</literal></expr> </then><else pos:start="185:75" pos:end="185:122">: <expr pos:start="185:77" pos:end="185:122"><name pos:start="185:77" pos:end="185:122"><name pos:start="185:77" pos:end="185:88">dequant_1bit</name><index pos:start="185:89" pos:end="185:103">[<expr pos:start="185:90" pos:end="185:102"><name pos:start="185:90" pos:end="185:102">joined_stereo</name></expr>]</index><index pos:start="185:104" pos:end="185:122">[<expr pos:start="185:105" pos:end="185:121"><literal type="number" pos:start="185:105" pos:end="185:105">2</literal> <operator pos:start="185:107" pos:end="185:107">*</operator> <call pos:start="185:109" pos:end="185:121"><name pos:start="185:109" pos:end="185:117">get_bits1</name><argument_list pos:start="185:118" pos:end="185:121">(<argument pos:start="185:119" pos:end="185:120"><expr pos:start="185:119" pos:end="185:120"><name pos:start="185:119" pos:end="185:120">gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

                                </block_content>}</block></for>

                            </block_content>}</block></if> <else pos:start="189:31" pos:end="197:29">else <block pos:start="189:36" pos:end="197:29">{<block_content pos:start="191:33" pos:end="195:105">

                                <expr_stmt pos:start="191:33" pos:end="191:53"><expr pos:start="191:33" pos:end="191:52"><name pos:start="191:33" pos:end="191:33">n</name> <operator pos:start="191:35" pos:end="191:35">=</operator> <call pos:start="191:37" pos:end="191:52"><name pos:start="191:37" pos:end="191:44">get_bits</name> <argument_list pos:start="191:46" pos:end="191:52">(<argument pos:start="191:47" pos:end="191:48"><expr pos:start="191:47" pos:end="191:48"><name pos:start="191:47" pos:end="191:48">gb</name></expr></argument>, <argument pos:start="191:51" pos:end="191:51"><expr pos:start="191:51" pos:end="191:51"><literal type="number" pos:start="191:51" pos:end="191:51">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <for pos:start="193:33" pos:end="195:105">for <control pos:start="193:37" pos:end="193:55">(<init pos:start="193:38" pos:end="193:43"><expr pos:start="193:38" pos:end="193:42"><name pos:start="193:38" pos:end="193:38">k</name> <operator pos:start="193:40" pos:end="193:40">=</operator> <literal type="number" pos:start="193:42" pos:end="193:42">0</literal></expr>;</init> <condition pos:start="193:45" pos:end="193:50"><expr pos:start="193:45" pos:end="193:49"><name pos:start="193:45" pos:end="193:45">k</name> <operator pos:start="193:47" pos:end="193:47">&lt;</operator> <literal type="number" pos:start="193:49" pos:end="193:49">5</literal></expr>;</condition> <incr pos:start="193:52" pos:end="193:54"><expr pos:start="193:52" pos:end="193:54"><name pos:start="193:52" pos:end="193:52">k</name><operator pos:start="193:53" pos:end="193:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="195:37" pos:end="195:105"><block_content pos:start="195:37" pos:end="195:105">

                                    <expr_stmt pos:start="195:37" pos:end="195:105"><expr pos:start="195:37" pos:end="195:104"><name pos:start="195:37" pos:end="195:46"><name pos:start="195:37" pos:end="195:43">samples</name><index pos:start="195:44" pos:end="195:46">[<expr pos:start="195:45" pos:end="195:45"><name pos:start="195:45" pos:end="195:45">k</name></expr>]</index></name> <operator pos:start="195:48" pos:end="195:48">=</operator> <name pos:start="195:50" pos:end="195:104"><name pos:start="195:50" pos:end="195:61">dequant_1bit</name><index pos:start="195:62" pos:end="195:76">[<expr pos:start="195:63" pos:end="195:75"><name pos:start="195:63" pos:end="195:75">joined_stereo</name></expr>]</index><index pos:start="195:77" pos:end="195:104">[<expr pos:start="195:78" pos:end="195:103"><name pos:start="195:78" pos:end="195:103"><name pos:start="195:78" pos:end="195:97">random_dequant_index</name><index pos:start="195:98" pos:end="195:100">[<expr pos:start="195:99" pos:end="195:99"><name pos:start="195:99" pos:end="195:99">n</name></expr>]</index><index pos:start="195:101" pos:end="195:103">[<expr pos:start="195:102" pos:end="195:102"><name pos:start="195:102" pos:end="195:102">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="199:27" pos:end="205:25">else <block pos:start="199:32" pos:end="205:25">{<block_content pos:start="201:29" pos:end="203:81">

                            <for pos:start="201:29" pos:end="203:81">for <control pos:start="201:33" pos:end="201:51">(<init pos:start="201:34" pos:end="201:39"><expr pos:start="201:34" pos:end="201:38"><name pos:start="201:34" pos:end="201:34">k</name> <operator pos:start="201:36" pos:end="201:36">=</operator> <literal type="number" pos:start="201:38" pos:end="201:38">0</literal></expr>;</init> <condition pos:start="201:41" pos:end="201:46"><expr pos:start="201:41" pos:end="201:45"><name pos:start="201:41" pos:end="201:41">k</name> <operator pos:start="201:43" pos:end="201:43">&lt;</operator> <literal type="number" pos:start="201:45" pos:end="201:45">5</literal></expr>;</condition> <incr pos:start="201:48" pos:end="201:50"><expr pos:start="201:48" pos:end="201:50"><name pos:start="201:48" pos:end="201:48">k</name><operator pos:start="201:49" pos:end="201:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="203:33" pos:end="203:81"><block_content pos:start="203:33" pos:end="203:81">

                                <expr_stmt pos:start="203:33" pos:end="203:81"><expr pos:start="203:33" pos:end="203:80"><name pos:start="203:33" pos:end="203:42"><name pos:start="203:33" pos:end="203:39">samples</name><index pos:start="203:40" pos:end="203:42">[<expr pos:start="203:41" pos:end="203:41"><name pos:start="203:41" pos:end="203:41">k</name></expr>]</index></name> <operator pos:start="203:44" pos:end="203:44">=</operator> <call pos:start="203:46" pos:end="203:80"><name pos:start="203:46" pos:end="203:63">SB_DITHERING_NOISE</name><argument_list pos:start="203:64" pos:end="203:80">(<argument pos:start="203:65" pos:end="203:66"><expr pos:start="203:65" pos:end="203:66"><name pos:start="203:65" pos:end="203:66">sb</name></expr></argument>,<argument pos:start="203:68" pos:end="203:79"><expr pos:start="203:68" pos:end="203:79"><name pos:start="203:68" pos:end="203:79"><name pos:start="203:68" pos:end="203:68">q</name><operator pos:start="203:69" pos:end="203:70">-&gt;</operator><name pos:start="203:71" pos:end="203:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="207:25" pos:end="207:32"><expr pos:start="207:25" pos:end="207:31"><name pos:start="207:25" pos:end="207:27">run</name> <operator pos:start="207:29" pos:end="207:29">=</operator> <literal type="number" pos:start="207:31" pos:end="207:31">5</literal></expr>;</expr_stmt>

                        <break pos:start="209:25" pos:end="209:30">break;</break>



                    <case pos:start="213:21" pos:end="213:28">case <expr pos:start="213:26" pos:end="213:27"><literal type="number" pos:start="213:26" pos:end="213:27">24</literal></expr>:</case>

                        <if_stmt pos:start="215:25" pos:end="229:25"><if pos:start="215:25" pos:end="223:25">if <condition pos:start="215:28" pos:end="215:51">(<expr pos:start="215:29" pos:end="215:50"><call pos:start="215:29" pos:end="215:45"><name pos:start="215:29" pos:end="215:41">get_bits_left</name><argument_list pos:start="215:42" pos:end="215:45">(<argument pos:start="215:43" pos:end="215:44"><expr pos:start="215:43" pos:end="215:44"><name pos:start="215:43" pos:end="215:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="215:47" pos:end="215:48">&gt;=</operator> <literal type="number" pos:start="215:50" pos:end="215:50">7</literal></expr>)</condition> <block pos:start="215:53" pos:end="223:25">{<block_content pos:start="217:29" pos:end="221:87">

                            <expr_stmt pos:start="217:29" pos:end="217:48"><expr pos:start="217:29" pos:end="217:47"><name pos:start="217:29" pos:end="217:29">n</name> <operator pos:start="217:31" pos:end="217:31">=</operator> <call pos:start="217:33" pos:end="217:47"><name pos:start="217:33" pos:end="217:40">get_bits</name><argument_list pos:start="217:41" pos:end="217:47">(<argument pos:start="217:42" pos:end="217:43"><expr pos:start="217:42" pos:end="217:43"><name pos:start="217:42" pos:end="217:43">gb</name></expr></argument>, <argument pos:start="217:46" pos:end="217:46"><expr pos:start="217:46" pos:end="217:46"><literal type="number" pos:start="217:46" pos:end="217:46">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="219:29" pos:end="221:87">for <control pos:start="219:33" pos:end="219:51">(<init pos:start="219:34" pos:end="219:39"><expr pos:start="219:34" pos:end="219:38"><name pos:start="219:34" pos:end="219:34">k</name> <operator pos:start="219:36" pos:end="219:36">=</operator> <literal type="number" pos:start="219:38" pos:end="219:38">0</literal></expr>;</init> <condition pos:start="219:41" pos:end="219:46"><expr pos:start="219:41" pos:end="219:45"><name pos:start="219:41" pos:end="219:41">k</name> <operator pos:start="219:43" pos:end="219:43">&lt;</operator> <literal type="number" pos:start="219:45" pos:end="219:45">3</literal></expr>;</condition> <incr pos:start="219:48" pos:end="219:50"><expr pos:start="219:48" pos:end="219:50"><name pos:start="219:48" pos:end="219:48">k</name><operator pos:start="219:49" pos:end="219:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="221:33" pos:end="221:87"><block_content pos:start="221:33" pos:end="221:87">

                                <expr_stmt pos:start="221:33" pos:end="221:87"><expr pos:start="221:33" pos:end="221:86"><name pos:start="221:33" pos:end="221:42"><name pos:start="221:33" pos:end="221:39">samples</name><index pos:start="221:40" pos:end="221:42">[<expr pos:start="221:41" pos:end="221:41"><name pos:start="221:41" pos:end="221:41">k</name></expr>]</index></name> <operator pos:start="221:44" pos:end="221:44">=</operator> <operator pos:start="221:46" pos:end="221:46">(</operator><name pos:start="221:47" pos:end="221:73"><name pos:start="221:47" pos:end="221:67">random_dequant_type24</name><index pos:start="221:68" pos:end="221:70">[<expr pos:start="221:69" pos:end="221:69"><name pos:start="221:69" pos:end="221:69">n</name></expr>]</index><index pos:start="221:71" pos:end="221:73">[<expr pos:start="221:72" pos:end="221:72"><name pos:start="221:72" pos:end="221:72">k</name></expr>]</index></name> <operator pos:start="221:75" pos:end="221:75">-</operator> <literal type="number" pos:start="221:77" pos:end="221:79">2.0</literal><operator pos:start="221:80" pos:end="221:80">)</operator> <operator pos:start="221:82" pos:end="221:82">*</operator> <literal type="number" pos:start="221:84" pos:end="221:86">0.5</literal></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="223:27" pos:end="229:25">else <block pos:start="223:32" pos:end="229:25">{<block_content pos:start="225:29" pos:end="227:81">

                            <for pos:start="225:29" pos:end="227:81">for <control pos:start="225:33" pos:end="225:51">(<init pos:start="225:34" pos:end="225:39"><expr pos:start="225:34" pos:end="225:38"><name pos:start="225:34" pos:end="225:34">k</name> <operator pos:start="225:36" pos:end="225:36">=</operator> <literal type="number" pos:start="225:38" pos:end="225:38">0</literal></expr>;</init> <condition pos:start="225:41" pos:end="225:46"><expr pos:start="225:41" pos:end="225:45"><name pos:start="225:41" pos:end="225:41">k</name> <operator pos:start="225:43" pos:end="225:43">&lt;</operator> <literal type="number" pos:start="225:45" pos:end="225:45">3</literal></expr>;</condition> <incr pos:start="225:48" pos:end="225:50"><expr pos:start="225:48" pos:end="225:50"><name pos:start="225:48" pos:end="225:48">k</name><operator pos:start="225:49" pos:end="225:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="227:33" pos:end="227:81"><block_content pos:start="227:33" pos:end="227:81">

                                <expr_stmt pos:start="227:33" pos:end="227:81"><expr pos:start="227:33" pos:end="227:80"><name pos:start="227:33" pos:end="227:42"><name pos:start="227:33" pos:end="227:39">samples</name><index pos:start="227:40" pos:end="227:42">[<expr pos:start="227:41" pos:end="227:41"><name pos:start="227:41" pos:end="227:41">k</name></expr>]</index></name> <operator pos:start="227:44" pos:end="227:44">=</operator> <call pos:start="227:46" pos:end="227:80"><name pos:start="227:46" pos:end="227:63">SB_DITHERING_NOISE</name><argument_list pos:start="227:64" pos:end="227:80">(<argument pos:start="227:65" pos:end="227:66"><expr pos:start="227:65" pos:end="227:66"><name pos:start="227:65" pos:end="227:66">sb</name></expr></argument>,<argument pos:start="227:68" pos:end="227:79"><expr pos:start="227:68" pos:end="227:79"><name pos:start="227:68" pos:end="227:79"><name pos:start="227:68" pos:end="227:68">q</name><operator pos:start="227:69" pos:end="227:70">-&gt;</operator><name pos:start="227:71" pos:end="227:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="231:25" pos:end="231:32"><expr pos:start="231:25" pos:end="231:31"><name pos:start="231:25" pos:end="231:27">run</name> <operator pos:start="231:29" pos:end="231:29">=</operator> <literal type="number" pos:start="231:31" pos:end="231:31">3</literal></expr>;</expr_stmt>

                        <break pos:start="233:25" pos:end="233:30">break;</break>



                    <case pos:start="237:21" pos:end="237:28">case <expr pos:start="237:26" pos:end="237:27"><literal type="number" pos:start="237:26" pos:end="237:27">30</literal></expr>:</case>

                        <if_stmt pos:start="239:25" pos:end="253:77"><if pos:start="239:25" pos:end="251:25">if <condition pos:start="239:28" pos:end="239:51">(<expr pos:start="239:29" pos:end="239:50"><call pos:start="239:29" pos:end="239:45"><name pos:start="239:29" pos:end="239:41">get_bits_left</name><argument_list pos:start="239:42" pos:end="239:45">(<argument pos:start="239:43" pos:end="239:44"><expr pos:start="239:43" pos:end="239:44"><name pos:start="239:43" pos:end="239:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="239:47" pos:end="239:48">&gt;=</operator> <literal type="number" pos:start="239:50" pos:end="239:50">4</literal></expr>)</condition> <block pos:start="239:53" pos:end="251:25">{<block_content pos:start="241:29" pos:end="249:81">

                            <decl_stmt pos:start="241:29" pos:end="241:85"><decl pos:start="241:29" pos:end="241:84"><type pos:start="241:29" pos:end="241:36"><name pos:start="241:29" pos:end="241:36">unsigned</name></type> <name pos:start="241:38" pos:end="241:42">index</name> <init pos:start="241:44" pos:end="241:84">= <expr pos:start="241:46" pos:end="241:84"><call pos:start="241:46" pos:end="241:84"><name pos:start="241:46" pos:end="241:57">qdm2_get_vlc</name><argument_list pos:start="241:58" pos:end="241:84">(<argument pos:start="241:59" pos:end="241:60"><expr pos:start="241:59" pos:end="241:60"><name pos:start="241:59" pos:end="241:60">gb</name></expr></argument>, <argument pos:start="241:63" pos:end="241:77"><expr pos:start="241:63" pos:end="241:77"><operator pos:start="241:63" pos:end="241:63">&amp;</operator><name pos:start="241:64" pos:end="241:77">vlc_tab_type30</name></expr></argument>, <argument pos:start="241:80" pos:end="241:80"><expr pos:start="241:80" pos:end="241:80"><literal type="number" pos:start="241:80" pos:end="241:80">0</literal></expr></argument>, <argument pos:start="241:83" pos:end="241:83"><expr pos:start="241:83" pos:end="241:83"><literal type="number" pos:start="241:83" pos:end="241:83">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="243:29" pos:end="249:81"><if pos:start="243:29" pos:end="247:29">if <condition pos:start="243:32" pos:end="243:71">(<expr pos:start="243:33" pos:end="243:70"><name pos:start="243:33" pos:end="243:37">index</name> <operator pos:start="243:39" pos:end="243:39">&lt;</operator> <call pos:start="243:41" pos:end="243:70"><name pos:start="243:41" pos:end="243:54">FF_ARRAY_ELEMS</name><argument_list pos:start="243:55" pos:end="243:70">(<argument pos:start="243:56" pos:end="243:69"><expr pos:start="243:56" pos:end="243:69"><name pos:start="243:56" pos:end="243:69">type30_dequant</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:73" pos:end="247:29">{<block_content pos:start="245:33" pos:end="245:67">

                                <expr_stmt pos:start="245:33" pos:end="245:67"><expr pos:start="245:33" pos:end="245:66"><name pos:start="245:33" pos:end="245:42"><name pos:start="245:33" pos:end="245:39">samples</name><index pos:start="245:40" pos:end="245:42">[<expr pos:start="245:41" pos:end="245:41"><literal type="number" pos:start="245:41" pos:end="245:41">0</literal></expr>]</index></name> <operator pos:start="245:44" pos:end="245:44">=</operator> <name pos:start="245:46" pos:end="245:66"><name pos:start="245:46" pos:end="245:59">type30_dequant</name><index pos:start="245:60" pos:end="245:66">[<expr pos:start="245:61" pos:end="245:65"><name pos:start="245:61" pos:end="245:65">index</name></expr>]</index></name></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="247:31" pos:end="249:81">else<block type="pseudo" pos:start="249:33" pos:end="249:81"><block_content pos:start="249:33" pos:end="249:81">

                                <expr_stmt pos:start="249:33" pos:end="249:81"><expr pos:start="249:33" pos:end="249:80"><name pos:start="249:33" pos:end="249:42"><name pos:start="249:33" pos:end="249:39">samples</name><index pos:start="249:40" pos:end="249:42">[<expr pos:start="249:41" pos:end="249:41"><literal type="number" pos:start="249:41" pos:end="249:41">0</literal></expr>]</index></name> <operator pos:start="249:44" pos:end="249:44">=</operator> <call pos:start="249:46" pos:end="249:80"><name pos:start="249:46" pos:end="249:63">SB_DITHERING_NOISE</name><argument_list pos:start="249:64" pos:end="249:80">(<argument pos:start="249:65" pos:end="249:66"><expr pos:start="249:65" pos:end="249:66"><name pos:start="249:65" pos:end="249:66">sb</name></expr></argument>,<argument pos:start="249:68" pos:end="249:79"><expr pos:start="249:68" pos:end="249:79"><name pos:start="249:68" pos:end="249:79"><name pos:start="249:68" pos:end="249:68">q</name><operator pos:start="249:69" pos:end="249:70">-&gt;</operator><name pos:start="249:71" pos:end="249:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="251:27" pos:end="253:77">else<block type="pseudo" pos:start="253:29" pos:end="253:77"><block_content pos:start="253:29" pos:end="253:77">

                            <expr_stmt pos:start="253:29" pos:end="253:77"><expr pos:start="253:29" pos:end="253:76"><name pos:start="253:29" pos:end="253:38"><name pos:start="253:29" pos:end="253:35">samples</name><index pos:start="253:36" pos:end="253:38">[<expr pos:start="253:37" pos:end="253:37"><literal type="number" pos:start="253:37" pos:end="253:37">0</literal></expr>]</index></name> <operator pos:start="253:40" pos:end="253:40">=</operator> <call pos:start="253:42" pos:end="253:76"><name pos:start="253:42" pos:end="253:59">SB_DITHERING_NOISE</name><argument_list pos:start="253:60" pos:end="253:76">(<argument pos:start="253:61" pos:end="253:62"><expr pos:start="253:61" pos:end="253:62"><name pos:start="253:61" pos:end="253:62">sb</name></expr></argument>,<argument pos:start="253:64" pos:end="253:75"><expr pos:start="253:64" pos:end="253:75"><name pos:start="253:64" pos:end="253:75"><name pos:start="253:64" pos:end="253:64">q</name><operator pos:start="253:65" pos:end="253:66">-&gt;</operator><name pos:start="253:67" pos:end="253:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                        <expr_stmt pos:start="257:25" pos:end="257:32"><expr pos:start="257:25" pos:end="257:31"><name pos:start="257:25" pos:end="257:27">run</name> <operator pos:start="257:29" pos:end="257:29">=</operator> <literal type="number" pos:start="257:31" pos:end="257:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="259:25" pos:end="259:30">break;</break>



                    <case pos:start="263:21" pos:end="263:28">case <expr pos:start="263:26" pos:end="263:27"><literal type="number" pos:start="263:26" pos:end="263:27">34</literal></expr>:</case>

                        <if_stmt pos:start="265:25" pos:end="297:25"><if pos:start="265:25" pos:end="293:25">if <condition pos:start="265:28" pos:end="265:51">(<expr pos:start="265:29" pos:end="265:50"><call pos:start="265:29" pos:end="265:45"><name pos:start="265:29" pos:end="265:41">get_bits_left</name><argument_list pos:start="265:42" pos:end="265:45">(<argument pos:start="265:43" pos:end="265:44"><expr pos:start="265:43" pos:end="265:44"><name pos:start="265:43" pos:end="265:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="265:47" pos:end="265:48">&gt;=</operator> <literal type="number" pos:start="265:50" pos:end="265:50">7</literal></expr>)</condition> <block pos:start="265:53" pos:end="293:25">{<block_content pos:start="267:29" pos:end="291:29">

                            <if_stmt pos:start="267:29" pos:end="291:29"><if pos:start="267:29" pos:end="277:29">if <condition pos:start="267:32" pos:end="267:45">(<expr pos:start="267:33" pos:end="267:44"><name pos:start="267:33" pos:end="267:44">type34_first</name></expr>)</condition> <block pos:start="267:47" pos:end="277:29">{<block_content pos:start="269:33" pos:end="275:49">

                                <expr_stmt pos:start="269:33" pos:end="269:75"><expr pos:start="269:33" pos:end="269:74"><name pos:start="269:33" pos:end="269:42">type34_div</name> <operator pos:start="269:44" pos:end="269:44">=</operator> <operator pos:start="269:46" pos:end="269:46">(</operator><name pos:start="269:47" pos:end="269:51">float</name><operator pos:start="269:52" pos:end="269:52">)</operator><operator pos:start="269:53" pos:end="269:53">(</operator><literal type="number" pos:start="269:54" pos:end="269:54">1</literal> <operator pos:start="269:56" pos:end="269:57">&lt;&lt;</operator> <call pos:start="269:59" pos:end="269:73"><name pos:start="269:59" pos:end="269:66">get_bits</name><argument_list pos:start="269:67" pos:end="269:73">(<argument pos:start="269:68" pos:end="269:69"><expr pos:start="269:68" pos:end="269:69"><name pos:start="269:68" pos:end="269:69">gb</name></expr></argument>, <argument pos:start="269:72" pos:end="269:72"><expr pos:start="269:72" pos:end="269:72"><literal type="number" pos:start="269:72" pos:end="269:72">2</literal></expr></argument>)</argument_list></call><operator pos:start="269:74" pos:end="269:74">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="271:33" pos:end="271:84"><expr pos:start="271:33" pos:end="271:83"><name pos:start="271:33" pos:end="271:42"><name pos:start="271:33" pos:end="271:39">samples</name><index pos:start="271:40" pos:end="271:42">[<expr pos:start="271:41" pos:end="271:41"><literal type="number" pos:start="271:41" pos:end="271:41">0</literal></expr>]</index></name> <operator pos:start="271:44" pos:end="271:44">=</operator> <operator pos:start="271:46" pos:end="271:46">(</operator><operator pos:start="271:47" pos:end="271:47">(</operator><name pos:start="271:48" pos:end="271:52">float</name><operator pos:start="271:53" pos:end="271:53">)</operator><call pos:start="271:54" pos:end="271:68"><name pos:start="271:54" pos:end="271:61">get_bits</name><argument_list pos:start="271:62" pos:end="271:68">(<argument pos:start="271:63" pos:end="271:64"><expr pos:start="271:63" pos:end="271:64"><name pos:start="271:63" pos:end="271:64">gb</name></expr></argument>, <argument pos:start="271:67" pos:end="271:67"><expr pos:start="271:67" pos:end="271:67"><literal type="number" pos:start="271:67" pos:end="271:67">5</literal></expr></argument>)</argument_list></call> <operator pos:start="271:70" pos:end="271:70">-</operator> <literal type="number" pos:start="271:72" pos:end="271:75">16.0</literal><operator pos:start="271:76" pos:end="271:76">)</operator> <operator pos:start="271:78" pos:end="271:78">/</operator> <literal type="number" pos:start="271:80" pos:end="271:83">15.0</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="273:33" pos:end="273:62"><expr pos:start="273:33" pos:end="273:61"><name pos:start="273:33" pos:end="273:48">type34_predictor</name> <operator pos:start="273:50" pos:end="273:50">=</operator> <name pos:start="273:52" pos:end="273:61"><name pos:start="273:52" pos:end="273:58">samples</name><index pos:start="273:59" pos:end="273:61">[<expr pos:start="273:60" pos:end="273:60"><literal type="number" pos:start="273:60" pos:end="273:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="275:33" pos:end="275:49"><expr pos:start="275:33" pos:end="275:48"><name pos:start="275:33" pos:end="275:44">type34_first</name> <operator pos:start="275:46" pos:end="275:46">=</operator> <literal type="number" pos:start="275:48" pos:end="275:48">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="277:31" pos:end="291:29">else <block pos:start="277:36" pos:end="291:29">{<block_content pos:start="279:33" pos:end="289:85">

                                <decl_stmt pos:start="279:33" pos:end="279:89"><decl pos:start="279:33" pos:end="279:88"><type pos:start="279:33" pos:end="279:40"><name pos:start="279:33" pos:end="279:40">unsigned</name></type> <name pos:start="279:42" pos:end="279:46">index</name> <init pos:start="279:48" pos:end="279:88">= <expr pos:start="279:50" pos:end="279:88"><call pos:start="279:50" pos:end="279:88"><name pos:start="279:50" pos:end="279:61">qdm2_get_vlc</name><argument_list pos:start="279:62" pos:end="279:88">(<argument pos:start="279:63" pos:end="279:64"><expr pos:start="279:63" pos:end="279:64"><name pos:start="279:63" pos:end="279:64">gb</name></expr></argument>, <argument pos:start="279:67" pos:end="279:81"><expr pos:start="279:67" pos:end="279:81"><operator pos:start="279:67" pos:end="279:67">&amp;</operator><name pos:start="279:68" pos:end="279:81">vlc_tab_type34</name></expr></argument>, <argument pos:start="279:84" pos:end="279:84"><expr pos:start="279:84" pos:end="279:84"><literal type="number" pos:start="279:84" pos:end="279:84">0</literal></expr></argument>, <argument pos:start="279:87" pos:end="279:87"><expr pos:start="279:87" pos:end="279:87"><literal type="number" pos:start="279:87" pos:end="279:87">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <if_stmt pos:start="281:33" pos:end="289:85"><if pos:start="281:33" pos:end="287:33">if <condition pos:start="281:36" pos:end="281:73">(<expr pos:start="281:37" pos:end="281:72"><name pos:start="281:37" pos:end="281:41">index</name> <operator pos:start="281:43" pos:end="281:43">&lt;</operator> <call pos:start="281:45" pos:end="281:72"><name pos:start="281:45" pos:end="281:58">FF_ARRAY_ELEMS</name><argument_list pos:start="281:59" pos:end="281:72">(<argument pos:start="281:60" pos:end="281:71"><expr pos:start="281:60" pos:end="281:71"><name pos:start="281:60" pos:end="281:71">type34_delta</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:75" pos:end="287:33">{<block_content pos:start="283:37" pos:end="285:66">

                                    <expr_stmt pos:start="283:37" pos:end="283:101"><expr pos:start="283:37" pos:end="283:100"><name pos:start="283:37" pos:end="283:46"><name pos:start="283:37" pos:end="283:43">samples</name><index pos:start="283:44" pos:end="283:46">[<expr pos:start="283:45" pos:end="283:45"><literal type="number" pos:start="283:45" pos:end="283:45">0</literal></expr>]</index></name> <operator pos:start="283:48" pos:end="283:48">=</operator> <name pos:start="283:50" pos:end="283:68"><name pos:start="283:50" pos:end="283:61">type34_delta</name><index pos:start="283:62" pos:end="283:68">[<expr pos:start="283:63" pos:end="283:67"><name pos:start="283:63" pos:end="283:67">index</name></expr>]</index></name> <operator pos:start="283:70" pos:end="283:70">/</operator> <name pos:start="283:72" pos:end="283:81">type34_div</name> <operator pos:start="283:83" pos:end="283:83">+</operator> <name pos:start="283:85" pos:end="283:100">type34_predictor</name></expr>;</expr_stmt>

                                    <expr_stmt pos:start="285:37" pos:end="285:66"><expr pos:start="285:37" pos:end="285:65"><name pos:start="285:37" pos:end="285:52">type34_predictor</name> <operator pos:start="285:54" pos:end="285:54">=</operator> <name pos:start="285:56" pos:end="285:65"><name pos:start="285:56" pos:end="285:62">samples</name><index pos:start="285:63" pos:end="285:65">[<expr pos:start="285:64" pos:end="285:64"><literal type="number" pos:start="285:64" pos:end="285:64">0</literal></expr>]</index></name></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="287:35" pos:end="289:85">else<block type="pseudo" pos:start="289:37" pos:end="289:85"><block_content pos:start="289:37" pos:end="289:85">

                                    <expr_stmt pos:start="289:37" pos:end="289:85"><expr pos:start="289:37" pos:end="289:84"><name pos:start="289:37" pos:end="289:46"><name pos:start="289:37" pos:end="289:43">samples</name><index pos:start="289:44" pos:end="289:46">[<expr pos:start="289:45" pos:end="289:45"><literal type="number" pos:start="289:45" pos:end="289:45">0</literal></expr>]</index></name> <operator pos:start="289:48" pos:end="289:48">=</operator> <call pos:start="289:50" pos:end="289:84"><name pos:start="289:50" pos:end="289:67">SB_DITHERING_NOISE</name><argument_list pos:start="289:68" pos:end="289:84">(<argument pos:start="289:69" pos:end="289:70"><expr pos:start="289:69" pos:end="289:70"><name pos:start="289:69" pos:end="289:70">sb</name></expr></argument>,<argument pos:start="289:72" pos:end="289:83"><expr pos:start="289:72" pos:end="289:83"><name pos:start="289:72" pos:end="289:83"><name pos:start="289:72" pos:end="289:72">q</name><operator pos:start="289:73" pos:end="289:74">-&gt;</operator><name pos:start="289:75" pos:end="289:83">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="293:27" pos:end="297:25">else <block pos:start="293:32" pos:end="297:25">{<block_content pos:start="295:29" pos:end="295:77">

                            <expr_stmt pos:start="295:29" pos:end="295:77"><expr pos:start="295:29" pos:end="295:76"><name pos:start="295:29" pos:end="295:38"><name pos:start="295:29" pos:end="295:35">samples</name><index pos:start="295:36" pos:end="295:38">[<expr pos:start="295:37" pos:end="295:37"><literal type="number" pos:start="295:37" pos:end="295:37">0</literal></expr>]</index></name> <operator pos:start="295:40" pos:end="295:40">=</operator> <call pos:start="295:42" pos:end="295:76"><name pos:start="295:42" pos:end="295:59">SB_DITHERING_NOISE</name><argument_list pos:start="295:60" pos:end="295:76">(<argument pos:start="295:61" pos:end="295:62"><expr pos:start="295:61" pos:end="295:62"><name pos:start="295:61" pos:end="295:62">sb</name></expr></argument>,<argument pos:start="295:64" pos:end="295:75"><expr pos:start="295:64" pos:end="295:75"><name pos:start="295:64" pos:end="295:75"><name pos:start="295:64" pos:end="295:64">q</name><operator pos:start="295:65" pos:end="295:66">-&gt;</operator><name pos:start="295:67" pos:end="295:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="299:25" pos:end="299:32"><expr pos:start="299:25" pos:end="299:31"><name pos:start="299:25" pos:end="299:27">run</name> <operator pos:start="299:29" pos:end="299:29">=</operator> <literal type="number" pos:start="299:31" pos:end="299:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="301:25" pos:end="301:30">break;</break>



                    <default pos:start="305:21" pos:end="305:28">default:</default>

                        <expr_stmt pos:start="307:25" pos:end="307:73"><expr pos:start="307:25" pos:end="307:72"><name pos:start="307:25" pos:end="307:34"><name pos:start="307:25" pos:end="307:31">samples</name><index pos:start="307:32" pos:end="307:34">[<expr pos:start="307:33" pos:end="307:33"><literal type="number" pos:start="307:33" pos:end="307:33">0</literal></expr>]</index></name> <operator pos:start="307:36" pos:end="307:36">=</operator> <call pos:start="307:38" pos:end="307:72"><name pos:start="307:38" pos:end="307:55">SB_DITHERING_NOISE</name><argument_list pos:start="307:56" pos:end="307:72">(<argument pos:start="307:57" pos:end="307:58"><expr pos:start="307:57" pos:end="307:58"><name pos:start="307:57" pos:end="307:58">sb</name></expr></argument>,<argument pos:start="307:60" pos:end="307:71"><expr pos:start="307:60" pos:end="307:71"><name pos:start="307:60" pos:end="307:71"><name pos:start="307:60" pos:end="307:60">q</name><operator pos:start="307:61" pos:end="307:62">-&gt;</operator><name pos:start="307:63" pos:end="307:71">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="309:25" pos:end="309:32"><expr pos:start="309:25" pos:end="309:31"><name pos:start="309:25" pos:end="309:27">run</name> <operator pos:start="309:29" pos:end="309:29">=</operator> <literal type="number" pos:start="309:31" pos:end="309:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="311:25" pos:end="311:30">break;</break>

                </block_content>}</block></switch>



                <if_stmt pos:start="317:17" pos:end="347:17"><if pos:start="317:17" pos:end="339:17">if <condition pos:start="317:20" pos:end="317:34">(<expr pos:start="317:21" pos:end="317:33"><name pos:start="317:21" pos:end="317:33">joined_stereo</name></expr>)</condition> <block pos:start="317:36" pos:end="339:17">{<block_content pos:start="319:21" pos:end="337:114">

                    <decl_stmt pos:start="319:21" pos:end="319:52"><decl pos:start="319:21" pos:end="319:51"><type pos:start="319:21" pos:end="319:25"><name pos:start="319:21" pos:end="319:25">float</name></type> <name pos:start="319:27" pos:end="319:51"><name pos:start="319:27" pos:end="319:29">tmp</name><index pos:start="319:30" pos:end="319:33">[<expr pos:start="319:31" pos:end="319:32"><literal type="number" pos:start="319:31" pos:end="319:32">10</literal></expr>]</index><index pos:start="319:34" pos:end="319:51">[<expr pos:start="319:35" pos:end="319:50"><name pos:start="319:35" pos:end="319:50">MPA_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



                    <for pos:start="323:21" pos:end="329:21">for <control pos:start="323:25" pos:end="323:45">(<init pos:start="323:26" pos:end="323:31"><expr pos:start="323:26" pos:end="323:30"><name pos:start="323:26" pos:end="323:26">k</name> <operator pos:start="323:28" pos:end="323:28">=</operator> <literal type="number" pos:start="323:30" pos:end="323:30">0</literal></expr>;</init> <condition pos:start="323:33" pos:end="323:40"><expr pos:start="323:33" pos:end="323:39"><name pos:start="323:33" pos:end="323:33">k</name> <operator pos:start="323:35" pos:end="323:35">&lt;</operator> <name pos:start="323:37" pos:end="323:39">run</name></expr>;</condition> <incr pos:start="323:42" pos:end="323:44"><expr pos:start="323:42" pos:end="323:44"><name pos:start="323:42" pos:end="323:42">k</name><operator pos:start="323:43" pos:end="323:44">++</operator></expr></incr>)</control> <block pos:start="323:47" pos:end="329:21">{<block_content pos:start="325:25" pos:end="327:88">

                        <expr_stmt pos:start="325:25" pos:end="325:47"><expr pos:start="325:25" pos:end="325:46"><name pos:start="325:25" pos:end="325:33"><name pos:start="325:25" pos:end="325:27">tmp</name><index pos:start="325:28" pos:end="325:30">[<expr pos:start="325:29" pos:end="325:29"><name pos:start="325:29" pos:end="325:29">k</name></expr>]</index><index pos:start="325:31" pos:end="325:33">[<expr pos:start="325:32" pos:end="325:32"><literal type="number" pos:start="325:32" pos:end="325:32">0</literal></expr>]</index></name> <operator pos:start="325:35" pos:end="325:35">=</operator> <name pos:start="325:37" pos:end="325:46"><name pos:start="325:37" pos:end="325:43">samples</name><index pos:start="325:44" pos:end="325:46">[<expr pos:start="325:45" pos:end="325:45"><name pos:start="325:45" pos:end="325:45">k</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="327:25" pos:end="327:88"><expr pos:start="327:25" pos:end="327:87"><name pos:start="327:25" pos:end="327:33"><name pos:start="327:25" pos:end="327:27">tmp</name><index pos:start="327:28" pos:end="327:30">[<expr pos:start="327:29" pos:end="327:29"><name pos:start="327:29" pos:end="327:29">k</name></expr>]</index><index pos:start="327:31" pos:end="327:33">[<expr pos:start="327:32" pos:end="327:32"><literal type="number" pos:start="327:32" pos:end="327:32">1</literal></expr>]</index></name> <operator pos:start="327:35" pos:end="327:35">=</operator> <ternary pos:start="327:37" pos:end="327:87"><condition pos:start="327:37" pos:end="327:62"><expr pos:start="327:37" pos:end="327:60"><operator pos:start="327:37" pos:end="327:37">(</operator><name pos:start="327:38" pos:end="327:59"><name pos:start="327:38" pos:end="327:46">sign_bits</name><index pos:start="327:47" pos:end="327:59">[<expr pos:start="327:48" pos:end="327:58"><operator pos:start="327:48" pos:end="327:48">(</operator><name pos:start="327:49" pos:end="327:49">j</name> <operator pos:start="327:51" pos:end="327:51">+</operator> <name pos:start="327:53" pos:end="327:53">k</name><operator pos:start="327:54" pos:end="327:54">)</operator> <operator pos:start="327:56" pos:end="327:56">/</operator> <literal type="number" pos:start="327:58" pos:end="327:58">8</literal></expr>]</index></name><operator pos:start="327:60" pos:end="327:60">)</operator></expr> ?</condition><then pos:start="327:64" pos:end="327:74"> <expr pos:start="327:64" pos:end="327:74"><operator pos:start="327:64" pos:end="327:64">-</operator><name pos:start="327:65" pos:end="327:74"><name pos:start="327:65" pos:end="327:71">samples</name><index pos:start="327:72" pos:end="327:74">[<expr pos:start="327:73" pos:end="327:73"><name pos:start="327:73" pos:end="327:73">k</name></expr>]</index></name></expr> </then><else pos:start="327:76" pos:end="327:87">: <expr pos:start="327:78" pos:end="327:87"><name pos:start="327:78" pos:end="327:87"><name pos:start="327:78" pos:end="327:84">samples</name><index pos:start="327:85" pos:end="327:87">[<expr pos:start="327:86" pos:end="327:86"><name pos:start="327:86" pos:end="327:86">k</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <for pos:start="331:21" pos:end="337:114">for <control pos:start="331:25" pos:end="331:62">(<init pos:start="331:26" pos:end="331:33"><expr pos:start="331:26" pos:end="331:32"><name pos:start="331:26" pos:end="331:28">chs</name> <operator pos:start="331:30" pos:end="331:30">=</operator> <literal type="number" pos:start="331:32" pos:end="331:32">0</literal></expr>;</init> <condition pos:start="331:35" pos:end="331:55"><expr pos:start="331:35" pos:end="331:54"><name pos:start="331:35" pos:end="331:37">chs</name> <operator pos:start="331:39" pos:end="331:39">&lt;</operator> <name pos:start="331:41" pos:end="331:54"><name pos:start="331:41" pos:end="331:41">q</name><operator pos:start="331:42" pos:end="331:43">-&gt;</operator><name pos:start="331:44" pos:end="331:54">nb_channels</name></name></expr>;</condition> <incr pos:start="331:57" pos:end="331:61"><expr pos:start="331:57" pos:end="331:61"><name pos:start="331:57" pos:end="331:59">chs</name><operator pos:start="331:60" pos:end="331:61">++</operator></expr></incr>)</control><block type="pseudo" pos:start="333:25" pos:end="337:114"><block_content pos:start="333:25" pos:end="337:114">

                        <for pos:start="333:25" pos:end="337:114">for <control pos:start="333:29" pos:end="333:49">(<init pos:start="333:30" pos:end="333:35"><expr pos:start="333:30" pos:end="333:34"><name pos:start="333:30" pos:end="333:30">k</name> <operator pos:start="333:32" pos:end="333:32">=</operator> <literal type="number" pos:start="333:34" pos:end="333:34">0</literal></expr>;</init> <condition pos:start="333:37" pos:end="333:44"><expr pos:start="333:37" pos:end="333:43"><name pos:start="333:37" pos:end="333:37">k</name> <operator pos:start="333:39" pos:end="333:39">&lt;</operator> <name pos:start="333:41" pos:end="333:43">run</name></expr>;</condition> <incr pos:start="333:46" pos:end="333:48"><expr pos:start="333:46" pos:end="333:48"><name pos:start="333:46" pos:end="333:46">k</name><operator pos:start="333:47" pos:end="333:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="335:29" pos:end="337:114"><block_content pos:start="335:29" pos:end="337:114">

                            <if_stmt pos:start="335:29" pos:end="337:114"><if pos:start="335:29" pos:end="337:114">if <condition pos:start="335:32" pos:end="335:46">(<expr pos:start="335:33" pos:end="335:45"><operator pos:start="335:33" pos:end="335:33">(</operator><name pos:start="335:34" pos:end="335:34">j</name> <operator pos:start="335:36" pos:end="335:36">+</operator> <name pos:start="335:38" pos:end="335:38">k</name><operator pos:start="335:39" pos:end="335:39">)</operator> <operator pos:start="335:41" pos:end="335:41">&lt;</operator> <literal type="number" pos:start="335:43" pos:end="335:45">128</literal></expr>)</condition><block type="pseudo" pos:start="337:33" pos:end="337:114"><block_content pos:start="337:33" pos:end="337:114">

                                <expr_stmt pos:start="337:33" pos:end="337:114"><expr pos:start="337:33" pos:end="337:113"><name pos:start="337:33" pos:end="337:61"><name pos:start="337:33" pos:end="337:33">q</name><operator pos:start="337:34" pos:end="337:35">-&gt;</operator><name pos:start="337:36" pos:end="337:45">sb_samples</name><index pos:start="337:46" pos:end="337:50">[<expr pos:start="337:47" pos:end="337:49"><name pos:start="337:47" pos:end="337:49">chs</name></expr>]</index><index pos:start="337:51" pos:end="337:57">[<expr pos:start="337:52" pos:end="337:56"><name pos:start="337:52" pos:end="337:52">j</name> <operator pos:start="337:54" pos:end="337:54">+</operator> <name pos:start="337:56" pos:end="337:56">k</name></expr>]</index><index pos:start="337:58" pos:end="337:61">[<expr pos:start="337:59" pos:end="337:60"><name pos:start="337:59" pos:end="337:60">sb</name></expr>]</index></name> <operator pos:start="337:63" pos:end="337:63">=</operator> <name pos:start="337:65" pos:end="337:99"><name pos:start="337:65" pos:end="337:65">q</name><operator pos:start="337:66" pos:end="337:67">-&gt;</operator><name pos:start="337:68" pos:end="337:77">tone_level</name><index pos:start="337:78" pos:end="337:82">[<expr pos:start="337:79" pos:end="337:81"><name pos:start="337:79" pos:end="337:81">chs</name></expr>]</index><index pos:start="337:83" pos:end="337:86">[<expr pos:start="337:84" pos:end="337:85"><name pos:start="337:84" pos:end="337:85">sb</name></expr>]</index><index pos:start="337:87" pos:end="337:99">[<expr pos:start="337:88" pos:end="337:98"><operator pos:start="337:88" pos:end="337:88">(</operator><operator pos:start="337:89" pos:end="337:89">(</operator><name pos:start="337:90" pos:end="337:90">j</name> <operator pos:start="337:92" pos:end="337:92">+</operator> <name pos:start="337:94" pos:end="337:94">k</name><operator pos:start="337:95" pos:end="337:95">)</operator><operator pos:start="337:96" pos:end="337:96">/</operator><literal type="number" pos:start="337:97" pos:end="337:97">2</literal><operator pos:start="337:98" pos:end="337:98">)</operator></expr>]</index></name> <operator pos:start="337:101" pos:end="337:101">*</operator> <name pos:start="337:103" pos:end="337:113"><name pos:start="337:103" pos:end="337:105">tmp</name><index pos:start="337:106" pos:end="337:108">[<expr pos:start="337:107" pos:end="337:107"><name pos:start="337:107" pos:end="337:107">k</name></expr>]</index><index pos:start="337:109" pos:end="337:113">[<expr pos:start="337:110" pos:end="337:112"><name pos:start="337:110" pos:end="337:112">chs</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

                </block_content>}</block></if> <else pos:start="339:19" pos:end="347:17">else <block pos:start="339:24" pos:end="347:17">{<block_content pos:start="341:21" pos:end="345:105">

                    <for pos:start="341:21" pos:end="345:105">for <control pos:start="341:25" pos:end="341:45">(<init pos:start="341:26" pos:end="341:31"><expr pos:start="341:26" pos:end="341:30"><name pos:start="341:26" pos:end="341:26">k</name> <operator pos:start="341:28" pos:end="341:28">=</operator> <literal type="number" pos:start="341:30" pos:end="341:30">0</literal></expr>;</init> <condition pos:start="341:33" pos:end="341:40"><expr pos:start="341:33" pos:end="341:39"><name pos:start="341:33" pos:end="341:33">k</name> <operator pos:start="341:35" pos:end="341:35">&lt;</operator> <name pos:start="341:37" pos:end="341:39">run</name></expr>;</condition> <incr pos:start="341:42" pos:end="341:44"><expr pos:start="341:42" pos:end="341:44"><name pos:start="341:42" pos:end="341:42">k</name><operator pos:start="341:43" pos:end="341:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="343:25" pos:end="345:105"><block_content pos:start="343:25" pos:end="345:105">

                        <if_stmt pos:start="343:25" pos:end="345:105"><if pos:start="343:25" pos:end="345:105">if <condition pos:start="343:28" pos:end="343:42">(<expr pos:start="343:29" pos:end="343:41"><operator pos:start="343:29" pos:end="343:29">(</operator><name pos:start="343:30" pos:end="343:30">j</name> <operator pos:start="343:32" pos:end="343:32">+</operator> <name pos:start="343:34" pos:end="343:34">k</name><operator pos:start="343:35" pos:end="343:35">)</operator> <operator pos:start="343:37" pos:end="343:37">&lt;</operator> <literal type="number" pos:start="343:39" pos:end="343:41">128</literal></expr>)</condition><block type="pseudo" pos:start="345:29" pos:end="345:105"><block_content pos:start="345:29" pos:end="345:105">

                            <expr_stmt pos:start="345:29" pos:end="345:105"><expr pos:start="345:29" pos:end="345:104"><name pos:start="345:29" pos:end="345:56"><name pos:start="345:29" pos:end="345:29">q</name><operator pos:start="345:30" pos:end="345:31">-&gt;</operator><name pos:start="345:32" pos:end="345:41">sb_samples</name><index pos:start="345:42" pos:end="345:45">[<expr pos:start="345:43" pos:end="345:44"><name pos:start="345:43" pos:end="345:44">ch</name></expr>]</index><index pos:start="345:46" pos:end="345:52">[<expr pos:start="345:47" pos:end="345:51"><name pos:start="345:47" pos:end="345:47">j</name> <operator pos:start="345:49" pos:end="345:49">+</operator> <name pos:start="345:51" pos:end="345:51">k</name></expr>]</index><index pos:start="345:53" pos:end="345:56">[<expr pos:start="345:54" pos:end="345:55"><name pos:start="345:54" pos:end="345:55">sb</name></expr>]</index></name> <operator pos:start="345:58" pos:end="345:58">=</operator> <name pos:start="345:60" pos:end="345:91"><name pos:start="345:60" pos:end="345:60">q</name><operator pos:start="345:61" pos:end="345:62">-&gt;</operator><name pos:start="345:63" pos:end="345:72">tone_level</name><index pos:start="345:73" pos:end="345:76">[<expr pos:start="345:74" pos:end="345:75"><name pos:start="345:74" pos:end="345:75">ch</name></expr>]</index><index pos:start="345:77" pos:end="345:80">[<expr pos:start="345:78" pos:end="345:79"><name pos:start="345:78" pos:end="345:79">sb</name></expr>]</index><index pos:start="345:81" pos:end="345:91">[<expr pos:start="345:82" pos:end="345:90"><operator pos:start="345:82" pos:end="345:82">(</operator><name pos:start="345:83" pos:end="345:83">j</name> <operator pos:start="345:85" pos:end="345:85">+</operator> <name pos:start="345:87" pos:end="345:87">k</name><operator pos:start="345:88" pos:end="345:88">)</operator><operator pos:start="345:89" pos:end="345:89">/</operator><literal type="number" pos:start="345:90" pos:end="345:90">2</literal></expr>]</index></name> <operator pos:start="345:93" pos:end="345:93">*</operator> <name pos:start="345:95" pos:end="345:104"><name pos:start="345:95" pos:end="345:101">samples</name><index pos:start="345:102" pos:end="345:104">[<expr pos:start="345:103" pos:end="345:103"><name pos:start="345:103" pos:end="345:103">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="351:17" pos:end="351:25"><expr pos:start="351:17" pos:end="351:24"><name pos:start="351:17" pos:end="351:17">j</name> <operator pos:start="351:19" pos:end="351:20">+=</operator> <name pos:start="351:22" pos:end="351:24">run</name></expr>;</expr_stmt>

            </block_content>}</block></for> <comment type="line" pos:start="353:15" pos:end="353:23">// j loop</comment>

        </block_content>}</block></for> <comment type="line" pos:start="355:11" pos:end="355:25">// channel loop</comment>

    </block_content>}</block></for> <comment type="line" pos:start="357:7" pos:end="357:21">// subband loop</comment>

</block_content>}</block></function>
</unit>
