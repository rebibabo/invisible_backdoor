<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14382.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:31">rcu_read_perf_test</name><parameter_list pos:start="1:32" pos:end="1:42">(<parameter pos:start="1:33" pos:end="1:41"><decl pos:start="1:33" pos:end="1:41"><type pos:start="1:33" pos:end="1:38"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:8">long</name> <name pos:start="7:10" pos:end="7:13">long</name></type> <name pos:start="7:15" pos:end="7:27">n_reads_local</name> <init pos:start="7:29" pos:end="7:31">= <expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:26"><expr pos:start="11:5" pos:end="11:25"><call pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">rcu_register_thread</name><argument_list pos:start="11:24" pos:end="11:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><operator pos:start="15:5" pos:end="15:5">*</operator><operator pos:start="15:6" pos:end="15:6">(</operator>struct <name pos:start="15:14" pos:end="15:28">rcu_reader_data</name> <operator pos:start="15:30" pos:end="15:30">*</operator><operator pos:start="15:31" pos:end="15:31">*</operator><operator pos:start="15:32" pos:end="15:32">)</operator><name pos:start="15:33" pos:end="15:35">arg</name> <operator pos:start="15:37" pos:end="15:37">=</operator> <operator pos:start="15:39" pos:end="15:39">&amp;</operator><name pos:start="15:40" pos:end="15:49">rcu_reader</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><call pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:14">atomic_inc</name><argument_list pos:start="17:15" pos:end="17:32">(<argument pos:start="17:16" pos:end="17:31"><expr pos:start="17:16" pos:end="17:31"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:31">nthreadsrunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="23:5">while <condition pos:start="19:11" pos:end="19:33">(<expr pos:start="19:12" pos:end="19:32"><name pos:start="19:12" pos:end="19:17">goflag</name> <operator pos:start="19:19" pos:end="19:20">==</operator> <name pos:start="19:22" pos:end="19:32">GOFLAG_INIT</name></expr>)</condition> <block pos:start="19:35" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><call pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:16">g_usleep</name><argument_list pos:start="21:17" pos:end="21:22">(<argument pos:start="21:18" pos:end="21:21"><expr pos:start="21:18" pos:end="21:21"><literal type="number" pos:start="21:18" pos:end="21:21">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="25:5" pos:end="37:5">while <condition pos:start="25:11" pos:end="25:32">(<expr pos:start="25:12" pos:end="25:31"><name pos:start="25:12" pos:end="25:17">goflag</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:31">GOFLAG_RUN</name></expr>)</condition> <block pos:start="25:34" pos:end="37:5">{<block_content pos:start="27:9" pos:end="35:38">

        <for pos:start="27:9" pos:end="33:9">for <control pos:start="27:13" pos:end="27:42">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:37"><expr pos:start="27:21" pos:end="27:36"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:36">RCU_READ_RUN</name></expr>;</condition> <incr pos:start="27:39" pos:end="27:41"><expr pos:start="27:39" pos:end="27:41"><name pos:start="27:39" pos:end="27:39">i</name><operator pos:start="27:40" pos:end="27:41">++</operator></expr></incr>)</control> <block pos:start="27:44" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:30">

            <expr_stmt pos:start="29:13" pos:end="29:28"><expr pos:start="29:13" pos:end="29:27"><call pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:25">rcu_read_lock</name><argument_list pos:start="29:26" pos:end="29:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:30"><expr pos:start="31:13" pos:end="31:29"><call pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:27">rcu_read_unlock</name><argument_list pos:start="31:28" pos:end="31:29">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:21">n_reads_local</name> <operator pos:start="35:23" pos:end="35:24">+=</operator> <name pos:start="35:26" pos:end="35:37">RCU_READ_RUN</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="39:5" pos:end="39:40"><expr pos:start="39:5" pos:end="39:39"><call pos:start="39:5" pos:end="39:39"><name pos:start="39:5" pos:end="39:14">atomic_add</name><argument_list pos:start="39:15" pos:end="39:39">(<argument pos:start="39:16" pos:end="39:23"><expr pos:start="39:16" pos:end="39:23"><operator pos:start="39:16" pos:end="39:16">&amp;</operator><name pos:start="39:17" pos:end="39:23">n_reads</name></expr></argument>, <argument pos:start="39:26" pos:end="39:38"><expr pos:start="39:26" pos:end="39:38"><name pos:start="39:26" pos:end="39:38">n_reads_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><call pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:25">rcu_unregister_thread</name><argument_list pos:start="43:26" pos:end="43:27">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:16">return <expr pos:start="45:12" pos:end="45:15"><name pos:start="45:12" pos:end="45:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
