<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25304.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:41"><name pos:start="1:1" pos:end="1:14">milkymist_init</name><argument_list pos:start="1:15" pos:end="1:41">(<argument pos:start="1:16" pos:end="1:40">QEMUMachineInitArgs *args</argument>)</argument_list></macro>
<block pos:start="2:1" pos:end="95:52">{<block_content pos:start="3:5" pos:end="95:52">
    <decl_stmt pos:start="3:5" pos:end="3:44"><decl pos:start="3:5" pos:end="3:43"><type pos:start="3:5" pos:end="3:16"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:14">char</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:25">cpu_model</name> <init pos:start="3:27" pos:end="3:43">= <expr pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:32">args</name><operator pos:start="3:33" pos:end="3:34">-&gt;</operator><name pos:start="3:35" pos:end="3:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:56"><decl pos:start="4:5" pos:end="4:55"><type pos:start="4:5" pos:end="4:16"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:14">char</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:31">kernel_filename</name> <init pos:start="4:33" pos:end="4:55">= <expr pos:start="4:35" pos:end="4:55"><name pos:start="4:35" pos:end="4:55"><name pos:start="4:35" pos:end="4:38">args</name><operator pos:start="4:39" pos:end="4:40">-&gt;</operator><name pos:start="4:41" pos:end="4:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:30">kernel_cmdline</name> <init pos:start="5:32" pos:end="5:53">= <expr pos:start="5:34" pos:end="5:53"><name pos:start="5:34" pos:end="5:53"><name pos:start="5:34" pos:end="5:37">args</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:56"><decl pos:start="6:5" pos:end="6:55"><type pos:start="6:5" pos:end="6:16"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:14">char</name> <modifier pos:start="6:16" pos:end="6:16">*</modifier></type><name pos:start="6:17" pos:end="6:31">initrd_filename</name> <init pos:start="6:33" pos:end="6:55">= <expr pos:start="6:35" pos:end="6:55"><name pos:start="6:35" pos:end="6:55"><name pos:start="6:35" pos:end="6:38">args</name><operator pos:start="6:39" pos:end="6:40">-&gt;</operator><name pos:start="6:41" pos:end="6:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">LM32CPU</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">cpu</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:22"><decl pos:start="8:5" pos:end="8:21"><type pos:start="8:5" pos:end="8:18"><name pos:start="8:5" pos:end="8:16">CPULM32State</name> <modifier pos:start="8:18" pos:end="8:18">*</modifier></type><name pos:start="8:19" pos:end="8:21">env</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">kernel_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:21"><decl pos:start="10:5" pos:end="10:20"><type pos:start="10:5" pos:end="10:15"><name pos:start="10:5" pos:end="10:13">DriveInfo</name> <modifier pos:start="10:15" pos:end="10:15">*</modifier></type><name pos:start="10:16" pos:end="10:20">dinfo</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:35">address_space_mem</name> <init pos:start="11:37" pos:end="11:57">= <expr pos:start="11:39" pos:end="11:57"><call pos:start="11:39" pos:end="11:57"><name pos:start="11:39" pos:end="11:55">get_system_memory</name><argument_list pos:start="11:56" pos:end="11:57">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:54"><decl pos:start="12:5" pos:end="12:53"><type pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:16">MemoryRegion</name> <modifier pos:start="12:18" pos:end="12:18">*</modifier></type><name pos:start="12:19" pos:end="12:28">phys_sdram</name> <init pos:start="12:30" pos:end="12:53">= <expr pos:start="12:32" pos:end="12:53"><call pos:start="12:32" pos:end="12:53"><name pos:start="12:32" pos:end="12:36">g_new</name><argument_list pos:start="12:37" pos:end="12:53">(<argument pos:start="12:38" pos:end="12:49"><expr pos:start="12:38" pos:end="12:49"><name pos:start="12:38" pos:end="12:49">MemoryRegion</name></expr></argument>, <argument pos:start="12:52" pos:end="12:52"><expr pos:start="12:52" pos:end="12:52"><literal type="number" pos:start="12:52" pos:end="12:52">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">qemu_irq</name></type> <name pos:start="13:14" pos:end="13:20"><name pos:start="13:14" pos:end="13:16">irq</name><index pos:start="13:17" pos:end="13:20">[<expr pos:start="13:18" pos:end="13:19"><literal type="number" pos:start="13:18" pos:end="13:19">32</literal></expr>]</index></name></decl>, <decl pos:start="13:23" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:12"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:30">cpu_irq</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:10"><decl pos:start="14:5" pos:end="14:9"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:23">bios_filename</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:26"><decl pos:start="16:5" pos:end="16:25"><type pos:start="16:5" pos:end="16:15"><name pos:start="16:5" pos:end="16:13">ResetInfo</name> <modifier pos:start="16:15" pos:end="16:15">*</modifier></type><name pos:start="16:16" pos:end="16:25">reset_info</name></decl>;</decl_stmt>
    <comment type="block" pos:start="17:5" pos:end="17:20">/* memory map */</comment>
    <decl_stmt pos:start="18:5" pos:end="18:37"><decl pos:start="18:5" pos:end="18:36"><type pos:start="18:5" pos:end="18:10"><name pos:start="18:5" pos:end="18:10">hwaddr</name></type> <name pos:start="18:12" pos:end="18:21">flash_base</name>   <init pos:start="18:25" pos:end="18:36">= <expr pos:start="18:27" pos:end="18:36"><literal type="number" pos:start="18:27" pos:end="18:36">0x00000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:49"><decl pos:start="19:5" pos:end="19:48"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:28">flash_sector_size</name>        <init pos:start="19:37" pos:end="19:48">= <expr pos:start="19:39" pos:end="19:48"><literal type="number" pos:start="19:39" pos:end="19:41">128</literal> <operator pos:start="19:43" pos:end="19:43">*</operator> <literal type="number" pos:start="19:45" pos:end="19:48">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="20:5" pos:end="20:55"><decl pos:start="20:5" pos:end="20:54"><type pos:start="20:5" pos:end="20:10"><name pos:start="20:5" pos:end="20:10">size_t</name></type> <name pos:start="20:12" pos:end="20:21">flash_size</name>               <init pos:start="20:37" pos:end="20:54">= <expr pos:start="20:39" pos:end="20:54"><literal type="number" pos:start="20:39" pos:end="20:40">32</literal> <operator pos:start="20:42" pos:end="20:42">*</operator> <literal type="number" pos:start="20:44" pos:end="20:47">1024</literal> <operator pos:start="20:49" pos:end="20:49">*</operator> <literal type="number" pos:start="20:51" pos:end="20:54">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">hwaddr</name></type> <name pos:start="21:12" pos:end="21:21">sdram_base</name>   <init pos:start="21:25" pos:end="21:36">= <expr pos:start="21:27" pos:end="21:36"><literal type="number" pos:start="21:27" pos:end="21:36">0x40000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:56"><decl pos:start="22:5" pos:end="22:55"><type pos:start="22:5" pos:end="22:10"><name pos:start="22:5" pos:end="22:10">size_t</name></type> <name pos:start="22:12" pos:end="22:21">sdram_size</name>               <init pos:start="22:37" pos:end="22:55">= <expr pos:start="22:39" pos:end="22:55"><literal type="number" pos:start="22:39" pos:end="22:41">128</literal> <operator pos:start="22:43" pos:end="22:43">*</operator> <literal type="number" pos:start="22:45" pos:end="22:48">1024</literal> <operator pos:start="22:50" pos:end="22:50">*</operator> <literal type="number" pos:start="22:52" pos:end="22:55">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="23:5" pos:end="23:49"><decl pos:start="23:5" pos:end="23:48"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">hwaddr</name></type> <name pos:start="23:12" pos:end="23:22">initrd_base</name>  <init pos:start="23:25" pos:end="23:48">= <expr pos:start="23:27" pos:end="23:48"><name pos:start="23:27" pos:end="23:36">sdram_base</name> <operator pos:start="23:38" pos:end="23:38">+</operator> <literal type="number" pos:start="23:40" pos:end="23:48">0x1002000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="24:5" pos:end="24:49"><decl pos:start="24:5" pos:end="24:48"><type pos:start="24:5" pos:end="24:10"><name pos:start="24:5" pos:end="24:10">hwaddr</name></type> <name pos:start="24:12" pos:end="24:23">cmdline_base</name> <init pos:start="24:25" pos:end="24:48">= <expr pos:start="24:27" pos:end="24:48"><name pos:start="24:27" pos:end="24:36">sdram_base</name> <operator pos:start="24:38" pos:end="24:38">+</operator> <literal type="number" pos:start="24:40" pos:end="24:48">0x1000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:21">initrd_max</name> <init pos:start="25:23" pos:end="25:46">= <expr pos:start="25:25" pos:end="25:46"><name pos:start="25:25" pos:end="25:34">sdram_size</name> <operator pos:start="25:36" pos:end="25:36">-</operator> <literal type="number" pos:start="25:38" pos:end="25:46">0x1002000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:46"><expr pos:start="26:5" pos:end="26:45"><name pos:start="26:5" pos:end="26:14">reset_info</name> <operator pos:start="26:16" pos:end="26:16">=</operator> <call pos:start="26:18" pos:end="26:45"><name pos:start="26:18" pos:end="26:26">g_malloc0</name><argument_list pos:start="26:27" pos:end="26:45">(<argument pos:start="26:28" pos:end="26:44"><expr pos:start="26:28" pos:end="26:44"><sizeof pos:start="26:28" pos:end="26:44">sizeof<argument_list pos:start="26:34" pos:end="26:44">(<argument pos:start="26:35" pos:end="26:43"><expr pos:start="26:35" pos:end="26:43"><name pos:start="26:35" pos:end="26:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="95:52"><if pos:start="27:5" pos:end="95:52">if <condition pos:start="27:8" pos:end="27:26">(<expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:25">NULL</name></expr>)</condition> <block pos:start="27:28" pos:end="95:52">{<block_content pos:start="28:9" pos:end="95:52">
        <expr_stmt pos:start="28:9" pos:end="28:32"><expr pos:start="28:9" pos:end="28:31"><name pos:start="28:9" pos:end="28:17">cpu_model</name> <operator pos:start="28:19" pos:end="28:19">=</operator> <literal type="string" pos:start="28:21" pos:end="28:31">"lm32-full"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:7">cpu</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:34"><name pos:start="29:11" pos:end="29:23">cpu_lm32_init</name><argument_list pos:start="29:24" pos:end="29:34">(<argument pos:start="29:25" pos:end="29:33"><expr pos:start="29:25" pos:end="29:33"><name pos:start="29:25" pos:end="29:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:20"><expr pos:start="30:5" pos:end="30:19"><name pos:start="30:5" pos:end="30:7">env</name> <operator pos:start="30:9" pos:end="30:9">=</operator> <operator pos:start="30:11" pos:end="30:11">&amp;</operator><name pos:start="30:12" pos:end="30:19"><name pos:start="30:12" pos:end="30:14">cpu</name><operator pos:start="30:15" pos:end="30:16">-&gt;</operator><name pos:start="30:17" pos:end="30:19">env</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:14">reset_info</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:19">cpu</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:25">cpu</name></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:41"><expr pos:start="32:5" pos:end="32:40"><call pos:start="32:5" pos:end="32:40"><name pos:start="32:5" pos:end="32:32">cpu_lm32_set_phys_msb_ignore</name><argument_list pos:start="32:33" pos:end="32:40">(<argument pos:start="32:34" pos:end="32:36"><expr pos:start="32:34" pos:end="32:36"><name pos:start="32:34" pos:end="32:36">env</name></expr></argument>, <argument pos:start="32:39" pos:end="32:39"><expr pos:start="32:39" pos:end="32:39"><literal type="number" pos:start="32:39" pos:end="32:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:76"><expr pos:start="33:5" pos:end="33:75"><call pos:start="33:5" pos:end="33:75"><name pos:start="33:5" pos:end="33:26">memory_region_init_ram</name><argument_list pos:start="33:27" pos:end="33:75">(<argument pos:start="33:28" pos:end="33:37"><expr pos:start="33:28" pos:end="33:37"><name pos:start="33:28" pos:end="33:37">phys_sdram</name></expr></argument>, <argument pos:start="33:40" pos:end="33:43"><expr pos:start="33:40" pos:end="33:43"><name pos:start="33:40" pos:end="33:43">NULL</name></expr></argument>, <argument pos:start="33:46" pos:end="33:62"><expr pos:start="33:46" pos:end="33:62"><literal type="string" pos:start="33:46" pos:end="33:62">"milkymist.sdram"</literal></expr></argument>, <argument pos:start="33:65" pos:end="33:74"><expr pos:start="33:65" pos:end="33:74"><name pos:start="33:65" pos:end="33:74">sdram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:44"><expr pos:start="34:5" pos:end="34:43"><call pos:start="34:5" pos:end="34:43"><name pos:start="34:5" pos:end="34:31">vmstate_register_ram_global</name><argument_list pos:start="34:32" pos:end="34:43">(<argument pos:start="34:33" pos:end="34:42"><expr pos:start="34:33" pos:end="34:42"><name pos:start="34:33" pos:end="34:42">phys_sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:75"><expr pos:start="35:5" pos:end="35:74"><call pos:start="35:5" pos:end="35:74"><name pos:start="35:5" pos:end="35:31">memory_region_add_subregion</name><argument_list pos:start="35:32" pos:end="35:74">(<argument pos:start="35:33" pos:end="35:49"><expr pos:start="35:33" pos:end="35:49"><name pos:start="35:33" pos:end="35:49">address_space_mem</name></expr></argument>, <argument pos:start="35:52" pos:end="35:61"><expr pos:start="35:52" pos:end="35:61"><name pos:start="35:52" pos:end="35:61">sdram_base</name></expr></argument>, <argument pos:start="35:64" pos:end="35:73"><expr pos:start="35:64" pos:end="35:73"><name pos:start="35:64" pos:end="35:73">phys_sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:39"><expr pos:start="36:5" pos:end="36:38"><name pos:start="36:5" pos:end="36:9">dinfo</name> <operator pos:start="36:11" pos:end="36:11">=</operator> <call pos:start="36:13" pos:end="36:38"><name pos:start="36:13" pos:end="36:21">drive_get</name><argument_list pos:start="36:22" pos:end="36:38">(<argument pos:start="36:23" pos:end="36:31"><expr pos:start="36:23" pos:end="36:31"><name pos:start="36:23" pos:end="36:31">IF_PFLASH</name></expr></argument>, <argument pos:start="36:34" pos:end="36:34"><expr pos:start="36:34" pos:end="36:34"><literal type="number" pos:start="36:34" pos:end="36:34">0</literal></expr></argument>, <argument pos:start="36:37" pos:end="36:37"><expr pos:start="36:37" pos:end="36:37"><literal type="number" pos:start="36:37" pos:end="36:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="37:5" pos:end="37:32">/* Numonyx JS28F256J3F105 */</comment>
    <expr_stmt pos:start="38:5" pos:end="41:53"><expr pos:start="38:5" pos:end="41:52"><call pos:start="38:5" pos:end="41:52"><name pos:start="38:5" pos:end="38:25">pflash_cfi01_register</name><argument_list pos:start="38:26" pos:end="41:52">(<argument pos:start="38:27" pos:end="38:36"><expr pos:start="38:27" pos:end="38:36"><name pos:start="38:27" pos:end="38:36">flash_base</name></expr></argument>, <argument pos:start="38:39" pos:end="38:42"><expr pos:start="38:39" pos:end="38:42"><name pos:start="38:39" pos:end="38:42">NULL</name></expr></argument>, <argument pos:start="38:45" pos:end="38:61"><expr pos:start="38:45" pos:end="38:61"><literal type="string" pos:start="38:45" pos:end="38:61">"milkymist.flash"</literal></expr></argument>, <argument pos:start="38:64" pos:end="38:73"><expr pos:start="38:64" pos:end="38:73"><name pos:start="38:64" pos:end="38:73">flash_size</name></expr></argument>,
                          <argument pos:start="39:27" pos:end="39:52"><expr pos:start="39:27" pos:end="39:52"><ternary pos:start="39:27" pos:end="39:52"><condition pos:start="39:27" pos:end="39:33"><expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">dinfo</name></expr> ?</condition><then pos:start="39:35" pos:end="39:45"> <expr pos:start="39:35" pos:end="39:45"><name pos:start="39:35" pos:end="39:45"><name pos:start="39:35" pos:end="39:39">dinfo</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:45">bdrv</name></name></expr> </then><else pos:start="39:47" pos:end="39:52">: <expr pos:start="39:49" pos:end="39:52"><name pos:start="39:49" pos:end="39:52">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="39:55" pos:end="39:71"><expr pos:start="39:55" pos:end="39:71"><name pos:start="39:55" pos:end="39:71">flash_sector_size</name></expr></argument>,
                          <argument pos:start="40:27" pos:end="40:56"><expr pos:start="40:27" pos:end="40:56"><name pos:start="40:27" pos:end="40:36">flash_size</name> <operator pos:start="40:38" pos:end="40:38">/</operator> <name pos:start="40:40" pos:end="40:56">flash_sector_size</name></expr></argument>, <argument pos:start="40:59" pos:end="40:59"><expr pos:start="40:59" pos:end="40:59"><literal type="number" pos:start="40:59" pos:end="40:59">2</literal></expr></argument>,
                          <argument pos:start="41:27" pos:end="41:30"><expr pos:start="41:27" pos:end="41:30"><literal type="number" pos:start="41:27" pos:end="41:30">0x00</literal></expr></argument>, <argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><literal type="number" pos:start="41:33" pos:end="41:36">0x89</literal></expr></argument>, <argument pos:start="41:39" pos:end="41:42"><expr pos:start="41:39" pos:end="41:42"><literal type="number" pos:start="41:39" pos:end="41:42">0x00</literal></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><literal type="number" pos:start="41:45" pos:end="41:48">0x1d</literal></expr></argument>, <argument pos:start="41:51" pos:end="41:51"><expr pos:start="41:51" pos:end="41:51"><literal type="number" pos:start="41:51" pos:end="41:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="42:5" pos:end="42:26">/* create irq lines */</comment>
    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:11">cpu_irq</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:57"><name pos:start="43:15" pos:end="43:32">qemu_allocate_irqs</name><argument_list pos:start="43:33" pos:end="43:57">(<argument pos:start="43:34" pos:end="43:48"><expr pos:start="43:34" pos:end="43:48"><name pos:start="43:34" pos:end="43:48">cpu_irq_handler</name></expr></argument>, <argument pos:start="43:51" pos:end="43:53"><expr pos:start="43:51" pos:end="43:53"><name pos:start="43:51" pos:end="43:53">cpu</name></expr></argument>, <argument pos:start="43:56" pos:end="43:56"><expr pos:start="43:56" pos:end="43:56"><literal type="number" pos:start="43:56" pos:end="43:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:45"><expr pos:start="44:5" pos:end="44:44"><name pos:start="44:5" pos:end="44:18"><name pos:start="44:5" pos:end="44:7">env</name><operator pos:start="44:8" pos:end="44:9">-&gt;</operator><name pos:start="44:10" pos:end="44:18">pic_state</name></name> <operator pos:start="44:20" pos:end="44:20">=</operator> <call pos:start="44:22" pos:end="44:44"><name pos:start="44:22" pos:end="44:34">lm32_pic_init</name><argument_list pos:start="44:35" pos:end="44:44">(<argument pos:start="44:36" pos:end="44:43"><expr pos:start="44:36" pos:end="44:43"><operator pos:start="44:36" pos:end="44:36">*</operator><name pos:start="44:37" pos:end="44:43">cpu_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="45:5" pos:end="95:52">for <control pos:start="45:9" pos:end="45:28">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:23"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <literal type="number" pos:start="45:21" pos:end="45:22">32</literal></expr>;</condition> <incr pos:start="45:25" pos:end="45:27"><expr pos:start="45:25" pos:end="45:27"><name pos:start="45:25" pos:end="45:25">i</name><operator pos:start="45:26" pos:end="45:27">++</operator></expr></incr>)</control> <block pos:start="45:30" pos:end="95:52">{<block_content pos:start="46:9" pos:end="95:52">
        <expr_stmt pos:start="46:9" pos:end="46:53"><expr pos:start="46:9" pos:end="46:52"><name pos:start="46:9" pos:end="46:14"><name pos:start="46:9" pos:end="46:11">irq</name><index pos:start="46:12" pos:end="46:14">[<expr pos:start="46:13" pos:end="46:13"><name pos:start="46:13" pos:end="46:13">i</name></expr>]</index></name> <operator pos:start="46:16" pos:end="46:16">=</operator> <call pos:start="46:18" pos:end="46:52"><name pos:start="46:18" pos:end="46:33">qdev_get_gpio_in</name><argument_list pos:start="46:34" pos:end="46:52">(<argument pos:start="46:35" pos:end="46:48"><expr pos:start="46:35" pos:end="46:48"><name pos:start="46:35" pos:end="46:48"><name pos:start="46:35" pos:end="46:37">env</name><operator pos:start="46:38" pos:end="46:39">-&gt;</operator><name pos:start="46:40" pos:end="46:48">pic_state</name></name></expr></argument>, <argument pos:start="46:51" pos:end="46:51"><expr pos:start="46:51" pos:end="46:51"><name pos:start="46:51" pos:end="46:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="47:5" pos:end="47:23">/* load bios rom */</comment>
    <if_stmt pos:start="48:5" pos:end="95:52"><if pos:start="48:5" pos:end="95:52">if <condition pos:start="48:8" pos:end="48:26">(<expr pos:start="48:9" pos:end="48:25"><name pos:start="48:9" pos:end="48:17">bios_name</name> <operator pos:start="48:19" pos:end="48:20">==</operator> <name pos:start="48:22" pos:end="48:25">NULL</name></expr>)</condition> <block pos:start="48:28" pos:end="95:52">{<block_content pos:start="49:9" pos:end="95:52">
        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:17">bios_name</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:33">BIOS_FILENAME</name></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:67"><expr pos:start="50:5" pos:end="50:66"><name pos:start="50:5" pos:end="50:17">bios_filename</name> <operator pos:start="50:19" pos:end="50:19">=</operator> <call pos:start="50:21" pos:end="50:66"><name pos:start="50:21" pos:end="50:34">qemu_find_file</name><argument_list pos:start="50:35" pos:end="50:66">(<argument pos:start="50:36" pos:end="50:54"><expr pos:start="50:36" pos:end="50:54"><name pos:start="50:36" pos:end="50:54">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="50:57" pos:end="50:65"><expr pos:start="50:57" pos:end="50:65"><name pos:start="50:57" pos:end="50:65">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="51:5" pos:end="95:52"><if pos:start="51:5" pos:end="95:52">if <condition pos:start="51:8" pos:end="51:22">(<expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:21">bios_filename</name></expr>)</condition> <block pos:start="51:24" pos:end="95:52">{<block_content pos:start="52:9" pos:end="95:52">
        <expr_stmt pos:start="52:9" pos:end="52:67"><expr pos:start="52:9" pos:end="52:66"><call pos:start="52:9" pos:end="52:66"><name pos:start="52:9" pos:end="52:27">load_image_targphys</name><argument_list pos:start="52:28" pos:end="52:66">(<argument pos:start="52:29" pos:end="52:41"><expr pos:start="52:29" pos:end="52:41"><name pos:start="52:29" pos:end="52:41">bios_filename</name></expr></argument>, <argument pos:start="52:44" pos:end="52:54"><expr pos:start="52:44" pos:end="52:54"><name pos:start="52:44" pos:end="52:54">BIOS_OFFSET</name></expr></argument>, <argument pos:start="52:57" pos:end="52:65"><expr pos:start="52:57" pos:end="52:65"><name pos:start="52:57" pos:end="52:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:43"><expr pos:start="53:5" pos:end="53:42"><name pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:14">reset_info</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:28">bootstrap_pc</name></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <name pos:start="53:32" pos:end="53:42">BIOS_OFFSET</name></expr>;</expr_stmt>
    <comment type="block" pos:start="54:5" pos:end="54:66">/* if no kernel is given no valid bios rom is a fatal error */</comment>
    <if_stmt pos:start="55:5" pos:end="95:52"><if pos:start="55:5" pos:end="95:52">if <condition pos:start="55:8" pos:end="55:73">(<expr pos:start="55:9" pos:end="55:72"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:24">kernel_filename</name> <operator pos:start="55:26" pos:end="55:27">&amp;&amp;</operator> <operator pos:start="55:29" pos:end="55:29">!</operator><name pos:start="55:30" pos:end="55:34">dinfo</name> <operator pos:start="55:36" pos:end="55:37">&amp;&amp;</operator> <operator pos:start="55:39" pos:end="55:39">!</operator><name pos:start="55:40" pos:end="55:52">bios_filename</name> <operator pos:start="55:54" pos:end="55:55">&amp;&amp;</operator> <operator pos:start="55:57" pos:end="55:57">!</operator><call pos:start="55:58" pos:end="55:72"><name pos:start="55:58" pos:end="55:70">qtest_enabled</name><argument_list pos:start="55:71" pos:end="55:72">()</argument_list></call></expr>)</condition> <block pos:start="55:75" pos:end="95:52">{<block_content pos:start="56:9" pos:end="95:52">
        <expr_stmt pos:start="56:9" pos:end="57:27"><expr pos:start="56:9" pos:end="57:26"><call pos:start="56:9" pos:end="57:26"><name pos:start="56:9" pos:end="56:15">fprintf</name><argument_list pos:start="56:16" pos:end="57:26">(<argument pos:start="56:17" pos:end="56:22"><expr pos:start="56:17" pos:end="56:22"><name pos:start="56:17" pos:end="56:22">stderr</name></expr></argument>, <argument pos:start="56:25" pos:end="56:72"><expr pos:start="56:25" pos:end="56:72"><literal type="string" pos:start="56:25" pos:end="56:72">"qemu: could not load Milkymist One bios '%s'\n"</literal></expr></argument>,
                <argument pos:start="57:17" pos:end="57:25"><expr pos:start="57:17" pos:end="57:25"><name pos:start="57:17" pos:end="57:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:46"><expr pos:start="58:5" pos:end="58:45"><call pos:start="58:5" pos:end="58:45"><name pos:start="58:5" pos:end="58:25">milkymist_uart_create</name><argument_list pos:start="58:26" pos:end="58:45">(<argument pos:start="58:27" pos:end="58:36"><expr pos:start="58:27" pos:end="58:36"><literal type="number" pos:start="58:27" pos:end="58:36">0x60000000</literal></expr></argument>, <argument pos:start="58:39" pos:end="58:44"><expr pos:start="58:39" pos:end="58:44"><name pos:start="58:39" pos:end="58:44"><name pos:start="58:39" pos:end="58:41">irq</name><index pos:start="58:42" pos:end="58:44">[<expr pos:start="58:43" pos:end="58:43"><literal type="number" pos:start="58:43" pos:end="58:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="60:58"><expr pos:start="59:5" pos:end="60:57"><call pos:start="59:5" pos:end="60:57"><name pos:start="59:5" pos:end="59:27">milkymist_sysctl_create</name><argument_list pos:start="59:28" pos:end="60:57">(<argument pos:start="59:29" pos:end="59:38"><expr pos:start="59:29" pos:end="59:38"><literal type="number" pos:start="59:29" pos:end="59:38">0x60001000</literal></expr></argument>, <argument pos:start="59:41" pos:end="59:46"><expr pos:start="59:41" pos:end="59:46"><name pos:start="59:41" pos:end="59:46"><name pos:start="59:41" pos:end="59:43">irq</name><index pos:start="59:44" pos:end="59:46">[<expr pos:start="59:45" pos:end="59:45"><literal type="number" pos:start="59:45" pos:end="59:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:49" pos:end="59:54"><expr pos:start="59:49" pos:end="59:54"><name pos:start="59:49" pos:end="59:54"><name pos:start="59:49" pos:end="59:51">irq</name><index pos:start="59:52" pos:end="59:54">[<expr pos:start="59:53" pos:end="59:53"><literal type="number" pos:start="59:53" pos:end="59:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:57" pos:end="59:62"><expr pos:start="59:57" pos:end="59:62"><name pos:start="59:57" pos:end="59:62"><name pos:start="59:57" pos:end="59:59">irq</name><index pos:start="59:60" pos:end="59:62">[<expr pos:start="59:61" pos:end="59:61"><literal type="number" pos:start="59:61" pos:end="59:61">3</literal></expr>]</index></name></expr></argument>,
            <argument pos:start="60:13" pos:end="60:20"><expr pos:start="60:13" pos:end="60:20"><literal type="number" pos:start="60:13" pos:end="60:20">80000000</literal></expr></argument>, <argument pos:start="60:23" pos:end="60:32"><expr pos:start="60:23" pos:end="60:32"><literal type="number" pos:start="60:23" pos:end="60:32">0x10014d31</literal></expr></argument>, <argument pos:start="60:35" pos:end="60:44"><expr pos:start="60:35" pos:end="60:44"><literal type="number" pos:start="60:35" pos:end="60:44">0x0000041f</literal></expr></argument>, <argument pos:start="60:47" pos:end="60:56"><expr pos:start="60:47" pos:end="60:56"><literal type="number" pos:start="60:47" pos:end="60:56">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:39"><expr pos:start="61:5" pos:end="61:38"><call pos:start="61:5" pos:end="61:38"><name pos:start="61:5" pos:end="61:26">milkymist_hpdmc_create</name><argument_list pos:start="61:27" pos:end="61:38">(<argument pos:start="61:28" pos:end="61:37"><expr pos:start="61:28" pos:end="61:37"><literal type="number" pos:start="61:28" pos:end="61:37">0x60002000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="62:63"><expr pos:start="62:5" pos:end="62:62"><call pos:start="62:5" pos:end="62:62"><name pos:start="62:5" pos:end="62:26">milkymist_vgafb_create</name><argument_list pos:start="62:27" pos:end="62:62">(<argument pos:start="62:28" pos:end="62:37"><expr pos:start="62:28" pos:end="62:37"><literal type="number" pos:start="62:28" pos:end="62:37">0x60003000</literal></expr></argument>, <argument pos:start="62:40" pos:end="62:49"><expr pos:start="62:40" pos:end="62:49"><literal type="number" pos:start="62:40" pos:end="62:49">0x40000000</literal></expr></argument>, <argument pos:start="62:52" pos:end="62:61"><expr pos:start="62:52" pos:end="62:61"><literal type="number" pos:start="62:52" pos:end="62:61">0x0fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:41"><expr pos:start="63:5" pos:end="63:40"><call pos:start="63:5" pos:end="63:40"><name pos:start="63:5" pos:end="63:28">milkymist_memcard_create</name><argument_list pos:start="63:29" pos:end="63:40">(<argument pos:start="63:30" pos:end="63:39"><expr pos:start="63:30" pos:end="63:39"><literal type="number" pos:start="63:30" pos:end="63:39">0x60004000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:70"><expr pos:start="64:5" pos:end="64:69"><call pos:start="64:5" pos:end="64:69"><name pos:start="64:5" pos:end="64:25">milkymist_ac97_create</name><argument_list pos:start="64:26" pos:end="64:69">(<argument pos:start="64:27" pos:end="64:36"><expr pos:start="64:27" pos:end="64:36"><literal type="number" pos:start="64:27" pos:end="64:36">0x60005000</literal></expr></argument>, <argument pos:start="64:39" pos:end="64:44"><expr pos:start="64:39" pos:end="64:44"><name pos:start="64:39" pos:end="64:44"><name pos:start="64:39" pos:end="64:41">irq</name><index pos:start="64:42" pos:end="64:44">[<expr pos:start="64:43" pos:end="64:43"><literal type="number" pos:start="64:43" pos:end="64:43">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="64:47" pos:end="64:52"><expr pos:start="64:47" pos:end="64:52"><name pos:start="64:47" pos:end="64:52"><name pos:start="64:47" pos:end="64:49">irq</name><index pos:start="64:50" pos:end="64:52">[<expr pos:start="64:51" pos:end="64:51"><literal type="number" pos:start="64:51" pos:end="64:51">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="64:55" pos:end="64:60"><expr pos:start="64:55" pos:end="64:60"><name pos:start="64:55" pos:end="64:60"><name pos:start="64:55" pos:end="64:57">irq</name><index pos:start="64:58" pos:end="64:60">[<expr pos:start="64:59" pos:end="64:59"><literal type="number" pos:start="64:59" pos:end="64:59">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="64:63" pos:end="64:68"><expr pos:start="64:63" pos:end="64:68"><name pos:start="64:63" pos:end="64:68"><name pos:start="64:63" pos:end="64:65">irq</name><index pos:start="64:66" pos:end="64:68">[<expr pos:start="64:67" pos:end="64:67"><literal type="number" pos:start="64:67" pos:end="64:67">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:46"><expr pos:start="65:5" pos:end="65:45"><call pos:start="65:5" pos:end="65:45"><name pos:start="65:5" pos:end="65:25">milkymist_pfpu_create</name><argument_list pos:start="65:26" pos:end="65:45">(<argument pos:start="65:27" pos:end="65:36"><expr pos:start="65:27" pos:end="65:36"><literal type="number" pos:start="65:27" pos:end="65:36">0x60006000</literal></expr></argument>, <argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><name pos:start="65:39" pos:end="65:44"><name pos:start="65:39" pos:end="65:41">irq</name><index pos:start="65:42" pos:end="65:44">[<expr pos:start="65:43" pos:end="65:43"><literal type="number" pos:start="65:43" pos:end="65:43">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:46"><expr pos:start="66:5" pos:end="66:45"><call pos:start="66:5" pos:end="66:45"><name pos:start="66:5" pos:end="66:25">milkymist_tmu2_create</name><argument_list pos:start="66:26" pos:end="66:45">(<argument pos:start="66:27" pos:end="66:36"><expr pos:start="66:27" pos:end="66:36"><literal type="number" pos:start="66:27" pos:end="66:36">0x60007000</literal></expr></argument>, <argument pos:start="66:39" pos:end="66:44"><expr pos:start="66:39" pos:end="66:44"><name pos:start="66:39" pos:end="66:44"><name pos:start="66:39" pos:end="66:41">irq</name><index pos:start="66:42" pos:end="66:44">[<expr pos:start="66:43" pos:end="66:43"><literal type="number" pos:start="66:43" pos:end="66:43">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:72"><expr pos:start="67:5" pos:end="67:71"><call pos:start="67:5" pos:end="67:71"><name pos:start="67:5" pos:end="67:29">milkymist_minimac2_create</name><argument_list pos:start="67:30" pos:end="67:71">(<argument pos:start="67:31" pos:end="67:40"><expr pos:start="67:31" pos:end="67:40"><literal type="number" pos:start="67:31" pos:end="67:40">0x60008000</literal></expr></argument>, <argument pos:start="67:43" pos:end="67:52"><expr pos:start="67:43" pos:end="67:52"><literal type="number" pos:start="67:43" pos:end="67:52">0x30000000</literal></expr></argument>, <argument pos:start="67:55" pos:end="67:61"><expr pos:start="67:55" pos:end="67:61"><name pos:start="67:55" pos:end="67:61"><name pos:start="67:55" pos:end="67:57">irq</name><index pos:start="67:58" pos:end="67:61">[<expr pos:start="67:59" pos:end="67:60"><literal type="number" pos:start="67:59" pos:end="67:60">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:64" pos:end="67:70"><expr pos:start="67:64" pos:end="67:70"><name pos:start="67:64" pos:end="67:70"><name pos:start="67:64" pos:end="67:66">irq</name><index pos:start="67:67" pos:end="67:70">[<expr pos:start="67:68" pos:end="67:69"><literal type="number" pos:start="67:68" pos:end="67:69">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="69:52"><expr pos:start="68:5" pos:end="69:51"><call pos:start="68:5" pos:end="69:51"><name pos:start="68:5" pos:end="68:28">milkymist_softusb_create</name><argument_list pos:start="68:29" pos:end="69:51">(<argument pos:start="68:30" pos:end="68:39"><expr pos:start="68:30" pos:end="68:39"><literal type="number" pos:start="68:30" pos:end="68:39">0x6000f000</literal></expr></argument>, <argument pos:start="68:42" pos:end="68:48"><expr pos:start="68:42" pos:end="68:48"><name pos:start="68:42" pos:end="68:48"><name pos:start="68:42" pos:end="68:44">irq</name><index pos:start="68:45" pos:end="68:48">[<expr pos:start="68:46" pos:end="68:47"><literal type="number" pos:start="68:46" pos:end="68:47">15</literal></expr>]</index></name></expr></argument>,
            <argument pos:start="69:13" pos:end="69:22"><expr pos:start="69:13" pos:end="69:22"><literal type="number" pos:start="69:13" pos:end="69:22">0x20000000</literal></expr></argument>, <argument pos:start="69:25" pos:end="69:30"><expr pos:start="69:25" pos:end="69:30"><literal type="number" pos:start="69:25" pos:end="69:30">0x1000</literal></expr></argument>, <argument pos:start="69:33" pos:end="69:42"><expr pos:start="69:33" pos:end="69:42"><literal type="number" pos:start="69:33" pos:end="69:42">0x20020000</literal></expr></argument>, <argument pos:start="69:45" pos:end="69:50"><expr pos:start="69:45" pos:end="69:50"><literal type="number" pos:start="69:45" pos:end="69:50">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="70:5" pos:end="70:49">/* make sure juart isn't the first chardev */</comment>
    <expr_stmt pos:start="71:5" pos:end="71:41"><expr pos:start="71:5" pos:end="71:40"><name pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:7">env</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:20">juart_state</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:40"><name pos:start="71:24" pos:end="71:38">lm32_juart_init</name><argument_list pos:start="71:39" pos:end="71:40">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="72:5" pos:end="95:52"><if pos:start="72:5" pos:end="95:52">if <condition pos:start="72:8" pos:end="72:24">(<expr pos:start="72:9" pos:end="72:23"><name pos:start="72:9" pos:end="72:23">kernel_filename</name></expr>)</condition> <block pos:start="72:26" pos:end="95:52">{<block_content pos:start="73:9" pos:end="95:52">
        <decl_stmt pos:start="73:9" pos:end="73:23"><decl pos:start="73:9" pos:end="73:22"><type pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:16">uint64_t</name></type> <name pos:start="73:18" pos:end="73:22">entry</name></decl>;</decl_stmt>
        <comment type="block" pos:start="74:9" pos:end="74:41">/* Boots a kernel elf binary.  */</comment>
        <expr_stmt pos:start="75:9" pos:end="76:50"><expr pos:start="75:9" pos:end="76:49"><name pos:start="75:9" pos:end="75:19">kernel_size</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="76:49"><name pos:start="75:23" pos:end="75:30">load_elf</name><argument_list pos:start="75:31" pos:end="76:49">(<argument pos:start="75:32" pos:end="75:46"><expr pos:start="75:32" pos:end="75:46"><name pos:start="75:32" pos:end="75:46">kernel_filename</name></expr></argument>, <argument pos:start="75:49" pos:end="75:52"><expr pos:start="75:49" pos:end="75:52"><name pos:start="75:49" pos:end="75:52">NULL</name></expr></argument>, <argument pos:start="75:55" pos:end="75:58"><expr pos:start="75:55" pos:end="75:58"><name pos:start="75:55" pos:end="75:58">NULL</name></expr></argument>, <argument pos:start="75:61" pos:end="75:66"><expr pos:start="75:61" pos:end="75:66"><operator pos:start="75:61" pos:end="75:61">&amp;</operator><name pos:start="75:62" pos:end="75:66">entry</name></expr></argument>, <argument pos:start="75:69" pos:end="75:72"><expr pos:start="75:69" pos:end="75:72"><name pos:start="75:69" pos:end="75:72">NULL</name></expr></argument>, <argument pos:start="75:75" pos:end="75:78"><expr pos:start="75:75" pos:end="75:78"><name pos:start="75:75" pos:end="75:78">NULL</name></expr></argument>,
                               <argument pos:start="76:32" pos:end="76:32"><expr pos:start="76:32" pos:end="76:32"><literal type="number" pos:start="76:32" pos:end="76:32">1</literal></expr></argument>, <argument pos:start="76:35" pos:end="76:45"><expr pos:start="76:35" pos:end="76:45"><name pos:start="76:35" pos:end="76:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="76:48" pos:end="76:48"><expr pos:start="76:48" pos:end="76:48"><literal type="number" pos:start="76:48" pos:end="76:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:18">reset_info</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:32">bootstrap_pc</name></name> <operator pos:start="77:34" pos:end="77:34">=</operator> <name pos:start="77:36" pos:end="77:40">entry</name></expr>;</expr_stmt>
        <if_stmt pos:start="78:9" pos:end="95:52"><if pos:start="78:9" pos:end="95:52">if <condition pos:start="78:12" pos:end="78:28">(<expr pos:start="78:13" pos:end="78:27"><name pos:start="78:13" pos:end="78:23">kernel_size</name> <operator pos:start="78:25" pos:end="78:25">&lt;</operator> <literal type="number" pos:start="78:27" pos:end="78:27">0</literal></expr>)</condition> <block pos:start="78:30" pos:end="95:52">{<block_content pos:start="79:13" pos:end="95:52">
            <expr_stmt pos:start="79:13" pos:end="80:58"><expr pos:start="79:13" pos:end="80:57"><name pos:start="79:13" pos:end="79:23">kernel_size</name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="80:57"><name pos:start="79:27" pos:end="79:45">load_image_targphys</name><argument_list pos:start="79:46" pos:end="80:57">(<argument pos:start="79:47" pos:end="79:61"><expr pos:start="79:47" pos:end="79:61"><name pos:start="79:47" pos:end="79:61">kernel_filename</name></expr></argument>, <argument pos:start="79:64" pos:end="79:73"><expr pos:start="79:64" pos:end="79:73"><name pos:start="79:64" pos:end="79:73">sdram_base</name></expr></argument>,
                                              <argument pos:start="80:47" pos:end="80:56"><expr pos:start="80:47" pos:end="80:56"><name pos:start="80:47" pos:end="80:56">sdram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="81:13" pos:end="81:50"><expr pos:start="81:13" pos:end="81:49"><name pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:22">reset_info</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:36">bootstrap_pc</name></name> <operator pos:start="81:38" pos:end="81:38">=</operator> <name pos:start="81:40" pos:end="81:49">sdram_base</name></expr>;</expr_stmt>
        <if_stmt pos:start="82:9" pos:end="95:52"><if pos:start="82:9" pos:end="95:52">if <condition pos:start="82:12" pos:end="82:28">(<expr pos:start="82:13" pos:end="82:27"><name pos:start="82:13" pos:end="82:23">kernel_size</name> <operator pos:start="82:25" pos:end="82:25">&lt;</operator> <literal type="number" pos:start="82:27" pos:end="82:27">0</literal></expr>)</condition> <block pos:start="82:30" pos:end="95:52">{<block_content pos:start="83:13" pos:end="95:52">
            <expr_stmt pos:start="83:13" pos:end="84:37"><expr pos:start="83:13" pos:end="84:36"><call pos:start="83:13" pos:end="84:36"><name pos:start="83:13" pos:end="83:19">fprintf</name><argument_list pos:start="83:20" pos:end="84:36">(<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26">stderr</name></expr></argument>, <argument pos:start="83:29" pos:end="83:64"><expr pos:start="83:29" pos:end="83:64"><literal type="string" pos:start="83:29" pos:end="83:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,
                    <argument pos:start="84:21" pos:end="84:35"><expr pos:start="84:21" pos:end="84:35"><name pos:start="84:21" pos:end="84:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="85:5" pos:end="95:52"><if pos:start="85:5" pos:end="95:52">if <condition pos:start="85:8" pos:end="85:49">(<expr pos:start="85:9" pos:end="85:48"><name pos:start="85:9" pos:end="85:22">kernel_cmdline</name> <operator pos:start="85:24" pos:end="85:25">&amp;&amp;</operator> <call pos:start="85:27" pos:end="85:48"><name pos:start="85:27" pos:end="85:32">strlen</name><argument_list pos:start="85:33" pos:end="85:48">(<argument pos:start="85:34" pos:end="85:47"><expr pos:start="85:34" pos:end="85:47"><name pos:start="85:34" pos:end="85:47">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:51" pos:end="95:52">{<block_content pos:start="86:9" pos:end="95:52">
        <expr_stmt pos:start="86:9" pos:end="87:32"><expr pos:start="86:9" pos:end="87:31"><call pos:start="86:9" pos:end="87:31"><name pos:start="86:9" pos:end="86:24">pstrcpy_targphys</name><argument_list pos:start="86:25" pos:end="87:31">(<argument pos:start="86:26" pos:end="86:34"><expr pos:start="86:26" pos:end="86:34"><literal type="string" pos:start="86:26" pos:end="86:34">"cmdline"</literal></expr></argument>, <argument pos:start="86:37" pos:end="86:48"><expr pos:start="86:37" pos:end="86:48"><name pos:start="86:37" pos:end="86:48">cmdline_base</name></expr></argument>, <argument pos:start="86:51" pos:end="86:66"><expr pos:start="86:51" pos:end="86:66"><name pos:start="86:51" pos:end="86:66">TARGET_PAGE_SIZE</name></expr></argument>,
                <argument pos:start="87:17" pos:end="87:30"><expr pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:30">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:58"><expr pos:start="88:9" pos:end="88:57"><name pos:start="88:9" pos:end="88:32"><name pos:start="88:9" pos:end="88:18">reset_info</name><operator pos:start="88:19" pos:end="88:20">-&gt;</operator><name pos:start="88:21" pos:end="88:32">cmdline_base</name></name> <operator pos:start="88:34" pos:end="88:34">=</operator> <operator pos:start="88:36" pos:end="88:36">(</operator><name pos:start="88:37" pos:end="88:44">uint32_t</name><operator pos:start="88:45" pos:end="88:45">)</operator><name pos:start="88:46" pos:end="88:57">cmdline_base</name></expr>;</expr_stmt>
    <if_stmt pos:start="89:5" pos:end="95:52"><if pos:start="89:5" pos:end="95:52">if <condition pos:start="89:8" pos:end="89:24">(<expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:23">initrd_filename</name></expr>)</condition> <block pos:start="89:26" pos:end="95:52">{<block_content pos:start="90:9" pos:end="95:52">
        <decl_stmt pos:start="90:9" pos:end="90:27"><decl pos:start="90:9" pos:end="90:26"><type pos:start="90:9" pos:end="90:14"><name pos:start="90:9" pos:end="90:14">size_t</name></type> <name pos:start="90:16" pos:end="90:26">initrd_size</name></decl>;</decl_stmt>
        <expr_stmt pos:start="91:9" pos:end="92:28"><expr pos:start="91:9" pos:end="92:27"><name pos:start="91:9" pos:end="91:19">initrd_size</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="92:27"><name pos:start="91:23" pos:end="91:41">load_image_targphys</name><argument_list pos:start="91:42" pos:end="92:27">(<argument pos:start="91:43" pos:end="91:57"><expr pos:start="91:43" pos:end="91:57"><name pos:start="91:43" pos:end="91:57">initrd_filename</name></expr></argument>, <argument pos:start="91:60" pos:end="91:70"><expr pos:start="91:60" pos:end="91:70"><name pos:start="91:60" pos:end="91:70">initrd_base</name></expr></argument>,
                <argument pos:start="92:17" pos:end="92:26"><expr pos:start="92:17" pos:end="92:26"><name pos:start="92:17" pos:end="92:26">initrd_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="93:9" pos:end="93:56"><expr pos:start="93:9" pos:end="93:55"><name pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:18">reset_info</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:31">initrd_base</name></name> <operator pos:start="93:33" pos:end="93:33">=</operator> <operator pos:start="93:35" pos:end="93:35">(</operator><name pos:start="93:36" pos:end="93:43">uint32_t</name><operator pos:start="93:44" pos:end="93:44">)</operator><name pos:start="93:45" pos:end="93:55">initrd_base</name></expr>;</expr_stmt>
        <expr_stmt pos:start="94:9" pos:end="94:56"><expr pos:start="94:9" pos:end="94:55"><name pos:start="94:9" pos:end="94:31"><name pos:start="94:9" pos:end="94:18">reset_info</name><operator pos:start="94:19" pos:end="94:20">-&gt;</operator><name pos:start="94:21" pos:end="94:31">initrd_size</name></name> <operator pos:start="94:33" pos:end="94:33">=</operator> <operator pos:start="94:35" pos:end="94:35">(</operator><name pos:start="94:36" pos:end="94:43">uint32_t</name><operator pos:start="94:44" pos:end="94:44">)</operator><name pos:start="94:45" pos:end="94:55">initrd_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:52"><expr pos:start="95:5" pos:end="95:51"><call pos:start="95:5" pos:end="95:51"><name pos:start="95:5" pos:end="95:23">qemu_register_reset</name><argument_list pos:start="95:24" pos:end="95:51">(<argument pos:start="95:25" pos:end="95:38"><expr pos:start="95:25" pos:end="95:38"><name pos:start="95:25" pos:end="95:38">main_cpu_reset</name></expr></argument>, <argument pos:start="95:41" pos:end="95:50"><expr pos:start="95:41" pos:end="95:50"><name pos:start="95:41" pos:end="95:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></unit>
