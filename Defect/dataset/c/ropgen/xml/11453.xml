<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11453.c" pos:tabs="8"><function pos:start="1:1" pos:end="72:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">old_codec47</name><parameter_list pos:start="1:23" pos:end="2:55">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:44"><name pos:start="1:24" pos:end="1:39">SANMVideoContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">top</name></decl></parameter>,
                       <parameter pos:start="2:24" pos:end="2:31"><decl pos:start="2:24" pos:end="2:31"><type pos:start="2:24" pos:end="2:31"><name pos:start="2:24" pos:end="2:26">int</name></type> <name pos:start="2:28" pos:end="2:31">left</name></decl></parameter>, <parameter pos:start="2:34" pos:end="2:42"><decl pos:start="2:34" pos:end="2:42"><type pos:start="2:34" pos:end="2:42"><name pos:start="2:34" pos:end="2:36">int</name></type> <name pos:start="2:38" pos:end="2:42">width</name></decl></parameter>, <parameter pos:start="2:45" pos:end="2:54"><decl pos:start="2:45" pos:end="2:54"><type pos:start="2:45" pos:end="2:54"><name pos:start="2:45" pos:end="2:47">int</name></type> <name pos:start="2:49" pos:end="2:54">height</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="72:13">{<block_content pos:start="4:5" pos:end="72:13">
    <decl_stmt pos:start="4:5" pos:end="4:49"><decl pos:start="4:5" pos:end="4:9"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:9">i</name></decl>, <decl pos:start="4:12" pos:end="4:12"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:12" pos:end="4:12">j</name></decl>, <decl pos:start="4:15" pos:end="4:17"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:15" pos:end="4:17">seq</name></decl>, <decl pos:start="4:20" pos:end="4:24"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:20" pos:end="4:24">compr</name></decl>, <decl pos:start="4:27" pos:end="4:33"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:27" pos:end="4:33">new_rot</name></decl>, <decl pos:start="4:36" pos:end="4:42"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:36" pos:end="4:42">tbl_pos</name></decl>, <decl pos:start="4:45" pos:end="4:48"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:45" pos:end="4:48">skip</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">stride</name>     <init pos:start="5:20" pos:end="5:31">= <expr pos:start="5:22" pos:end="5:31"><name pos:start="5:22" pos:end="5:31"><name pos:start="5:22" pos:end="5:24">ctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:31">pitch</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:65"><decl pos:start="6:5" pos:end="6:64"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">uint8_t</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:16">dst</name>   <init pos:start="6:20" pos:end="6:64">= <expr pos:start="6:22" pos:end="6:64"><operator pos:start="6:22" pos:end="6:22">(</operator><operator pos:start="6:23" pos:end="6:23">(</operator><name pos:start="6:24" pos:end="6:30">uint8_t</name><operator pos:start="6:31" pos:end="6:31">*</operator><operator pos:start="6:32" pos:end="6:32">)</operator><name pos:start="6:33" pos:end="6:41"><name pos:start="6:33" pos:end="6:35">ctx</name><operator pos:start="6:36" pos:end="6:37">-&gt;</operator><name pos:start="6:38" pos:end="6:41">frm0</name></name><operator pos:start="6:42" pos:end="6:42">)</operator> <operator pos:start="6:44" pos:end="6:44">+</operator> <name pos:start="6:46" pos:end="6:49">left</name> <operator pos:start="6:51" pos:end="6:51">+</operator> <name pos:start="6:53" pos:end="6:55">top</name> <operator pos:start="6:57" pos:end="6:57">*</operator> <name pos:start="6:59" pos:end="6:64">stride</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">prev1</name> <init pos:start="7:20" pos:end="7:40">= <expr pos:start="7:22" pos:end="7:40"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:29">uint8_t</name><operator pos:start="7:30" pos:end="7:30">*</operator><operator pos:start="7:31" pos:end="7:31">)</operator><name pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:34">ctx</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:40">frm1</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:41"><decl pos:start="8:5" pos:end="8:40"><type pos:start="8:5" pos:end="8:13"><name pos:start="8:5" pos:end="8:11">uint8_t</name> <modifier pos:start="8:13" pos:end="8:13">*</modifier></type><name pos:start="8:14" pos:end="8:18">prev2</name> <init pos:start="8:20" pos:end="8:40">= <expr pos:start="8:22" pos:end="8:40"><operator pos:start="8:22" pos:end="8:22">(</operator><name pos:start="8:23" pos:end="8:29">uint8_t</name><operator pos:start="8:30" pos:end="8:30">*</operator><operator pos:start="8:31" pos:end="8:31">)</operator><name pos:start="8:32" pos:end="8:40"><name pos:start="8:32" pos:end="8:34">ctx</name><operator pos:start="8:35" pos:end="8:36">-&gt;</operator><name pos:start="8:37" pos:end="8:40">frm2</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:25">decoded_size</name></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:41"><expr pos:start="10:5" pos:end="10:40"><name pos:start="10:5" pos:end="10:11">tbl_pos</name> <operator pos:start="10:13" pos:end="10:13">=</operator> <call pos:start="10:15" pos:end="10:40"><name pos:start="10:15" pos:end="10:30">bytestream2_tell</name><argument_list pos:start="10:31" pos:end="10:40">(<argument pos:start="10:32" pos:end="10:39"><expr pos:start="10:32" pos:end="10:39"><operator pos:start="10:32" pos:end="10:32">&amp;</operator><name pos:start="10:33" pos:end="10:39"><name pos:start="10:33" pos:end="10:35">ctx</name><operator pos:start="10:36" pos:end="10:37">-&gt;</operator><name pos:start="10:38" pos:end="10:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:45"><expr pos:start="11:5" pos:end="11:44"><name pos:start="11:5" pos:end="11:7">seq</name>     <operator pos:start="11:13" pos:end="11:13">=</operator> <call pos:start="11:15" pos:end="11:44"><name pos:start="11:15" pos:end="11:34">bytestream2_get_le16</name><argument_list pos:start="11:35" pos:end="11:44">(<argument pos:start="11:36" pos:end="11:43"><expr pos:start="11:36" pos:end="11:43"><operator pos:start="11:36" pos:end="11:36">&amp;</operator><name pos:start="11:37" pos:end="11:43"><name pos:start="11:37" pos:end="11:39">ctx</name><operator pos:start="11:40" pos:end="11:41">-&gt;</operator><name pos:start="11:42" pos:end="11:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:45"><expr pos:start="12:5" pos:end="12:44"><name pos:start="12:5" pos:end="12:9">compr</name>   <operator pos:start="12:13" pos:end="12:13">=</operator> <call pos:start="12:15" pos:end="12:44"><name pos:start="12:15" pos:end="12:34">bytestream2_get_byte</name><argument_list pos:start="12:35" pos:end="12:44">(<argument pos:start="12:36" pos:end="12:43"><expr pos:start="12:36" pos:end="12:43"><operator pos:start="12:36" pos:end="12:36">&amp;</operator><name pos:start="12:37" pos:end="12:43"><name pos:start="12:37" pos:end="12:39">ctx</name><operator pos:start="12:40" pos:end="12:41">-&gt;</operator><name pos:start="12:42" pos:end="12:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:11">new_rot</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:44"><name pos:start="13:15" pos:end="13:34">bytestream2_get_byte</name><argument_list pos:start="13:35" pos:end="13:44">(<argument pos:start="13:36" pos:end="13:43"><expr pos:start="13:36" pos:end="13:43"><operator pos:start="13:36" pos:end="13:36">&amp;</operator><name pos:start="13:37" pos:end="13:43"><name pos:start="13:37" pos:end="13:39">ctx</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:45"><expr pos:start="14:5" pos:end="14:44"><name pos:start="14:5" pos:end="14:8">skip</name>    <operator pos:start="14:13" pos:end="14:13">=</operator> <call pos:start="14:15" pos:end="14:44"><name pos:start="14:15" pos:end="14:34">bytestream2_get_byte</name><argument_list pos:start="14:35" pos:end="14:44">(<argument pos:start="14:36" pos:end="14:43"><expr pos:start="14:36" pos:end="14:43"><operator pos:start="14:36" pos:end="14:36">&amp;</operator><name pos:start="14:37" pos:end="14:43"><name pos:start="14:37" pos:end="14:39">ctx</name><operator pos:start="14:40" pos:end="14:41">-&gt;</operator><name pos:start="14:42" pos:end="14:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:20">bytestream2_skip</name><argument_list pos:start="15:21" pos:end="15:33">(<argument pos:start="15:22" pos:end="15:29"><expr pos:start="15:22" pos:end="15:29"><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:29"><name pos:start="15:23" pos:end="15:25">ctx</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:29">gb</name></name></expr></argument>, <argument pos:start="15:32" pos:end="15:32"><expr pos:start="15:32" pos:end="15:32"><literal type="number" pos:start="15:32" pos:end="15:32">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:50"><expr pos:start="16:5" pos:end="16:49"><name pos:start="16:5" pos:end="16:16">decoded_size</name> <operator pos:start="16:18" pos:end="16:18">=</operator> <call pos:start="16:20" pos:end="16:49"><name pos:start="16:20" pos:end="16:39">bytestream2_get_le32</name><argument_list pos:start="16:40" pos:end="16:49">(<argument pos:start="16:41" pos:end="16:48"><expr pos:start="16:41" pos:end="16:48"><operator pos:start="16:41" pos:end="16:41">&amp;</operator><name pos:start="16:42" pos:end="16:48"><name pos:start="16:42" pos:end="16:44">ctx</name><operator pos:start="16:45" pos:end="16:46">-&gt;</operator><name pos:start="16:47" pos:end="16:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><call pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:20">bytestream2_skip</name><argument_list pos:start="17:21" pos:end="17:33">(<argument pos:start="17:22" pos:end="17:29"><expr pos:start="17:22" pos:end="17:29"><operator pos:start="17:22" pos:end="17:22">&amp;</operator><name pos:start="17:23" pos:end="17:29"><name pos:start="17:23" pos:end="17:25">ctx</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:29">gb</name></name></expr></argument>, <argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="19:43"><if pos:start="18:5" pos:end="19:43">if <condition pos:start="18:8" pos:end="18:17">(<expr pos:start="18:9" pos:end="18:16"><name pos:start="18:9" pos:end="18:12">skip</name> <operator pos:start="18:14" pos:end="18:14">&amp;</operator> <literal type="number" pos:start="18:16" pos:end="18:16">1</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:43"><block_content pos:start="19:9" pos:end="19:43">
        <expr_stmt pos:start="19:9" pos:end="19:43"><expr pos:start="19:9" pos:end="19:42"><call pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:24">bytestream2_skip</name><argument_list pos:start="19:25" pos:end="19:42">(<argument pos:start="19:26" pos:end="19:33"><expr pos:start="19:26" pos:end="19:33"><operator pos:start="19:26" pos:end="19:26">&amp;</operator><name pos:start="19:27" pos:end="19:33"><name pos:start="19:27" pos:end="19:29">ctx</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:33">gb</name></name></expr></argument>, <argument pos:start="19:36" pos:end="19:41"><expr pos:start="19:36" pos:end="19:41"><literal type="number" pos:start="19:36" pos:end="19:41">0x8080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="20:5" pos:end="72:13"><if pos:start="20:5" pos:end="72:13">if <condition pos:start="20:8" pos:end="20:13">(<expr pos:start="20:9" pos:end="20:12"><operator pos:start="20:9" pos:end="20:9">!</operator><name pos:start="20:10" pos:end="20:12">seq</name></expr>)</condition> <block pos:start="20:15" pos:end="72:13">{<block_content pos:start="21:9" pos:end="72:13">
        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:11">ctx</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:21">prev_seq</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <operator pos:start="21:25" pos:end="21:25">-</operator><literal type="number" pos:start="21:26" pos:end="21:26">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:47"><expr pos:start="22:9" pos:end="22:46"><call pos:start="22:9" pos:end="22:46"><name pos:start="22:9" pos:end="22:14">memset</name><argument_list pos:start="22:15" pos:end="22:46">(<argument pos:start="22:16" pos:end="22:20"><expr pos:start="22:16" pos:end="22:20"><name pos:start="22:16" pos:end="22:20">prev1</name></expr></argument>, <argument pos:start="22:23" pos:end="22:23"><expr pos:start="22:23" pos:end="22:23"><literal type="number" pos:start="22:23" pos:end="22:23">0</literal></expr></argument>, <argument pos:start="22:26" pos:end="22:45"><expr pos:start="22:26" pos:end="22:45"><name pos:start="22:26" pos:end="22:36"><name pos:start="22:26" pos:end="22:28">ctx</name><operator pos:start="22:29" pos:end="22:30">-&gt;</operator><name pos:start="22:31" pos:end="22:36">height</name></name> <operator pos:start="22:38" pos:end="22:38">*</operator> <name pos:start="22:40" pos:end="22:45">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:14">memset</name><argument_list pos:start="23:15" pos:end="23:46">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">prev2</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:45"><expr pos:start="23:26" pos:end="23:45"><name pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:28">ctx</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:36">height</name></name> <operator pos:start="23:38" pos:end="23:38">*</operator> <name pos:start="23:40" pos:end="23:45">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:51"><expr pos:start="24:5" pos:end="24:50"><call pos:start="24:5" pos:end="24:50"><name pos:start="24:5" pos:end="24:11">av_dlog</name><argument_list pos:start="24:12" pos:end="24:50">(<argument pos:start="24:13" pos:end="24:22"><expr pos:start="24:13" pos:end="24:22"><name pos:start="24:13" pos:end="24:22"><name pos:start="24:13" pos:end="24:15">ctx</name><operator pos:start="24:16" pos:end="24:17">-&gt;</operator><name pos:start="24:18" pos:end="24:22">avctx</name></name></expr></argument>, <argument pos:start="24:25" pos:end="24:42"><expr pos:start="24:25" pos:end="24:42"><literal type="string" pos:start="24:25" pos:end="24:42">"compression %d\n"</literal></expr></argument>, <argument pos:start="24:45" pos:end="24:49"><expr pos:start="24:45" pos:end="24:49"><name pos:start="24:45" pos:end="24:49">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="25:5" pos:end="72:13">switch <condition pos:start="25:12" pos:end="25:18">(<expr pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:17">compr</name></expr>)</condition> <block pos:start="25:20" pos:end="72:13">{<block_content pos:start="26:5" pos:end="72:13">
    <case pos:start="26:5" pos:end="26:11">case <expr pos:start="26:10" pos:end="26:10"><literal type="number" pos:start="26:10" pos:end="26:10">0</literal></expr>:</case>
        <if_stmt pos:start="27:9" pos:end="28:39"><if pos:start="27:9" pos:end="28:39">if <condition pos:start="27:12" pos:end="27:66">(<expr pos:start="27:13" pos:end="27:65"><call pos:start="27:13" pos:end="27:48"><name pos:start="27:13" pos:end="27:38">bytestream2_get_bytes_left</name><argument_list pos:start="27:39" pos:end="27:48">(<argument pos:start="27:40" pos:end="27:47"><expr pos:start="27:40" pos:end="27:47"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:47"><name pos:start="27:41" pos:end="27:43">ctx</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:47">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:50" pos:end="27:50">&lt;</operator> <name pos:start="27:52" pos:end="27:56">width</name> <operator pos:start="27:58" pos:end="27:58">*</operator> <name pos:start="27:60" pos:end="27:65">height</name></expr>)</condition><block type="pseudo" pos:start="28:13" pos:end="28:39"><block_content pos:start="28:13" pos:end="28:39">
            <return pos:start="28:13" pos:end="28:39">return <expr pos:start="28:20" pos:end="28:38"><name pos:start="28:20" pos:end="28:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
        <for pos:start="29:9" pos:end="72:13">for <control pos:start="29:13" pos:end="29:36">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">j</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:31"><expr pos:start="29:21" pos:end="29:30"><name pos:start="29:21" pos:end="29:21">j</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:30">height</name></expr>;</condition> <incr pos:start="29:33" pos:end="29:35"><expr pos:start="29:33" pos:end="29:35"><name pos:start="29:33" pos:end="29:33">j</name><operator pos:start="29:34" pos:end="29:35">++</operator></expr></incr>)</control> <block pos:start="29:38" pos:end="72:13">{<block_content pos:start="30:13" pos:end="72:13">
            <expr_stmt pos:start="30:13" pos:end="30:58"><expr pos:start="30:13" pos:end="30:57"><call pos:start="30:13" pos:end="30:57"><name pos:start="30:13" pos:end="30:35">bytestream2_get_bufferu</name><argument_list pos:start="30:36" pos:end="30:57">(<argument pos:start="30:37" pos:end="30:44"><expr pos:start="30:37" pos:end="30:44"><operator pos:start="30:37" pos:end="30:37">&amp;</operator><name pos:start="30:38" pos:end="30:44"><name pos:start="30:38" pos:end="30:40">ctx</name><operator pos:start="30:41" pos:end="30:42">-&gt;</operator><name pos:start="30:43" pos:end="30:44">gb</name></name></expr></argument>, <argument pos:start="30:47" pos:end="30:49"><expr pos:start="30:47" pos:end="30:49"><name pos:start="30:47" pos:end="30:49">dst</name></expr></argument>, <argument pos:start="30:52" pos:end="30:56"><expr pos:start="30:52" pos:end="30:56"><name pos:start="30:52" pos:end="30:56">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="31:13" pos:end="31:26"><expr pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:15">dst</name> <operator pos:start="31:17" pos:end="31:18">+=</operator> <name pos:start="31:20" pos:end="31:25">stride</name></expr>;</expr_stmt>
        <break pos:start="32:9" pos:end="32:14">break;</break>
    <case pos:start="33:5" pos:end="33:11">case <expr pos:start="33:10" pos:end="33:10"><literal type="number" pos:start="33:10" pos:end="33:10">1</literal></expr>:</case>
        <if_stmt pos:start="34:9" pos:end="35:39"><if pos:start="34:9" pos:end="35:39">if <condition pos:start="34:12" pos:end="34:92">(<expr pos:start="34:13" pos:end="34:91"><call pos:start="34:13" pos:end="34:48"><name pos:start="34:13" pos:end="34:38">bytestream2_get_bytes_left</name><argument_list pos:start="34:39" pos:end="34:48">(<argument pos:start="34:40" pos:end="34:47"><expr pos:start="34:40" pos:end="34:47"><operator pos:start="34:40" pos:end="34:40">&amp;</operator><name pos:start="34:41" pos:end="34:47"><name pos:start="34:41" pos:end="34:43">ctx</name><operator pos:start="34:44" pos:end="34:45">-&gt;</operator><name pos:start="34:46" pos:end="34:47">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="34:50" pos:end="34:50">&lt;</operator> <operator pos:start="34:52" pos:end="34:52">(</operator><operator pos:start="34:53" pos:end="34:53">(</operator><name pos:start="34:54" pos:end="34:58">width</name> <operator pos:start="34:60" pos:end="34:60">+</operator> <literal type="number" pos:start="34:62" pos:end="34:62">1</literal><operator pos:start="34:63" pos:end="34:63">)</operator> <operator pos:start="34:65" pos:end="34:66">&gt;&gt;</operator> <literal type="number" pos:start="34:68" pos:end="34:68">1</literal><operator pos:start="34:69" pos:end="34:69">)</operator> <operator pos:start="34:71" pos:end="34:71">*</operator> <operator pos:start="34:73" pos:end="34:73">(</operator><operator pos:start="34:74" pos:end="34:74">(</operator><name pos:start="34:75" pos:end="34:80">height</name> <operator pos:start="34:82" pos:end="34:82">+</operator> <literal type="number" pos:start="34:84" pos:end="34:84">1</literal><operator pos:start="34:85" pos:end="34:85">)</operator> <operator pos:start="34:87" pos:end="34:88">&gt;&gt;</operator> <literal type="number" pos:start="34:90" pos:end="34:90">1</literal><operator pos:start="34:91" pos:end="34:91">)</operator></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:39"><block_content pos:start="35:13" pos:end="35:39">
            <return pos:start="35:13" pos:end="35:39">return <expr pos:start="35:20" pos:end="35:38"><name pos:start="35:20" pos:end="35:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
        <for pos:start="36:9" pos:end="72:13">for <control pos:start="36:13" pos:end="36:39">(<init pos:start="36:14" pos:end="36:19"><expr pos:start="36:14" pos:end="36:18"><name pos:start="36:14" pos:end="36:14">j</name> <operator pos:start="36:16" pos:end="36:16">=</operator> <literal type="number" pos:start="36:18" pos:end="36:18">0</literal></expr>;</init> <condition pos:start="36:21" pos:end="36:31"><expr pos:start="36:21" pos:end="36:30"><name pos:start="36:21" pos:end="36:21">j</name> <operator pos:start="36:23" pos:end="36:23">&lt;</operator> <name pos:start="36:25" pos:end="36:30">height</name></expr>;</condition> <incr pos:start="36:33" pos:end="36:38"><expr pos:start="36:33" pos:end="36:38"><name pos:start="36:33" pos:end="36:33">j</name> <operator pos:start="36:35" pos:end="36:36">+=</operator> <literal type="number" pos:start="36:38" pos:end="36:38">2</literal></expr></incr>)</control> <block pos:start="36:41" pos:end="72:13">{<block_content pos:start="37:13" pos:end="72:13">
            <for pos:start="37:13" pos:end="72:13">for <control pos:start="37:17" pos:end="37:42">(<init pos:start="37:18" pos:end="37:23"><expr pos:start="37:18" pos:end="37:22"><name pos:start="37:18" pos:end="37:18">i</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</init> <condition pos:start="37:25" pos:end="37:34"><expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:25">i</name> <operator pos:start="37:27" pos:end="37:27">&lt;</operator> <name pos:start="37:29" pos:end="37:33">width</name></expr>;</condition> <incr pos:start="37:36" pos:end="37:41"><expr pos:start="37:36" pos:end="37:41"><name pos:start="37:36" pos:end="37:36">i</name> <operator pos:start="37:38" pos:end="37:39">+=</operator> <literal type="number" pos:start="37:41" pos:end="37:41">2</literal></expr></incr>)</control> <block pos:start="37:44" pos:end="72:13">{<block_content pos:start="38:17" pos:end="72:13">
                <expr_stmt pos:start="38:17" pos:end="39:88"><expr pos:start="38:17" pos:end="39:87"><name pos:start="38:17" pos:end="38:22"><name pos:start="38:17" pos:end="38:19">dst</name><index pos:start="38:20" pos:end="38:22">[<expr pos:start="38:21" pos:end="38:21"><name pos:start="38:21" pos:end="38:21">i</name></expr>]</index></name> <operator pos:start="38:24" pos:end="38:24">=</operator> <name pos:start="38:26" pos:end="38:35"><name pos:start="38:26" pos:end="38:28">dst</name><index pos:start="38:29" pos:end="38:35">[<expr pos:start="38:30" pos:end="38:34"><name pos:start="38:30" pos:end="38:30">i</name> <operator pos:start="38:32" pos:end="38:32">+</operator> <literal type="number" pos:start="38:34" pos:end="38:34">1</literal></expr>]</index></name> <operator pos:start="38:37" pos:end="38:37">=</operator>
                <name pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:19">dst</name><index pos:start="39:20" pos:end="39:31">[<expr pos:start="39:21" pos:end="39:30"><name pos:start="39:21" pos:end="39:26">stride</name> <operator pos:start="39:28" pos:end="39:28">+</operator> <name pos:start="39:30" pos:end="39:30">i</name></expr>]</index></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <name pos:start="39:35" pos:end="39:53"><name pos:start="39:35" pos:end="39:37">dst</name><index pos:start="39:38" pos:end="39:53">[<expr pos:start="39:39" pos:end="39:52"><name pos:start="39:39" pos:end="39:44">stride</name> <operator pos:start="39:46" pos:end="39:46">+</operator> <name pos:start="39:48" pos:end="39:48">i</name> <operator pos:start="39:50" pos:end="39:50">+</operator> <literal type="number" pos:start="39:52" pos:end="39:52">1</literal></expr>]</index></name> <operator pos:start="39:55" pos:end="39:55">=</operator> <call pos:start="39:57" pos:end="39:87"><name pos:start="39:57" pos:end="39:77">bytestream2_get_byteu</name><argument_list pos:start="39:78" pos:end="39:87">(<argument pos:start="39:79" pos:end="39:86"><expr pos:start="39:79" pos:end="39:86"><operator pos:start="39:79" pos:end="39:79">&amp;</operator><name pos:start="39:80" pos:end="39:86"><name pos:start="39:80" pos:end="39:82">ctx</name><operator pos:start="39:83" pos:end="39:84">-&gt;</operator><name pos:start="39:85" pos:end="39:86">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:30"><expr pos:start="40:13" pos:end="40:29"><name pos:start="40:13" pos:end="40:15">dst</name> <operator pos:start="40:17" pos:end="40:18">+=</operator> <name pos:start="40:20" pos:end="40:25">stride</name> <operator pos:start="40:27" pos:end="40:27">*</operator> <literal type="number" pos:start="40:29" pos:end="40:29">2</literal></expr>;</expr_stmt>
        <break pos:start="41:9" pos:end="41:14">break;</break>
    <case pos:start="42:5" pos:end="42:11">case <expr pos:start="42:10" pos:end="42:10"><literal type="number" pos:start="42:10" pos:end="42:10">2</literal></expr>:</case>
        <if_stmt pos:start="43:9" pos:end="72:13"><if pos:start="43:9" pos:end="72:13">if <condition pos:start="43:12" pos:end="43:37">(<expr pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:15">seq</name> <operator pos:start="43:17" pos:end="43:18">==</operator> <name pos:start="43:20" pos:end="43:32"><name pos:start="43:20" pos:end="43:22">ctx</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:32">prev_seq</name></name> <operator pos:start="43:34" pos:end="43:34">+</operator> <literal type="number" pos:start="43:36" pos:end="43:36">1</literal></expr>)</condition> <block pos:start="43:39" pos:end="72:13">{<block_content pos:start="44:13" pos:end="72:13">
            <for pos:start="44:13" pos:end="72:13">for <control pos:start="44:17" pos:end="44:43">(<init pos:start="44:18" pos:end="44:23"><expr pos:start="44:18" pos:end="44:22"><name pos:start="44:18" pos:end="44:18">j</name> <operator pos:start="44:20" pos:end="44:20">=</operator> <literal type="number" pos:start="44:22" pos:end="44:22">0</literal></expr>;</init> <condition pos:start="44:25" pos:end="44:35"><expr pos:start="44:25" pos:end="44:34"><name pos:start="44:25" pos:end="44:25">j</name> <operator pos:start="44:27" pos:end="44:27">&lt;</operator> <name pos:start="44:29" pos:end="44:34">height</name></expr>;</condition> <incr pos:start="44:37" pos:end="44:42"><expr pos:start="44:37" pos:end="44:42"><name pos:start="44:37" pos:end="44:37">j</name> <operator pos:start="44:39" pos:end="44:40">+=</operator> <literal type="number" pos:start="44:42" pos:end="44:42">8</literal></expr></incr>)</control> <block pos:start="44:45" pos:end="72:13">{<block_content pos:start="45:17" pos:end="72:13">
                <for pos:start="45:17" pos:end="72:13">for <control pos:start="45:21" pos:end="45:46">(<init pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:26"><name pos:start="45:22" pos:end="45:22">i</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr>;</init> <condition pos:start="45:29" pos:end="45:38"><expr pos:start="45:29" pos:end="45:37"><name pos:start="45:29" pos:end="45:29">i</name> <operator pos:start="45:31" pos:end="45:31">&lt;</operator> <name pos:start="45:33" pos:end="45:37">width</name></expr>;</condition> <incr pos:start="45:40" pos:end="45:45"><expr pos:start="45:40" pos:end="45:45"><name pos:start="45:40" pos:end="45:40">i</name> <operator pos:start="45:42" pos:end="45:43">+=</operator> <literal type="number" pos:start="45:45" pos:end="45:45">8</literal></expr></incr>)</control> <block pos:start="45:48" pos:end="72:13">{<block_content pos:start="46:21" pos:end="72:13">
                    <if_stmt pos:start="46:21" pos:end="48:51"><if pos:start="46:21" pos:end="48:51">if <condition pos:start="46:24" pos:end="47:54">(<expr pos:start="46:25" pos:end="47:53"><call pos:start="46:25" pos:end="47:53"><name pos:start="46:25" pos:end="46:37">process_block</name><argument_list pos:start="46:38" pos:end="47:53">(<argument pos:start="46:39" pos:end="46:41"><expr pos:start="46:39" pos:end="46:41"><name pos:start="46:39" pos:end="46:41">ctx</name></expr></argument>, <argument pos:start="46:44" pos:end="46:50"><expr pos:start="46:44" pos:end="46:50"><name pos:start="46:44" pos:end="46:46">dst</name> <operator pos:start="46:48" pos:end="46:48">+</operator> <name pos:start="46:50" pos:end="46:50">i</name></expr></argument>, <argument pos:start="46:53" pos:end="46:61"><expr pos:start="46:53" pos:end="46:61"><name pos:start="46:53" pos:end="46:57">prev1</name> <operator pos:start="46:59" pos:end="46:59">+</operator> <name pos:start="46:61" pos:end="46:61">i</name></expr></argument>, <argument pos:start="46:64" pos:end="46:72"><expr pos:start="46:64" pos:end="46:72"><name pos:start="46:64" pos:end="46:68">prev2</name> <operator pos:start="46:70" pos:end="46:70">+</operator> <name pos:start="46:72" pos:end="46:72">i</name></expr></argument>, <argument pos:start="46:75" pos:end="46:80"><expr pos:start="46:75" pos:end="46:80"><name pos:start="46:75" pos:end="46:80">stride</name></expr></argument>,
                                      <argument pos:start="47:39" pos:end="47:49"><expr pos:start="47:39" pos:end="47:49"><name pos:start="47:39" pos:end="47:45">tbl_pos</name> <operator pos:start="47:47" pos:end="47:47">+</operator> <literal type="number" pos:start="47:49" pos:end="47:49">8</literal></expr></argument>, <argument pos:start="47:52" pos:end="47:52"><expr pos:start="47:52" pos:end="47:52"><literal type="number" pos:start="47:52" pos:end="47:52">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="48:25" pos:end="48:51"><block_content pos:start="48:25" pos:end="48:51">
                        <return pos:start="48:25" pos:end="48:51">return <expr pos:start="48:32" pos:end="48:50"><name pos:start="48:32" pos:end="48:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt pos:start="49:17" pos:end="49:36"><expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:19">dst</name>   <operator pos:start="49:23" pos:end="49:24">+=</operator> <name pos:start="49:26" pos:end="49:31">stride</name> <operator pos:start="49:33" pos:end="49:33">*</operator> <literal type="number" pos:start="49:35" pos:end="49:35">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="50:17" pos:end="50:36"><expr pos:start="50:17" pos:end="50:35"><name pos:start="50:17" pos:end="50:21">prev1</name> <operator pos:start="50:23" pos:end="50:24">+=</operator> <name pos:start="50:26" pos:end="50:31">stride</name> <operator pos:start="50:33" pos:end="50:33">*</operator> <literal type="number" pos:start="50:35" pos:end="50:35">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="51:17" pos:end="51:36"><expr pos:start="51:17" pos:end="51:35"><name pos:start="51:17" pos:end="51:21">prev2</name> <operator pos:start="51:23" pos:end="51:24">+=</operator> <name pos:start="51:26" pos:end="51:31">stride</name> <operator pos:start="51:33" pos:end="51:33">*</operator> <literal type="number" pos:start="51:35" pos:end="51:35">8</literal></expr>;</expr_stmt>
        <break pos:start="52:9" pos:end="52:14">break;</break>
    <case pos:start="53:5" pos:end="53:11">case <expr pos:start="53:10" pos:end="53:10"><literal type="number" pos:start="53:10" pos:end="53:10">3</literal></expr>:</case>
        <expr_stmt pos:start="54:9" pos:end="54:63"><expr pos:start="54:9" pos:end="54:62"><call pos:start="54:9" pos:end="54:62"><name pos:start="54:9" pos:end="54:14">memcpy</name><argument_list pos:start="54:15" pos:end="54:62">(<argument pos:start="54:16" pos:end="54:24"><expr pos:start="54:16" pos:end="54:24"><name pos:start="54:16" pos:end="54:24"><name pos:start="54:16" pos:end="54:18">ctx</name><operator pos:start="54:19" pos:end="54:20">-&gt;</operator><name pos:start="54:21" pos:end="54:24">frm0</name></name></expr></argument>, <argument pos:start="54:27" pos:end="54:35"><expr pos:start="54:27" pos:end="54:35"><name pos:start="54:27" pos:end="54:35"><name pos:start="54:27" pos:end="54:29">ctx</name><operator pos:start="54:30" pos:end="54:31">-&gt;</operator><name pos:start="54:32" pos:end="54:35">frm2</name></name></expr></argument>, <argument pos:start="54:38" pos:end="54:61"><expr pos:start="54:38" pos:end="54:61"><name pos:start="54:38" pos:end="54:47"><name pos:start="54:38" pos:end="54:40">ctx</name><operator pos:start="54:41" pos:end="54:42">-&gt;</operator><name pos:start="54:43" pos:end="54:47">pitch</name></name> <operator pos:start="54:49" pos:end="54:49">*</operator> <name pos:start="54:51" pos:end="54:61"><name pos:start="54:51" pos:end="54:53">ctx</name><operator pos:start="54:54" pos:end="54:55">-&gt;</operator><name pos:start="54:56" pos:end="54:61">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="55:9" pos:end="55:14">break;</break>
    <case pos:start="56:5" pos:end="56:11">case <expr pos:start="56:10" pos:end="56:10"><literal type="number" pos:start="56:10" pos:end="56:10">4</literal></expr>:</case>
        <expr_stmt pos:start="57:9" pos:end="57:63"><expr pos:start="57:9" pos:end="57:62"><call pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:14">memcpy</name><argument_list pos:start="57:15" pos:end="57:62">(<argument pos:start="57:16" pos:end="57:24"><expr pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:18">ctx</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:24">frm0</name></name></expr></argument>, <argument pos:start="57:27" pos:end="57:35"><expr pos:start="57:27" pos:end="57:35"><name pos:start="57:27" pos:end="57:35"><name pos:start="57:27" pos:end="57:29">ctx</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:35">frm1</name></name></expr></argument>, <argument pos:start="57:38" pos:end="57:61"><expr pos:start="57:38" pos:end="57:61"><name pos:start="57:38" pos:end="57:47"><name pos:start="57:38" pos:end="57:40">ctx</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:47">pitch</name></name> <operator pos:start="57:49" pos:end="57:49">*</operator> <name pos:start="57:51" pos:end="57:61"><name pos:start="57:51" pos:end="57:53">ctx</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:61">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="58:9" pos:end="58:14">break;</break>
    <case pos:start="59:5" pos:end="59:11">case <expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">5</literal></expr>:</case>
        <if_stmt pos:start="60:9" pos:end="61:39"><if pos:start="60:9" pos:end="61:39">if <condition pos:start="60:12" pos:end="60:47">(<expr pos:start="60:13" pos:end="60:46"><call pos:start="60:13" pos:end="60:46"><name pos:start="60:13" pos:end="60:22">rle_decode</name><argument_list pos:start="60:23" pos:end="60:46">(<argument pos:start="60:24" pos:end="60:26"><expr pos:start="60:24" pos:end="60:26"><name pos:start="60:24" pos:end="60:26">ctx</name></expr></argument>, <argument pos:start="60:29" pos:end="60:31"><expr pos:start="60:29" pos:end="60:31"><name pos:start="60:29" pos:end="60:31">dst</name></expr></argument>, <argument pos:start="60:34" pos:end="60:45"><expr pos:start="60:34" pos:end="60:45"><name pos:start="60:34" pos:end="60:45">decoded_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:39"><block_content pos:start="61:13" pos:end="61:39">
            <return pos:start="61:13" pos:end="61:39">return <expr pos:start="61:20" pos:end="61:38"><name pos:start="61:20" pos:end="61:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
        <break pos:start="62:9" pos:end="62:14">break;</break>
    <default pos:start="63:5" pos:end="63:12">default:</default>
        <expr_stmt pos:start="64:9" pos:end="65:70"><expr pos:start="64:9" pos:end="65:69"><call pos:start="64:9" pos:end="65:69"><name pos:start="64:9" pos:end="64:14">av_log</name><argument_list pos:start="64:15" pos:end="65:69">(<argument pos:start="64:16" pos:end="64:25"><expr pos:start="64:16" pos:end="64:25"><name pos:start="64:16" pos:end="64:25"><name pos:start="64:16" pos:end="64:18">ctx</name><operator pos:start="64:19" pos:end="64:20">-&gt;</operator><name pos:start="64:21" pos:end="64:25">avctx</name></name></expr></argument>, <argument pos:start="64:28" pos:end="64:39"><expr pos:start="64:28" pos:end="64:39"><name pos:start="64:28" pos:end="64:39">AV_LOG_ERROR</name></expr></argument>,
               <argument pos:start="65:16" pos:end="65:61"><expr pos:start="65:16" pos:end="65:61"><literal type="string" pos:start="65:16" pos:end="65:61">"subcodec 47 compression %d not implemented\n"</literal></expr></argument>, <argument pos:start="65:64" pos:end="65:68"><expr pos:start="65:64" pos:end="65:68"><name pos:start="65:64" pos:end="65:68">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="66:9" pos:end="66:36">return <expr pos:start="66:16" pos:end="66:35"><name pos:start="66:16" pos:end="66:35">AVERROR_PATCHWELCOME</name></expr>;</return>
    <if_stmt pos:start="67:5" pos:end="70:29"><if pos:start="67:5" pos:end="68:35">if <condition pos:start="67:8" pos:end="67:33">(<expr pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:11">seq</name> <operator pos:start="67:13" pos:end="67:14">==</operator> <name pos:start="67:16" pos:end="67:28"><name pos:start="67:16" pos:end="67:18">ctx</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:28">prev_seq</name></name> <operator pos:start="67:30" pos:end="67:30">+</operator> <literal type="number" pos:start="67:32" pos:end="67:32">1</literal></expr>)</condition><block type="pseudo" pos:start="68:9" pos:end="68:35"><block_content pos:start="68:9" pos:end="68:35">
        <expr_stmt pos:start="68:9" pos:end="68:35"><expr pos:start="68:9" pos:end="68:34"><name pos:start="68:9" pos:end="68:24"><name pos:start="68:9" pos:end="68:11">ctx</name><operator pos:start="68:12" pos:end="68:13">-&gt;</operator><name pos:start="68:14" pos:end="68:24">rotate_code</name></name> <operator pos:start="68:26" pos:end="68:26">=</operator> <name pos:start="68:28" pos:end="68:34">new_rot</name></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="69:5" pos:end="70:29">else<block type="pseudo" pos:start="70:9" pos:end="70:29"><block_content pos:start="70:9" pos:end="70:29">
        <expr_stmt pos:start="70:9" pos:end="70:29"><expr pos:start="70:9" pos:end="70:28"><name pos:start="70:9" pos:end="70:24"><name pos:start="70:9" pos:end="70:11">ctx</name><operator pos:start="70:12" pos:end="70:13">-&gt;</operator><name pos:start="70:14" pos:end="70:24">rotate_code</name></name> <operator pos:start="70:26" pos:end="70:26">=</operator> <literal type="number" pos:start="70:28" pos:end="70:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:7">ctx</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:17">prev_seq</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:23">seq</name></expr>;</expr_stmt>
    <return pos:start="72:5" pos:end="72:13">return <expr pos:start="72:12" pos:end="72:12"><literal type="number" pos:start="72:12" pos:end="72:12">0</literal></expr>;</return></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function></unit>
