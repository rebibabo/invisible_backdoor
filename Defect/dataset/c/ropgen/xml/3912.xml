<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3912.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:48">qio_channel_websock_decode_header</name><parameter_list pos:start="1:49" pos:end="3:62">(<parameter pos:start="1:50" pos:end="1:71"><decl pos:start="1:50" pos:end="1:71"><type pos:start="1:50" pos:end="1:71"><name pos:start="1:50" pos:end="1:66">QIOChannelWebsock</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">ioc</name></decl></parameter>,

                                                 <parameter pos:start="3:50" pos:end="3:61"><decl pos:start="3:50" pos:end="3:61"><type pos:start="3:50" pos:end="3:61"><name pos:start="3:50" pos:end="3:54">Error</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="143:1">{<block_content pos:start="7:5" pos:end="141:13">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:24">opcode</name></decl>, <decl pos:start="7:27" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:17"/><name pos:start="7:27" pos:end="7:29">fin</name></decl>, <decl pos:start="7:32" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:17"/><name pos:start="7:32" pos:end="7:39">has_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:22">header_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:22">payload_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="15:56"><decl pos:start="13:5" pos:end="15:55"><type pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:27">QIOChannelWebsockHeader</name> <modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:35">header</name> <init pos:start="13:37" pos:end="15:55">=

        <expr pos:start="15:9" pos:end="15:55"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:32">QIOChannelWebsockHeader</name> <operator pos:start="15:34" pos:end="15:34">*</operator><operator pos:start="15:35" pos:end="15:35">)</operator><name pos:start="15:36" pos:end="15:55"><name pos:start="15:36" pos:end="15:38">ioc</name><operator pos:start="15:39" pos:end="15:40">-&gt;</operator><name pos:start="15:41" pos:end="15:48">encinput</name><operator pos:start="15:49" pos:end="15:49">.</operator><name pos:start="15:50" pos:end="15:55">buffer</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:11">ioc</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:27">payload_remain</name></name></expr>)</condition> <block pos:start="19:30" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:18">

        <expr_stmt pos:start="21:9" pos:end="25:40"><expr pos:start="21:9" pos:end="25:39"><call pos:start="21:9" pos:end="25:39"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="25:39">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>,

                   <argument pos:start="23:20" pos:end="23:68"><expr pos:start="23:20" pos:end="23:68"><literal type="string" pos:start="23:20" pos:end="23:68">"Decoding header but %zu bytes of payload remain"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:38"><expr pos:start="25:20" pos:end="25:38"><name pos:start="25:20" pos:end="25:38"><name pos:start="25:20" pos:end="25:22">ioc</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:38">payload_remain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:68">(<expr pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:11">ioc</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:21">encinput</name><operator pos:start="31:22" pos:end="31:22">.</operator><name pos:start="31:23" pos:end="31:28">offset</name></name> <operator pos:start="31:30" pos:end="31:30">&lt;</operator> <name pos:start="31:32" pos:end="31:67">QIO_CHANNEL_WEBSOCK_HEADER_LEN_7_BIT</name></expr>)</condition> <block pos:start="31:70" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:37">

        <comment type="block" pos:start="33:9" pos:end="33:33">/* header not complete */</comment>

        <return pos:start="35:9" pos:end="35:37">return <expr pos:start="35:16" pos:end="35:36"><name pos:start="35:16" pos:end="35:36">QIO_CHANNEL_ERR_BLOCK</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:45"><expr pos:start="41:5" pos:end="43:44"><name pos:start="41:5" pos:end="41:7">fin</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <operator pos:start="41:11" pos:end="41:11">(</operator><name pos:start="41:12" pos:end="41:21"><name pos:start="41:12" pos:end="41:17">header</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:21">b0</name></name> <operator pos:start="41:23" pos:end="41:23">&amp;</operator> <name pos:start="41:25" pos:end="41:60">QIO_CHANNEL_WEBSOCK_HEADER_FIELD_FIN</name><operator pos:start="41:61" pos:end="41:61">)</operator> <operator pos:start="41:63" pos:end="41:64">&gt;&gt;</operator>

        <name pos:start="43:9" pos:end="43:44">QIO_CHANNEL_WEBSOCK_HEADER_SHIFT_FIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:66"><expr pos:start="45:5" pos:end="45:65"><name pos:start="45:5" pos:end="45:10">opcode</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <name pos:start="45:14" pos:end="45:23"><name pos:start="45:14" pos:end="45:19">header</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:23">b0</name></name> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <name pos:start="45:27" pos:end="45:65">QIO_CHANNEL_WEBSOCK_HEADER_FIELD_OPCODE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:50"><expr pos:start="47:5" pos:end="49:49"><name pos:start="47:5" pos:end="47:12">has_mask</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:26"><name pos:start="47:17" pos:end="47:22">header</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:26">b1</name></name> <operator pos:start="47:28" pos:end="47:28">&amp;</operator> <name pos:start="47:30" pos:end="47:70">QIO_CHANNEL_WEBSOCK_HEADER_FIELD_HAS_MASK</name><operator pos:start="47:71" pos:end="47:71">)</operator> <operator pos:start="47:73" pos:end="47:74">&gt;&gt;</operator>

        <name pos:start="49:9" pos:end="49:49">QIO_CHANNEL_WEBSOCK_HEADER_SHIFT_HAS_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:76"><expr pos:start="51:5" pos:end="51:75"><name pos:start="51:5" pos:end="51:15">payload_len</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:28"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:28">b1</name></name> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <name pos:start="51:32" pos:end="51:75">QIO_CHANNEL_WEBSOCK_HEADER_FIELD_PAYLOAD_LEN</name></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:51">(<expr pos:start="55:9" pos:end="55:50"><name pos:start="55:9" pos:end="55:14">opcode</name> <operator pos:start="55:16" pos:end="55:17">==</operator> <name pos:start="55:19" pos:end="55:50">QIO_CHANNEL_WEBSOCK_OPCODE_CLOSE</name></expr>)</condition> <block pos:start="55:53" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:17">

        <comment type="block" pos:start="57:9" pos:end="57:24">/* disconnect */</comment>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="73:7">/* Websocket frame sanity check:

     * * Websocket fragmentation is not supported.

     * * All  websockets frames sent by a client have to be masked.

     * * Only binary encoding is supported.

     */</comment>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:13">(<expr pos:start="75:9" pos:end="75:12"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:12">fin</name></expr>)</condition> <block pos:start="75:15" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:69"><expr pos:start="77:9" pos:end="77:68"><call pos:start="77:9" pos:end="77:68"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="77:68">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="77:67"><expr pos:start="77:26" pos:end="77:67"><literal type="string" pos:start="77:26" pos:end="77:67">"websocket fragmentation is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:18">(<expr pos:start="83:9" pos:end="83:17"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:17">has_mask</name></expr>)</condition> <block pos:start="83:20" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:60"><expr pos:start="85:9" pos:end="85:59"><call pos:start="85:9" pos:end="85:59"><name pos:start="85:9" pos:end="85:18">error_setg</name><argument_list pos:start="85:19" pos:end="85:59">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">errp</name></expr></argument>, <argument pos:start="85:26" pos:end="85:58"><expr pos:start="85:26" pos:end="85:58"><literal type="string" pos:start="85:26" pos:end="85:58">"websocket frames must be masked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:58">(<expr pos:start="91:9" pos:end="91:57"><name pos:start="91:9" pos:end="91:14">opcode</name> <operator pos:start="91:16" pos:end="91:17">!=</operator> <name pos:start="91:19" pos:end="91:57">QIO_CHANNEL_WEBSOCK_OPCODE_BINARY_FRAME</name></expr>)</condition> <block pos:start="91:60" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:71"><expr pos:start="93:9" pos:end="93:70"><call pos:start="93:9" pos:end="93:70"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="93:70">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:69"><expr pos:start="93:26" pos:end="93:69"><literal type="string" pos:start="93:26" pos:end="93:69">"only binary websocket frames are supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="135:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:67">(<expr pos:start="101:9" pos:end="101:66"><name pos:start="101:9" pos:end="101:19">payload_len</name> <operator pos:start="101:21" pos:end="101:21">&lt;</operator> <name pos:start="101:23" pos:end="101:66">QIO_CHANNEL_WEBSOCK_PAYLOAD_LEN_MAGIC_16_BIT</name></expr>)</condition> <block pos:start="101:69" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:32">

        <expr_stmt pos:start="103:9" pos:end="103:42"><expr pos:start="103:9" pos:end="103:41"><name pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:11">ioc</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:27">payload_remain</name></name> <operator pos:start="103:29" pos:end="103:29">=</operator> <name pos:start="103:31" pos:end="103:41">payload_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:19">header_size</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:58">QIO_CHANNEL_WEBSOCK_HEADER_LEN_7_BIT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:11">ioc</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:17">mask</name></name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:26">header</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:29">u</name><operator pos:start="107:30" pos:end="107:30">.</operator><name pos:start="107:31" pos:end="107:31">m</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="119:5">else if <condition pos:start="109:15" pos:end="111:77">(<expr pos:start="109:16" pos:end="111:76"><name pos:start="109:16" pos:end="109:26">payload_len</name> <operator pos:start="109:28" pos:end="109:29">==</operator> <name pos:start="109:31" pos:end="109:74">QIO_CHANNEL_WEBSOCK_PAYLOAD_LEN_MAGIC_16_BIT</name> <operator pos:start="109:76" pos:end="109:77">&amp;&amp;</operator>

               <name pos:start="111:16" pos:end="111:35"><name pos:start="111:16" pos:end="111:18">ioc</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:28">encinput</name><operator pos:start="111:29" pos:end="111:29">.</operator><name pos:start="111:30" pos:end="111:35">offset</name></name> <operator pos:start="111:37" pos:end="111:38">&gt;=</operator> <name pos:start="111:40" pos:end="111:76">QIO_CHANNEL_WEBSOCK_HEADER_LEN_16_BIT</name></expr>)</condition> <block pos:start="111:79" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:38">

        <expr_stmt pos:start="113:9" pos:end="113:61"><expr pos:start="113:9" pos:end="113:60"><name pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:11">ioc</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:27">payload_remain</name></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <call pos:start="113:31" pos:end="113:60"><name pos:start="113:31" pos:end="113:41">be16_to_cpu</name><argument_list pos:start="113:42" pos:end="113:60">(<argument pos:start="113:43" pos:end="113:59"><expr pos:start="113:43" pos:end="113:59"><name pos:start="113:43" pos:end="113:59"><name pos:start="113:43" pos:end="113:48">header</name><operator pos:start="113:49" pos:end="113:50">-&gt;</operator><name pos:start="113:51" pos:end="113:51">u</name><operator pos:start="113:52" pos:end="113:52">.</operator><name pos:start="113:53" pos:end="113:55">s16</name><operator pos:start="113:56" pos:end="113:56">.</operator><name pos:start="113:57" pos:end="113:59">l16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:60"><expr pos:start="115:9" pos:end="115:59"><name pos:start="115:9" pos:end="115:19">header_size</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:59">QIO_CHANNEL_WEBSOCK_HEADER_LEN_16_BIT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:38"><expr pos:start="117:9" pos:end="117:37"><name pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:11">ioc</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:17">mask</name></name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:37"><name pos:start="117:21" pos:end="117:26">header</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:29">u</name><operator pos:start="117:30" pos:end="117:30">.</operator><name pos:start="117:31" pos:end="117:33">s16</name><operator pos:start="117:34" pos:end="117:34">.</operator><name pos:start="117:35" pos:end="117:37">m16</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="119:7" pos:end="129:5">else if <condition pos:start="119:15" pos:end="121:77">(<expr pos:start="119:16" pos:end="121:76"><name pos:start="119:16" pos:end="119:26">payload_len</name> <operator pos:start="119:28" pos:end="119:29">==</operator> <name pos:start="119:31" pos:end="119:74">QIO_CHANNEL_WEBSOCK_PAYLOAD_LEN_MAGIC_64_BIT</name> <operator pos:start="119:76" pos:end="119:77">&amp;&amp;</operator>

               <name pos:start="121:16" pos:end="121:35"><name pos:start="121:16" pos:end="121:18">ioc</name><operator pos:start="121:19" pos:end="121:20">-&gt;</operator><name pos:start="121:21" pos:end="121:28">encinput</name><operator pos:start="121:29" pos:end="121:29">.</operator><name pos:start="121:30" pos:end="121:35">offset</name></name> <operator pos:start="121:37" pos:end="121:38">&gt;=</operator> <name pos:start="121:40" pos:end="121:76">QIO_CHANNEL_WEBSOCK_HEADER_LEN_64_BIT</name></expr>)</condition> <block pos:start="121:79" pos:end="129:5">{<block_content pos:start="123:9" pos:end="127:38">

        <expr_stmt pos:start="123:9" pos:end="123:61"><expr pos:start="123:9" pos:end="123:60"><name pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:11">ioc</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:27">payload_remain</name></name> <operator pos:start="123:29" pos:end="123:29">=</operator> <call pos:start="123:31" pos:end="123:60"><name pos:start="123:31" pos:end="123:41">be64_to_cpu</name><argument_list pos:start="123:42" pos:end="123:60">(<argument pos:start="123:43" pos:end="123:59"><expr pos:start="123:43" pos:end="123:59"><name pos:start="123:43" pos:end="123:59"><name pos:start="123:43" pos:end="123:48">header</name><operator pos:start="123:49" pos:end="123:50">-&gt;</operator><name pos:start="123:51" pos:end="123:51">u</name><operator pos:start="123:52" pos:end="123:52">.</operator><name pos:start="123:53" pos:end="123:55">s64</name><operator pos:start="123:56" pos:end="123:56">.</operator><name pos:start="123:57" pos:end="123:59">l64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:60"><expr pos:start="125:9" pos:end="125:59"><name pos:start="125:9" pos:end="125:19">header_size</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:59">QIO_CHANNEL_WEBSOCK_HEADER_LEN_64_BIT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:38"><expr pos:start="127:9" pos:end="127:37"><name pos:start="127:9" pos:end="127:17"><name pos:start="127:9" pos:end="127:11">ioc</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:17">mask</name></name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:37"><name pos:start="127:21" pos:end="127:26">header</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:29">u</name><operator pos:start="127:30" pos:end="127:30">.</operator><name pos:start="127:31" pos:end="127:33">s64</name><operator pos:start="127:34" pos:end="127:34">.</operator><name pos:start="127:35" pos:end="127:37">m64</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="135:5">else <block pos:start="129:12" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:37">

        <comment type="block" pos:start="131:9" pos:end="131:33">/* header not complete */</comment>

        <return pos:start="133:9" pos:end="133:37">return <expr pos:start="133:16" pos:end="133:36"><name pos:start="133:16" pos:end="133:36">QIO_CHANNEL_ERR_BLOCK</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:48"><expr pos:start="139:5" pos:end="139:47"><call pos:start="139:5" pos:end="139:47"><name pos:start="139:5" pos:end="139:18">buffer_advance</name><argument_list pos:start="139:19" pos:end="139:47">(<argument pos:start="139:20" pos:end="139:33"><expr pos:start="139:20" pos:end="139:33"><operator pos:start="139:20" pos:end="139:20">&amp;</operator><name pos:start="139:21" pos:end="139:33"><name pos:start="139:21" pos:end="139:23">ioc</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:33">encinput</name></name></expr></argument>, <argument pos:start="139:36" pos:end="139:46"><expr pos:start="139:36" pos:end="139:46"><name pos:start="139:36" pos:end="139:46">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
