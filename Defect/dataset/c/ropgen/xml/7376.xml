<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7376.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">mips_r4k_init</name> <parameter_list pos:start="1:20" pos:end="7:71">(<parameter pos:start="1:21" pos:end="1:39"><decl pos:start="1:21" pos:end="1:39"><type pos:start="1:21" pos:end="1:39"><name pos:start="1:21" pos:end="1:30">ram_addr_t</name></type> <name pos:start="1:32" pos:end="1:39">ram_size</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:43"><decl pos:start="3:21" pos:end="3:43"><type pos:start="3:21" pos:end="3:43"><specifier pos:start="3:21" pos:end="3:25">const</specifier> <name pos:start="3:27" pos:end="3:30">char</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:43">boot_device</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:47"><decl pos:start="5:21" pos:end="5:47"><type pos:start="5:21" pos:end="5:47"><specifier pos:start="5:21" pos:end="5:25">const</specifier> <name pos:start="5:27" pos:end="5:30">char</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:47">kernel_filename</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:75"><decl pos:start="5:50" pos:end="5:75"><type pos:start="5:50" pos:end="5:75"><specifier pos:start="5:50" pos:end="5:54">const</specifier> <name pos:start="5:56" pos:end="5:59">char</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:75">kernel_cmdline</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:47"><decl pos:start="7:21" pos:end="7:47"><type pos:start="7:21" pos:end="7:47"><specifier pos:start="7:21" pos:end="7:25">const</specifier> <name pos:start="7:27" pos:end="7:30">char</name> <modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:47">initrd_filename</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:70"><decl pos:start="7:50" pos:end="7:70"><type pos:start="7:50" pos:end="7:70"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:70">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="273:1">{<block_content pos:start="11:5" pos:end="271:31">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:57"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:35">address_space_mem</name> <init pos:start="13:37" pos:end="13:57">= <expr pos:start="13:39" pos:end="13:57"><call pos:start="13:39" pos:end="13:57"><name pos:start="13:39" pos:end="13:55">get_system_memory</name><argument_list pos:start="13:56" pos:end="13:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">ram</name> <init pos:start="15:23" pos:end="15:46">= <expr pos:start="15:25" pos:end="15:46"><call pos:start="15:25" pos:end="15:46"><name pos:start="15:25" pos:end="15:29">g_new</name><argument_list pos:start="15:30" pos:end="15:46">(<argument pos:start="15:31" pos:end="15:42"><expr pos:start="15:31" pos:end="15:42"><name pos:start="15:31" pos:end="15:42">MemoryRegion</name></expr></argument>, <argument pos:start="15:45" pos:end="15:45"><expr pos:start="15:45" pos:end="15:45"><literal type="number" pos:start="15:45" pos:end="15:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:22">bios</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:49"><decl pos:start="19:5" pos:end="19:48"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:23">iomem</name> <init pos:start="19:25" pos:end="19:48">= <expr pos:start="19:27" pos:end="19:48"><call pos:start="19:27" pos:end="19:48"><name pos:start="19:27" pos:end="19:31">g_new</name><argument_list pos:start="19:32" pos:end="19:48">(<argument pos:start="19:33" pos:end="19:44"><expr pos:start="19:33" pos:end="19:44"><name pos:start="19:33" pos:end="19:44">MemoryRegion</name></expr></argument>, <argument pos:start="19:47" pos:end="19:47"><expr pos:start="19:47" pos:end="19:47"><literal type="number" pos:start="19:47" pos:end="19:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">CPUState</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">ResetData</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:46"><decl pos:start="31:5" pos:end="31:45"><type pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:13">DriveInfo</name> <modifier pos:start="31:15" pos:end="31:15">*</modifier></type><name pos:start="31:16" pos:end="31:45"><name pos:start="31:16" pos:end="31:17">hd</name><index pos:start="31:18" pos:end="31:45">[<expr pos:start="31:19" pos:end="31:44"><name pos:start="31:19" pos:end="31:29">MAX_IDE_BUS</name> <operator pos:start="31:31" pos:end="31:31">*</operator> <name pos:start="31:33" pos:end="31:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:21"><decl pos:start="33:5" pos:end="33:20"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:13">DriveInfo</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:11"><decl pos:start="35:5" pos:end="35:10"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:10">be</name></decl>;</decl_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:19">/* init CPUs */</comment>

    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">NULL</name></expr>)</condition> <block pos:start="41:28" pos:end="53:5">{<block_content pos:start="45:9" pos:end="52:0">

<cpp:ifdef pos:start="43:1" pos:end="43:20">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="45:9" pos:end="48:0"><expr pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:17">cpu_model</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="string" pos:start="45:21" pos:end="45:27">"R4000"</literal></expr>;</expr_stmt>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="49:9" pos:end="52:0"><expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:17">cpu_model</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="string" pos:start="49:21" pos:end="49:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:30"><expr pos:start="55:5" pos:end="55:29"><name pos:start="55:5" pos:end="55:7">env</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:29"><name pos:start="55:11" pos:end="55:18">cpu_init</name><argument_list pos:start="55:19" pos:end="55:29">(<argument pos:start="55:20" pos:end="55:28"><expr pos:start="55:20" pos:end="55:28"><name pos:start="55:20" pos:end="55:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:13">(<expr pos:start="57:9" pos:end="57:12"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:12">env</name></expr>)</condition> <block pos:start="57:15" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:16">

        <expr_stmt pos:start="59:9" pos:end="59:59"><expr pos:start="59:9" pos:end="59:58"><call pos:start="59:9" pos:end="59:58"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:58">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:57"><expr pos:start="59:25" pos:end="59:57"><literal type="string" pos:start="59:25" pos:end="59:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><call pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">exit</name><argument_list pos:start="61:13" pos:end="61:15">(<argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:46"><expr pos:start="65:5" pos:end="65:45"><name pos:start="65:5" pos:end="65:14">reset_info</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:45"><name pos:start="65:18" pos:end="65:26">g_malloc0</name><argument_list pos:start="65:27" pos:end="65:45">(<argument pos:start="65:28" pos:end="65:44"><expr pos:start="65:28" pos:end="65:44"><sizeof pos:start="65:28" pos:end="65:44">sizeof<argument_list pos:start="65:34" pos:end="65:44">(<argument pos:start="65:35" pos:end="65:43"><expr pos:start="65:35" pos:end="65:43"><name pos:start="65:35" pos:end="65:43">ResetData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:26"><expr pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:14">reset_info</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:19">env</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:25">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:14">reset_info</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:22">vector</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:42"><name pos:start="69:26" pos:end="69:28">env</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:39">active_tc</name><operator pos:start="69:40" pos:end="69:40">.</operator><name pos:start="69:41" pos:end="69:42">PC</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:52"><expr pos:start="71:5" pos:end="71:51"><call pos:start="71:5" pos:end="71:51"><name pos:start="71:5" pos:end="71:23">qemu_register_reset</name><argument_list pos:start="71:24" pos:end="71:51">(<argument pos:start="71:25" pos:end="71:38"><expr pos:start="71:25" pos:end="71:38"><name pos:start="71:25" pos:end="71:38">main_cpu_reset</name></expr></argument>, <argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><name pos:start="71:41" pos:end="71:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:22">/* allocate RAM */</comment>

    <if_stmt pos:start="77:5" pos:end="87:5"><if pos:start="77:5" pos:end="87:5">if <condition pos:start="77:8" pos:end="77:31">(<expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:16">ram_size</name> <operator pos:start="77:18" pos:end="77:18">&gt;</operator> <operator pos:start="77:20" pos:end="77:20">(</operator><literal type="number" pos:start="77:21" pos:end="77:23">256</literal> <operator pos:start="77:25" pos:end="77:26">&lt;&lt;</operator> <literal type="number" pos:start="77:28" pos:end="77:29">20</literal><operator pos:start="77:30" pos:end="77:30">)</operator></expr>)</condition> <block pos:start="77:33" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:16">

        <expr_stmt pos:start="79:9" pos:end="83:54"><expr pos:start="79:9" pos:end="83:53"><call pos:start="79:9" pos:end="83:53"><name pos:start="79:9" pos:end="79:15">fprintf</name><argument_list pos:start="79:16" pos:end="83:53">(<argument pos:start="79:17" pos:end="79:22"><expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">stderr</name></expr></argument>,

                <argument pos:start="81:17" pos:end="81:81"><expr pos:start="81:17" pos:end="81:81"><literal type="string" pos:start="81:17" pos:end="81:81">"qemu: Too much memory for this machine: %d MB, maximum 256 MB\n"</literal></expr></argument>,

                <argument pos:start="83:17" pos:end="83:52"><expr pos:start="83:17" pos:end="83:52"><operator pos:start="83:17" pos:end="83:17">(</operator><operator pos:start="83:18" pos:end="83:18">(</operator><name pos:start="83:19" pos:end="83:26">unsigned</name> <name pos:start="83:28" pos:end="83:30">int</name><operator pos:start="83:31" pos:end="83:31">)</operator><name pos:start="83:32" pos:end="83:39">ram_size</name> <operator pos:start="83:41" pos:end="83:41">/</operator> <operator pos:start="83:43" pos:end="83:43">(</operator><literal type="number" pos:start="83:44" pos:end="83:44">1</literal> <operator pos:start="83:46" pos:end="83:47">&lt;&lt;</operator> <literal type="number" pos:start="83:49" pos:end="83:50">20</literal><operator pos:start="83:51" pos:end="83:51">)</operator><operator pos:start="83:52" pos:end="83:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:16"><expr pos:start="85:9" pos:end="85:15"><call pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:12">exit</name><argument_list pos:start="85:13" pos:end="85:15">(<argument pos:start="85:14" pos:end="85:14"><expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:64"><expr pos:start="89:5" pos:end="89:63"><call pos:start="89:5" pos:end="89:63"><name pos:start="89:5" pos:end="89:26">memory_region_init_ram</name><argument_list pos:start="89:27" pos:end="89:63">(<argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">ram</name></expr></argument>, <argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">NULL</name></expr></argument>, <argument pos:start="89:39" pos:end="89:52"><expr pos:start="89:39" pos:end="89:52"><literal type="string" pos:start="89:39" pos:end="89:52">"mips_r4k.ram"</literal></expr></argument>, <argument pos:start="89:55" pos:end="89:62"><expr pos:start="89:55" pos:end="89:62"><name pos:start="89:55" pos:end="89:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:59"><expr pos:start="93:5" pos:end="93:58"><call pos:start="93:5" pos:end="93:58"><name pos:start="93:5" pos:end="93:31">memory_region_add_subregion</name><argument_list pos:start="93:32" pos:end="93:58">(<argument pos:start="93:33" pos:end="93:49"><expr pos:start="93:33" pos:end="93:49"><name pos:start="93:33" pos:end="93:49">address_space_mem</name></expr></argument>, <argument pos:start="93:52" pos:end="93:52"><expr pos:start="93:52" pos:end="93:52"><literal type="number" pos:start="93:52" pos:end="93:52">0</literal></expr></argument>, <argument pos:start="93:55" pos:end="93:57"><expr pos:start="93:55" pos:end="93:57"><name pos:start="93:55" pos:end="93:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:77"><expr pos:start="97:5" pos:end="97:76"><call pos:start="97:5" pos:end="97:76"><name pos:start="97:5" pos:end="97:25">memory_region_init_io</name><argument_list pos:start="97:26" pos:end="97:76">(<argument pos:start="97:27" pos:end="97:31"><expr pos:start="97:27" pos:end="97:31"><name pos:start="97:27" pos:end="97:31">iomem</name></expr></argument>, <argument pos:start="97:34" pos:end="97:47"><expr pos:start="97:34" pos:end="97:47"><operator pos:start="97:34" pos:end="97:34">&amp;</operator><name pos:start="97:35" pos:end="97:47">mips_qemu_ops</name></expr></argument>, <argument pos:start="97:50" pos:end="97:53"><expr pos:start="97:50" pos:end="97:53"><name pos:start="97:50" pos:end="97:53">NULL</name></expr></argument>, <argument pos:start="97:56" pos:end="97:66"><expr pos:start="97:56" pos:end="97:66"><literal type="string" pos:start="97:56" pos:end="97:66">"mips-qemu"</literal></expr></argument>, <argument pos:start="97:69" pos:end="97:75"><expr pos:start="97:69" pos:end="97:75"><literal type="number" pos:start="97:69" pos:end="97:75">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:70"><expr pos:start="99:5" pos:end="99:69"><call pos:start="99:5" pos:end="99:69"><name pos:start="99:5" pos:end="99:31">memory_region_add_subregion</name><argument_list pos:start="99:32" pos:end="99:69">(<argument pos:start="99:33" pos:end="99:49"><expr pos:start="99:33" pos:end="99:49"><name pos:start="99:33" pos:end="99:49">address_space_mem</name></expr></argument>, <argument pos:start="99:52" pos:end="99:61"><expr pos:start="99:52" pos:end="99:61"><literal type="number" pos:start="99:52" pos:end="99:61">0x1fbf0000</literal></expr></argument>, <argument pos:start="99:64" pos:end="99:68"><expr pos:start="99:64" pos:end="99:68"><name pos:start="99:64" pos:end="99:68">iomem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="109:14">/* Try to load a BIOS image. If this fails, we continue regardless,

       but initialize the hardware ourselves. When a kernel gets

       preloaded we also initialize the hardware, since the BIOS wasn't

       run. */</comment>

    <if_stmt pos:start="111:5" pos:end="113:34"><if pos:start="111:5" pos:end="113:34">if <condition pos:start="111:8" pos:end="111:26">(<expr pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:17">bios_name</name> <operator pos:start="111:19" pos:end="111:20">==</operator> <name pos:start="111:22" pos:end="111:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:34"><block_content pos:start="113:9" pos:end="113:34">

        <expr_stmt pos:start="113:9" pos:end="113:34"><expr pos:start="113:9" pos:end="113:33"><name pos:start="113:9" pos:end="113:17">bios_name</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <name pos:start="113:21" pos:end="113:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:62"><expr pos:start="115:5" pos:end="115:61"><name pos:start="115:5" pos:end="115:12">filename</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <call pos:start="115:16" pos:end="115:61"><name pos:start="115:16" pos:end="115:29">qemu_find_file</name><argument_list pos:start="115:30" pos:end="115:61">(<argument pos:start="115:31" pos:end="115:49"><expr pos:start="115:31" pos:end="115:49"><name pos:start="115:31" pos:end="115:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="115:52" pos:end="115:60"><expr pos:start="115:52" pos:end="115:60"><name pos:start="115:52" pos:end="115:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="128:0"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:17">(<expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:16">filename</name></expr>)</condition> <block pos:start="117:19" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:45">

        <expr_stmt pos:start="119:9" pos:end="119:45"><expr pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:17">bios_size</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <call pos:start="119:21" pos:end="119:44"><name pos:start="119:21" pos:end="119:34">get_image_size</name><argument_list pos:start="119:35" pos:end="119:44">(<argument pos:start="119:36" pos:end="119:43"><expr pos:start="119:36" pos:end="119:43"><name pos:start="119:36" pos:end="119:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="128:0">else <block pos:start="121:12" pos:end="128:0">{<block_content pos:start="123:9" pos:end="123:23">

        <expr_stmt pos:start="123:9" pos:end="123:23"><expr pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:17">bios_size</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <operator pos:start="123:21" pos:end="123:21">-</operator><literal type="number" pos:start="123:22" pos:end="123:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="127:1" pos:end="127:29">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="129:5" pos:end="132:0"><expr pos:start="129:5" pos:end="129:10"><name pos:start="129:5" pos:end="129:6">be</name> <operator pos:start="129:8" pos:end="129:8">=</operator> <literal type="number" pos:start="129:10" pos:end="129:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="131:1" pos:end="131:5">#<cpp:directive pos:start="131:2" pos:end="131:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="133:5" pos:end="136:0"><expr pos:start="133:5" pos:end="133:10"><name pos:start="133:5" pos:end="133:6">be</name> <operator pos:start="133:8" pos:end="133:8">=</operator> <literal type="number" pos:start="133:10" pos:end="133:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="135:1" pos:end="135:6">#<cpp:directive pos:start="135:2" pos:end="135:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="137:5" pos:end="177:5"><if pos:start="137:5" pos:end="151:5">if <condition pos:start="137:8" pos:end="137:52">(<expr pos:start="137:9" pos:end="137:51"><operator pos:start="137:9" pos:end="137:9">(</operator><name pos:start="137:10" pos:end="137:18">bios_size</name> <operator pos:start="137:20" pos:end="137:20">&gt;</operator> <literal type="number" pos:start="137:22" pos:end="137:22">0</literal><operator pos:start="137:23" pos:end="137:23">)</operator> <operator pos:start="137:25" pos:end="137:26">&amp;&amp;</operator> <operator pos:start="137:28" pos:end="137:28">(</operator><name pos:start="137:29" pos:end="137:37">bios_size</name> <operator pos:start="137:39" pos:end="137:40">&lt;=</operator> <name pos:start="137:42" pos:end="137:50">BIOS_SIZE</name><operator pos:start="137:51" pos:end="137:51">)</operator></expr>)</condition> <block pos:start="137:54" pos:end="151:5">{<block_content pos:start="139:9" pos:end="149:61">

        <expr_stmt pos:start="139:9" pos:end="139:38"><expr pos:start="139:9" pos:end="139:37"><name pos:start="139:9" pos:end="139:12">bios</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <call pos:start="139:16" pos:end="139:37"><name pos:start="139:16" pos:end="139:20">g_new</name><argument_list pos:start="139:21" pos:end="139:37">(<argument pos:start="139:22" pos:end="139:33"><expr pos:start="139:22" pos:end="139:33"><name pos:start="139:22" pos:end="139:33">MemoryRegion</name></expr></argument>, <argument pos:start="139:36" pos:end="139:36"><expr pos:start="139:36" pos:end="139:36"><literal type="number" pos:start="139:36" pos:end="139:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:71"><expr pos:start="141:9" pos:end="141:70"><call pos:start="141:9" pos:end="141:70"><name pos:start="141:9" pos:end="141:30">memory_region_init_ram</name><argument_list pos:start="141:31" pos:end="141:70">(<argument pos:start="141:32" pos:end="141:35"><expr pos:start="141:32" pos:end="141:35"><name pos:start="141:32" pos:end="141:35">bios</name></expr></argument>, <argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><name pos:start="141:38" pos:end="141:41">NULL</name></expr></argument>, <argument pos:start="141:44" pos:end="141:58"><expr pos:start="141:44" pos:end="141:58"><literal type="string" pos:start="141:44" pos:end="141:58">"mips_r4k.bios"</literal></expr></argument>, <argument pos:start="141:61" pos:end="141:69"><expr pos:start="141:61" pos:end="141:69"><name pos:start="141:61" pos:end="141:69">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:47"><expr pos:start="143:9" pos:end="143:46"><call pos:start="143:9" pos:end="143:46"><name pos:start="143:9" pos:end="143:34">memory_region_set_readonly</name><argument_list pos:start="143:35" pos:end="143:46">(<argument pos:start="143:36" pos:end="143:39"><expr pos:start="143:36" pos:end="143:39"><name pos:start="143:36" pos:end="143:39">bios</name></expr></argument>, <argument pos:start="143:42" pos:end="143:45"><expr pos:start="143:42" pos:end="143:45"><name pos:start="143:42" pos:end="143:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:75"><expr pos:start="145:9" pos:end="145:74"><call pos:start="145:9" pos:end="145:74"><name pos:start="145:9" pos:end="145:35">memory_region_add_subregion</name><argument_list pos:start="145:36" pos:end="145:74">(<argument pos:start="145:37" pos:end="145:55"><expr pos:start="145:37" pos:end="145:55"><call pos:start="145:37" pos:end="145:55"><name pos:start="145:37" pos:end="145:53">get_system_memory</name><argument_list pos:start="145:54" pos:end="145:55">()</argument_list></call></expr></argument>, <argument pos:start="145:58" pos:end="145:67"><expr pos:start="145:58" pos:end="145:67"><literal type="number" pos:start="145:58" pos:end="145:67">0x1fc00000</literal></expr></argument>, <argument pos:start="145:70" pos:end="145:73"><expr pos:start="145:70" pos:end="145:73"><name pos:start="145:70" pos:end="145:73">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:61"><expr pos:start="149:9" pos:end="149:60"><call pos:start="149:9" pos:end="149:60"><name pos:start="149:9" pos:end="149:27">load_image_targphys</name><argument_list pos:start="149:28" pos:end="149:60">(<argument pos:start="149:29" pos:end="149:36"><expr pos:start="149:29" pos:end="149:36"><name pos:start="149:29" pos:end="149:36">filename</name></expr></argument>, <argument pos:start="149:39" pos:end="149:48"><expr pos:start="149:39" pos:end="149:48"><literal type="number" pos:start="149:39" pos:end="149:48">0x1fc00000</literal></expr></argument>, <argument pos:start="149:51" pos:end="149:59"><expr pos:start="149:51" pos:end="149:59"><name pos:start="149:51" pos:end="149:59">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="151:7" pos:end="167:5">else if <condition pos:start="151:15" pos:end="151:60">(<expr pos:start="151:16" pos:end="151:59"><operator pos:start="151:16" pos:end="151:16">(</operator><name pos:start="151:17" pos:end="151:21">dinfo</name> <operator pos:start="151:23" pos:end="151:23">=</operator> <call pos:start="151:25" pos:end="151:50"><name pos:start="151:25" pos:end="151:33">drive_get</name><argument_list pos:start="151:34" pos:end="151:50">(<argument pos:start="151:35" pos:end="151:43"><expr pos:start="151:35" pos:end="151:43"><name pos:start="151:35" pos:end="151:43">IF_PFLASH</name></expr></argument>, <argument pos:start="151:46" pos:end="151:46"><expr pos:start="151:46" pos:end="151:46"><literal type="number" pos:start="151:46" pos:end="151:46">0</literal></expr></argument>, <argument pos:start="151:49" pos:end="151:49"><expr pos:start="151:49" pos:end="151:49"><literal type="number" pos:start="151:49" pos:end="151:49">0</literal></expr></argument>)</argument_list></call><operator pos:start="151:51" pos:end="151:51">)</operator> <operator pos:start="151:53" pos:end="151:54">!=</operator> <name pos:start="151:56" pos:end="151:59">NULL</name></expr>)</condition> <block pos:start="151:62" pos:end="167:5">{<block_content pos:start="153:9" pos:end="165:9">

        <decl_stmt pos:start="153:9" pos:end="153:39"><decl pos:start="153:9" pos:end="153:38"><type pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:16">uint32_t</name></type> <name pos:start="153:18" pos:end="153:25">mips_rom</name> <init pos:start="153:27" pos:end="153:38">= <expr pos:start="153:29" pos:end="153:38"><literal type="number" pos:start="153:29" pos:end="153:38">0x00400000</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="155:9" pos:end="165:9"><if pos:start="155:9" pos:end="165:9">if <condition pos:start="155:12" pos:end="161:54">(<expr pos:start="155:13" pos:end="161:53"><operator pos:start="155:13" pos:end="155:13">!</operator><call pos:start="155:14" pos:end="161:53"><name pos:start="155:14" pos:end="155:34">pflash_cfi01_register</name><argument_list pos:start="155:35" pos:end="161:53">(<argument pos:start="155:36" pos:end="155:45"><expr pos:start="155:36" pos:end="155:45"><literal type="number" pos:start="155:36" pos:end="155:45">0x1fc00000</literal></expr></argument>, <argument pos:start="155:48" pos:end="155:51"><expr pos:start="155:48" pos:end="155:51"><name pos:start="155:48" pos:end="155:51">NULL</name></expr></argument>, <argument pos:start="155:54" pos:end="155:68"><expr pos:start="155:54" pos:end="155:68"><literal type="string" pos:start="155:54" pos:end="155:68">"mips_r4k.bios"</literal></expr></argument>, <argument pos:start="155:71" pos:end="155:78"><expr pos:start="155:71" pos:end="155:78"><name pos:start="155:71" pos:end="155:78">mips_rom</name></expr></argument>,

                                   <argument pos:start="157:36" pos:end="157:46"><expr pos:start="157:36" pos:end="157:46"><name pos:start="157:36" pos:end="157:46"><name pos:start="157:36" pos:end="157:40">dinfo</name><operator pos:start="157:41" pos:end="157:42">-&gt;</operator><name pos:start="157:43" pos:end="157:46">bdrv</name></name></expr></argument>, <argument pos:start="157:49" pos:end="157:58"><expr pos:start="157:49" pos:end="157:58"><name pos:start="157:49" pos:end="157:58">sector_len</name></expr></argument>,

                                   <argument pos:start="159:36" pos:end="159:56"><expr pos:start="159:36" pos:end="159:56"><name pos:start="159:36" pos:end="159:43">mips_rom</name> <operator pos:start="159:45" pos:end="159:45">/</operator> <name pos:start="159:47" pos:end="159:56">sector_len</name></expr></argument>,

                                   <argument pos:start="161:36" pos:end="161:36"><expr pos:start="161:36" pos:end="161:36"><literal type="number" pos:start="161:36" pos:end="161:36">4</literal></expr></argument>, <argument pos:start="161:39" pos:end="161:39"><expr pos:start="161:39" pos:end="161:39"><literal type="number" pos:start="161:39" pos:end="161:39">0</literal></expr></argument>, <argument pos:start="161:42" pos:end="161:42"><expr pos:start="161:42" pos:end="161:42"><literal type="number" pos:start="161:42" pos:end="161:42">0</literal></expr></argument>, <argument pos:start="161:45" pos:end="161:45"><expr pos:start="161:45" pos:end="161:45"><literal type="number" pos:start="161:45" pos:end="161:45">0</literal></expr></argument>, <argument pos:start="161:48" pos:end="161:48"><expr pos:start="161:48" pos:end="161:48"><literal type="number" pos:start="161:48" pos:end="161:48">0</literal></expr></argument>, <argument pos:start="161:51" pos:end="161:52"><expr pos:start="161:51" pos:end="161:52"><name pos:start="161:51" pos:end="161:52">be</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:56" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:71">

            <expr_stmt pos:start="163:13" pos:end="163:71"><expr pos:start="163:13" pos:end="163:70"><call pos:start="163:13" pos:end="163:70"><name pos:start="163:13" pos:end="163:19">fprintf</name><argument_list pos:start="163:20" pos:end="163:70">(<argument pos:start="163:21" pos:end="163:26"><expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:26">stderr</name></expr></argument>, <argument pos:start="163:29" pos:end="163:69"><expr pos:start="163:29" pos:end="163:69"><literal type="string" pos:start="163:29" pos:end="163:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if>

    <else pos:start="169:5" pos:end="177:5">else <block pos:start="169:10" pos:end="177:5">{<block_content pos:start="173:9" pos:end="175:27">

	<comment type="block" pos:start="171:9" pos:end="171:23">/* not fatal */</comment>

        <expr_stmt pos:start="173:9" pos:end="175:27"><expr pos:start="173:9" pos:end="175:26"><call pos:start="173:9" pos:end="175:26"><name pos:start="173:9" pos:end="173:15">fprintf</name><argument_list pos:start="173:16" pos:end="175:26">(<argument pos:start="173:17" pos:end="173:22"><expr pos:start="173:17" pos:end="173:22"><name pos:start="173:17" pos:end="173:22">stderr</name></expr></argument>, <argument pos:start="173:25" pos:end="173:72"><expr pos:start="173:25" pos:end="173:72"><literal type="string" pos:start="173:25" pos:end="173:72">"qemu: Warning, could not load MIPS bios '%s'\n"</literal></expr></argument>,

		<argument pos:start="175:17" pos:end="175:25"><expr pos:start="175:17" pos:end="175:25"><name pos:start="175:17" pos:end="175:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:17">(<expr pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:16">filename</name></expr>)</condition> <block pos:start="179:19" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:25">

        <expr_stmt pos:start="181:9" pos:end="181:25"><expr pos:start="181:9" pos:end="181:24"><call pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:14">g_free</name><argument_list pos:start="181:15" pos:end="181:24">(<argument pos:start="181:16" pos:end="181:23"><expr pos:start="181:16" pos:end="181:23"><name pos:start="181:16" pos:end="181:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="199:5"><if pos:start="187:5" pos:end="199:5">if <condition pos:start="187:8" pos:end="187:24">(<expr pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:23">kernel_filename</name></expr>)</condition> <block pos:start="187:26" pos:end="199:5">{<block_content pos:start="189:9" pos:end="197:43">

        <expr_stmt pos:start="189:9" pos:end="189:41"><expr pos:start="189:9" pos:end="189:40"><name pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:20">loaderparams</name><operator pos:start="189:21" pos:end="189:21">.</operator><name pos:start="189:22" pos:end="189:29">ram_size</name></name> <operator pos:start="189:31" pos:end="189:31">=</operator> <name pos:start="189:33" pos:end="189:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:55"><expr pos:start="191:9" pos:end="191:54"><name pos:start="191:9" pos:end="191:36"><name pos:start="191:9" pos:end="191:20">loaderparams</name><operator pos:start="191:21" pos:end="191:21">.</operator><name pos:start="191:22" pos:end="191:36">kernel_filename</name></name> <operator pos:start="191:38" pos:end="191:38">=</operator> <name pos:start="191:40" pos:end="191:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:53"><expr pos:start="193:9" pos:end="193:52"><name pos:start="193:9" pos:end="193:35"><name pos:start="193:9" pos:end="193:20">loaderparams</name><operator pos:start="193:21" pos:end="193:21">.</operator><name pos:start="193:22" pos:end="193:35">kernel_cmdline</name></name> <operator pos:start="193:37" pos:end="193:37">=</operator> <name pos:start="193:39" pos:end="193:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:55"><expr pos:start="195:9" pos:end="195:54"><name pos:start="195:9" pos:end="195:36"><name pos:start="195:9" pos:end="195:20">loaderparams</name><operator pos:start="195:21" pos:end="195:21">.</operator><name pos:start="195:22" pos:end="195:36">initrd_filename</name></name> <operator pos:start="195:38" pos:end="195:38">=</operator> <name pos:start="195:40" pos:end="195:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:43"><expr pos:start="197:9" pos:end="197:42"><name pos:start="197:9" pos:end="197:26"><name pos:start="197:9" pos:end="197:18">reset_info</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:26">vector</name></name> <operator pos:start="197:28" pos:end="197:28">=</operator> <call pos:start="197:30" pos:end="197:42"><name pos:start="197:30" pos:end="197:40">load_kernel</name><argument_list pos:start="197:41" pos:end="197:42">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:35">/* Init CPU internal devices */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:31"><expr pos:start="205:5" pos:end="205:30"><call pos:start="205:5" pos:end="205:30"><name pos:start="205:5" pos:end="205:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="205:26" pos:end="205:30">(<argument pos:start="205:27" pos:end="205:29"><expr pos:start="205:27" pos:end="205:29"><name pos:start="205:27" pos:end="205:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:29"><expr pos:start="207:5" pos:end="207:28"><call pos:start="207:5" pos:end="207:28"><name pos:start="207:5" pos:end="207:23">cpu_mips_clock_init</name><argument_list pos:start="207:24" pos:end="207:28">(<argument pos:start="207:25" pos:end="207:27"><expr pos:start="207:25" pos:end="207:27"><name pos:start="207:25" pos:end="207:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:54">/* The PIC is attached to the MIPS CPU INT0 pin */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:36"><expr pos:start="213:5" pos:end="213:35"><name pos:start="213:5" pos:end="213:9">i8259</name> <operator pos:start="213:11" pos:end="213:11">=</operator> <call pos:start="213:13" pos:end="213:35"><name pos:start="213:13" pos:end="213:22">i8259_init</name><argument_list pos:start="213:23" pos:end="213:35">(<argument pos:start="213:24" pos:end="213:34"><expr pos:start="213:24" pos:end="213:34"><name pos:start="213:24" pos:end="213:34"><name pos:start="213:24" pos:end="213:26">env</name><operator pos:start="213:27" pos:end="213:28">-&gt;</operator><name pos:start="213:29" pos:end="213:31">irq</name><index pos:start="213:32" pos:end="213:34">[<expr pos:start="213:33" pos:end="213:33"><literal type="number" pos:start="213:33" pos:end="213:33">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:39"><expr pos:start="215:5" pos:end="215:38"><call pos:start="215:5" pos:end="215:38"><name pos:start="215:5" pos:end="215:15">isa_bus_new</name><argument_list pos:start="215:16" pos:end="215:38">(<argument pos:start="215:17" pos:end="215:20"><expr pos:start="215:17" pos:end="215:20"><name pos:start="215:17" pos:end="215:20">NULL</name></expr></argument>, <argument pos:start="215:23" pos:end="215:37"><expr pos:start="215:23" pos:end="215:37"><call pos:start="215:23" pos:end="215:37"><name pos:start="215:23" pos:end="215:35">get_system_io</name><argument_list pos:start="215:36" pos:end="215:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:24"><expr pos:start="217:5" pos:end="217:23"><call pos:start="217:5" pos:end="217:23"><name pos:start="217:5" pos:end="217:16">isa_bus_irqs</name><argument_list pos:start="217:17" pos:end="217:23">(<argument pos:start="217:18" pos:end="217:22"><expr pos:start="217:18" pos:end="217:22"><name pos:start="217:18" pos:end="217:22">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:25"><expr pos:start="221:5" pos:end="221:24"><call pos:start="221:5" pos:end="221:24"><name pos:start="221:5" pos:end="221:12">rtc_init</name><argument_list pos:start="221:13" pos:end="221:24">(<argument pos:start="221:14" pos:end="221:17"><expr pos:start="221:14" pos:end="221:17"><literal type="number" pos:start="221:14" pos:end="221:17">2000</literal></expr></argument>, <argument pos:start="221:20" pos:end="221:23"><expr pos:start="221:20" pos:end="221:23"><name pos:start="221:20" pos:end="221:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:54">/* Register 64 KB of ISA IO space at 0x14000000 */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:42"><expr pos:start="227:5" pos:end="227:41"><call pos:start="227:5" pos:end="227:41"><name pos:start="227:5" pos:end="227:17">isa_mmio_init</name><argument_list pos:start="227:18" pos:end="227:41">(<argument pos:start="227:19" pos:end="227:28"><expr pos:start="227:19" pos:end="227:28"><literal type="number" pos:start="227:19" pos:end="227:28">0x14000000</literal></expr></argument>, <argument pos:start="227:31" pos:end="227:40"><expr pos:start="227:31" pos:end="227:40"><literal type="number" pos:start="227:31" pos:end="227:40">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:30"><expr pos:start="229:5" pos:end="229:29"><name pos:start="229:5" pos:end="229:16">isa_mem_base</name> <operator pos:start="229:18" pos:end="229:18">=</operator> <literal type="number" pos:start="229:20" pos:end="229:29">0x10000000</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:28"><expr pos:start="233:5" pos:end="233:27"><name pos:start="233:5" pos:end="233:7">pit</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:27"><name pos:start="233:11" pos:end="233:18">pit_init</name><argument_list pos:start="233:19" pos:end="233:27">(<argument pos:start="233:20" pos:end="233:23"><expr pos:start="233:20" pos:end="233:23"><literal type="number" pos:start="233:20" pos:end="233:23">0x40</literal></expr></argument>, <argument pos:start="233:26" pos:end="233:26"><expr pos:start="233:26" pos:end="233:26"><literal type="number" pos:start="233:26" pos:end="233:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="237:5" pos:end="245:5">for<control pos:start="237:8" pos:end="237:41">(<init pos:start="237:9" pos:end="237:14"><expr pos:start="237:9" pos:end="237:13"><name pos:start="237:9" pos:end="237:9">i</name> <operator pos:start="237:11" pos:end="237:11">=</operator> <literal type="number" pos:start="237:13" pos:end="237:13">0</literal></expr>;</init> <condition pos:start="237:16" pos:end="237:36"><expr pos:start="237:16" pos:end="237:35"><name pos:start="237:16" pos:end="237:16">i</name> <operator pos:start="237:18" pos:end="237:18">&lt;</operator> <name pos:start="237:20" pos:end="237:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="237:38" pos:end="237:40"><expr pos:start="237:38" pos:end="237:40"><name pos:start="237:38" pos:end="237:38">i</name><operator pos:start="237:39" pos:end="237:40">++</operator></expr></incr>)</control> <block pos:start="237:43" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:9">

        <if_stmt pos:start="239:9" pos:end="243:9"><if pos:start="239:9" pos:end="243:9">if <condition pos:start="239:12" pos:end="239:26">(<expr pos:start="239:13" pos:end="239:25"><name pos:start="239:13" pos:end="239:25"><name pos:start="239:13" pos:end="239:22">serial_hds</name><index pos:start="239:23" pos:end="239:25">[<expr pos:start="239:24" pos:end="239:24"><name pos:start="239:24" pos:end="239:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="239:28" pos:end="243:9">{<block_content pos:start="241:13" pos:end="241:46">

            <expr_stmt pos:start="241:13" pos:end="241:46"><expr pos:start="241:13" pos:end="241:45"><call pos:start="241:13" pos:end="241:45"><name pos:start="241:13" pos:end="241:27">serial_isa_init</name><argument_list pos:start="241:28" pos:end="241:45">(<argument pos:start="241:29" pos:end="241:29"><expr pos:start="241:29" pos:end="241:29"><name pos:start="241:29" pos:end="241:29">i</name></expr></argument>, <argument pos:start="241:32" pos:end="241:44"><expr pos:start="241:32" pos:end="241:44"><name pos:start="241:32" pos:end="241:44"><name pos:start="241:32" pos:end="241:41">serial_hds</name><index pos:start="241:42" pos:end="241:44">[<expr pos:start="241:43" pos:end="241:43"><name pos:start="241:43" pos:end="241:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="249:5" pos:end="249:19"><expr pos:start="249:5" pos:end="249:18"><call pos:start="249:5" pos:end="249:18"><name pos:start="249:5" pos:end="249:16">isa_vga_init</name><argument_list pos:start="249:17" pos:end="249:18">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="253:5" pos:end="255:48"><if pos:start="253:5" pos:end="255:48">if <condition pos:start="253:8" pos:end="253:25">(<expr pos:start="253:9" pos:end="253:24"><name pos:start="253:9" pos:end="253:19"><name pos:start="253:9" pos:end="253:16">nd_table</name><index pos:start="253:17" pos:end="253:19">[<expr pos:start="253:18" pos:end="253:18"><literal type="number" pos:start="253:18" pos:end="253:18">0</literal></expr>]</index></name><operator pos:start="253:20" pos:end="253:20">.</operator><name pos:start="253:21" pos:end="253:24">vlan</name></expr>)</condition><block type="pseudo" pos:start="255:9" pos:end="255:48"><block_content pos:start="255:9" pos:end="255:48">

        <expr_stmt pos:start="255:9" pos:end="255:48"><expr pos:start="255:9" pos:end="255:47"><call pos:start="255:9" pos:end="255:47"><name pos:start="255:9" pos:end="255:23">isa_ne2000_init</name><argument_list pos:start="255:24" pos:end="255:47">(<argument pos:start="255:25" pos:end="255:29"><expr pos:start="255:25" pos:end="255:29"><literal type="number" pos:start="255:25" pos:end="255:29">0x300</literal></expr></argument>, <argument pos:start="255:32" pos:end="255:32"><expr pos:start="255:32" pos:end="255:32"><literal type="number" pos:start="255:32" pos:end="255:32">9</literal></expr></argument>, <argument pos:start="255:35" pos:end="255:46"><expr pos:start="255:35" pos:end="255:46"><operator pos:start="255:35" pos:end="255:35">&amp;</operator><name pos:start="255:36" pos:end="255:46"><name pos:start="255:36" pos:end="255:43">nd_table</name><index pos:start="255:44" pos:end="255:46">[<expr pos:start="255:45" pos:end="255:45"><literal type="number" pos:start="255:45" pos:end="255:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:35"><expr pos:start="259:5" pos:end="259:34"><call pos:start="259:5" pos:end="259:34"><name pos:start="259:5" pos:end="259:17">ide_drive_get</name><argument_list pos:start="259:18" pos:end="259:34">(<argument pos:start="259:19" pos:end="259:20"><expr pos:start="259:19" pos:end="259:20"><name pos:start="259:19" pos:end="259:20">hd</name></expr></argument>, <argument pos:start="259:23" pos:end="259:33"><expr pos:start="259:23" pos:end="259:33"><name pos:start="259:23" pos:end="259:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="261:5" pos:end="267:47">for<control pos:start="261:8" pos:end="261:36">(<init pos:start="261:9" pos:end="261:14"><expr pos:start="261:9" pos:end="261:13"><name pos:start="261:9" pos:end="261:9">i</name> <operator pos:start="261:11" pos:end="261:11">=</operator> <literal type="number" pos:start="261:13" pos:end="261:13">0</literal></expr>;</init> <condition pos:start="261:16" pos:end="261:31"><expr pos:start="261:16" pos:end="261:30"><name pos:start="261:16" pos:end="261:16">i</name> <operator pos:start="261:18" pos:end="261:18">&lt;</operator> <name pos:start="261:20" pos:end="261:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="261:33" pos:end="261:35"><expr pos:start="261:33" pos:end="261:35"><name pos:start="261:33" pos:end="261:33">i</name><operator pos:start="261:34" pos:end="261:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="263:9" pos:end="267:47"><block_content pos:start="263:9" pos:end="267:47">

        <expr_stmt pos:start="263:9" pos:end="267:47"><expr pos:start="263:9" pos:end="267:46"><call pos:start="263:9" pos:end="267:46"><name pos:start="263:9" pos:end="263:20">isa_ide_init</name><argument_list pos:start="263:21" pos:end="267:46">(<argument pos:start="263:22" pos:end="263:34"><expr pos:start="263:22" pos:end="263:34"><name pos:start="263:22" pos:end="263:34"><name pos:start="263:22" pos:end="263:31">ide_iobase</name><index pos:start="263:32" pos:end="263:34">[<expr pos:start="263:33" pos:end="263:33"><name pos:start="263:33" pos:end="263:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="263:37" pos:end="263:50"><expr pos:start="263:37" pos:end="263:50"><name pos:start="263:37" pos:end="263:50"><name pos:start="263:37" pos:end="263:47">ide_iobase2</name><index pos:start="263:48" pos:end="263:50">[<expr pos:start="263:49" pos:end="263:49"><name pos:start="263:49" pos:end="263:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="263:53" pos:end="263:62"><expr pos:start="263:53" pos:end="263:62"><name pos:start="263:53" pos:end="263:62"><name pos:start="263:53" pos:end="263:59">ide_irq</name><index pos:start="263:60" pos:end="263:62">[<expr pos:start="263:61" pos:end="263:61"><name pos:start="263:61" pos:end="263:61">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="265:22" pos:end="265:41"><expr pos:start="265:22" pos:end="265:41"><name pos:start="265:22" pos:end="265:41"><name pos:start="265:22" pos:end="265:23">hd</name><index pos:start="265:24" pos:end="265:41">[<expr pos:start="265:25" pos:end="265:40"><name pos:start="265:25" pos:end="265:36">MAX_IDE_DEVS</name> <operator pos:start="265:38" pos:end="265:38">*</operator> <name pos:start="265:40" pos:end="265:40">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="267:22" pos:end="267:45"><expr pos:start="267:22" pos:end="267:45"><name pos:start="267:22" pos:end="267:45"><name pos:start="267:22" pos:end="267:23">hd</name><index pos:start="267:24" pos:end="267:45">[<expr pos:start="267:25" pos:end="267:44"><name pos:start="267:25" pos:end="267:36">MAX_IDE_DEVS</name> <operator pos:start="267:38" pos:end="267:38">*</operator> <name pos:start="267:40" pos:end="267:40">i</name> <operator pos:start="267:42" pos:end="267:42">+</operator> <literal type="number" pos:start="267:44" pos:end="267:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="271:5" pos:end="271:31"><expr pos:start="271:5" pos:end="271:30"><call pos:start="271:5" pos:end="271:30"><name pos:start="271:5" pos:end="271:21">isa_create_simple</name><argument_list pos:start="271:22" pos:end="271:30">(<argument pos:start="271:23" pos:end="271:29"><expr pos:start="271:23" pos:end="271:29"><literal type="string" pos:start="271:23" pos:end="271:29">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
