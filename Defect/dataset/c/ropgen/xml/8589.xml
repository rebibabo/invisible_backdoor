<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8589.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ecc_mem_writel</name><parameter_list pos:start="1:27" pos:end="1:79">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:59">target_phys_addr_t</name></type> <name pos:start="1:61" pos:end="1:64">addr</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:74">uint32_t</name></type> <name pos:start="1:76" pos:end="1:78">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">ECCState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="69:5">switch <condition pos:start="9:12" pos:end="9:33">(<expr pos:start="9:13" pos:end="9:32"><name pos:start="9:13" pos:end="9:16">addr</name> <operator pos:start="9:18" pos:end="9:18">&amp;</operator> <name pos:start="9:20" pos:end="9:32">ECC_ADDR_MASK</name></expr>)</condition> <block pos:start="9:35" pos:end="69:5">{<block_content pos:start="11:5" pos:end="67:14">

    <case pos:start="11:5" pos:end="11:17">case <expr pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:16">ECC_MER</name></expr>:</case>

        <expr_stmt pos:start="13:9" pos:end="15:59"><expr pos:start="13:9" pos:end="15:58"><name pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:15">regs</name><index pos:start="13:16" pos:end="13:18">[<expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr>]</index></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:32"><name pos:start="13:23" pos:end="13:23">s</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:29">regs</name><index pos:start="13:30" pos:end="13:32">[<expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">0</literal></expr>]</index></name> <operator pos:start="13:34" pos:end="13:34">&amp;</operator> <operator pos:start="13:36" pos:end="13:36">(</operator><name pos:start="13:37" pos:end="13:47">ECC_MER_VER</name> <operator pos:start="13:49" pos:end="13:49">|</operator> <name pos:start="13:51" pos:end="13:62">ECC_MER_IMPL</name><operator pos:start="13:63" pos:end="13:63">)</operator><operator pos:start="13:64" pos:end="13:64">)</operator> <operator pos:start="13:66" pos:end="13:66">|</operator>

                     <operator pos:start="15:22" pos:end="15:22">(</operator><name pos:start="15:23" pos:end="15:25">val</name> <operator pos:start="15:27" pos:end="15:27">&amp;</operator> <operator pos:start="15:29" pos:end="15:29">~</operator><operator pos:start="15:30" pos:end="15:30">(</operator><name pos:start="15:31" pos:end="15:41">ECC_MER_VER</name> <operator pos:start="15:43" pos:end="15:43">|</operator> <name pos:start="15:45" pos:end="15:56">ECC_MER_IMPL</name><operator pos:start="15:57" pos:end="15:57">)</operator><operator pos:start="15:58" pos:end="15:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:15">DPRINTF</name><argument_list pos:start="17:16" pos:end="17:50">(<argument pos:start="17:17" pos:end="17:44"><expr pos:start="17:17" pos:end="17:44"><literal type="string" pos:start="17:17" pos:end="17:44">"Write memory enable %08x\n"</literal></expr></argument>, <argument pos:start="17:47" pos:end="17:49"><expr pos:start="17:47" pos:end="17:49"><name pos:start="17:47" pos:end="17:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:17">case <expr pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:16">ECC_MDR</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:15">regs</name><index pos:start="23:16" pos:end="23:18">[<expr pos:start="23:17" pos:end="23:17"><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>]</index></name> <operator pos:start="23:20" pos:end="23:20">=</operator>  <name pos:start="23:23" pos:end="23:25">val</name> <operator pos:start="23:27" pos:end="23:27">&amp;</operator> <name pos:start="23:29" pos:end="23:40">ECC_MDR_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:50"><expr pos:start="25:9" pos:end="25:49"><call pos:start="25:9" pos:end="25:49"><name pos:start="25:9" pos:end="25:15">DPRINTF</name><argument_list pos:start="25:16" pos:end="25:49">(<argument pos:start="25:17" pos:end="25:43"><expr pos:start="25:17" pos:end="25:43"><literal type="string" pos:start="25:17" pos:end="25:43">"Write memory delay %08x\n"</literal></expr></argument>, <argument pos:start="25:46" pos:end="25:48"><expr pos:start="25:46" pos:end="25:48"><name pos:start="25:46" pos:end="25:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:18">case <expr pos:start="29:10" pos:end="29:17"><name pos:start="29:10" pos:end="29:17">ECC_MFSR</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:26"><expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:15">regs</name><index pos:start="31:16" pos:end="31:18">[<expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">2</literal></expr>]</index></name> <operator pos:start="31:20" pos:end="31:20">=</operator>  <name pos:start="31:23" pos:end="31:25">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:57"><expr pos:start="33:9" pos:end="33:56"><call pos:start="33:9" pos:end="33:56"><name pos:start="33:9" pos:end="33:15">DPRINTF</name><argument_list pos:start="33:16" pos:end="33:56">(<argument pos:start="33:17" pos:end="33:50"><expr pos:start="33:17" pos:end="33:50"><literal type="string" pos:start="33:17" pos:end="33:50">"Write memory fault status %08x\n"</literal></expr></argument>, <argument pos:start="33:53" pos:end="33:55"><expr pos:start="33:53" pos:end="33:55"><name pos:start="33:53" pos:end="33:55">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:17">case <expr pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:16">ECC_VCR</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:15">regs</name><index pos:start="39:16" pos:end="39:18">[<expr pos:start="39:17" pos:end="39:17"><literal type="number" pos:start="39:17" pos:end="39:17">3</literal></expr>]</index></name> <operator pos:start="39:20" pos:end="39:20">=</operator>  <name pos:start="39:23" pos:end="39:25">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:56"><expr pos:start="41:9" pos:end="41:55"><call pos:start="41:9" pos:end="41:55"><name pos:start="41:9" pos:end="41:15">DPRINTF</name><argument_list pos:start="41:16" pos:end="41:55">(<argument pos:start="41:17" pos:end="41:49"><expr pos:start="41:17" pos:end="41:49"><literal type="string" pos:start="41:17" pos:end="41:49">"Write slot configuration %08x\n"</literal></expr></argument>, <argument pos:start="41:52" pos:end="41:54"><expr pos:start="41:52" pos:end="41:54"><name pos:start="41:52" pos:end="41:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:16">case <expr pos:start="45:10" pos:end="45:15"><name pos:start="45:10" pos:end="45:15">ECC_DR</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">regs</name><index pos:start="47:16" pos:end="47:18">[<expr pos:start="47:17" pos:end="47:17"><literal type="number" pos:start="47:17" pos:end="47:17">6</literal></expr>]</index></name> <operator pos:start="47:20" pos:end="47:20">=</operator>  <name pos:start="47:23" pos:end="47:25">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:48"><expr pos:start="49:9" pos:end="49:47"><call pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:15">DPRINTF</name><argument_list pos:start="49:16" pos:end="49:47">(<argument pos:start="49:17" pos:end="49:41"><expr pos:start="49:17" pos:end="49:41"><literal type="string" pos:start="49:17" pos:end="49:41">"Write diagnosiic %08x\n"</literal></expr></argument>, <argument pos:start="49:44" pos:end="49:46"><expr pos:start="49:44" pos:end="49:46"><name pos:start="49:44" pos:end="49:46">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:18">case <expr pos:start="53:10" pos:end="53:17"><name pos:start="53:10" pos:end="53:17">ECC_ECR0</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:15">regs</name><index pos:start="55:16" pos:end="55:18">[<expr pos:start="55:17" pos:end="55:17"><literal type="number" pos:start="55:17" pos:end="55:17">7</literal></expr>]</index></name> <operator pos:start="55:20" pos:end="55:20">=</operator>  <name pos:start="55:23" pos:end="55:25">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><call pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:15">DPRINTF</name><argument_list pos:start="57:16" pos:end="57:50">(<argument pos:start="57:17" pos:end="57:44"><expr pos:start="57:17" pos:end="57:44"><literal type="string" pos:start="57:17" pos:end="57:44">"Write event count 1 %08x\n"</literal></expr></argument>, <argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:18">case <expr pos:start="61:10" pos:end="61:17"><name pos:start="61:10" pos:end="61:17">ECC_ECR1</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:26"><expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:15">regs</name><index pos:start="63:16" pos:end="63:18">[<expr pos:start="63:17" pos:end="63:17"><literal type="number" pos:start="63:17" pos:end="63:17">7</literal></expr>]</index></name> <operator pos:start="63:20" pos:end="63:20">=</operator>  <name pos:start="63:23" pos:end="63:25">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><call pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:15">DPRINTF</name><argument_list pos:start="65:16" pos:end="65:50">(<argument pos:start="65:17" pos:end="65:44"><expr pos:start="65:17" pos:end="65:44"><literal type="string" pos:start="65:17" pos:end="65:44">"Write event count 2 %08x\n"</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:49"><expr pos:start="65:47" pos:end="65:49"><name pos:start="65:47" pos:end="65:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
