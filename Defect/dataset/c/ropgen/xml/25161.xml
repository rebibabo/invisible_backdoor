<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25161.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">test_mirror</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:22">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20"><name pos:start="5:9" pos:end="5:17">send_sock</name><index pos:start="5:18" pos:end="5:20">[<expr pos:start="5:19" pos:end="5:19"><literal type="number" pos:start="5:19" pos:end="5:19">2</literal></expr>]</index></name></decl>, <decl pos:start="5:23" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:31">recv_sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">cmdline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">ret</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>, <decl pos:start="9:23" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:23" pos:end="9:25">len</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:17">send_buf</name><index pos:start="11:18" pos:end="11:19">[]</index></name> <init pos:start="11:21" pos:end="11:45">= <expr pos:start="11:23" pos:end="11:45"><literal type="string" pos:start="11:23" pos:end="11:45">"Hello! filter-mirror~"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:18">sock_path</name><index pos:start="13:19" pos:end="13:20">[]</index></name> <init pos:start="13:22" pos:end="13:45">= <expr pos:start="13:24" pos:end="13:45"><literal type="string" pos:start="13:24" pos:end="13:45">"filter-mirror.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">recv_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:17">size</name> <init pos:start="17:19" pos:end="17:36">= <expr pos:start="17:21" pos:end="17:36"><sizeof pos:start="17:21" pos:end="17:36">sizeof<argument_list pos:start="17:27" pos:end="17:36">(<argument pos:start="17:28" pos:end="17:35"><expr pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:35">send_buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:8">size</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:22"><name pos:start="19:12" pos:end="19:16">htonl</name><argument_list pos:start="19:17" pos:end="19:22">(<argument pos:start="19:18" pos:end="19:21"><expr pos:start="19:18" pos:end="19:21"><name pos:start="19:18" pos:end="19:21">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:57"><expr pos:start="23:5" pos:end="23:56"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:56"><name pos:start="23:11" pos:end="23:20">socketpair</name><argument_list pos:start="23:21" pos:end="23:56">(<argument pos:start="23:22" pos:end="23:28"><expr pos:start="23:22" pos:end="23:28"><name pos:start="23:22" pos:end="23:28">PF_UNIX</name></expr></argument>, <argument pos:start="23:31" pos:end="23:41"><expr pos:start="23:31" pos:end="23:41"><name pos:start="23:31" pos:end="23:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="23:44" pos:end="23:44"><expr pos:start="23:44" pos:end="23:44"><literal type="number" pos:start="23:44" pos:end="23:44">0</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:55"><expr pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:55">send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><call pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:19">g_assert_cmpint</name><argument_list pos:start="25:20" pos:end="25:32">(<argument pos:start="25:21" pos:end="25:23"><expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">ret</name></expr></argument>, <argument pos:start="25:26" pos:end="25:27"><expr pos:start="25:26" pos:end="25:27"><operator pos:start="25:26" pos:end="25:27">!=</operator></expr></argument>, <argument pos:start="25:30" pos:end="25:31"><expr pos:start="25:30" pos:end="25:31"><operator pos:start="25:30" pos:end="25:30">-</operator><literal type="number" pos:start="25:31" pos:end="25:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:28"><name pos:start="29:11" pos:end="29:17">mkstemp</name><argument_list pos:start="29:18" pos:end="29:28">(<argument pos:start="29:19" pos:end="29:27"><expr pos:start="29:19" pos:end="29:27"><name pos:start="29:19" pos:end="29:27">sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><call pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:19">g_assert_cmpint</name><argument_list pos:start="31:20" pos:end="31:32">(<argument pos:start="31:21" pos:end="31:23"><expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">ret</name></expr></argument>, <argument pos:start="31:26" pos:end="31:27"><expr pos:start="31:26" pos:end="31:27"><operator pos:start="31:26" pos:end="31:27">!=</operator></expr></argument>, <argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><operator pos:start="31:30" pos:end="31:30">-</operator><literal type="number" pos:start="31:31" pos:end="31:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="43:44"><expr pos:start="35:5" pos:end="43:43"><name pos:start="35:5" pos:end="35:11">cmdline</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="43:43"><name pos:start="35:15" pos:end="35:29">g_strdup_printf</name><argument_list pos:start="35:30" pos:end="43:43">(<argument pos:start="35:31" pos:end="41:94"><expr pos:start="35:31" pos:end="41:94"><literal type="string" pos:start="35:31" pos:end="35:66">"-netdev socket,id=qtest-bn0,fd=%d "</literal>

                 <literal type="string" pos:start="37:18" pos:end="37:62">"-device e1000,netdev=qtest-bn0,id=qtest-e0 "</literal>

                 <literal type="string" pos:start="39:18" pos:end="39:68">"-chardev socket,id=mirror0,path=%s,server,nowait "</literal>

                 <literal type="string" pos:start="41:18" pos:end="41:94">"-object filter-mirror,id=qtest-f0,netdev=qtest-bn0,queue=tx,outdev=mirror0 "</literal></expr></argument>

                 , <argument pos:start="43:20" pos:end="43:31"><expr pos:start="43:20" pos:end="43:31"><name pos:start="43:20" pos:end="43:31"><name pos:start="43:20" pos:end="43:28">send_sock</name><index pos:start="43:29" pos:end="43:31">[<expr pos:start="43:30" pos:end="43:30"><literal type="number" pos:start="43:30" pos:end="43:30">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="43:34" pos:end="43:42"><expr pos:start="43:34" pos:end="43:42"><name pos:start="43:34" pos:end="43:42">sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><call pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:15">qtest_start</name><argument_list pos:start="45:16" pos:end="45:24">(<argument pos:start="45:17" pos:end="45:23"><expr pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:23">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><call pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:10">g_free</name><argument_list pos:start="47:11" pos:end="47:19">(<argument pos:start="47:12" pos:end="47:18"><expr pos:start="47:12" pos:end="47:18"><name pos:start="47:12" pos:end="47:18">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:46"><expr pos:start="51:5" pos:end="51:45"><name pos:start="51:5" pos:end="51:13">recv_sock</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:45"><name pos:start="51:17" pos:end="51:28">unix_connect</name><argument_list pos:start="51:29" pos:end="51:45">(<argument pos:start="51:30" pos:end="51:38"><expr pos:start="51:30" pos:end="51:38"><name pos:start="51:30" pos:end="51:38">sock_path</name></expr></argument>, <argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><name pos:start="51:41" pos:end="51:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:39"><expr pos:start="53:5" pos:end="53:38"><call pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:19">g_assert_cmpint</name><argument_list pos:start="53:20" pos:end="53:38">(<argument pos:start="53:21" pos:end="53:29"><expr pos:start="53:21" pos:end="53:29"><name pos:start="53:21" pos:end="53:29">recv_sock</name></expr></argument>, <argument pos:start="53:32" pos:end="53:33"><expr pos:start="53:32" pos:end="53:33"><operator pos:start="53:32" pos:end="53:33">!=</operator></expr></argument>, <argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><operator pos:start="53:36" pos:end="53:36">-</operator><literal type="number" pos:start="53:37" pos:end="53:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="57:5" pos:end="73:6"><decl pos:start="57:5" pos:end="73:5"><type pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:10">struct</name> <name pos:start="57:12" pos:end="57:16">iovec</name></name></type> <name pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:20">iov</name><index pos:start="57:21" pos:end="57:22">[]</index></name> <init pos:start="57:24" pos:end="73:5">= <expr pos:start="57:26" pos:end="73:5"><block pos:start="57:26" pos:end="73:5">{

        <expr pos:start="59:9" pos:end="65:9"><block pos:start="59:9" pos:end="65:9">{

            <expr pos:start="61:13" pos:end="61:29"><operator pos:start="61:13" pos:end="61:13">.</operator><name pos:start="61:14" pos:end="61:21">iov_base</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <operator pos:start="61:25" pos:end="61:25">&amp;</operator><name pos:start="61:26" pos:end="61:29">size</name></expr>,

            <expr pos:start="63:13" pos:end="63:35"><operator pos:start="63:13" pos:end="63:13">.</operator><name pos:start="63:14" pos:end="63:20">iov_len</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <sizeof pos:start="63:24" pos:end="63:35">sizeof<argument_list pos:start="63:30" pos:end="63:35">(<argument pos:start="63:31" pos:end="63:34"><expr pos:start="63:31" pos:end="63:34"><name pos:start="63:31" pos:end="63:34">size</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>, <expr pos:start="65:12" pos:end="71:9"><block pos:start="65:12" pos:end="71:9">{

            <expr pos:start="67:13" pos:end="67:32"><operator pos:start="67:13" pos:end="67:13">.</operator><name pos:start="67:14" pos:end="67:21">iov_base</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:32">send_buf</name></expr>,

            <expr pos:start="69:13" pos:end="69:39"><operator pos:start="69:13" pos:end="69:13">.</operator><name pos:start="69:14" pos:end="69:20">iov_len</name> <operator pos:start="69:22" pos:end="69:22">=</operator> <sizeof pos:start="69:24" pos:end="69:39">sizeof<argument_list pos:start="69:30" pos:end="69:39">(<argument pos:start="69:31" pos:end="69:38"><expr pos:start="69:31" pos:end="69:38"><name pos:start="69:31" pos:end="69:38">send_buf</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:78">/* send a qmp command to guarantee that 'connected' is setting to true. */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><call pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:24">qmp_discard_response</name><argument_list pos:start="79:25" pos:end="79:57">(<argument pos:start="79:26" pos:end="79:56"><expr pos:start="79:26" pos:end="79:56"><literal type="string" pos:start="79:26" pos:end="79:56">"{ 'execute' : 'query-status'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:77"><expr pos:start="81:5" pos:end="81:76"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:76"><name pos:start="81:11" pos:end="81:18">iov_send</name><argument_list pos:start="81:19" pos:end="81:76">(<argument pos:start="81:20" pos:end="81:31"><expr pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:28">send_sock</name><index pos:start="81:29" pos:end="81:31">[<expr pos:start="81:30" pos:end="81:30"><literal type="number" pos:start="81:30" pos:end="81:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="81:34" pos:end="81:36"><expr pos:start="81:34" pos:end="81:36"><name pos:start="81:34" pos:end="81:36">iov</name></expr></argument>, <argument pos:start="81:39" pos:end="81:39"><expr pos:start="81:39" pos:end="81:39"><literal type="number" pos:start="81:39" pos:end="81:39">2</literal></expr></argument>, <argument pos:start="81:42" pos:end="81:42"><expr pos:start="81:42" pos:end="81:42"><literal type="number" pos:start="81:42" pos:end="81:42">0</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:75"><expr pos:start="81:45" pos:end="81:75"><sizeof pos:start="81:45" pos:end="81:56">sizeof<argument_list pos:start="81:51" pos:end="81:56">(<argument pos:start="81:52" pos:end="81:55"><expr pos:start="81:52" pos:end="81:55"><name pos:start="81:52" pos:end="81:55">size</name></expr></argument>)</argument_list></sizeof> <operator pos:start="81:58" pos:end="81:58">+</operator> <sizeof pos:start="81:60" pos:end="81:75">sizeof<argument_list pos:start="81:66" pos:end="81:75">(<argument pos:start="81:67" pos:end="81:74"><expr pos:start="81:67" pos:end="81:74"><name pos:start="81:67" pos:end="81:74">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:62"><expr pos:start="83:5" pos:end="83:61"><call pos:start="83:5" pos:end="83:61"><name pos:start="83:5" pos:end="83:19">g_assert_cmpint</name><argument_list pos:start="83:20" pos:end="83:61">(<argument pos:start="83:21" pos:end="83:23"><expr pos:start="83:21" pos:end="83:23"><name pos:start="83:21" pos:end="83:23">ret</name></expr></argument>, <argument pos:start="83:26" pos:end="83:27"><expr pos:start="83:26" pos:end="83:27"><operator pos:start="83:26" pos:end="83:27">==</operator></expr></argument>, <argument pos:start="83:30" pos:end="83:60"><expr pos:start="83:30" pos:end="83:60"><sizeof pos:start="83:30" pos:end="83:45">sizeof<argument_list pos:start="83:36" pos:end="83:45">(<argument pos:start="83:37" pos:end="83:44"><expr pos:start="83:37" pos:end="83:44"><name pos:start="83:37" pos:end="83:44">send_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="83:47" pos:end="83:47">+</operator> <sizeof pos:start="83:49" pos:end="83:60">sizeof<argument_list pos:start="83:55" pos:end="83:60">(<argument pos:start="83:56" pos:end="83:59"><expr pos:start="83:56" pos:end="83:59"><name pos:start="83:56" pos:end="83:59">size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:24"><expr pos:start="85:5" pos:end="85:23"><call pos:start="85:5" pos:end="85:23"><name pos:start="85:5" pos:end="85:9">close</name><argument_list pos:start="85:10" pos:end="85:23">(<argument pos:start="85:11" pos:end="85:22"><expr pos:start="85:11" pos:end="85:22"><name pos:start="85:11" pos:end="85:22"><name pos:start="85:11" pos:end="85:19">send_sock</name><index pos:start="85:20" pos:end="85:22">[<expr pos:start="85:21" pos:end="85:21"><literal type="number" pos:start="85:21" pos:end="85:21">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:53"><expr pos:start="89:5" pos:end="89:52"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:52"><name pos:start="89:11" pos:end="89:19">qemu_recv</name><argument_list pos:start="89:20" pos:end="89:52">(<argument pos:start="89:21" pos:end="89:29"><expr pos:start="89:21" pos:end="89:29"><name pos:start="89:21" pos:end="89:29">recv_sock</name></expr></argument>, <argument pos:start="89:32" pos:end="89:35"><expr pos:start="89:32" pos:end="89:35"><operator pos:start="89:32" pos:end="89:32">&amp;</operator><name pos:start="89:33" pos:end="89:35">len</name></expr></argument>, <argument pos:start="89:38" pos:end="89:48"><expr pos:start="89:38" pos:end="89:48"><sizeof pos:start="89:38" pos:end="89:48">sizeof<argument_list pos:start="89:44" pos:end="89:48">(<argument pos:start="89:45" pos:end="89:47"><expr pos:start="89:45" pos:end="89:47"><name pos:start="89:45" pos:end="89:47">len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="89:51" pos:end="89:51"><expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:42"><expr pos:start="91:5" pos:end="91:41"><call pos:start="91:5" pos:end="91:41"><name pos:start="91:5" pos:end="91:19">g_assert_cmpint</name><argument_list pos:start="91:20" pos:end="91:41">(<argument pos:start="91:21" pos:end="91:23"><expr pos:start="91:21" pos:end="91:23"><name pos:start="91:21" pos:end="91:23">ret</name></expr></argument>, <argument pos:start="91:26" pos:end="91:27"><expr pos:start="91:26" pos:end="91:27"><operator pos:start="91:26" pos:end="91:27">==</operator></expr></argument>, <argument pos:start="91:30" pos:end="91:40"><expr pos:start="91:30" pos:end="91:40"><sizeof pos:start="91:30" pos:end="91:40">sizeof<argument_list pos:start="91:36" pos:end="91:40">(<argument pos:start="91:37" pos:end="91:39"><expr pos:start="91:37" pos:end="91:39"><name pos:start="91:37" pos:end="91:39">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:21"><expr pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:7">len</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:20"><name pos:start="93:11" pos:end="93:15">ntohl</name><argument_list pos:start="93:16" pos:end="93:20">(<argument pos:start="93:17" pos:end="93:19"><expr pos:start="93:17" pos:end="93:19"><name pos:start="93:17" pos:end="93:19">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:47"><expr pos:start="97:5" pos:end="97:46"><call pos:start="97:5" pos:end="97:46"><name pos:start="97:5" pos:end="97:19">g_assert_cmpint</name><argument_list pos:start="97:20" pos:end="97:46">(<argument pos:start="97:21" pos:end="97:23"><expr pos:start="97:21" pos:end="97:23"><name pos:start="97:21" pos:end="97:23">len</name></expr></argument>, <argument pos:start="97:26" pos:end="97:27"><expr pos:start="97:26" pos:end="97:27"><operator pos:start="97:26" pos:end="97:27">==</operator></expr></argument>, <argument pos:start="97:30" pos:end="97:45"><expr pos:start="97:30" pos:end="97:45"><sizeof pos:start="97:30" pos:end="97:45">sizeof<argument_list pos:start="97:36" pos:end="97:45">(<argument pos:start="97:37" pos:end="97:44"><expr pos:start="97:37" pos:end="97:44"><name pos:start="97:37" pos:end="97:44">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:29"><expr pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:12">recv_buf</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <call pos:start="99:16" pos:end="99:28"><name pos:start="99:16" pos:end="99:23">g_malloc</name><argument_list pos:start="99:24" pos:end="99:28">(<argument pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:49"><expr pos:start="101:5" pos:end="101:48"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:48"><name pos:start="101:11" pos:end="101:19">qemu_recv</name><argument_list pos:start="101:20" pos:end="101:48">(<argument pos:start="101:21" pos:end="101:29"><expr pos:start="101:21" pos:end="101:29"><name pos:start="101:21" pos:end="101:29">recv_sock</name></expr></argument>, <argument pos:start="101:32" pos:end="101:39"><expr pos:start="101:32" pos:end="101:39"><name pos:start="101:32" pos:end="101:39">recv_buf</name></expr></argument>, <argument pos:start="101:42" pos:end="101:44"><expr pos:start="101:42" pos:end="101:44"><name pos:start="101:42" pos:end="101:44">len</name></expr></argument>, <argument pos:start="101:47" pos:end="101:47"><expr pos:start="101:47" pos:end="101:47"><literal type="number" pos:start="101:47" pos:end="101:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:44"><expr pos:start="103:5" pos:end="103:43"><call pos:start="103:5" pos:end="103:43"><name pos:start="103:5" pos:end="103:19">g_assert_cmpstr</name><argument_list pos:start="103:20" pos:end="103:43">(<argument pos:start="103:21" pos:end="103:28"><expr pos:start="103:21" pos:end="103:28"><name pos:start="103:21" pos:end="103:28">recv_buf</name></expr></argument>, <argument pos:start="103:31" pos:end="103:32"><expr pos:start="103:31" pos:end="103:32"><operator pos:start="103:31" pos:end="103:32">==</operator></expr></argument>, <argument pos:start="103:35" pos:end="103:42"><expr pos:start="103:35" pos:end="103:42"><name pos:start="103:35" pos:end="103:42">send_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:21"><expr pos:start="107:5" pos:end="107:20"><call pos:start="107:5" pos:end="107:20"><name pos:start="107:5" pos:end="107:10">g_free</name><argument_list pos:start="107:11" pos:end="107:20">(<argument pos:start="107:12" pos:end="107:19"><expr pos:start="107:12" pos:end="107:19"><name pos:start="107:12" pos:end="107:19">recv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><call pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:9">close</name><argument_list pos:start="109:10" pos:end="109:20">(<argument pos:start="109:11" pos:end="109:19"><expr pos:start="109:11" pos:end="109:19"><name pos:start="109:11" pos:end="109:19">recv_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:22"><expr pos:start="111:5" pos:end="111:21"><call pos:start="111:5" pos:end="111:21"><name pos:start="111:5" pos:end="111:10">unlink</name><argument_list pos:start="111:11" pos:end="111:21">(<argument pos:start="111:12" pos:end="111:20"><expr pos:start="111:12" pos:end="111:20"><name pos:start="111:12" pos:end="111:20">sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
