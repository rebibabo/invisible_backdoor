<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11929.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">vp8_lossless_decode_frame</name><parameter_list pos:start="1:37" pos:end="5:80">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:58"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:70"><decl pos:start="1:61" pos:end="1:70"><type pos:start="1:61" pos:end="1:70"><name pos:start="1:61" pos:end="1:67">AVFrame</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:70">p</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:40">int</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:51">got_frame</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:72"><decl pos:start="3:54" pos:end="3:72"><type pos:start="3:54" pos:end="3:72"><name pos:start="3:54" pos:end="3:60">uint8_t</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:72">data_start</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:59"><decl pos:start="5:38" pos:end="5:59"><type pos:start="5:38" pos:end="5:59"><name pos:start="5:38" pos:end="5:45">unsigned</name> <name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:59">data_size</name></decl></parameter>, <parameter pos:start="5:62" pos:end="5:79"><decl pos:start="5:62" pos:end="5:79"><type pos:start="5:62" pos:end="5:79"><name pos:start="5:62" pos:end="5:64">int</name></type> <name pos:start="5:66" pos:end="5:79">is_alpha_chunk</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="223:1">{<block_content pos:start="9:5" pos:end="221:15">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">WebPContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">w</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">h</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">ret</name></decl>, <decl pos:start="11:20" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:20">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:24">(<expr pos:start="15:9" pos:end="15:23"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:23">is_alpha_chunk</name></expr>)</condition> <block pos:start="15:26" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:41">

        <expr_stmt pos:start="17:9" pos:end="17:24"><expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:19">lossless</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <literal type="number" pos:start="17:23" pos:end="17:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:22">pix_fmt</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:40">AV_PIX_FMT_ARGB</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:55"><name pos:start="25:11" pos:end="25:24">init_get_bits8</name><argument_list pos:start="25:25" pos:end="25:55">(<argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:31"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:31">gb</name></name></expr></argument>, <argument pos:start="25:34" pos:end="25:43"><expr pos:start="25:34" pos:end="25:43"><name pos:start="25:34" pos:end="25:43">data_start</name></expr></argument>, <argument pos:start="25:46" pos:end="25:54"><expr pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:54">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="101:5"><if pos:start="33:5" pos:end="91:5">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:23">is_alpha_chunk</name></expr>)</condition> <block pos:start="33:26" pos:end="91:5">{<block_content pos:start="35:9" pos:end="89:9">

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:40">(<expr pos:start="35:13" pos:end="35:39"><call pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:20">get_bits</name><argument_list pos:start="35:21" pos:end="35:31">(<argument pos:start="35:22" pos:end="35:27"><expr pos:start="35:22" pos:end="35:27"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:27"><name pos:start="35:23" pos:end="35:23">s</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:27">gb</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:30"><expr pos:start="35:30" pos:end="35:30"><literal type="number" pos:start="35:30" pos:end="35:30">8</literal></expr></argument>)</argument_list></call> <operator pos:start="35:33" pos:end="35:34">!=</operator> <literal type="number" pos:start="35:36" pos:end="35:39">0x2F</literal></expr>)</condition> <block pos:start="35:42" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:39">

            <expr_stmt pos:start="37:13" pos:end="37:77"><expr pos:start="37:13" pos:end="37:76"><call pos:start="37:13" pos:end="37:76"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:76">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">avctx</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:41" pos:end="37:75"><expr pos:start="37:41" pos:end="37:75"><literal type="string" pos:start="37:41" pos:end="37:75">"Invalid WebP Lossless signature\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:39">return <expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:9">w</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:20">get_bits</name><argument_list pos:start="45:21" pos:end="45:32">(<argument pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:27"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:27">gb</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:31"><expr pos:start="45:30" pos:end="45:31"><literal type="number" pos:start="45:30" pos:end="45:31">14</literal></expr></argument>)</argument_list></call> <operator pos:start="45:34" pos:end="45:34">+</operator> <literal type="number" pos:start="45:36" pos:end="45:36">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:9">h</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:20">get_bits</name><argument_list pos:start="47:21" pos:end="47:32">(<argument pos:start="47:22" pos:end="47:27"><expr pos:start="47:22" pos:end="47:27"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:27"><name pos:start="47:23" pos:end="47:23">s</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:27">gb</name></name></expr></argument>, <argument pos:start="47:30" pos:end="47:31"><expr pos:start="47:30" pos:end="47:31"><literal type="number" pos:start="47:30" pos:end="47:31">14</literal></expr></argument>)</argument_list></call> <operator pos:start="47:34" pos:end="47:34">+</operator> <literal type="number" pos:start="47:36" pos:end="47:36">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:38">(<expr pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">width</name></name> <operator pos:start="49:22" pos:end="49:23">&amp;&amp;</operator> <name pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:32">width</name></name> <operator pos:start="49:34" pos:end="49:35">!=</operator> <name pos:start="49:37" pos:end="49:37">w</name></expr>)</condition> <block pos:start="49:40" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:32">

            <expr_stmt pos:start="51:13" pos:end="53:32"><expr pos:start="51:13" pos:end="53:31"><call pos:start="51:13" pos:end="53:31"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="53:31">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:40"><expr pos:start="51:27" pos:end="51:40"><name pos:start="51:27" pos:end="51:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="51:43" pos:end="51:70"><expr pos:start="51:43" pos:end="51:70"><literal type="string" pos:start="51:43" pos:end="51:70">"Width mismatch. %d != %d\n"</literal></expr></argument>,

                   <argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:27">width</name></name></expr></argument>, <argument pos:start="53:30" pos:end="53:30"><expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:21"><expr pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:16">width</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:20">w</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:40">(<expr pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:21">height</name></name> <operator pos:start="59:23" pos:end="59:24">&amp;&amp;</operator> <name pos:start="59:26" pos:end="59:34"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:34">height</name></name> <operator pos:start="59:36" pos:end="59:37">!=</operator> <name pos:start="59:39" pos:end="59:39">h</name></expr>)</condition> <block pos:start="59:42" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:32">

            <expr_stmt pos:start="61:13" pos:end="63:32"><expr pos:start="61:13" pos:end="63:31"><call pos:start="61:13" pos:end="63:31"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="63:31">(<argument pos:start="61:20" pos:end="61:24"><expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">avctx</name></expr></argument>, <argument pos:start="61:27" pos:end="61:40"><expr pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="61:43" pos:end="61:71"><expr pos:start="61:43" pos:end="61:71"><literal type="string" pos:start="61:43" pos:end="61:71">"Height mismatch. %d != %d\n"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:27"><expr pos:start="63:20" pos:end="63:27"><name pos:start="63:20" pos:end="63:27"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:27">width</name></name></expr></argument>, <argument pos:start="63:30" pos:end="63:30"><expr pos:start="63:30" pos:end="63:30"><name pos:start="63:30" pos:end="63:30">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">height</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:21">h</name></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:60"><expr pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:59"><name pos:start="71:15" pos:end="71:31">ff_set_dimensions</name><argument_list pos:start="71:32" pos:end="71:59">(<argument pos:start="71:33" pos:end="71:37"><expr pos:start="71:33" pos:end="71:37"><name pos:start="71:33" pos:end="71:37">avctx</name></expr></argument>, <argument pos:start="71:40" pos:end="71:47"><expr pos:start="71:40" pos:end="71:47"><name pos:start="71:40" pos:end="71:47"><name pos:start="71:40" pos:end="71:40">s</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:47">width</name></name></expr></argument>, <argument pos:start="71:50" pos:end="71:58"><expr pos:start="71:50" pos:end="71:58"><name pos:start="71:50" pos:end="71:58"><name pos:start="71:50" pos:end="71:50">s</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:58">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:23"><if pos:start="73:9" pos:end="75:23">if <condition pos:start="73:12" pos:end="73:20">(<expr pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">&lt;</operator> <literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:23"><block_content pos:start="75:13" pos:end="75:23">

            <return pos:start="75:13" pos:end="75:23">return <expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:41"><expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:20">has_alpha</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="79:40"><name pos:start="79:24" pos:end="79:32">get_bits1</name><argument_list pos:start="79:33" pos:end="79:40">(<argument pos:start="79:34" pos:end="79:39"><expr pos:start="79:34" pos:end="79:39"><operator pos:start="79:34" pos:end="79:34">&amp;</operator><name pos:start="79:35" pos:end="79:39"><name pos:start="79:35" pos:end="79:35">s</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:39">(<expr pos:start="83:13" pos:end="83:38"><call pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:20">get_bits</name><argument_list pos:start="83:21" pos:end="83:31">(<argument pos:start="83:22" pos:end="83:27"><expr pos:start="83:22" pos:end="83:27"><operator pos:start="83:22" pos:end="83:22">&amp;</operator><name pos:start="83:23" pos:end="83:27"><name pos:start="83:23" pos:end="83:23">s</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:27">gb</name></name></expr></argument>, <argument pos:start="83:30" pos:end="83:30"><expr pos:start="83:30" pos:end="83:30"><literal type="number" pos:start="83:30" pos:end="83:30">3</literal></expr></argument>)</argument_list></call> <operator pos:start="83:33" pos:end="83:34">!=</operator> <literal type="number" pos:start="83:36" pos:end="83:38">0x0</literal></expr>)</condition> <block pos:start="83:41" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:39">

            <expr_stmt pos:start="85:13" pos:end="85:75"><expr pos:start="85:13" pos:end="85:74"><call pos:start="85:13" pos:end="85:74"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="85:74">(<argument pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:24">avctx</name></expr></argument>, <argument pos:start="85:27" pos:end="85:38"><expr pos:start="85:27" pos:end="85:38"><name pos:start="85:27" pos:end="85:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:41" pos:end="85:73"><expr pos:start="85:41" pos:end="85:73"><literal type="string" pos:start="85:41" pos:end="85:73">"Invalid WebP Lossless version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:39">return <expr pos:start="87:20" pos:end="87:38"><name pos:start="87:20" pos:end="87:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="101:5">else <block pos:start="91:12" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:22">

        <if_stmt pos:start="93:9" pos:end="95:31"><if pos:start="93:9" pos:end="95:31">if <condition pos:start="93:12" pos:end="93:36">(<expr pos:start="93:13" pos:end="93:35"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:21"><name pos:start="93:14" pos:end="93:14">s</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:21">width</name></name> <operator pos:start="93:23" pos:end="93:24">||</operator> <operator pos:start="93:26" pos:end="93:26">!</operator><name pos:start="93:27" pos:end="93:35"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:35">height</name></name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:31"><block_content pos:start="95:13" pos:end="95:31">

            <return pos:start="95:13" pos:end="95:31">return <expr pos:start="95:20" pos:end="95:30"><name pos:start="95:20" pos:end="95:30">AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:9">w</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:20">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:22"><expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:9">h</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:21">height</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:31">/* parse transformations */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:25"><expr pos:start="107:5" pos:end="107:24"><name pos:start="107:5" pos:end="107:20"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:20">nb_transforms</name></name> <operator pos:start="107:22" pos:end="107:22">=</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:25"><expr pos:start="109:5" pos:end="109:24"><name pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:20">reduced_width</name></name> <operator pos:start="109:22" pos:end="109:22">=</operator> <literal type="number" pos:start="109:24" pos:end="109:24">0</literal></expr>;</expr_stmt>

    <while pos:start="111:5" pos:end="143:5">while <condition pos:start="111:11" pos:end="111:29">(<expr pos:start="111:12" pos:end="111:28"><call pos:start="111:12" pos:end="111:28"><name pos:start="111:12" pos:end="111:20">get_bits1</name><argument_list pos:start="111:21" pos:end="111:28">(<argument pos:start="111:22" pos:end="111:27"><expr pos:start="111:22" pos:end="111:27"><operator pos:start="111:22" pos:end="111:22">&amp;</operator><name pos:start="111:23" pos:end="111:27"><name pos:start="111:23" pos:end="111:23">s</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:31" pos:end="143:5">{<block_content pos:start="113:9" pos:end="141:33">

        <decl_stmt pos:start="113:9" pos:end="113:59"><decl pos:start="113:9" pos:end="113:58"><type pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:12">enum</name> <name pos:start="113:14" pos:end="113:26">TransformType</name></name></type> <name pos:start="113:28" pos:end="113:36">transform</name> <init pos:start="113:38" pos:end="113:58">= <expr pos:start="113:40" pos:end="113:58"><call pos:start="113:40" pos:end="113:58"><name pos:start="113:40" pos:end="113:47">get_bits</name><argument_list pos:start="113:48" pos:end="113:58">(<argument pos:start="113:49" pos:end="113:54"><expr pos:start="113:49" pos:end="113:54"><operator pos:start="113:49" pos:end="113:49">&amp;</operator><name pos:start="113:50" pos:end="113:54"><name pos:start="113:50" pos:end="113:50">s</name><operator pos:start="113:51" pos:end="113:52">-&gt;</operator><name pos:start="113:53" pos:end="113:54">gb</name></name></expr></argument>, <argument pos:start="113:57" pos:end="113:57"><expr pos:start="113:57" pos:end="113:57"><literal type="number" pos:start="113:57" pos:end="113:57">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:54"><expr pos:start="115:9" pos:end="115:53"><name pos:start="115:9" pos:end="115:41"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:21">transforms</name><index pos:start="115:22" pos:end="115:41">[<expr pos:start="115:23" pos:end="115:40"><name pos:start="115:23" pos:end="115:38"><name pos:start="115:23" pos:end="115:23">s</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:38">nb_transforms</name></name><operator pos:start="115:39" pos:end="115:40">++</operator></expr>]</index></name> <operator pos:start="115:43" pos:end="115:43">=</operator> <name pos:start="115:45" pos:end="115:53">transform</name></expr>;</expr_stmt>

        <switch pos:start="117:9" pos:end="137:9">switch <condition pos:start="117:16" pos:end="117:26">(<expr pos:start="117:17" pos:end="117:25"><name pos:start="117:17" pos:end="117:25">transform</name></expr>)</condition> <block pos:start="117:28" pos:end="137:9">{<block_content pos:start="119:9" pos:end="135:18">

        <case pos:start="119:9" pos:end="119:33">case <expr pos:start="119:14" pos:end="119:32"><name pos:start="119:14" pos:end="119:32">PREDICTOR_TRANSFORM</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:47"><expr pos:start="121:13" pos:end="121:46"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:46"><name pos:start="121:19" pos:end="121:43">parse_transform_predictor</name><argument_list pos:start="121:44" pos:end="121:46">(<argument pos:start="121:45" pos:end="121:45"><expr pos:start="121:45" pos:end="121:45"><name pos:start="121:45" pos:end="121:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:29">case <expr pos:start="125:14" pos:end="125:28"><name pos:start="125:14" pos:end="125:28">COLOR_TRANSFORM</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:43"><expr pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:42"><name pos:start="127:19" pos:end="127:39">parse_transform_color</name><argument_list pos:start="127:40" pos:end="127:42">(<argument pos:start="127:41" pos:end="127:41"><expr pos:start="127:41" pos:end="127:41"><name pos:start="127:41" pos:end="127:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <case pos:start="131:9" pos:end="131:38">case <expr pos:start="131:14" pos:end="131:37"><name pos:start="131:14" pos:end="131:37">COLOR_INDEXING_TRANSFORM</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:52"><expr pos:start="133:13" pos:end="133:51"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:51"><name pos:start="133:19" pos:end="133:48">parse_transform_color_indexing</name><argument_list pos:start="133:49" pos:end="133:51">(<argument pos:start="133:50" pos:end="133:50"><expr pos:start="133:50" pos:end="133:50"><name pos:start="133:50" pos:end="133:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="139:9" pos:end="141:33"><if pos:start="139:9" pos:end="141:33">if <condition pos:start="139:12" pos:end="139:20">(<expr pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">&lt;</operator> <literal type="number" pos:start="139:19" pos:end="139:19">0</literal></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:33"><block_content pos:start="141:13" pos:end="141:33">

            <goto pos:start="141:13" pos:end="141:33">goto <name pos:start="141:18" pos:end="141:32">free_and_return</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="147:5" pos:end="147:30">/* decode primary image */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:40"><expr pos:start="149:5" pos:end="149:39"><name pos:start="149:5" pos:end="149:29"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:12">image</name><index pos:start="149:13" pos:end="149:29">[<expr pos:start="149:14" pos:end="149:28"><name pos:start="149:14" pos:end="149:28">IMAGE_ROLE_ARGB</name></expr>]</index></name><operator pos:start="149:30" pos:end="149:30">.</operator><name pos:start="149:31" pos:end="149:35">frame</name> <operator pos:start="149:37" pos:end="149:37">=</operator> <name pos:start="149:39" pos:end="149:39">p</name></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="153:55"><if pos:start="151:5" pos:end="153:55">if <condition pos:start="151:8" pos:end="151:23">(<expr pos:start="151:9" pos:end="151:22"><name pos:start="151:9" pos:end="151:22">is_alpha_chunk</name></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:55"><block_content pos:start="153:9" pos:end="153:55">

        <expr_stmt pos:start="153:9" pos:end="153:55"><expr pos:start="153:9" pos:end="153:54"><name pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:16">image</name><index pos:start="153:17" pos:end="153:33">[<expr pos:start="153:18" pos:end="153:32"><name pos:start="153:18" pos:end="153:32">IMAGE_ROLE_ARGB</name></expr>]</index></name><operator pos:start="153:34" pos:end="153:34">.</operator><name pos:start="153:35" pos:end="153:50">is_alpha_primary</name> <operator pos:start="153:52" pos:end="153:52">=</operator> <literal type="number" pos:start="153:54" pos:end="153:54">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:63"><expr pos:start="155:5" pos:end="155:62"><name pos:start="155:5" pos:end="155:7">ret</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <call pos:start="155:11" pos:end="155:62"><name pos:start="155:11" pos:end="155:36">decode_entropy_coded_image</name><argument_list pos:start="155:37" pos:end="155:62">(<argument pos:start="155:38" pos:end="155:38"><expr pos:start="155:38" pos:end="155:38"><name pos:start="155:38" pos:end="155:38">s</name></expr></argument>, <argument pos:start="155:41" pos:end="155:55"><expr pos:start="155:41" pos:end="155:55"><name pos:start="155:41" pos:end="155:55">IMAGE_ROLE_ARGB</name></expr></argument>, <argument pos:start="155:58" pos:end="155:58"><expr pos:start="155:58" pos:end="155:58"><name pos:start="155:58" pos:end="155:58">w</name></expr></argument>, <argument pos:start="155:61" pos:end="155:61"><expr pos:start="155:61" pos:end="155:61"><name pos:start="155:61" pos:end="155:61">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="159:29"><if pos:start="157:5" pos:end="159:29">if <condition pos:start="157:8" pos:end="157:16">(<expr pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:11">ret</name> <operator pos:start="157:13" pos:end="157:13">&lt;</operator> <literal type="number" pos:start="157:15" pos:end="157:15">0</literal></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:29"><block_content pos:start="159:9" pos:end="159:29">

        <goto pos:start="159:9" pos:end="159:29">goto <name pos:start="159:14" pos:end="159:28">free_and_return</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:31">/* apply transformations */</comment>

    <for pos:start="165:5" pos:end="199:5">for <control pos:start="165:9" pos:end="165:47">(<init pos:start="165:10" pos:end="165:34"><expr pos:start="165:10" pos:end="165:33"><name pos:start="165:10" pos:end="165:10">i</name> <operator pos:start="165:12" pos:end="165:12">=</operator> <name pos:start="165:14" pos:end="165:29"><name pos:start="165:14" pos:end="165:14">s</name><operator pos:start="165:15" pos:end="165:16">-&gt;</operator><name pos:start="165:17" pos:end="165:29">nb_transforms</name></name> <operator pos:start="165:31" pos:end="165:31">-</operator> <literal type="number" pos:start="165:33" pos:end="165:33">1</literal></expr>;</init> <condition pos:start="165:36" pos:end="165:42"><expr pos:start="165:36" pos:end="165:41"><name pos:start="165:36" pos:end="165:36">i</name> <operator pos:start="165:38" pos:end="165:39">&gt;=</operator> <literal type="number" pos:start="165:41" pos:end="165:41">0</literal></expr>;</condition> <incr pos:start="165:44" pos:end="165:46"><expr pos:start="165:44" pos:end="165:46"><name pos:start="165:44" pos:end="165:44">i</name><operator pos:start="165:45" pos:end="165:46">--</operator></expr></incr>)</control> <block pos:start="165:49" pos:end="199:5">{<block_content pos:start="167:9" pos:end="197:33">

        <switch pos:start="167:9" pos:end="193:9">switch <condition pos:start="167:16" pos:end="167:33">(<expr pos:start="167:17" pos:end="167:32"><name pos:start="167:17" pos:end="167:32"><name pos:start="167:17" pos:end="167:17">s</name><operator pos:start="167:18" pos:end="167:19">-&gt;</operator><name pos:start="167:20" pos:end="167:29">transforms</name><index pos:start="167:30" pos:end="167:32">[<expr pos:start="167:31" pos:end="167:31"><name pos:start="167:31" pos:end="167:31">i</name></expr>]</index></name></expr>)</condition> <block pos:start="167:35" pos:end="193:9">{<block_content pos:start="169:9" pos:end="191:18">

        <case pos:start="169:9" pos:end="169:33">case <expr pos:start="169:14" pos:end="169:32"><name pos:start="169:14" pos:end="169:32">PREDICTOR_TRANSFORM</name></expr>:</case>

            <expr_stmt pos:start="171:13" pos:end="171:47"><expr pos:start="171:13" pos:end="171:46"><name pos:start="171:13" pos:end="171:15">ret</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="171:46"><name pos:start="171:19" pos:end="171:43">apply_predictor_transform</name><argument_list pos:start="171:44" pos:end="171:46">(<argument pos:start="171:45" pos:end="171:45"><expr pos:start="171:45" pos:end="171:45"><name pos:start="171:45" pos:end="171:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:29">case <expr pos:start="175:14" pos:end="175:28"><name pos:start="175:14" pos:end="175:28">COLOR_TRANSFORM</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:43"><expr pos:start="177:13" pos:end="177:42"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:42"><name pos:start="177:19" pos:end="177:39">apply_color_transform</name><argument_list pos:start="177:40" pos:end="177:42">(<argument pos:start="177:41" pos:end="177:41"><expr pos:start="177:41" pos:end="177:41"><name pos:start="177:41" pos:end="177:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <case pos:start="181:9" pos:end="181:28">case <expr pos:start="181:14" pos:end="181:27"><name pos:start="181:14" pos:end="181:27">SUBTRACT_GREEN</name></expr>:</case>

            <expr_stmt pos:start="183:13" pos:end="183:52"><expr pos:start="183:13" pos:end="183:51"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:51"><name pos:start="183:19" pos:end="183:48">apply_subtract_green_transform</name><argument_list pos:start="183:49" pos:end="183:51">(<argument pos:start="183:50" pos:end="183:50"><expr pos:start="183:50" pos:end="183:50"><name pos:start="183:50" pos:end="183:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:38">case <expr pos:start="187:14" pos:end="187:37"><name pos:start="187:14" pos:end="187:37">COLOR_INDEXING_TRANSFORM</name></expr>:</case>

            <expr_stmt pos:start="189:13" pos:end="189:52"><expr pos:start="189:13" pos:end="189:51"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:51"><name pos:start="189:19" pos:end="189:48">apply_color_indexing_transform</name><argument_list pos:start="189:49" pos:end="189:51">(<argument pos:start="189:50" pos:end="189:50"><expr pos:start="189:50" pos:end="189:50"><name pos:start="189:50" pos:end="189:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="191:13" pos:end="191:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="195:9" pos:end="197:33"><if pos:start="195:9" pos:end="197:33">if <condition pos:start="195:12" pos:end="195:20">(<expr pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">&lt;</operator> <literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>)</condition><block type="pseudo" pos:start="197:13" pos:end="197:33"><block_content pos:start="197:13" pos:end="197:33">

            <goto pos:start="197:13" pos:end="197:33">goto <name pos:start="197:18" pos:end="197:32">free_and_return</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="203:5" pos:end="203:21"><expr pos:start="203:5" pos:end="203:20"><operator pos:start="203:5" pos:end="203:5">*</operator><name pos:start="203:6" pos:end="203:14">got_frame</name>   <operator pos:start="203:18" pos:end="203:18">=</operator> <literal type="number" pos:start="203:20" pos:end="203:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:37"><expr pos:start="205:5" pos:end="205:36"><name pos:start="205:5" pos:end="205:16"><name pos:start="205:5" pos:end="205:5">p</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:16">pict_type</name></name> <operator pos:start="205:18" pos:end="205:18">=</operator> <name pos:start="205:20" pos:end="205:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:21"><expr pos:start="207:5" pos:end="207:20"><name pos:start="207:5" pos:end="207:16"><name pos:start="207:5" pos:end="207:5">p</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:16">key_frame</name></name> <operator pos:start="207:18" pos:end="207:18">=</operator> <literal type="number" pos:start="207:20" pos:end="207:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:29"><expr pos:start="209:5" pos:end="209:28"><name pos:start="209:5" pos:end="209:7">ret</name>          <operator pos:start="209:18" pos:end="209:18">=</operator> <name pos:start="209:20" pos:end="209:28">data_size</name></expr>;</expr_stmt>



<label pos:start="213:1" pos:end="213:16"><name pos:start="213:1" pos:end="213:15">free_and_return</name>:</label>

    <for pos:start="215:5" pos:end="217:37">for <control pos:start="215:9" pos:end="215:39">(<init pos:start="215:10" pos:end="215:15"><expr pos:start="215:10" pos:end="215:14"><name pos:start="215:10" pos:end="215:10">i</name> <operator pos:start="215:12" pos:end="215:12">=</operator> <literal type="number" pos:start="215:14" pos:end="215:14">0</literal></expr>;</init> <condition pos:start="215:17" pos:end="215:34"><expr pos:start="215:17" pos:end="215:33"><name pos:start="215:17" pos:end="215:17">i</name> <operator pos:start="215:19" pos:end="215:19">&lt;</operator> <name pos:start="215:21" pos:end="215:33">IMAGE_ROLE_NB</name></expr>;</condition> <incr pos:start="215:36" pos:end="215:38"><expr pos:start="215:36" pos:end="215:38"><name pos:start="215:36" pos:end="215:36">i</name><operator pos:start="215:37" pos:end="215:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="217:9" pos:end="217:37"><block_content pos:start="217:9" pos:end="217:37">

        <expr_stmt pos:start="217:9" pos:end="217:37"><expr pos:start="217:9" pos:end="217:36"><call pos:start="217:9" pos:end="217:36"><name pos:start="217:9" pos:end="217:22">image_ctx_free</name><argument_list pos:start="217:23" pos:end="217:36">(<argument pos:start="217:24" pos:end="217:35"><expr pos:start="217:24" pos:end="217:35"><operator pos:start="217:24" pos:end="217:24">&amp;</operator><name pos:start="217:25" pos:end="217:35"><name pos:start="217:25" pos:end="217:25">s</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:32">image</name><index pos:start="217:33" pos:end="217:35">[<expr pos:start="217:34" pos:end="217:34"><name pos:start="217:34" pos:end="217:34">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <return pos:start="221:5" pos:end="221:15">return <expr pos:start="221:12" pos:end="221:14"><name pos:start="221:12" pos:end="221:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
