<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26208.c" pos:tabs="8"><function pos:start="1:1" pos:end="2099:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">disas_thumb2_insn</name><parameter_list pos:start="1:29" pos:end="1:79">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:56">DisasContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:78"><decl pos:start="1:62" pos:end="1:78"><type pos:start="1:62" pos:end="1:78"><name pos:start="1:62" pos:end="1:69">uint16_t</name></type> <name pos:start="1:71" pos:end="1:78">insn_hw1</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="2099:1">{<block_content pos:start="5:5" pos:end="2097:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">insn</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:20" pos:end="5:22">imm</name></decl>, <decl pos:start="5:25" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:25" pos:end="5:29">shift</name></decl>, <decl pos:start="5:32" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:32" pos:end="5:37">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">rd</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">rn</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:23">rm</name></decl>, <decl pos:start="7:26" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:26" pos:end="7:27">rs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:12">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:13">tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">TCGv</name></type> <name pos:start="13:10" pos:end="13:13">tmp3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">TCGv</name></type> <name pos:start="15:10" pos:end="15:13">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">TCGv_i64</name></type> <name pos:start="17:14" pos:end="17:18">tmp64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:11"><decl pos:start="19:5" pos:end="19:10"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">shiftop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:13">conds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">logic_cc</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="107:5"><if pos:start="29:5" pos:end="107:5">if <condition pos:start="29:8" pos:end="31:47">(<expr pos:start="29:9" pos:end="31:46"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><call pos:start="29:11" pos:end="29:46"><name pos:start="29:11" pos:end="29:21">arm_feature</name><argument_list pos:start="29:22" pos:end="29:46">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">env</name></expr></argument>, <argument pos:start="29:28" pos:end="29:45"><expr pos:start="29:28" pos:end="29:45"><name pos:start="29:28" pos:end="29:45">ARM_FEATURE_THUMB2</name></expr></argument>)</argument_list></call>

          <operator pos:start="31:11" pos:end="31:12">||</operator> <call pos:start="31:14" pos:end="31:45"><name pos:start="31:14" pos:end="31:24">arm_feature</name> <argument_list pos:start="31:26" pos:end="31:45">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">env</name></expr></argument>, <argument pos:start="31:32" pos:end="31:44"><expr pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:44">ARM_FEATURE_M</name></expr></argument>)</argument_list></call><operator pos:start="31:46" pos:end="31:46">)</operator></expr>)</condition> <block pos:start="31:49" pos:end="107:5">{<block_content pos:start="37:9" pos:end="103:9">

        <comment type="block" pos:start="33:9" pos:end="35:74">/* Thumb-1 cores may need to treat bl and blx as a pair of

           16-bit instructions to get correct prefetch abort behavior.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:12">insn</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:23">insn_hw1</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="63:9"><if pos:start="39:9" pos:end="63:9">if <condition pos:start="39:12" pos:end="39:36">(<expr pos:start="39:13" pos:end="39:35"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:17">insn</name> <operator pos:start="39:19" pos:end="39:19">&amp;</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><literal type="number" pos:start="39:22" pos:end="39:22">1</literal> <operator pos:start="39:24" pos:end="39:25">&lt;&lt;</operator> <literal type="number" pos:start="39:27" pos:end="39:28">12</literal><operator pos:start="39:29" pos:end="39:29">)</operator><operator pos:start="39:30" pos:end="39:30">)</operator> <operator pos:start="39:32" pos:end="39:33">==</operator> <literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr>)</condition> <block pos:start="39:38" pos:end="63:9">{<block_content pos:start="43:13" pos:end="61:21">

            <comment type="block" pos:start="41:13" pos:end="41:38">/* Second half of blx.  */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:43"><expr pos:start="43:13" pos:end="43:42"><name pos:start="43:13" pos:end="43:18">offset</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <operator pos:start="43:22" pos:end="43:22">(</operator><operator pos:start="43:23" pos:end="43:23">(</operator><name pos:start="43:24" pos:end="43:27">insn</name> <operator pos:start="43:29" pos:end="43:29">&amp;</operator> <literal type="number" pos:start="43:31" pos:end="43:35">0x7ff</literal><operator pos:start="43:36" pos:end="43:36">)</operator> <operator pos:start="43:38" pos:end="43:39">&lt;&lt;</operator> <literal type="number" pos:start="43:41" pos:end="43:41">1</literal><operator pos:start="43:42" pos:end="43:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:15">tmp</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:33"><name pos:start="45:19" pos:end="45:26">load_reg</name><argument_list pos:start="45:27" pos:end="45:33">(<argument pos:start="45:28" pos:end="45:28"><expr pos:start="45:28" pos:end="45:28"><name pos:start="45:28" pos:end="45:28">s</name></expr></argument>, <argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><literal type="number" pos:start="45:31" pos:end="45:32">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:47"><expr pos:start="47:13" pos:end="47:46"><call pos:start="47:13" pos:end="47:46"><name pos:start="47:13" pos:end="47:28">tcg_gen_addi_i32</name><argument_list pos:start="47:29" pos:end="47:46">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:32">tmp</name></expr></argument>, <argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">tmp</name></expr></argument>, <argument pos:start="47:40" pos:end="47:45"><expr pos:start="47:40" pos:end="47:45"><name pos:start="47:40" pos:end="47:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:51"><expr pos:start="49:13" pos:end="49:50"><call pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:28">tcg_gen_andi_i32</name><argument_list pos:start="49:29" pos:end="49:50">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">tmp</name></expr></argument>, <argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">tmp</name></expr></argument>, <argument pos:start="49:40" pos:end="49:49"><expr pos:start="49:40" pos:end="49:49"><literal type="number" pos:start="49:40" pos:end="49:49">0xfffffffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:16">tmp2</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:37"><name pos:start="53:20" pos:end="53:35">tcg_temp_new_i32</name><argument_list pos:start="53:36" pos:end="53:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:46"><expr pos:start="55:13" pos:end="55:45"><call pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:28">tcg_gen_movi_i32</name><argument_list pos:start="55:29" pos:end="55:45">(<argument pos:start="55:30" pos:end="55:33"><expr pos:start="55:30" pos:end="55:33"><name pos:start="55:30" pos:end="55:33">tmp2</name></expr></argument>, <argument pos:start="55:36" pos:end="55:44"><expr pos:start="55:36" pos:end="55:44"><name pos:start="55:36" pos:end="55:40"><name pos:start="55:36" pos:end="55:36">s</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:40">pc</name></name> <operator pos:start="55:42" pos:end="55:42">|</operator> <literal type="number" pos:start="55:44" pos:end="55:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><call pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:21">store_reg</name><argument_list pos:start="57:22" pos:end="57:34">(<argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><name pos:start="57:23" pos:end="57:23">s</name></expr></argument>, <argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><literal type="number" pos:start="57:26" pos:end="57:27">14</literal></expr></argument>, <argument pos:start="57:30" pos:end="57:33"><expr pos:start="57:30" pos:end="57:33"><name pos:start="57:30" pos:end="57:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:27"><expr pos:start="59:13" pos:end="59:26"><call pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:18">gen_bx</name><argument_list pos:start="59:19" pos:end="59:26">(<argument pos:start="59:20" pos:end="59:20"><expr pos:start="59:20" pos:end="59:20"><name pos:start="59:20" pos:end="59:20">s</name></expr></argument>, <argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:21">return <expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="87:9"><if pos:start="65:9" pos:end="87:9">if <condition pos:start="65:12" pos:end="65:29">(<expr pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:16">insn</name> <operator pos:start="65:18" pos:end="65:18">&amp;</operator> <operator pos:start="65:20" pos:end="65:20">(</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal> <operator pos:start="65:23" pos:end="65:24">&lt;&lt;</operator> <literal type="number" pos:start="65:26" pos:end="65:27">11</literal><operator pos:start="65:28" pos:end="65:28">)</operator></expr>)</condition> <block pos:start="65:31" pos:end="87:9">{<block_content pos:start="69:13" pos:end="85:21">

            <comment type="block" pos:start="67:13" pos:end="67:37">/* Second half of bl.  */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:47"><expr pos:start="69:13" pos:end="69:46"><name pos:start="69:13" pos:end="69:18">offset</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <operator pos:start="69:22" pos:end="69:22">(</operator><operator pos:start="69:23" pos:end="69:23">(</operator><name pos:start="69:24" pos:end="69:27">insn</name> <operator pos:start="69:29" pos:end="69:29">&amp;</operator> <literal type="number" pos:start="69:31" pos:end="69:35">0x7ff</literal><operator pos:start="69:36" pos:end="69:36">)</operator> <operator pos:start="69:38" pos:end="69:39">&lt;&lt;</operator> <literal type="number" pos:start="69:41" pos:end="69:41">1</literal><operator pos:start="69:42" pos:end="69:42">)</operator> <operator pos:start="69:44" pos:end="69:44">|</operator> <literal type="number" pos:start="69:46" pos:end="69:46">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:15">tmp</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:33"><name pos:start="71:19" pos:end="71:26">load_reg</name><argument_list pos:start="71:27" pos:end="71:33">(<argument pos:start="71:28" pos:end="71:28"><expr pos:start="71:28" pos:end="71:28"><name pos:start="71:28" pos:end="71:28">s</name></expr></argument>, <argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><literal type="number" pos:start="71:31" pos:end="71:32">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:47"><expr pos:start="73:13" pos:end="73:46"><call pos:start="73:13" pos:end="73:46"><name pos:start="73:13" pos:end="73:28">tcg_gen_addi_i32</name><argument_list pos:start="73:29" pos:end="73:46">(<argument pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:32">tmp</name></expr></argument>, <argument pos:start="73:35" pos:end="73:37"><expr pos:start="73:35" pos:end="73:37"><name pos:start="73:35" pos:end="73:37">tmp</name></expr></argument>, <argument pos:start="73:40" pos:end="73:45"><expr pos:start="73:40" pos:end="73:45"><name pos:start="73:40" pos:end="73:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:38"><expr pos:start="77:13" pos:end="77:37"><name pos:start="77:13" pos:end="77:16">tmp2</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:37"><name pos:start="77:20" pos:end="77:35">tcg_temp_new_i32</name><argument_list pos:start="77:36" pos:end="77:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:46"><expr pos:start="79:13" pos:end="79:45"><call pos:start="79:13" pos:end="79:45"><name pos:start="79:13" pos:end="79:28">tcg_gen_movi_i32</name><argument_list pos:start="79:29" pos:end="79:45">(<argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><name pos:start="79:30" pos:end="79:33">tmp2</name></expr></argument>, <argument pos:start="79:36" pos:end="79:44"><expr pos:start="79:36" pos:end="79:44"><name pos:start="79:36" pos:end="79:40"><name pos:start="79:36" pos:end="79:36">s</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:40">pc</name></name> <operator pos:start="79:42" pos:end="79:42">|</operator> <literal type="number" pos:start="79:44" pos:end="79:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><call pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:21">store_reg</name><argument_list pos:start="81:22" pos:end="81:34">(<argument pos:start="81:23" pos:end="81:23"><expr pos:start="81:23" pos:end="81:23"><name pos:start="81:23" pos:end="81:23">s</name></expr></argument>, <argument pos:start="81:26" pos:end="81:27"><expr pos:start="81:26" pos:end="81:27"><literal type="number" pos:start="81:26" pos:end="81:27">14</literal></expr></argument>, <argument pos:start="81:30" pos:end="81:33"><expr pos:start="81:30" pos:end="81:33"><name pos:start="81:30" pos:end="81:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:26"><call pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:18">gen_bx</name><argument_list pos:start="83:19" pos:end="83:26">(<argument pos:start="83:20" pos:end="83:20"><expr pos:start="83:20" pos:end="83:20"><name pos:start="83:20" pos:end="83:20">s</name></expr></argument>, <argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:21">return <expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="103:9"><if pos:start="89:9" pos:end="103:9">if <condition pos:start="89:12" pos:end="89:45">(<expr pos:start="89:13" pos:end="89:44"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">s</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:18">pc</name></name> <operator pos:start="89:20" pos:end="89:20">&amp;</operator> <operator pos:start="89:22" pos:end="89:22">~</operator><name pos:start="89:23" pos:end="89:38">TARGET_PAGE_MASK</name><operator pos:start="89:39" pos:end="89:39">)</operator> <operator pos:start="89:41" pos:end="89:42">==</operator> <literal type="number" pos:start="89:44" pos:end="89:44">0</literal></expr>)</condition> <block pos:start="89:47" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:21">

            <comment type="block" pos:start="91:13" pos:end="95:34">/* Instruction spans a page boundary.  Implement it as two

               16-bit instructions in case the second half causes an

               prefetch abort.  */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:18">offset</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <operator pos:start="97:22" pos:end="97:22">(</operator><operator pos:start="97:23" pos:end="97:23">(</operator><name pos:start="97:24" pos:end="97:30">int32_t</name><operator pos:start="97:31" pos:end="97:31">)</operator><name pos:start="97:32" pos:end="97:35">insn</name> <operator pos:start="97:37" pos:end="97:38">&lt;&lt;</operator> <literal type="number" pos:start="97:40" pos:end="97:41">21</literal><operator pos:start="97:42" pos:end="97:42">)</operator> <operator pos:start="97:44" pos:end="97:45">&gt;&gt;</operator> <literal type="number" pos:start="97:47" pos:end="97:47">9</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:60"><expr pos:start="99:13" pos:end="99:59"><call pos:start="99:13" pos:end="99:59"><name pos:start="99:13" pos:end="99:28">tcg_gen_movi_i32</name><argument_list pos:start="99:29" pos:end="99:59">(<argument pos:start="99:30" pos:end="99:38"><expr pos:start="99:30" pos:end="99:38"><name pos:start="99:30" pos:end="99:38"><name pos:start="99:30" pos:end="99:34">cpu_R</name><index pos:start="99:35" pos:end="99:38">[<expr pos:start="99:36" pos:end="99:37"><literal type="number" pos:start="99:36" pos:end="99:37">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="99:41" pos:end="99:58"><expr pos:start="99:41" pos:end="99:58"><name pos:start="99:41" pos:end="99:45"><name pos:start="99:41" pos:end="99:41">s</name><operator pos:start="99:42" pos:end="99:43">-&gt;</operator><name pos:start="99:44" pos:end="99:45">pc</name></name> <operator pos:start="99:47" pos:end="99:47">+</operator> <literal type="number" pos:start="99:49" pos:end="99:51">2</literal> <operator pos:start="99:51" pos:end="99:51">+</operator> <name pos:start="99:53" pos:end="99:58">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:21">return <expr pos:start="101:20" pos:end="101:20"><literal type="number" pos:start="101:20" pos:end="101:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:45">/* Fall through to 32-bit decode.  */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:28"><expr pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:8">insn</name> <operator pos:start="111:10" pos:end="111:10">=</operator> <call pos:start="111:12" pos:end="111:27"><name pos:start="111:12" pos:end="111:20">lduw_code</name><argument_list pos:start="111:21" pos:end="111:27">(<argument pos:start="111:22" pos:end="111:26"><expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">s</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:26">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:15"><expr pos:start="113:5" pos:end="113:14"><name pos:start="113:5" pos:end="113:9"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:9">pc</name></name> <operator pos:start="113:11" pos:end="113:12">+=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:37"><expr pos:start="115:5" pos:end="115:36"><name pos:start="115:5" pos:end="115:8">insn</name> <operator pos:start="115:10" pos:end="115:11">|=</operator> <operator pos:start="115:13" pos:end="115:13">(</operator><name pos:start="115:14" pos:end="115:21">uint32_t</name><operator pos:start="115:22" pos:end="115:22">)</operator><name pos:start="115:23" pos:end="115:30">insn_hw1</name> <operator pos:start="115:32" pos:end="115:33">&lt;&lt;</operator> <literal type="number" pos:start="115:35" pos:end="115:36">16</literal></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:42">(<expr pos:start="119:9" pos:end="119:41"><operator pos:start="119:9" pos:end="119:9">(</operator><name pos:start="119:10" pos:end="119:13">insn</name> <operator pos:start="119:15" pos:end="119:15">&amp;</operator> <literal type="number" pos:start="119:17" pos:end="119:26">0xf800e800</literal><operator pos:start="119:27" pos:end="119:27">)</operator> <operator pos:start="119:29" pos:end="119:30">!=</operator> <literal type="number" pos:start="119:32" pos:end="119:41">0xf000e800</literal></expr>)</condition> <block pos:start="119:44" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:18">

        <expr_stmt pos:start="121:9" pos:end="121:18"><expr pos:start="121:9" pos:end="121:17"><call pos:start="121:9" pos:end="121:17"><name pos:start="121:9" pos:end="121:12">ARCH</name><argument_list pos:start="121:13" pos:end="121:17">(<argument pos:start="121:14" pos:end="121:16"><expr pos:start="121:14" pos:end="121:16"><literal type="number" pos:start="121:14" pos:end="121:16">6T2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:28"><expr pos:start="127:5" pos:end="127:27"><name pos:start="127:5" pos:end="127:6">rn</name> <operator pos:start="127:8" pos:end="127:8">=</operator> <operator pos:start="127:10" pos:end="127:10">(</operator><name pos:start="127:11" pos:end="127:14">insn</name> <operator pos:start="127:16" pos:end="127:17">&gt;&gt;</operator> <literal type="number" pos:start="127:19" pos:end="127:20">16</literal><operator pos:start="127:21" pos:end="127:21">)</operator> <operator pos:start="127:23" pos:end="127:23">&amp;</operator> <literal type="number" pos:start="127:25" pos:end="127:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:28"><expr pos:start="129:5" pos:end="129:27"><name pos:start="129:5" pos:end="129:6">rs</name> <operator pos:start="129:8" pos:end="129:8">=</operator> <operator pos:start="129:10" pos:end="129:10">(</operator><name pos:start="129:11" pos:end="129:14">insn</name> <operator pos:start="129:16" pos:end="129:17">&gt;&gt;</operator> <literal type="number" pos:start="129:19" pos:end="129:20">12</literal><operator pos:start="129:21" pos:end="129:21">)</operator> <operator pos:start="129:23" pos:end="129:23">&amp;</operator> <literal type="number" pos:start="129:25" pos:end="129:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:6">rd</name> <operator pos:start="131:8" pos:end="131:8">=</operator> <operator pos:start="131:10" pos:end="131:10">(</operator><name pos:start="131:11" pos:end="131:14">insn</name> <operator pos:start="131:16" pos:end="131:17">&gt;&gt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">8</literal><operator pos:start="131:20" pos:end="131:20">)</operator> <operator pos:start="131:22" pos:end="131:22">&amp;</operator> <literal type="number" pos:start="131:24" pos:end="131:26">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:20"><expr pos:start="133:5" pos:end="133:19"><name pos:start="133:5" pos:end="133:6">rm</name> <operator pos:start="133:8" pos:end="133:8">=</operator> <name pos:start="133:10" pos:end="133:13">insn</name> <operator pos:start="133:15" pos:end="133:15">&amp;</operator> <literal type="number" pos:start="133:17" pos:end="133:19">0xf</literal></expr>;</expr_stmt>

    <switch pos:start="135:5" pos:end="2091:5">switch <condition pos:start="135:12" pos:end="135:31">(<expr pos:start="135:13" pos:end="135:30"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:17">insn</name> <operator pos:start="135:19" pos:end="135:20">&gt;&gt;</operator> <literal type="number" pos:start="135:22" pos:end="135:23">25</literal><operator pos:start="135:24" pos:end="135:24">)</operator> <operator pos:start="135:26" pos:end="135:26">&amp;</operator> <literal type="number" pos:start="135:28" pos:end="135:30">0xf</literal></expr>)</condition> <block pos:start="135:33" pos:end="2091:5">{<block_content pos:start="137:5" pos:end="2089:24">

    <case pos:start="137:5" pos:end="137:11">case <expr pos:start="137:10" pos:end="137:10"><literal type="number" pos:start="137:10" pos:end="137:10">0</literal></expr>:</case> <case pos:start="137:13" pos:end="137:19">case <expr pos:start="137:18" pos:end="137:18"><literal type="number" pos:start="137:18" pos:end="137:18">1</literal></expr>:</case> <case pos:start="137:21" pos:end="137:27">case <expr pos:start="137:26" pos:end="137:26"><literal type="number" pos:start="137:26" pos:end="137:26">2</literal></expr>:</case> <case pos:start="137:29" pos:end="137:35">case <expr pos:start="137:34" pos:end="137:34"><literal type="number" pos:start="137:34" pos:end="137:34">3</literal></expr>:</case>

        <comment type="block" pos:start="139:9" pos:end="139:57">/* 16-bit instructions.  Should never happen.  */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:16"><expr pos:start="141:9" pos:end="141:15"><call pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:13">abort</name><argument_list pos:start="141:14" pos:end="141:15">()</argument_list></call></expr>;</expr_stmt>

    <case pos:start="143:5" pos:end="143:11">case <expr pos:start="143:10" pos:end="143:10"><literal type="number" pos:start="143:10" pos:end="143:10">4</literal></expr>:</case>

        <if_stmt pos:start="145:9" pos:end="527:9"><if pos:start="145:9" pos:end="327:9">if <condition pos:start="145:12" pos:end="145:29">(<expr pos:start="145:13" pos:end="145:28"><name pos:start="145:13" pos:end="145:16">insn</name> <operator pos:start="145:18" pos:end="145:18">&amp;</operator> <operator pos:start="145:20" pos:end="145:20">(</operator><literal type="number" pos:start="145:21" pos:end="145:21">1</literal> <operator pos:start="145:23" pos:end="145:24">&lt;&lt;</operator> <literal type="number" pos:start="145:26" pos:end="145:27">22</literal><operator pos:start="145:28" pos:end="145:28">)</operator></expr>)</condition> <block pos:start="145:31" pos:end="327:9">{<block_content pos:start="149:13" pos:end="325:13">

            <comment type="block" pos:start="147:13" pos:end="147:50">/* Other load/store, table branch.  */</comment>

            <if_stmt pos:start="149:13" pos:end="325:13"><if pos:start="149:13" pos:end="227:13">if <condition pos:start="149:16" pos:end="149:34">(<expr pos:start="149:17" pos:end="149:33"><name pos:start="149:17" pos:end="149:20">insn</name> <operator pos:start="149:22" pos:end="149:22">&amp;</operator> <literal type="number" pos:start="149:24" pos:end="149:33">0x01200000</literal></expr>)</condition> <block pos:start="149:36" pos:end="227:13">{<block_content pos:start="153:17" pos:end="225:17">

                <comment type="block" pos:start="151:17" pos:end="151:45">/* Load/store doubleword.  */</comment>

                <if_stmt pos:start="153:17" pos:end="163:17"><if pos:start="153:17" pos:end="159:17">if <condition pos:start="153:20" pos:end="153:29">(<expr pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:22">rn</name> <operator pos:start="153:24" pos:end="153:25">==</operator> <literal type="number" pos:start="153:27" pos:end="153:28">15</literal></expr>)</condition> <block pos:start="153:31" pos:end="159:17">{<block_content pos:start="155:21" pos:end="157:55">

                    <expr_stmt pos:start="155:21" pos:end="155:46"><expr pos:start="155:21" pos:end="155:45"><name pos:start="155:21" pos:end="155:24">addr</name> <operator pos:start="155:26" pos:end="155:26">=</operator> <call pos:start="155:28" pos:end="155:45"><name pos:start="155:28" pos:end="155:43">tcg_temp_new_i32</name><argument_list pos:start="155:44" pos:end="155:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:55"><expr pos:start="157:21" pos:end="157:54"><call pos:start="157:21" pos:end="157:54"><name pos:start="157:21" pos:end="157:36">tcg_gen_movi_i32</name><argument_list pos:start="157:37" pos:end="157:54">(<argument pos:start="157:38" pos:end="157:41"><expr pos:start="157:38" pos:end="157:41"><name pos:start="157:38" pos:end="157:41">addr</name></expr></argument>, <argument pos:start="157:44" pos:end="157:53"><expr pos:start="157:44" pos:end="157:53"><name pos:start="157:44" pos:end="157:48"><name pos:start="157:44" pos:end="157:44">s</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:48">pc</name></name> <operator pos:start="157:50" pos:end="157:50">&amp;</operator> <operator pos:start="157:52" pos:end="157:52">~</operator><literal type="number" pos:start="157:53" pos:end="157:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="159:19" pos:end="163:17">else <block pos:start="159:24" pos:end="163:17">{<block_content pos:start="161:21" pos:end="161:43">

                    <expr_stmt pos:start="161:21" pos:end="161:43"><expr pos:start="161:21" pos:end="161:42"><name pos:start="161:21" pos:end="161:24">addr</name> <operator pos:start="161:26" pos:end="161:26">=</operator> <call pos:start="161:28" pos:end="161:42"><name pos:start="161:28" pos:end="161:35">load_reg</name><argument_list pos:start="161:36" pos:end="161:42">(<argument pos:start="161:37" pos:end="161:37"><expr pos:start="161:37" pos:end="161:37"><name pos:start="161:37" pos:end="161:37">s</name></expr></argument>, <argument pos:start="161:40" pos:end="161:41"><expr pos:start="161:40" pos:end="161:41"><name pos:start="161:40" pos:end="161:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:43"><expr pos:start="165:17" pos:end="165:42"><name pos:start="165:17" pos:end="165:22">offset</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <operator pos:start="165:26" pos:end="165:26">(</operator><name pos:start="165:27" pos:end="165:30">insn</name> <operator pos:start="165:32" pos:end="165:32">&amp;</operator> <literal type="number" pos:start="165:34" pos:end="165:37">0xff</literal><operator pos:start="165:38" pos:end="165:38">)</operator> <operator pos:start="165:40" pos:end="165:40">*</operator> <literal type="number" pos:start="165:42" pos:end="165:42">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="167:17" pos:end="169:37"><if pos:start="167:17" pos:end="169:37">if <condition pos:start="167:20" pos:end="167:44">(<expr pos:start="167:21" pos:end="167:43"><operator pos:start="167:21" pos:end="167:21">(</operator><name pos:start="167:22" pos:end="167:25">insn</name> <operator pos:start="167:27" pos:end="167:27">&amp;</operator> <operator pos:start="167:29" pos:end="167:29">(</operator><literal type="number" pos:start="167:30" pos:end="167:30">1</literal> <operator pos:start="167:32" pos:end="167:33">&lt;&lt;</operator> <literal type="number" pos:start="167:35" pos:end="167:36">23</literal><operator pos:start="167:37" pos:end="167:37">)</operator><operator pos:start="167:38" pos:end="167:38">)</operator> <operator pos:start="167:40" pos:end="167:41">==</operator> <literal type="number" pos:start="167:43" pos:end="167:43">0</literal></expr>)</condition><block type="pseudo" pos:start="169:21" pos:end="169:37"><block_content pos:start="169:21" pos:end="169:37">

                    <expr_stmt pos:start="169:21" pos:end="169:37"><expr pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:26">offset</name> <operator pos:start="169:28" pos:end="169:28">=</operator> <operator pos:start="169:30" pos:end="169:30">-</operator><name pos:start="169:31" pos:end="169:36">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="171:17" pos:end="177:17"><if pos:start="171:17" pos:end="177:17">if <condition pos:start="171:20" pos:end="171:37">(<expr pos:start="171:21" pos:end="171:36"><name pos:start="171:21" pos:end="171:24">insn</name> <operator pos:start="171:26" pos:end="171:26">&amp;</operator> <operator pos:start="171:28" pos:end="171:28">(</operator><literal type="number" pos:start="171:29" pos:end="171:29">1</literal> <operator pos:start="171:31" pos:end="171:32">&lt;&lt;</operator> <literal type="number" pos:start="171:34" pos:end="171:35">24</literal><operator pos:start="171:36" pos:end="171:36">)</operator></expr>)</condition> <block pos:start="171:39" pos:end="177:17">{<block_content pos:start="173:21" pos:end="175:31">

                    <expr_stmt pos:start="173:21" pos:end="173:57"><expr pos:start="173:21" pos:end="173:56"><call pos:start="173:21" pos:end="173:56"><name pos:start="173:21" pos:end="173:36">tcg_gen_addi_i32</name><argument_list pos:start="173:37" pos:end="173:56">(<argument pos:start="173:38" pos:end="173:41"><expr pos:start="173:38" pos:end="173:41"><name pos:start="173:38" pos:end="173:41">addr</name></expr></argument>, <argument pos:start="173:44" pos:end="173:47"><expr pos:start="173:44" pos:end="173:47"><name pos:start="173:44" pos:end="173:47">addr</name></expr></argument>, <argument pos:start="173:50" pos:end="173:55"><expr pos:start="173:50" pos:end="173:55"><name pos:start="173:50" pos:end="173:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="175:21" pos:end="175:31"><expr pos:start="175:21" pos:end="175:30"><name pos:start="175:21" pos:end="175:26">offset</name> <operator pos:start="175:28" pos:end="175:28">=</operator> <literal type="number" pos:start="175:30" pos:end="175:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="179:17" pos:end="207:17"><if pos:start="179:17" pos:end="193:17">if <condition pos:start="179:20" pos:end="179:37">(<expr pos:start="179:21" pos:end="179:36"><name pos:start="179:21" pos:end="179:24">insn</name> <operator pos:start="179:26" pos:end="179:26">&amp;</operator> <operator pos:start="179:28" pos:end="179:28">(</operator><literal type="number" pos:start="179:29" pos:end="179:29">1</literal> <operator pos:start="179:31" pos:end="179:32">&lt;&lt;</operator> <literal type="number" pos:start="179:34" pos:end="179:35">20</literal><operator pos:start="179:36" pos:end="179:36">)</operator></expr>)</condition> <block pos:start="179:39" pos:end="193:17">{<block_content pos:start="183:21" pos:end="191:42">

                    <comment type="block" pos:start="181:21" pos:end="181:30">/* ldrd */</comment>

                    <expr_stmt pos:start="183:21" pos:end="183:53"><expr pos:start="183:21" pos:end="183:52"><name pos:start="183:21" pos:end="183:23">tmp</name> <operator pos:start="183:25" pos:end="183:25">=</operator> <call pos:start="183:27" pos:end="183:52"><name pos:start="183:27" pos:end="183:34">gen_ld32</name><argument_list pos:start="183:35" pos:end="183:52">(<argument pos:start="183:36" pos:end="183:39"><expr pos:start="183:36" pos:end="183:39"><name pos:start="183:36" pos:end="183:39">addr</name></expr></argument>, <argument pos:start="183:42" pos:end="183:51"><expr pos:start="183:42" pos:end="183:51"><call pos:start="183:42" pos:end="183:51"><name pos:start="183:42" pos:end="183:48">IS_USER</name><argument_list pos:start="183:49" pos:end="183:51">(<argument pos:start="183:50" pos:end="183:50"><expr pos:start="183:50" pos:end="183:50"><name pos:start="183:50" pos:end="183:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:42"><expr pos:start="185:21" pos:end="185:41"><call pos:start="185:21" pos:end="185:41"><name pos:start="185:21" pos:end="185:29">store_reg</name><argument_list pos:start="185:30" pos:end="185:41">(<argument pos:start="185:31" pos:end="185:31"><expr pos:start="185:31" pos:end="185:31"><name pos:start="185:31" pos:end="185:31">s</name></expr></argument>, <argument pos:start="185:34" pos:end="185:35"><expr pos:start="185:34" pos:end="185:35"><name pos:start="185:34" pos:end="185:35">rs</name></expr></argument>, <argument pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><name pos:start="185:38" pos:end="185:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:52"><expr pos:start="187:21" pos:end="187:51"><call pos:start="187:21" pos:end="187:51"><name pos:start="187:21" pos:end="187:36">tcg_gen_addi_i32</name><argument_list pos:start="187:37" pos:end="187:51">(<argument pos:start="187:38" pos:end="187:41"><expr pos:start="187:38" pos:end="187:41"><name pos:start="187:38" pos:end="187:41">addr</name></expr></argument>, <argument pos:start="187:44" pos:end="187:47"><expr pos:start="187:44" pos:end="187:47"><name pos:start="187:44" pos:end="187:47">addr</name></expr></argument>, <argument pos:start="187:50" pos:end="187:50"><expr pos:start="187:50" pos:end="187:50"><literal type="number" pos:start="187:50" pos:end="187:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:53"><expr pos:start="189:21" pos:end="189:52"><name pos:start="189:21" pos:end="189:23">tmp</name> <operator pos:start="189:25" pos:end="189:25">=</operator> <call pos:start="189:27" pos:end="189:52"><name pos:start="189:27" pos:end="189:34">gen_ld32</name><argument_list pos:start="189:35" pos:end="189:52">(<argument pos:start="189:36" pos:end="189:39"><expr pos:start="189:36" pos:end="189:39"><name pos:start="189:36" pos:end="189:39">addr</name></expr></argument>, <argument pos:start="189:42" pos:end="189:51"><expr pos:start="189:42" pos:end="189:51"><call pos:start="189:42" pos:end="189:51"><name pos:start="189:42" pos:end="189:48">IS_USER</name><argument_list pos:start="189:49" pos:end="189:51">(<argument pos:start="189:50" pos:end="189:50"><expr pos:start="189:50" pos:end="189:50"><name pos:start="189:50" pos:end="189:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:42"><expr pos:start="191:21" pos:end="191:41"><call pos:start="191:21" pos:end="191:41"><name pos:start="191:21" pos:end="191:29">store_reg</name><argument_list pos:start="191:30" pos:end="191:41">(<argument pos:start="191:31" pos:end="191:31"><expr pos:start="191:31" pos:end="191:31"><name pos:start="191:31" pos:end="191:31">s</name></expr></argument>, <argument pos:start="191:34" pos:end="191:35"><expr pos:start="191:34" pos:end="191:35"><name pos:start="191:34" pos:end="191:35">rd</name></expr></argument>, <argument pos:start="191:38" pos:end="191:40"><expr pos:start="191:38" pos:end="191:40"><name pos:start="191:38" pos:end="191:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="193:19" pos:end="207:17">else <block pos:start="193:24" pos:end="207:17">{<block_content pos:start="197:21" pos:end="205:52">

                    <comment type="block" pos:start="195:21" pos:end="195:30">/* strd */</comment>

                    <expr_stmt pos:start="197:21" pos:end="197:42"><expr pos:start="197:21" pos:end="197:41"><name pos:start="197:21" pos:end="197:23">tmp</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <call pos:start="197:27" pos:end="197:41"><name pos:start="197:27" pos:end="197:34">load_reg</name><argument_list pos:start="197:35" pos:end="197:41">(<argument pos:start="197:36" pos:end="197:36"><expr pos:start="197:36" pos:end="197:36"><name pos:start="197:36" pos:end="197:36">s</name></expr></argument>, <argument pos:start="197:39" pos:end="197:40"><expr pos:start="197:39" pos:end="197:40"><name pos:start="197:39" pos:end="197:40">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:52"><expr pos:start="199:21" pos:end="199:51"><call pos:start="199:21" pos:end="199:51"><name pos:start="199:21" pos:end="199:28">gen_st32</name><argument_list pos:start="199:29" pos:end="199:51">(<argument pos:start="199:30" pos:end="199:32"><expr pos:start="199:30" pos:end="199:32"><name pos:start="199:30" pos:end="199:32">tmp</name></expr></argument>, <argument pos:start="199:35" pos:end="199:38"><expr pos:start="199:35" pos:end="199:38"><name pos:start="199:35" pos:end="199:38">addr</name></expr></argument>, <argument pos:start="199:41" pos:end="199:50"><expr pos:start="199:41" pos:end="199:50"><call pos:start="199:41" pos:end="199:50"><name pos:start="199:41" pos:end="199:47">IS_USER</name><argument_list pos:start="199:48" pos:end="199:50">(<argument pos:start="199:49" pos:end="199:49"><expr pos:start="199:49" pos:end="199:49"><name pos:start="199:49" pos:end="199:49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:52"><expr pos:start="201:21" pos:end="201:51"><call pos:start="201:21" pos:end="201:51"><name pos:start="201:21" pos:end="201:36">tcg_gen_addi_i32</name><argument_list pos:start="201:37" pos:end="201:51">(<argument pos:start="201:38" pos:end="201:41"><expr pos:start="201:38" pos:end="201:41"><name pos:start="201:38" pos:end="201:41">addr</name></expr></argument>, <argument pos:start="201:44" pos:end="201:47"><expr pos:start="201:44" pos:end="201:47"><name pos:start="201:44" pos:end="201:47">addr</name></expr></argument>, <argument pos:start="201:50" pos:end="201:50"><expr pos:start="201:50" pos:end="201:50"><literal type="number" pos:start="201:50" pos:end="201:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:42"><expr pos:start="203:21" pos:end="203:41"><name pos:start="203:21" pos:end="203:23">tmp</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <call pos:start="203:27" pos:end="203:41"><name pos:start="203:27" pos:end="203:34">load_reg</name><argument_list pos:start="203:35" pos:end="203:41">(<argument pos:start="203:36" pos:end="203:36"><expr pos:start="203:36" pos:end="203:36"><name pos:start="203:36" pos:end="203:36">s</name></expr></argument>, <argument pos:start="203:39" pos:end="203:40"><expr pos:start="203:39" pos:end="203:40"><name pos:start="203:39" pos:end="203:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:52"><expr pos:start="205:21" pos:end="205:51"><call pos:start="205:21" pos:end="205:51"><name pos:start="205:21" pos:end="205:28">gen_st32</name><argument_list pos:start="205:29" pos:end="205:51">(<argument pos:start="205:30" pos:end="205:32"><expr pos:start="205:30" pos:end="205:32"><name pos:start="205:30" pos:end="205:32">tmp</name></expr></argument>, <argument pos:start="205:35" pos:end="205:38"><expr pos:start="205:35" pos:end="205:38"><name pos:start="205:35" pos:end="205:38">addr</name></expr></argument>, <argument pos:start="205:41" pos:end="205:50"><expr pos:start="205:41" pos:end="205:50"><call pos:start="205:41" pos:end="205:50"><name pos:start="205:41" pos:end="205:47">IS_USER</name><argument_list pos:start="205:48" pos:end="205:50">(<argument pos:start="205:49" pos:end="205:49"><expr pos:start="205:49" pos:end="205:49"><name pos:start="205:49" pos:end="205:49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="209:17" pos:end="225:17"><if pos:start="209:17" pos:end="221:17">if <condition pos:start="209:20" pos:end="209:37">(<expr pos:start="209:21" pos:end="209:36"><name pos:start="209:21" pos:end="209:24">insn</name> <operator pos:start="209:26" pos:end="209:26">&amp;</operator> <operator pos:start="209:28" pos:end="209:28">(</operator><literal type="number" pos:start="209:29" pos:end="209:29">1</literal> <operator pos:start="209:31" pos:end="209:32">&lt;&lt;</operator> <literal type="number" pos:start="209:34" pos:end="209:35">21</literal><operator pos:start="209:36" pos:end="209:36">)</operator></expr>)</condition> <block pos:start="209:39" pos:end="221:17">{<block_content pos:start="213:21" pos:end="219:43">

                    <comment type="block" pos:start="211:21" pos:end="211:42">/* Base writeback.  */</comment>

                    <if_stmt pos:start="213:21" pos:end="215:40"><if pos:start="213:21" pos:end="215:40">if <condition pos:start="213:24" pos:end="213:33">(<expr pos:start="213:25" pos:end="213:32"><name pos:start="213:25" pos:end="213:26">rn</name> <operator pos:start="213:28" pos:end="213:29">==</operator> <literal type="number" pos:start="213:31" pos:end="213:32">15</literal></expr>)</condition><block type="pseudo" pos:start="215:25" pos:end="215:40"><block_content pos:start="215:25" pos:end="215:40">

                        <goto pos:start="215:25" pos:end="215:40">goto <name pos:start="215:30" pos:end="215:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:61"><expr pos:start="217:21" pos:end="217:60"><call pos:start="217:21" pos:end="217:60"><name pos:start="217:21" pos:end="217:36">tcg_gen_addi_i32</name><argument_list pos:start="217:37" pos:end="217:60">(<argument pos:start="217:38" pos:end="217:41"><expr pos:start="217:38" pos:end="217:41"><name pos:start="217:38" pos:end="217:41">addr</name></expr></argument>, <argument pos:start="217:44" pos:end="217:47"><expr pos:start="217:44" pos:end="217:47"><name pos:start="217:44" pos:end="217:47">addr</name></expr></argument>, <argument pos:start="217:50" pos:end="217:59"><expr pos:start="217:50" pos:end="217:59"><name pos:start="217:50" pos:end="217:55">offset</name> <operator pos:start="217:57" pos:end="217:57">-</operator> <literal type="number" pos:start="217:59" pos:end="217:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="219:21" pos:end="219:43"><expr pos:start="219:21" pos:end="219:42"><call pos:start="219:21" pos:end="219:42"><name pos:start="219:21" pos:end="219:29">store_reg</name><argument_list pos:start="219:30" pos:end="219:42">(<argument pos:start="219:31" pos:end="219:31"><expr pos:start="219:31" pos:end="219:31"><name pos:start="219:31" pos:end="219:31">s</name></expr></argument>, <argument pos:start="219:34" pos:end="219:35"><expr pos:start="219:34" pos:end="219:35"><name pos:start="219:34" pos:end="219:35">rn</name></expr></argument>, <argument pos:start="219:38" pos:end="219:41"><expr pos:start="219:38" pos:end="219:41"><name pos:start="219:38" pos:end="219:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="221:19" pos:end="225:17">else <block pos:start="221:24" pos:end="225:17">{<block_content pos:start="223:21" pos:end="223:44">

                    <expr_stmt pos:start="223:21" pos:end="223:44"><expr pos:start="223:21" pos:end="223:43"><call pos:start="223:21" pos:end="223:43"><name pos:start="223:21" pos:end="223:37">tcg_temp_free_i32</name><argument_list pos:start="223:38" pos:end="223:43">(<argument pos:start="223:39" pos:end="223:42"><expr pos:start="223:39" pos:end="223:42"><name pos:start="223:39" pos:end="223:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="227:15" pos:end="249:13">else if <condition pos:start="227:23" pos:end="227:47">(<expr pos:start="227:24" pos:end="227:46"><operator pos:start="227:24" pos:end="227:24">(</operator><name pos:start="227:25" pos:end="227:28">insn</name> <operator pos:start="227:30" pos:end="227:30">&amp;</operator> <operator pos:start="227:32" pos:end="227:32">(</operator><literal type="number" pos:start="227:33" pos:end="227:33">1</literal> <operator pos:start="227:35" pos:end="227:36">&lt;&lt;</operator> <literal type="number" pos:start="227:38" pos:end="227:39">23</literal><operator pos:start="227:40" pos:end="227:40">)</operator><operator pos:start="227:41" pos:end="227:41">)</operator> <operator pos:start="227:43" pos:end="227:44">==</operator> <literal type="number" pos:start="227:46" pos:end="227:46">0</literal></expr>)</condition> <block pos:start="227:49" pos:end="249:13">{<block_content pos:start="231:17" pos:end="247:36">

                <comment type="block" pos:start="229:17" pos:end="229:49">/* Load/store exclusive word.  */</comment>

                <expr_stmt pos:start="231:17" pos:end="231:44"><expr pos:start="231:17" pos:end="231:43"><name pos:start="231:17" pos:end="231:20">addr</name> <operator pos:start="231:22" pos:end="231:22">=</operator> <call pos:start="231:24" pos:end="231:43"><name pos:start="231:24" pos:end="231:41">tcg_temp_local_new</name><argument_list pos:start="231:42" pos:end="231:43">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:42"><expr pos:start="233:17" pos:end="233:41"><call pos:start="233:17" pos:end="233:41"><name pos:start="233:17" pos:end="233:28">load_reg_var</name><argument_list pos:start="233:29" pos:end="233:41">(<argument pos:start="233:30" pos:end="233:30"><expr pos:start="233:30" pos:end="233:30"><name pos:start="233:30" pos:end="233:30">s</name></expr></argument>, <argument pos:start="233:33" pos:end="233:36"><expr pos:start="233:33" pos:end="233:36"><name pos:start="233:33" pos:end="233:36">addr</name></expr></argument>, <argument pos:start="233:39" pos:end="233:40"><expr pos:start="233:39" pos:end="233:40"><name pos:start="233:39" pos:end="233:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:65"><expr pos:start="235:17" pos:end="235:64"><call pos:start="235:17" pos:end="235:64"><name pos:start="235:17" pos:end="235:32">tcg_gen_addi_i32</name><argument_list pos:start="235:33" pos:end="235:64">(<argument pos:start="235:34" pos:end="235:37"><expr pos:start="235:34" pos:end="235:37"><name pos:start="235:34" pos:end="235:37">addr</name></expr></argument>, <argument pos:start="235:40" pos:end="235:43"><expr pos:start="235:40" pos:end="235:43"><name pos:start="235:40" pos:end="235:43">addr</name></expr></argument>, <argument pos:start="235:46" pos:end="235:63"><expr pos:start="235:46" pos:end="235:63"><operator pos:start="235:46" pos:end="235:46">(</operator><name pos:start="235:47" pos:end="235:50">insn</name> <operator pos:start="235:52" pos:end="235:52">&amp;</operator> <literal type="number" pos:start="235:54" pos:end="235:57">0xff</literal><operator pos:start="235:58" pos:end="235:58">)</operator> <operator pos:start="235:60" pos:end="235:61">&lt;&lt;</operator> <literal type="number" pos:start="235:63" pos:end="235:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="237:17" pos:end="245:17"><if pos:start="237:17" pos:end="241:17">if <condition pos:start="237:20" pos:end="237:37">(<expr pos:start="237:21" pos:end="237:36"><name pos:start="237:21" pos:end="237:24">insn</name> <operator pos:start="237:26" pos:end="237:26">&amp;</operator> <operator pos:start="237:28" pos:end="237:28">(</operator><literal type="number" pos:start="237:29" pos:end="237:29">1</literal> <operator pos:start="237:31" pos:end="237:32">&lt;&lt;</operator> <literal type="number" pos:start="237:34" pos:end="237:35">20</literal><operator pos:start="237:36" pos:end="237:36">)</operator></expr>)</condition> <block pos:start="237:39" pos:end="241:17">{<block_content pos:start="239:21" pos:end="239:59">

                    <expr_stmt pos:start="239:21" pos:end="239:59"><expr pos:start="239:21" pos:end="239:58"><call pos:start="239:21" pos:end="239:58"><name pos:start="239:21" pos:end="239:38">gen_load_exclusive</name><argument_list pos:start="239:39" pos:end="239:58">(<argument pos:start="239:40" pos:end="239:40"><expr pos:start="239:40" pos:end="239:40"><name pos:start="239:40" pos:end="239:40">s</name></expr></argument>, <argument pos:start="239:43" pos:end="239:44"><expr pos:start="239:43" pos:end="239:44"><name pos:start="239:43" pos:end="239:44">rs</name></expr></argument>, <argument pos:start="239:47" pos:end="239:48"><expr pos:start="239:47" pos:end="239:48"><literal type="number" pos:start="239:47" pos:end="239:48">15</literal></expr></argument>, <argument pos:start="239:51" pos:end="239:54"><expr pos:start="239:51" pos:end="239:54"><name pos:start="239:51" pos:end="239:54">addr</name></expr></argument>, <argument pos:start="239:57" pos:end="239:57"><expr pos:start="239:57" pos:end="239:57"><literal type="number" pos:start="239:57" pos:end="239:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="241:19" pos:end="245:17">else <block pos:start="241:24" pos:end="245:17">{<block_content pos:start="243:21" pos:end="243:64">

                    <expr_stmt pos:start="243:21" pos:end="243:64"><expr pos:start="243:21" pos:end="243:63"><call pos:start="243:21" pos:end="243:63"><name pos:start="243:21" pos:end="243:39">gen_store_exclusive</name><argument_list pos:start="243:40" pos:end="243:63">(<argument pos:start="243:41" pos:end="243:41"><expr pos:start="243:41" pos:end="243:41"><name pos:start="243:41" pos:end="243:41">s</name></expr></argument>, <argument pos:start="243:44" pos:end="243:45"><expr pos:start="243:44" pos:end="243:45"><name pos:start="243:44" pos:end="243:45">rd</name></expr></argument>, <argument pos:start="243:48" pos:end="243:49"><expr pos:start="243:48" pos:end="243:49"><name pos:start="243:48" pos:end="243:49">rs</name></expr></argument>, <argument pos:start="243:52" pos:end="243:53"><expr pos:start="243:52" pos:end="243:53"><literal type="number" pos:start="243:52" pos:end="243:53">15</literal></expr></argument>, <argument pos:start="243:56" pos:end="243:59"><expr pos:start="243:56" pos:end="243:59"><name pos:start="243:56" pos:end="243:59">addr</name></expr></argument>, <argument pos:start="243:62" pos:end="243:62"><expr pos:start="243:62" pos:end="243:62"><literal type="number" pos:start="243:62" pos:end="243:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:36"><expr pos:start="247:17" pos:end="247:35"><call pos:start="247:17" pos:end="247:35"><name pos:start="247:17" pos:end="247:29">tcg_temp_free</name><argument_list pos:start="247:30" pos:end="247:35">(<argument pos:start="247:31" pos:end="247:34"><expr pos:start="247:31" pos:end="247:34"><name pos:start="247:31" pos:end="247:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="249:15" pos:end="295:13">else if <condition pos:start="249:23" pos:end="249:46">(<expr pos:start="249:24" pos:end="249:45"><operator pos:start="249:24" pos:end="249:24">(</operator><name pos:start="249:25" pos:end="249:28">insn</name> <operator pos:start="249:30" pos:end="249:30">&amp;</operator> <operator pos:start="249:32" pos:end="249:32">(</operator><literal type="number" pos:start="249:33" pos:end="249:33">1</literal> <operator pos:start="249:35" pos:end="249:36">&lt;&lt;</operator> <literal type="number" pos:start="249:38" pos:end="249:38">6</literal><operator pos:start="249:39" pos:end="249:39">)</operator><operator pos:start="249:40" pos:end="249:40">)</operator> <operator pos:start="249:42" pos:end="249:43">==</operator> <literal type="number" pos:start="249:45" pos:end="249:45">0</literal></expr>)</condition> <block pos:start="249:48" pos:end="295:13">{<block_content pos:start="253:17" pos:end="293:38">

                <comment type="block" pos:start="251:17" pos:end="251:36">/* Table Branch.  */</comment>

                <if_stmt pos:start="253:17" pos:end="263:17"><if pos:start="253:17" pos:end="259:17">if <condition pos:start="253:20" pos:end="253:29">(<expr pos:start="253:21" pos:end="253:28"><name pos:start="253:21" pos:end="253:22">rn</name> <operator pos:start="253:24" pos:end="253:25">==</operator> <literal type="number" pos:start="253:27" pos:end="253:28">15</literal></expr>)</condition> <block pos:start="253:31" pos:end="259:17">{<block_content pos:start="255:21" pos:end="257:50">

                    <expr_stmt pos:start="255:21" pos:end="255:46"><expr pos:start="255:21" pos:end="255:45"><name pos:start="255:21" pos:end="255:24">addr</name> <operator pos:start="255:26" pos:end="255:26">=</operator> <call pos:start="255:28" pos:end="255:45"><name pos:start="255:28" pos:end="255:43">tcg_temp_new_i32</name><argument_list pos:start="255:44" pos:end="255:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="257:21" pos:end="257:50"><expr pos:start="257:21" pos:end="257:49"><call pos:start="257:21" pos:end="257:49"><name pos:start="257:21" pos:end="257:36">tcg_gen_movi_i32</name><argument_list pos:start="257:37" pos:end="257:49">(<argument pos:start="257:38" pos:end="257:41"><expr pos:start="257:38" pos:end="257:41"><name pos:start="257:38" pos:end="257:41">addr</name></expr></argument>, <argument pos:start="257:44" pos:end="257:48"><expr pos:start="257:44" pos:end="257:48"><name pos:start="257:44" pos:end="257:48"><name pos:start="257:44" pos:end="257:44">s</name><operator pos:start="257:45" pos:end="257:46">-&gt;</operator><name pos:start="257:47" pos:end="257:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="259:19" pos:end="263:17">else <block pos:start="259:24" pos:end="263:17">{<block_content pos:start="261:21" pos:end="261:43">

                    <expr_stmt pos:start="261:21" pos:end="261:43"><expr pos:start="261:21" pos:end="261:42"><name pos:start="261:21" pos:end="261:24">addr</name> <operator pos:start="261:26" pos:end="261:26">=</operator> <call pos:start="261:28" pos:end="261:42"><name pos:start="261:28" pos:end="261:35">load_reg</name><argument_list pos:start="261:36" pos:end="261:42">(<argument pos:start="261:37" pos:end="261:37"><expr pos:start="261:37" pos:end="261:37"><name pos:start="261:37" pos:end="261:37">s</name></expr></argument>, <argument pos:start="261:40" pos:end="261:41"><expr pos:start="261:40" pos:end="261:41"><name pos:start="261:40" pos:end="261:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:38"><expr pos:start="265:17" pos:end="265:37"><name pos:start="265:17" pos:end="265:19">tmp</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <call pos:start="265:23" pos:end="265:37"><name pos:start="265:23" pos:end="265:30">load_reg</name><argument_list pos:start="265:31" pos:end="265:37">(<argument pos:start="265:32" pos:end="265:32"><expr pos:start="265:32" pos:end="265:32"><name pos:start="265:32" pos:end="265:32">s</name></expr></argument>, <argument pos:start="265:35" pos:end="265:36"><expr pos:start="265:35" pos:end="265:36"><name pos:start="265:35" pos:end="265:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:49"><expr pos:start="267:17" pos:end="267:48"><call pos:start="267:17" pos:end="267:48"><name pos:start="267:17" pos:end="267:31">tcg_gen_add_i32</name><argument_list pos:start="267:32" pos:end="267:48">(<argument pos:start="267:33" pos:end="267:36"><expr pos:start="267:33" pos:end="267:36"><name pos:start="267:33" pos:end="267:36">addr</name></expr></argument>, <argument pos:start="267:39" pos:end="267:42"><expr pos:start="267:39" pos:end="267:42"><name pos:start="267:39" pos:end="267:42">addr</name></expr></argument>, <argument pos:start="267:45" pos:end="267:47"><expr pos:start="267:45" pos:end="267:47"><name pos:start="267:45" pos:end="267:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="269:17" pos:end="285:17"><if pos:start="269:17" pos:end="279:17">if <condition pos:start="269:20" pos:end="269:36">(<expr pos:start="269:21" pos:end="269:35"><name pos:start="269:21" pos:end="269:24">insn</name> <operator pos:start="269:26" pos:end="269:26">&amp;</operator> <operator pos:start="269:28" pos:end="269:28">(</operator><literal type="number" pos:start="269:29" pos:end="269:29">1</literal> <operator pos:start="269:31" pos:end="269:32">&lt;&lt;</operator> <literal type="number" pos:start="269:34" pos:end="269:34">4</literal><operator pos:start="269:35" pos:end="269:35">)</operator></expr>)</condition> <block pos:start="269:38" pos:end="279:17">{<block_content pos:start="273:21" pos:end="277:54">

                    <comment type="block" pos:start="271:21" pos:end="271:29">/* tbh */</comment>

                    <expr_stmt pos:start="273:21" pos:end="273:53"><expr pos:start="273:21" pos:end="273:52"><call pos:start="273:21" pos:end="273:52"><name pos:start="273:21" pos:end="273:35">tcg_gen_add_i32</name><argument_list pos:start="273:36" pos:end="273:52">(<argument pos:start="273:37" pos:end="273:40"><expr pos:start="273:37" pos:end="273:40"><name pos:start="273:37" pos:end="273:40">addr</name></expr></argument>, <argument pos:start="273:43" pos:end="273:46"><expr pos:start="273:43" pos:end="273:46"><name pos:start="273:43" pos:end="273:46">addr</name></expr></argument>, <argument pos:start="273:49" pos:end="273:51"><expr pos:start="273:49" pos:end="273:51"><name pos:start="273:49" pos:end="273:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:43"><expr pos:start="275:21" pos:end="275:42"><call pos:start="275:21" pos:end="275:42"><name pos:start="275:21" pos:end="275:37">tcg_temp_free_i32</name><argument_list pos:start="275:38" pos:end="275:42">(<argument pos:start="275:39" pos:end="275:41"><expr pos:start="275:39" pos:end="275:41"><name pos:start="275:39" pos:end="275:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="277:21" pos:end="277:54"><expr pos:start="277:21" pos:end="277:53"><name pos:start="277:21" pos:end="277:23">tmp</name> <operator pos:start="277:25" pos:end="277:25">=</operator> <call pos:start="277:27" pos:end="277:53"><name pos:start="277:27" pos:end="277:35">gen_ld16u</name><argument_list pos:start="277:36" pos:end="277:53">(<argument pos:start="277:37" pos:end="277:40"><expr pos:start="277:37" pos:end="277:40"><name pos:start="277:37" pos:end="277:40">addr</name></expr></argument>, <argument pos:start="277:43" pos:end="277:52"><expr pos:start="277:43" pos:end="277:52"><call pos:start="277:43" pos:end="277:52"><name pos:start="277:43" pos:end="277:49">IS_USER</name><argument_list pos:start="277:50" pos:end="277:52">(<argument pos:start="277:51" pos:end="277:51"><expr pos:start="277:51" pos:end="277:51"><name pos:start="277:51" pos:end="277:51">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="279:19" pos:end="285:17">else <block pos:start="279:24" pos:end="285:17">{<block_content pos:start="281:21" pos:end="283:53"> <comment type="block" pos:start="279:26" pos:end="279:34">/* tbb */</comment>

                    <expr_stmt pos:start="281:21" pos:end="281:43"><expr pos:start="281:21" pos:end="281:42"><call pos:start="281:21" pos:end="281:42"><name pos:start="281:21" pos:end="281:37">tcg_temp_free_i32</name><argument_list pos:start="281:38" pos:end="281:42">(<argument pos:start="281:39" pos:end="281:41"><expr pos:start="281:39" pos:end="281:41"><name pos:start="281:39" pos:end="281:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:53"><expr pos:start="283:21" pos:end="283:52"><name pos:start="283:21" pos:end="283:23">tmp</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <call pos:start="283:27" pos:end="283:52"><name pos:start="283:27" pos:end="283:34">gen_ld8u</name><argument_list pos:start="283:35" pos:end="283:52">(<argument pos:start="283:36" pos:end="283:39"><expr pos:start="283:36" pos:end="283:39"><name pos:start="283:36" pos:end="283:39">addr</name></expr></argument>, <argument pos:start="283:42" pos:end="283:51"><expr pos:start="283:42" pos:end="283:51"><call pos:start="283:42" pos:end="283:51"><name pos:start="283:42" pos:end="283:48">IS_USER</name><argument_list pos:start="283:49" pos:end="283:51">(<argument pos:start="283:50" pos:end="283:50"><expr pos:start="283:50" pos:end="283:50"><name pos:start="283:50" pos:end="283:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:40"><expr pos:start="287:17" pos:end="287:39"><call pos:start="287:17" pos:end="287:39"><name pos:start="287:17" pos:end="287:33">tcg_temp_free_i32</name><argument_list pos:start="287:34" pos:end="287:39">(<argument pos:start="287:35" pos:end="287:38"><expr pos:start="287:35" pos:end="287:38"><name pos:start="287:35" pos:end="287:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:46"><expr pos:start="289:17" pos:end="289:45"><call pos:start="289:17" pos:end="289:45"><name pos:start="289:17" pos:end="289:32">tcg_gen_shli_i32</name><argument_list pos:start="289:33" pos:end="289:45">(<argument pos:start="289:34" pos:end="289:36"><expr pos:start="289:34" pos:end="289:36"><name pos:start="289:34" pos:end="289:36">tmp</name></expr></argument>, <argument pos:start="289:39" pos:end="289:41"><expr pos:start="289:39" pos:end="289:41"><name pos:start="289:39" pos:end="289:41">tmp</name></expr></argument>, <argument pos:start="289:44" pos:end="289:44"><expr pos:start="289:44" pos:end="289:44"><literal type="number" pos:start="289:44" pos:end="289:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:50"><expr pos:start="291:17" pos:end="291:49"><call pos:start="291:17" pos:end="291:49"><name pos:start="291:17" pos:end="291:32">tcg_gen_addi_i32</name><argument_list pos:start="291:33" pos:end="291:49">(<argument pos:start="291:34" pos:end="291:36"><expr pos:start="291:34" pos:end="291:36"><name pos:start="291:34" pos:end="291:36">tmp</name></expr></argument>, <argument pos:start="291:39" pos:end="291:41"><expr pos:start="291:39" pos:end="291:41"><name pos:start="291:39" pos:end="291:41">tmp</name></expr></argument>, <argument pos:start="291:44" pos:end="291:48"><expr pos:start="291:44" pos:end="291:48"><name pos:start="291:44" pos:end="291:48"><name pos:start="291:44" pos:end="291:44">s</name><operator pos:start="291:45" pos:end="291:46">-&gt;</operator><name pos:start="291:47" pos:end="291:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:38"><expr pos:start="293:17" pos:end="293:37"><call pos:start="293:17" pos:end="293:37"><name pos:start="293:17" pos:end="293:25">store_reg</name><argument_list pos:start="293:26" pos:end="293:37">(<argument pos:start="293:27" pos:end="293:27"><expr pos:start="293:27" pos:end="293:27"><name pos:start="293:27" pos:end="293:27">s</name></expr></argument>, <argument pos:start="293:30" pos:end="293:31"><expr pos:start="293:30" pos:end="293:31"><literal type="number" pos:start="293:30" pos:end="293:31">15</literal></expr></argument>, <argument pos:start="293:34" pos:end="293:36"><expr pos:start="293:34" pos:end="293:36"><name pos:start="293:34" pos:end="293:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="295:15" pos:end="325:13">else <block pos:start="295:20" pos:end="325:13">{<block_content pos:start="299:17" pos:end="323:36">

                <comment type="block" pos:start="297:17" pos:end="297:69">/* Load/store exclusive byte/halfword/doubleword.  */</comment>

                <expr_stmt pos:start="299:17" pos:end="299:24"><expr pos:start="299:17" pos:end="299:23"><call pos:start="299:17" pos:end="299:23"><name pos:start="299:17" pos:end="299:20">ARCH</name><argument_list pos:start="299:21" pos:end="299:23">(<argument pos:start="299:22" pos:end="299:22"><expr pos:start="299:22" pos:end="299:22"><literal type="number" pos:start="299:22" pos:end="299:22">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:39"><expr pos:start="301:17" pos:end="301:38"><name pos:start="301:17" pos:end="301:18">op</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <operator pos:start="301:22" pos:end="301:22">(</operator><name pos:start="301:23" pos:end="301:26">insn</name> <operator pos:start="301:28" pos:end="301:29">&gt;&gt;</operator> <literal type="number" pos:start="301:31" pos:end="301:31">4</literal><operator pos:start="301:32" pos:end="301:32">)</operator> <operator pos:start="301:34" pos:end="301:34">&amp;</operator> <literal type="number" pos:start="301:36" pos:end="301:38">0x3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="303:17" pos:end="307:17"><if pos:start="303:17" pos:end="307:17">if <condition pos:start="303:20" pos:end="303:28">(<expr pos:start="303:21" pos:end="303:27"><name pos:start="303:21" pos:end="303:22">op</name> <operator pos:start="303:24" pos:end="303:25">==</operator> <literal type="number" pos:start="303:27" pos:end="303:27">2</literal></expr>)</condition> <block pos:start="303:30" pos:end="307:17">{<block_content pos:start="305:21" pos:end="305:36">

                    <goto pos:start="305:21" pos:end="305:36">goto <name pos:start="305:26" pos:end="305:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="309:17" pos:end="309:44"><expr pos:start="309:17" pos:end="309:43"><name pos:start="309:17" pos:end="309:20">addr</name> <operator pos:start="309:22" pos:end="309:22">=</operator> <call pos:start="309:24" pos:end="309:43"><name pos:start="309:24" pos:end="309:41">tcg_temp_local_new</name><argument_list pos:start="309:42" pos:end="309:43">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:42"><expr pos:start="311:17" pos:end="311:41"><call pos:start="311:17" pos:end="311:41"><name pos:start="311:17" pos:end="311:28">load_reg_var</name><argument_list pos:start="311:29" pos:end="311:41">(<argument pos:start="311:30" pos:end="311:30"><expr pos:start="311:30" pos:end="311:30"><name pos:start="311:30" pos:end="311:30">s</name></expr></argument>, <argument pos:start="311:33" pos:end="311:36"><expr pos:start="311:33" pos:end="311:36"><name pos:start="311:33" pos:end="311:36">addr</name></expr></argument>, <argument pos:start="311:39" pos:end="311:40"><expr pos:start="311:39" pos:end="311:40"><name pos:start="311:39" pos:end="311:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="313:17" pos:end="321:17"><if pos:start="313:17" pos:end="317:17">if <condition pos:start="313:20" pos:end="313:37">(<expr pos:start="313:21" pos:end="313:36"><name pos:start="313:21" pos:end="313:24">insn</name> <operator pos:start="313:26" pos:end="313:26">&amp;</operator> <operator pos:start="313:28" pos:end="313:28">(</operator><literal type="number" pos:start="313:29" pos:end="313:29">1</literal> <operator pos:start="313:31" pos:end="313:32">&lt;&lt;</operator> <literal type="number" pos:start="313:34" pos:end="313:35">20</literal><operator pos:start="313:36" pos:end="313:36">)</operator></expr>)</condition> <block pos:start="313:39" pos:end="317:17">{<block_content pos:start="315:21" pos:end="315:60">

                    <expr_stmt pos:start="315:21" pos:end="315:60"><expr pos:start="315:21" pos:end="315:59"><call pos:start="315:21" pos:end="315:59"><name pos:start="315:21" pos:end="315:38">gen_load_exclusive</name><argument_list pos:start="315:39" pos:end="315:59">(<argument pos:start="315:40" pos:end="315:40"><expr pos:start="315:40" pos:end="315:40"><name pos:start="315:40" pos:end="315:40">s</name></expr></argument>, <argument pos:start="315:43" pos:end="315:44"><expr pos:start="315:43" pos:end="315:44"><name pos:start="315:43" pos:end="315:44">rs</name></expr></argument>, <argument pos:start="315:47" pos:end="315:48"><expr pos:start="315:47" pos:end="315:48"><name pos:start="315:47" pos:end="315:48">rd</name></expr></argument>, <argument pos:start="315:51" pos:end="315:54"><expr pos:start="315:51" pos:end="315:54"><name pos:start="315:51" pos:end="315:54">addr</name></expr></argument>, <argument pos:start="315:57" pos:end="315:58"><expr pos:start="315:57" pos:end="315:58"><name pos:start="315:57" pos:end="315:58">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="317:19" pos:end="321:17">else <block pos:start="317:24" pos:end="321:17">{<block_content pos:start="319:21" pos:end="319:65">

                    <expr_stmt pos:start="319:21" pos:end="319:65"><expr pos:start="319:21" pos:end="319:64"><call pos:start="319:21" pos:end="319:64"><name pos:start="319:21" pos:end="319:39">gen_store_exclusive</name><argument_list pos:start="319:40" pos:end="319:64">(<argument pos:start="319:41" pos:end="319:41"><expr pos:start="319:41" pos:end="319:41"><name pos:start="319:41" pos:end="319:41">s</name></expr></argument>, <argument pos:start="319:44" pos:end="319:45"><expr pos:start="319:44" pos:end="319:45"><name pos:start="319:44" pos:end="319:45">rm</name></expr></argument>, <argument pos:start="319:48" pos:end="319:49"><expr pos:start="319:48" pos:end="319:49"><name pos:start="319:48" pos:end="319:49">rs</name></expr></argument>, <argument pos:start="319:52" pos:end="319:53"><expr pos:start="319:52" pos:end="319:53"><name pos:start="319:52" pos:end="319:53">rd</name></expr></argument>, <argument pos:start="319:56" pos:end="319:59"><expr pos:start="319:56" pos:end="319:59"><name pos:start="319:56" pos:end="319:59">addr</name></expr></argument>, <argument pos:start="319:62" pos:end="319:63"><expr pos:start="319:62" pos:end="319:63"><name pos:start="319:62" pos:end="319:63">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:36"><expr pos:start="323:17" pos:end="323:35"><call pos:start="323:17" pos:end="323:35"><name pos:start="323:17" pos:end="323:29">tcg_temp_free</name><argument_list pos:start="323:30" pos:end="323:35">(<argument pos:start="323:31" pos:end="323:34"><expr pos:start="323:31" pos:end="323:34"><name pos:start="323:31" pos:end="323:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="527:9">else <block pos:start="327:16" pos:end="527:9">{<block_content pos:start="331:13" pos:end="525:13">

            <comment type="block" pos:start="329:13" pos:end="329:49">/* Load/store multiple, RFE, SRS.  */</comment>

            <if_stmt pos:start="331:13" pos:end="525:13"><if pos:start="331:13" pos:end="439:13">if <condition pos:start="331:16" pos:end="331:57">(<expr pos:start="331:17" pos:end="331:56"><operator pos:start="331:17" pos:end="331:17">(</operator><operator pos:start="331:18" pos:end="331:18">(</operator><name pos:start="331:19" pos:end="331:22">insn</name> <operator pos:start="331:24" pos:end="331:25">&gt;&gt;</operator> <literal type="number" pos:start="331:27" pos:end="331:28">23</literal><operator pos:start="331:29" pos:end="331:29">)</operator> <operator pos:start="331:31" pos:end="331:31">&amp;</operator> <literal type="number" pos:start="331:33" pos:end="331:33">1</literal><operator pos:start="331:34" pos:end="331:34">)</operator> <operator pos:start="331:36" pos:end="331:37">==</operator> <operator pos:start="331:39" pos:end="331:39">(</operator><operator pos:start="331:40" pos:end="331:40">(</operator><name pos:start="331:41" pos:end="331:44">insn</name> <operator pos:start="331:46" pos:end="331:47">&gt;&gt;</operator> <literal type="number" pos:start="331:49" pos:end="331:50">24</literal><operator pos:start="331:51" pos:end="331:51">)</operator> <operator pos:start="331:53" pos:end="331:53">&amp;</operator> <literal type="number" pos:start="331:55" pos:end="331:55">1</literal><operator pos:start="331:56" pos:end="331:56">)</operator></expr>)</condition> <block pos:start="331:59" pos:end="439:13">{<block_content pos:start="335:17" pos:end="437:17">

                <comment type="block" pos:start="333:17" pos:end="333:50">/* Not available in user mode.  */</comment>

                <if_stmt pos:start="335:17" pos:end="337:36"><if pos:start="335:17" pos:end="337:36">if <condition pos:start="335:20" pos:end="335:31">(<expr pos:start="335:21" pos:end="335:30"><call pos:start="335:21" pos:end="335:30"><name pos:start="335:21" pos:end="335:27">IS_USER</name><argument_list pos:start="335:28" pos:end="335:30">(<argument pos:start="335:29" pos:end="335:29"><expr pos:start="335:29" pos:end="335:29"><name pos:start="335:29" pos:end="335:29">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="337:21" pos:end="337:36"><block_content pos:start="337:21" pos:end="337:36">

                    <goto pos:start="337:21" pos:end="337:36">goto <name pos:start="337:26" pos:end="337:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="339:17" pos:end="437:17"><if pos:start="339:17" pos:end="381:17">if <condition pos:start="339:20" pos:end="339:37">(<expr pos:start="339:21" pos:end="339:36"><name pos:start="339:21" pos:end="339:24">insn</name> <operator pos:start="339:26" pos:end="339:26">&amp;</operator> <operator pos:start="339:28" pos:end="339:28">(</operator><literal type="number" pos:start="339:29" pos:end="339:29">1</literal> <operator pos:start="339:31" pos:end="339:32">&lt;&lt;</operator> <literal type="number" pos:start="339:34" pos:end="339:35">20</literal><operator pos:start="339:36" pos:end="339:36">)</operator></expr>)</condition> <block pos:start="339:39" pos:end="381:17">{<block_content pos:start="343:21" pos:end="379:42">

                    <comment type="block" pos:start="341:21" pos:end="341:29">/* rfe */</comment>

                    <expr_stmt pos:start="343:21" pos:end="343:43"><expr pos:start="343:21" pos:end="343:42"><name pos:start="343:21" pos:end="343:24">addr</name> <operator pos:start="343:26" pos:end="343:26">=</operator> <call pos:start="343:28" pos:end="343:42"><name pos:start="343:28" pos:end="343:35">load_reg</name><argument_list pos:start="343:36" pos:end="343:42">(<argument pos:start="343:37" pos:end="343:37"><expr pos:start="343:37" pos:end="343:37"><name pos:start="343:37" pos:end="343:37">s</name></expr></argument>, <argument pos:start="343:40" pos:end="343:41"><expr pos:start="343:40" pos:end="343:41"><name pos:start="343:40" pos:end="343:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="345:21" pos:end="347:57"><if pos:start="345:21" pos:end="347:57">if <condition pos:start="345:24" pos:end="345:48">(<expr pos:start="345:25" pos:end="345:47"><operator pos:start="345:25" pos:end="345:25">(</operator><name pos:start="345:26" pos:end="345:29">insn</name> <operator pos:start="345:31" pos:end="345:31">&amp;</operator> <operator pos:start="345:33" pos:end="345:33">(</operator><literal type="number" pos:start="345:34" pos:end="345:34">1</literal> <operator pos:start="345:36" pos:end="345:37">&lt;&lt;</operator> <literal type="number" pos:start="345:39" pos:end="345:40">24</literal><operator pos:start="345:41" pos:end="345:41">)</operator><operator pos:start="345:42" pos:end="345:42">)</operator> <operator pos:start="345:44" pos:end="345:45">==</operator> <literal type="number" pos:start="345:47" pos:end="345:47">0</literal></expr>)</condition><block type="pseudo" pos:start="347:25" pos:end="347:57"><block_content pos:start="347:25" pos:end="347:57">

                        <expr_stmt pos:start="347:25" pos:end="347:57"><expr pos:start="347:25" pos:end="347:56"><call pos:start="347:25" pos:end="347:56"><name pos:start="347:25" pos:end="347:40">tcg_gen_addi_i32</name><argument_list pos:start="347:41" pos:end="347:56">(<argument pos:start="347:42" pos:end="347:45"><expr pos:start="347:42" pos:end="347:45"><name pos:start="347:42" pos:end="347:45">addr</name></expr></argument>, <argument pos:start="347:48" pos:end="347:51"><expr pos:start="347:48" pos:end="347:51"><name pos:start="347:48" pos:end="347:51">addr</name></expr></argument>, <argument pos:start="347:54" pos:end="347:55"><expr pos:start="347:54" pos:end="347:55"><operator pos:start="347:54" pos:end="347:54">-</operator><literal type="number" pos:start="347:55" pos:end="347:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="349:21" pos:end="349:63">/* Load PC into tmp and CPSR into tmp2.  */</comment>

                    <expr_stmt pos:start="351:21" pos:end="351:44"><expr pos:start="351:21" pos:end="351:43"><name pos:start="351:21" pos:end="351:23">tmp</name> <operator pos:start="351:25" pos:end="351:25">=</operator> <call pos:start="351:27" pos:end="351:43"><name pos:start="351:27" pos:end="351:34">gen_ld32</name><argument_list pos:start="351:35" pos:end="351:43">(<argument pos:start="351:36" pos:end="351:39"><expr pos:start="351:36" pos:end="351:39"><name pos:start="351:36" pos:end="351:39">addr</name></expr></argument>, <argument pos:start="351:42" pos:end="351:42"><expr pos:start="351:42" pos:end="351:42"><literal type="number" pos:start="351:42" pos:end="351:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="353:21" pos:end="353:52"><expr pos:start="353:21" pos:end="353:51"><call pos:start="353:21" pos:end="353:51"><name pos:start="353:21" pos:end="353:36">tcg_gen_addi_i32</name><argument_list pos:start="353:37" pos:end="353:51">(<argument pos:start="353:38" pos:end="353:41"><expr pos:start="353:38" pos:end="353:41"><name pos:start="353:38" pos:end="353:41">addr</name></expr></argument>, <argument pos:start="353:44" pos:end="353:47"><expr pos:start="353:44" pos:end="353:47"><name pos:start="353:44" pos:end="353:47">addr</name></expr></argument>, <argument pos:start="353:50" pos:end="353:50"><expr pos:start="353:50" pos:end="353:50"><literal type="number" pos:start="353:50" pos:end="353:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:45"><expr pos:start="355:21" pos:end="355:44"><name pos:start="355:21" pos:end="355:24">tmp2</name> <operator pos:start="355:26" pos:end="355:26">=</operator> <call pos:start="355:28" pos:end="355:44"><name pos:start="355:28" pos:end="355:35">gen_ld32</name><argument_list pos:start="355:36" pos:end="355:44">(<argument pos:start="355:37" pos:end="355:40"><expr pos:start="355:37" pos:end="355:40"><name pos:start="355:37" pos:end="355:40">addr</name></expr></argument>, <argument pos:start="355:43" pos:end="355:43"><expr pos:start="355:43" pos:end="355:43"><literal type="number" pos:start="355:43" pos:end="355:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="357:21" pos:end="377:21"><if pos:start="357:21" pos:end="373:21">if <condition pos:start="357:24" pos:end="357:41">(<expr pos:start="357:25" pos:end="357:40"><name pos:start="357:25" pos:end="357:28">insn</name> <operator pos:start="357:30" pos:end="357:30">&amp;</operator> <operator pos:start="357:32" pos:end="357:32">(</operator><literal type="number" pos:start="357:33" pos:end="357:33">1</literal> <operator pos:start="357:35" pos:end="357:36">&lt;&lt;</operator> <literal type="number" pos:start="357:38" pos:end="357:39">21</literal><operator pos:start="357:40" pos:end="357:40">)</operator></expr>)</condition> <block pos:start="357:43" pos:end="373:21">{<block_content pos:start="361:25" pos:end="371:47">

                        <comment type="block" pos:start="359:25" pos:end="359:46">/* Base writeback.  */</comment>

                        <if_stmt pos:start="361:25" pos:end="369:25"><if pos:start="361:25" pos:end="365:25">if <condition pos:start="361:28" pos:end="361:45">(<expr pos:start="361:29" pos:end="361:44"><name pos:start="361:29" pos:end="361:32">insn</name> <operator pos:start="361:34" pos:end="361:34">&amp;</operator> <operator pos:start="361:36" pos:end="361:36">(</operator><literal type="number" pos:start="361:37" pos:end="361:37">1</literal> <operator pos:start="361:39" pos:end="361:40">&lt;&lt;</operator> <literal type="number" pos:start="361:42" pos:end="361:43">24</literal><operator pos:start="361:44" pos:end="361:44">)</operator></expr>)</condition> <block pos:start="361:47" pos:end="365:25">{<block_content pos:start="363:29" pos:end="363:60">

                            <expr_stmt pos:start="363:29" pos:end="363:60"><expr pos:start="363:29" pos:end="363:59"><call pos:start="363:29" pos:end="363:59"><name pos:start="363:29" pos:end="363:44">tcg_gen_addi_i32</name><argument_list pos:start="363:45" pos:end="363:59">(<argument pos:start="363:46" pos:end="363:49"><expr pos:start="363:46" pos:end="363:49"><name pos:start="363:46" pos:end="363:49">addr</name></expr></argument>, <argument pos:start="363:52" pos:end="363:55"><expr pos:start="363:52" pos:end="363:55"><name pos:start="363:52" pos:end="363:55">addr</name></expr></argument>, <argument pos:start="363:58" pos:end="363:58"><expr pos:start="363:58" pos:end="363:58"><literal type="number" pos:start="363:58" pos:end="363:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="365:27" pos:end="369:25">else <block pos:start="365:32" pos:end="369:25">{<block_content pos:start="367:29" pos:end="367:61">

                            <expr_stmt pos:start="367:29" pos:end="367:61"><expr pos:start="367:29" pos:end="367:60"><call pos:start="367:29" pos:end="367:60"><name pos:start="367:29" pos:end="367:44">tcg_gen_addi_i32</name><argument_list pos:start="367:45" pos:end="367:60">(<argument pos:start="367:46" pos:end="367:49"><expr pos:start="367:46" pos:end="367:49"><name pos:start="367:46" pos:end="367:49">addr</name></expr></argument>, <argument pos:start="367:52" pos:end="367:55"><expr pos:start="367:52" pos:end="367:55"><name pos:start="367:52" pos:end="367:55">addr</name></expr></argument>, <argument pos:start="367:58" pos:end="367:59"><expr pos:start="367:58" pos:end="367:59"><operator pos:start="367:58" pos:end="367:58">-</operator><literal type="number" pos:start="367:59" pos:end="367:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="371:25" pos:end="371:47"><expr pos:start="371:25" pos:end="371:46"><call pos:start="371:25" pos:end="371:46"><name pos:start="371:25" pos:end="371:33">store_reg</name><argument_list pos:start="371:34" pos:end="371:46">(<argument pos:start="371:35" pos:end="371:35"><expr pos:start="371:35" pos:end="371:35"><name pos:start="371:35" pos:end="371:35">s</name></expr></argument>, <argument pos:start="371:38" pos:end="371:39"><expr pos:start="371:38" pos:end="371:39"><name pos:start="371:38" pos:end="371:39">rn</name></expr></argument>, <argument pos:start="371:42" pos:end="371:45"><expr pos:start="371:42" pos:end="371:45"><name pos:start="371:42" pos:end="371:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="373:23" pos:end="377:21">else <block pos:start="373:28" pos:end="377:21">{<block_content pos:start="375:25" pos:end="375:48">

                        <expr_stmt pos:start="375:25" pos:end="375:48"><expr pos:start="375:25" pos:end="375:47"><call pos:start="375:25" pos:end="375:47"><name pos:start="375:25" pos:end="375:41">tcg_temp_free_i32</name><argument_list pos:start="375:42" pos:end="375:47">(<argument pos:start="375:43" pos:end="375:46"><expr pos:start="375:43" pos:end="375:46"><name pos:start="375:43" pos:end="375:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:42"><expr pos:start="379:21" pos:end="379:41"><call pos:start="379:21" pos:end="379:41"><name pos:start="379:21" pos:end="379:27">gen_rfe</name><argument_list pos:start="379:28" pos:end="379:41">(<argument pos:start="379:29" pos:end="379:29"><expr pos:start="379:29" pos:end="379:29"><name pos:start="379:29" pos:end="379:29">s</name></expr></argument>, <argument pos:start="379:32" pos:end="379:34"><expr pos:start="379:32" pos:end="379:34"><name pos:start="379:32" pos:end="379:34">tmp</name></expr></argument>, <argument pos:start="379:37" pos:end="379:40"><expr pos:start="379:37" pos:end="379:40"><name pos:start="379:37" pos:end="379:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="381:19" pos:end="437:17">else <block pos:start="381:24" pos:end="437:17">{<block_content pos:start="385:21" pos:end="435:21">

                    <comment type="block" pos:start="383:21" pos:end="383:29">/* srs */</comment>

                    <expr_stmt pos:start="385:21" pos:end="385:39"><expr pos:start="385:21" pos:end="385:38"><name pos:start="385:21" pos:end="385:22">op</name> <operator pos:start="385:24" pos:end="385:24">=</operator> <operator pos:start="385:26" pos:end="385:26">(</operator><name pos:start="385:27" pos:end="385:30">insn</name> <operator pos:start="385:32" pos:end="385:32">&amp;</operator> <literal type="number" pos:start="385:34" pos:end="385:37">0x1f</literal><operator pos:start="385:38" pos:end="385:38">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:46"><expr pos:start="387:21" pos:end="387:45"><name pos:start="387:21" pos:end="387:24">addr</name> <operator pos:start="387:26" pos:end="387:26">=</operator> <call pos:start="387:28" pos:end="387:45"><name pos:start="387:28" pos:end="387:43">tcg_temp_new_i32</name><argument_list pos:start="387:44" pos:end="387:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="389:21" pos:end="389:44"><expr pos:start="389:21" pos:end="389:43"><name pos:start="389:21" pos:end="389:23">tmp</name> <operator pos:start="389:25" pos:end="389:25">=</operator> <call pos:start="389:27" pos:end="389:43"><name pos:start="389:27" pos:end="389:39">tcg_const_i32</name><argument_list pos:start="389:40" pos:end="389:43">(<argument pos:start="389:41" pos:end="389:42"><expr pos:start="389:41" pos:end="389:42"><name pos:start="389:41" pos:end="389:42">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:66"><expr pos:start="391:21" pos:end="391:65"><call pos:start="391:21" pos:end="391:65"><name pos:start="391:21" pos:end="391:45">gen_helper_get_r13_banked</name><argument_list pos:start="391:46" pos:end="391:65">(<argument pos:start="391:47" pos:end="391:50"><expr pos:start="391:47" pos:end="391:50"><name pos:start="391:47" pos:end="391:50">addr</name></expr></argument>, <argument pos:start="391:53" pos:end="391:59"><expr pos:start="391:53" pos:end="391:59"><name pos:start="391:53" pos:end="391:59">cpu_env</name></expr></argument>, <argument pos:start="391:62" pos:end="391:64"><expr pos:start="391:62" pos:end="391:64"><name pos:start="391:62" pos:end="391:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="393:21" pos:end="393:43"><expr pos:start="393:21" pos:end="393:42"><call pos:start="393:21" pos:end="393:42"><name pos:start="393:21" pos:end="393:37">tcg_temp_free_i32</name><argument_list pos:start="393:38" pos:end="393:42">(<argument pos:start="393:39" pos:end="393:41"><expr pos:start="393:39" pos:end="393:41"><name pos:start="393:39" pos:end="393:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="395:21" pos:end="399:21"><if pos:start="395:21" pos:end="399:21">if <condition pos:start="395:24" pos:end="395:48">(<expr pos:start="395:25" pos:end="395:47"><operator pos:start="395:25" pos:end="395:25">(</operator><name pos:start="395:26" pos:end="395:29">insn</name> <operator pos:start="395:31" pos:end="395:31">&amp;</operator> <operator pos:start="395:33" pos:end="395:33">(</operator><literal type="number" pos:start="395:34" pos:end="395:34">1</literal> <operator pos:start="395:36" pos:end="395:37">&lt;&lt;</operator> <literal type="number" pos:start="395:39" pos:end="395:40">24</literal><operator pos:start="395:41" pos:end="395:41">)</operator><operator pos:start="395:42" pos:end="395:42">)</operator> <operator pos:start="395:44" pos:end="395:45">==</operator> <literal type="number" pos:start="395:47" pos:end="395:47">0</literal></expr>)</condition> <block pos:start="395:50" pos:end="399:21">{<block_content pos:start="397:25" pos:end="397:57">

                        <expr_stmt pos:start="397:25" pos:end="397:57"><expr pos:start="397:25" pos:end="397:56"><call pos:start="397:25" pos:end="397:56"><name pos:start="397:25" pos:end="397:40">tcg_gen_addi_i32</name><argument_list pos:start="397:41" pos:end="397:56">(<argument pos:start="397:42" pos:end="397:45"><expr pos:start="397:42" pos:end="397:45"><name pos:start="397:42" pos:end="397:45">addr</name></expr></argument>, <argument pos:start="397:48" pos:end="397:51"><expr pos:start="397:48" pos:end="397:51"><name pos:start="397:48" pos:end="397:51">addr</name></expr></argument>, <argument pos:start="397:54" pos:end="397:55"><expr pos:start="397:54" pos:end="397:55"><operator pos:start="397:54" pos:end="397:54">-</operator><literal type="number" pos:start="397:55" pos:end="397:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="401:21" pos:end="401:42"><expr pos:start="401:21" pos:end="401:41"><name pos:start="401:21" pos:end="401:23">tmp</name> <operator pos:start="401:25" pos:end="401:25">=</operator> <call pos:start="401:27" pos:end="401:41"><name pos:start="401:27" pos:end="401:34">load_reg</name><argument_list pos:start="401:35" pos:end="401:41">(<argument pos:start="401:36" pos:end="401:36"><expr pos:start="401:36" pos:end="401:36"><name pos:start="401:36" pos:end="401:36">s</name></expr></argument>, <argument pos:start="401:39" pos:end="401:40"><expr pos:start="401:39" pos:end="401:40"><literal type="number" pos:start="401:39" pos:end="401:40">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="403:21" pos:end="403:43"><expr pos:start="403:21" pos:end="403:42"><call pos:start="403:21" pos:end="403:42"><name pos:start="403:21" pos:end="403:28">gen_st32</name><argument_list pos:start="403:29" pos:end="403:42">(<argument pos:start="403:30" pos:end="403:32"><expr pos:start="403:30" pos:end="403:32"><name pos:start="403:30" pos:end="403:32">tmp</name></expr></argument>, <argument pos:start="403:35" pos:end="403:38"><expr pos:start="403:35" pos:end="403:38"><name pos:start="403:35" pos:end="403:38">addr</name></expr></argument>, <argument pos:start="403:41" pos:end="403:41"><expr pos:start="403:41" pos:end="403:41"><literal type="number" pos:start="403:41" pos:end="403:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="405:21" pos:end="405:52"><expr pos:start="405:21" pos:end="405:51"><call pos:start="405:21" pos:end="405:51"><name pos:start="405:21" pos:end="405:36">tcg_gen_addi_i32</name><argument_list pos:start="405:37" pos:end="405:51">(<argument pos:start="405:38" pos:end="405:41"><expr pos:start="405:38" pos:end="405:41"><name pos:start="405:38" pos:end="405:41">addr</name></expr></argument>, <argument pos:start="405:44" pos:end="405:47"><expr pos:start="405:44" pos:end="405:47"><name pos:start="405:44" pos:end="405:47">addr</name></expr></argument>, <argument pos:start="405:50" pos:end="405:50"><expr pos:start="405:50" pos:end="405:50"><literal type="number" pos:start="405:50" pos:end="405:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="407:21" pos:end="407:45"><expr pos:start="407:21" pos:end="407:44"><name pos:start="407:21" pos:end="407:23">tmp</name> <operator pos:start="407:25" pos:end="407:25">=</operator> <call pos:start="407:27" pos:end="407:44"><name pos:start="407:27" pos:end="407:42">tcg_temp_new_i32</name><argument_list pos:start="407:43" pos:end="407:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="409:21" pos:end="409:46"><expr pos:start="409:21" pos:end="409:45"><call pos:start="409:21" pos:end="409:45"><name pos:start="409:21" pos:end="409:40">gen_helper_cpsr_read</name><argument_list pos:start="409:41" pos:end="409:45">(<argument pos:start="409:42" pos:end="409:44"><expr pos:start="409:42" pos:end="409:44"><name pos:start="409:42" pos:end="409:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="411:21" pos:end="411:43"><expr pos:start="411:21" pos:end="411:42"><call pos:start="411:21" pos:end="411:42"><name pos:start="411:21" pos:end="411:28">gen_st32</name><argument_list pos:start="411:29" pos:end="411:42">(<argument pos:start="411:30" pos:end="411:32"><expr pos:start="411:30" pos:end="411:32"><name pos:start="411:30" pos:end="411:32">tmp</name></expr></argument>, <argument pos:start="411:35" pos:end="411:38"><expr pos:start="411:35" pos:end="411:38"><name pos:start="411:35" pos:end="411:38">addr</name></expr></argument>, <argument pos:start="411:41" pos:end="411:41"><expr pos:start="411:41" pos:end="411:41"><literal type="number" pos:start="411:41" pos:end="411:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="413:21" pos:end="435:21"><if pos:start="413:21" pos:end="431:21">if <condition pos:start="413:24" pos:end="413:41">(<expr pos:start="413:25" pos:end="413:40"><name pos:start="413:25" pos:end="413:28">insn</name> <operator pos:start="413:30" pos:end="413:30">&amp;</operator> <operator pos:start="413:32" pos:end="413:32">(</operator><literal type="number" pos:start="413:33" pos:end="413:33">1</literal> <operator pos:start="413:35" pos:end="413:36">&lt;&lt;</operator> <literal type="number" pos:start="413:38" pos:end="413:39">21</literal><operator pos:start="413:40" pos:end="413:40">)</operator></expr>)</condition> <block pos:start="413:43" pos:end="431:21">{<block_content pos:start="415:25" pos:end="429:47">

                        <if_stmt pos:start="415:25" pos:end="423:25"><if pos:start="415:25" pos:end="419:25">if <condition pos:start="415:28" pos:end="415:52">(<expr pos:start="415:29" pos:end="415:51"><operator pos:start="415:29" pos:end="415:29">(</operator><name pos:start="415:30" pos:end="415:33">insn</name> <operator pos:start="415:35" pos:end="415:35">&amp;</operator> <operator pos:start="415:37" pos:end="415:37">(</operator><literal type="number" pos:start="415:38" pos:end="415:38">1</literal> <operator pos:start="415:40" pos:end="415:41">&lt;&lt;</operator> <literal type="number" pos:start="415:43" pos:end="415:44">24</literal><operator pos:start="415:45" pos:end="415:45">)</operator><operator pos:start="415:46" pos:end="415:46">)</operator> <operator pos:start="415:48" pos:end="415:49">==</operator> <literal type="number" pos:start="415:51" pos:end="415:51">0</literal></expr>)</condition> <block pos:start="415:54" pos:end="419:25">{<block_content pos:start="417:29" pos:end="417:61">

                            <expr_stmt pos:start="417:29" pos:end="417:61"><expr pos:start="417:29" pos:end="417:60"><call pos:start="417:29" pos:end="417:60"><name pos:start="417:29" pos:end="417:44">tcg_gen_addi_i32</name><argument_list pos:start="417:45" pos:end="417:60">(<argument pos:start="417:46" pos:end="417:49"><expr pos:start="417:46" pos:end="417:49"><name pos:start="417:46" pos:end="417:49">addr</name></expr></argument>, <argument pos:start="417:52" pos:end="417:55"><expr pos:start="417:52" pos:end="417:55"><name pos:start="417:52" pos:end="417:55">addr</name></expr></argument>, <argument pos:start="417:58" pos:end="417:59"><expr pos:start="417:58" pos:end="417:59"><operator pos:start="417:58" pos:end="417:58">-</operator><literal type="number" pos:start="417:59" pos:end="417:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="419:27" pos:end="423:25">else <block pos:start="419:32" pos:end="423:25">{<block_content pos:start="421:29" pos:end="421:60">

                            <expr_stmt pos:start="421:29" pos:end="421:60"><expr pos:start="421:29" pos:end="421:59"><call pos:start="421:29" pos:end="421:59"><name pos:start="421:29" pos:end="421:44">tcg_gen_addi_i32</name><argument_list pos:start="421:45" pos:end="421:59">(<argument pos:start="421:46" pos:end="421:49"><expr pos:start="421:46" pos:end="421:49"><name pos:start="421:46" pos:end="421:49">addr</name></expr></argument>, <argument pos:start="421:52" pos:end="421:55"><expr pos:start="421:52" pos:end="421:55"><name pos:start="421:52" pos:end="421:55">addr</name></expr></argument>, <argument pos:start="421:58" pos:end="421:58"><expr pos:start="421:58" pos:end="421:58"><literal type="number" pos:start="421:58" pos:end="421:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="425:25" pos:end="425:48"><expr pos:start="425:25" pos:end="425:47"><name pos:start="425:25" pos:end="425:27">tmp</name> <operator pos:start="425:29" pos:end="425:29">=</operator> <call pos:start="425:31" pos:end="425:47"><name pos:start="425:31" pos:end="425:43">tcg_const_i32</name><argument_list pos:start="425:44" pos:end="425:47">(<argument pos:start="425:45" pos:end="425:46"><expr pos:start="425:45" pos:end="425:46"><name pos:start="425:45" pos:end="425:46">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="427:25" pos:end="427:70"><expr pos:start="427:25" pos:end="427:69"><call pos:start="427:25" pos:end="427:69"><name pos:start="427:25" pos:end="427:49">gen_helper_set_r13_banked</name><argument_list pos:start="427:50" pos:end="427:69">(<argument pos:start="427:51" pos:end="427:57"><expr pos:start="427:51" pos:end="427:57"><name pos:start="427:51" pos:end="427:57">cpu_env</name></expr></argument>, <argument pos:start="427:60" pos:end="427:62"><expr pos:start="427:60" pos:end="427:62"><name pos:start="427:60" pos:end="427:62">tmp</name></expr></argument>, <argument pos:start="427:65" pos:end="427:68"><expr pos:start="427:65" pos:end="427:68"><name pos:start="427:65" pos:end="427:68">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="429:25" pos:end="429:47"><expr pos:start="429:25" pos:end="429:46"><call pos:start="429:25" pos:end="429:46"><name pos:start="429:25" pos:end="429:41">tcg_temp_free_i32</name><argument_list pos:start="429:42" pos:end="429:46">(<argument pos:start="429:43" pos:end="429:45"><expr pos:start="429:43" pos:end="429:45"><name pos:start="429:43" pos:end="429:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="431:23" pos:end="435:21">else <block pos:start="431:28" pos:end="435:21">{<block_content pos:start="433:25" pos:end="433:48">

                        <expr_stmt pos:start="433:25" pos:end="433:48"><expr pos:start="433:25" pos:end="433:47"><call pos:start="433:25" pos:end="433:47"><name pos:start="433:25" pos:end="433:41">tcg_temp_free_i32</name><argument_list pos:start="433:42" pos:end="433:47">(<argument pos:start="433:43" pos:end="433:46"><expr pos:start="433:43" pos:end="433:46"><name pos:start="433:43" pos:end="433:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="439:15" pos:end="525:13">else <block pos:start="439:20" pos:end="525:13">{<block_content pos:start="441:17" pos:end="523:17">

                <decl_stmt pos:start="441:17" pos:end="441:22"><decl pos:start="441:17" pos:end="441:21"><type pos:start="441:17" pos:end="441:19"><name pos:start="441:17" pos:end="441:19">int</name></type> <name pos:start="441:21" pos:end="441:21">i</name></decl>;</decl_stmt>

                <comment type="block" pos:start="443:17" pos:end="443:43">/* Load/store multiple.  */</comment>

                <expr_stmt pos:start="445:17" pos:end="445:39"><expr pos:start="445:17" pos:end="445:38"><name pos:start="445:17" pos:end="445:20">addr</name> <operator pos:start="445:22" pos:end="445:22">=</operator> <call pos:start="445:24" pos:end="445:38"><name pos:start="445:24" pos:end="445:31">load_reg</name><argument_list pos:start="445:32" pos:end="445:38">(<argument pos:start="445:33" pos:end="445:33"><expr pos:start="445:33" pos:end="445:33"><name pos:start="445:33" pos:end="445:33">s</name></expr></argument>, <argument pos:start="445:36" pos:end="445:37"><expr pos:start="445:36" pos:end="445:37"><name pos:start="445:36" pos:end="445:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="447:17" pos:end="447:27"><expr pos:start="447:17" pos:end="447:26"><name pos:start="447:17" pos:end="447:22">offset</name> <operator pos:start="447:24" pos:end="447:24">=</operator> <literal type="number" pos:start="447:26" pos:end="447:26">0</literal></expr>;</expr_stmt>

                <for pos:start="449:17" pos:end="455:17">for <control pos:start="449:21" pos:end="449:40">(<init pos:start="449:22" pos:end="449:27"><expr pos:start="449:22" pos:end="449:26"><name pos:start="449:22" pos:end="449:22">i</name> <operator pos:start="449:24" pos:end="449:24">=</operator> <literal type="number" pos:start="449:26" pos:end="449:26">0</literal></expr>;</init> <condition pos:start="449:29" pos:end="449:35"><expr pos:start="449:29" pos:end="449:34"><name pos:start="449:29" pos:end="449:29">i</name> <operator pos:start="449:31" pos:end="449:31">&lt;</operator> <literal type="number" pos:start="449:33" pos:end="449:34">16</literal></expr>;</condition> <incr pos:start="449:37" pos:end="449:39"><expr pos:start="449:37" pos:end="449:39"><name pos:start="449:37" pos:end="449:37">i</name><operator pos:start="449:38" pos:end="449:39">++</operator></expr></incr>)</control> <block pos:start="449:42" pos:end="455:17">{<block_content pos:start="451:21" pos:end="453:36">

                    <if_stmt pos:start="451:21" pos:end="453:36"><if pos:start="451:21" pos:end="453:36">if <condition pos:start="451:24" pos:end="451:40">(<expr pos:start="451:25" pos:end="451:39"><name pos:start="451:25" pos:end="451:28">insn</name> <operator pos:start="451:30" pos:end="451:30">&amp;</operator> <operator pos:start="451:32" pos:end="451:32">(</operator><literal type="number" pos:start="451:33" pos:end="451:33">1</literal> <operator pos:start="451:35" pos:end="451:36">&lt;&lt;</operator> <name pos:start="451:38" pos:end="451:38">i</name><operator pos:start="451:39" pos:end="451:39">)</operator></expr>)</condition><block type="pseudo" pos:start="453:25" pos:end="453:36"><block_content pos:start="453:25" pos:end="453:36">

                        <expr_stmt pos:start="453:25" pos:end="453:36"><expr pos:start="453:25" pos:end="453:35"><name pos:start="453:25" pos:end="453:30">offset</name> <operator pos:start="453:32" pos:end="453:33">+=</operator> <literal type="number" pos:start="453:35" pos:end="453:35">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="457:17" pos:end="461:17"><if pos:start="457:17" pos:end="461:17">if <condition pos:start="457:20" pos:end="457:37">(<expr pos:start="457:21" pos:end="457:36"><name pos:start="457:21" pos:end="457:24">insn</name> <operator pos:start="457:26" pos:end="457:26">&amp;</operator> <operator pos:start="457:28" pos:end="457:28">(</operator><literal type="number" pos:start="457:29" pos:end="457:29">1</literal> <operator pos:start="457:31" pos:end="457:32">&lt;&lt;</operator> <literal type="number" pos:start="457:34" pos:end="457:35">24</literal><operator pos:start="457:36" pos:end="457:36">)</operator></expr>)</condition> <block pos:start="457:39" pos:end="461:17">{<block_content pos:start="459:21" pos:end="459:58">

                    <expr_stmt pos:start="459:21" pos:end="459:58"><expr pos:start="459:21" pos:end="459:57"><call pos:start="459:21" pos:end="459:57"><name pos:start="459:21" pos:end="459:36">tcg_gen_addi_i32</name><argument_list pos:start="459:37" pos:end="459:57">(<argument pos:start="459:38" pos:end="459:41"><expr pos:start="459:38" pos:end="459:41"><name pos:start="459:38" pos:end="459:41">addr</name></expr></argument>, <argument pos:start="459:44" pos:end="459:47"><expr pos:start="459:44" pos:end="459:47"><name pos:start="459:44" pos:end="459:47">addr</name></expr></argument>, <argument pos:start="459:50" pos:end="459:56"><expr pos:start="459:50" pos:end="459:56"><operator pos:start="459:50" pos:end="459:50">-</operator><name pos:start="459:51" pos:end="459:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <for pos:start="465:17" pos:end="499:17">for <control pos:start="465:21" pos:end="465:40">(<init pos:start="465:22" pos:end="465:27"><expr pos:start="465:22" pos:end="465:26"><name pos:start="465:22" pos:end="465:22">i</name> <operator pos:start="465:24" pos:end="465:24">=</operator> <literal type="number" pos:start="465:26" pos:end="465:26">0</literal></expr>;</init> <condition pos:start="465:29" pos:end="465:35"><expr pos:start="465:29" pos:end="465:34"><name pos:start="465:29" pos:end="465:29">i</name> <operator pos:start="465:31" pos:end="465:31">&lt;</operator> <literal type="number" pos:start="465:33" pos:end="465:34">16</literal></expr>;</condition> <incr pos:start="465:37" pos:end="465:39"><expr pos:start="465:37" pos:end="465:39"><name pos:start="465:37" pos:end="465:37">i</name><operator pos:start="465:38" pos:end="465:39">++</operator></expr></incr>)</control> <block pos:start="465:42" pos:end="499:17">{<block_content pos:start="467:21" pos:end="497:52">

                    <if_stmt pos:start="467:21" pos:end="469:33"><if pos:start="467:21" pos:end="469:33">if <condition pos:start="467:24" pos:end="467:47">(<expr pos:start="467:25" pos:end="467:46"><operator pos:start="467:25" pos:end="467:25">(</operator><name pos:start="467:26" pos:end="467:29">insn</name> <operator pos:start="467:31" pos:end="467:31">&amp;</operator> <operator pos:start="467:33" pos:end="467:33">(</operator><literal type="number" pos:start="467:34" pos:end="467:34">1</literal> <operator pos:start="467:36" pos:end="467:37">&lt;&lt;</operator> <name pos:start="467:39" pos:end="467:39">i</name><operator pos:start="467:40" pos:end="467:40">)</operator><operator pos:start="467:41" pos:end="467:41">)</operator> <operator pos:start="467:43" pos:end="467:44">==</operator> <literal type="number" pos:start="467:46" pos:end="467:46">0</literal></expr>)</condition><block type="pseudo" pos:start="469:25" pos:end="469:33"><block_content pos:start="469:25" pos:end="469:33">

                        <continue pos:start="469:25" pos:end="469:33">continue;</continue></block_content></block></if></if_stmt>

                    <if_stmt pos:start="471:21" pos:end="495:21"><if pos:start="471:21" pos:end="487:21">if <condition pos:start="471:24" pos:end="471:41">(<expr pos:start="471:25" pos:end="471:40"><name pos:start="471:25" pos:end="471:28">insn</name> <operator pos:start="471:30" pos:end="471:30">&amp;</operator> <operator pos:start="471:32" pos:end="471:32">(</operator><literal type="number" pos:start="471:33" pos:end="471:33">1</literal> <operator pos:start="471:35" pos:end="471:36">&lt;&lt;</operator> <literal type="number" pos:start="471:38" pos:end="471:39">20</literal><operator pos:start="471:40" pos:end="471:40">)</operator></expr>)</condition> <block pos:start="471:43" pos:end="487:21">{<block_content pos:start="475:25" pos:end="485:25">

                        <comment type="block" pos:start="473:25" pos:end="473:36">/* Load.  */</comment>

                        <expr_stmt pos:start="475:25" pos:end="475:57"><expr pos:start="475:25" pos:end="475:56"><name pos:start="475:25" pos:end="475:27">tmp</name> <operator pos:start="475:29" pos:end="475:29">=</operator> <call pos:start="475:31" pos:end="475:56"><name pos:start="475:31" pos:end="475:38">gen_ld32</name><argument_list pos:start="475:39" pos:end="475:56">(<argument pos:start="475:40" pos:end="475:43"><expr pos:start="475:40" pos:end="475:43"><name pos:start="475:40" pos:end="475:43">addr</name></expr></argument>, <argument pos:start="475:46" pos:end="475:55"><expr pos:start="475:46" pos:end="475:55"><call pos:start="475:46" pos:end="475:55"><name pos:start="475:46" pos:end="475:52">IS_USER</name><argument_list pos:start="475:53" pos:end="475:55">(<argument pos:start="475:54" pos:end="475:54"><expr pos:start="475:54" pos:end="475:54"><name pos:start="475:54" pos:end="475:54">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="477:25" pos:end="485:25"><if pos:start="477:25" pos:end="481:25">if <condition pos:start="477:28" pos:end="477:36">(<expr pos:start="477:29" pos:end="477:35"><name pos:start="477:29" pos:end="477:29">i</name> <operator pos:start="477:31" pos:end="477:32">==</operator> <literal type="number" pos:start="477:34" pos:end="477:35">15</literal></expr>)</condition> <block pos:start="477:38" pos:end="481:25">{<block_content pos:start="479:29" pos:end="479:43">

                            <expr_stmt pos:start="479:29" pos:end="479:43"><expr pos:start="479:29" pos:end="479:42"><call pos:start="479:29" pos:end="479:42"><name pos:start="479:29" pos:end="479:34">gen_bx</name><argument_list pos:start="479:35" pos:end="479:42">(<argument pos:start="479:36" pos:end="479:36"><expr pos:start="479:36" pos:end="479:36"><name pos:start="479:36" pos:end="479:36">s</name></expr></argument>, <argument pos:start="479:39" pos:end="479:41"><expr pos:start="479:39" pos:end="479:41"><name pos:start="479:39" pos:end="479:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="481:27" pos:end="485:25">else <block pos:start="481:32" pos:end="485:25">{<block_content pos:start="483:29" pos:end="483:49">

                            <expr_stmt pos:start="483:29" pos:end="483:49"><expr pos:start="483:29" pos:end="483:48"><call pos:start="483:29" pos:end="483:48"><name pos:start="483:29" pos:end="483:37">store_reg</name><argument_list pos:start="483:38" pos:end="483:48">(<argument pos:start="483:39" pos:end="483:39"><expr pos:start="483:39" pos:end="483:39"><name pos:start="483:39" pos:end="483:39">s</name></expr></argument>, <argument pos:start="483:42" pos:end="483:42"><expr pos:start="483:42" pos:end="483:42"><name pos:start="483:42" pos:end="483:42">i</name></expr></argument>, <argument pos:start="483:45" pos:end="483:47"><expr pos:start="483:45" pos:end="483:47"><name pos:start="483:45" pos:end="483:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="487:23" pos:end="495:21">else <block pos:start="487:28" pos:end="495:21">{<block_content pos:start="491:25" pos:end="493:56">

                        <comment type="block" pos:start="489:25" pos:end="489:37">/* Store.  */</comment>

                        <expr_stmt pos:start="491:25" pos:end="491:45"><expr pos:start="491:25" pos:end="491:44"><name pos:start="491:25" pos:end="491:27">tmp</name> <operator pos:start="491:29" pos:end="491:29">=</operator> <call pos:start="491:31" pos:end="491:44"><name pos:start="491:31" pos:end="491:38">load_reg</name><argument_list pos:start="491:39" pos:end="491:44">(<argument pos:start="491:40" pos:end="491:40"><expr pos:start="491:40" pos:end="491:40"><name pos:start="491:40" pos:end="491:40">s</name></expr></argument>, <argument pos:start="491:43" pos:end="491:43"><expr pos:start="491:43" pos:end="491:43"><name pos:start="491:43" pos:end="491:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="493:25" pos:end="493:56"><expr pos:start="493:25" pos:end="493:55"><call pos:start="493:25" pos:end="493:55"><name pos:start="493:25" pos:end="493:32">gen_st32</name><argument_list pos:start="493:33" pos:end="493:55">(<argument pos:start="493:34" pos:end="493:36"><expr pos:start="493:34" pos:end="493:36"><name pos:start="493:34" pos:end="493:36">tmp</name></expr></argument>, <argument pos:start="493:39" pos:end="493:42"><expr pos:start="493:39" pos:end="493:42"><name pos:start="493:39" pos:end="493:42">addr</name></expr></argument>, <argument pos:start="493:45" pos:end="493:54"><expr pos:start="493:45" pos:end="493:54"><call pos:start="493:45" pos:end="493:54"><name pos:start="493:45" pos:end="493:51">IS_USER</name><argument_list pos:start="493:52" pos:end="493:54">(<argument pos:start="493:53" pos:end="493:53"><expr pos:start="493:53" pos:end="493:53"><name pos:start="493:53" pos:end="493:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="497:21" pos:end="497:52"><expr pos:start="497:21" pos:end="497:51"><call pos:start="497:21" pos:end="497:51"><name pos:start="497:21" pos:end="497:36">tcg_gen_addi_i32</name><argument_list pos:start="497:37" pos:end="497:51">(<argument pos:start="497:38" pos:end="497:41"><expr pos:start="497:38" pos:end="497:41"><name pos:start="497:38" pos:end="497:41">addr</name></expr></argument>, <argument pos:start="497:44" pos:end="497:47"><expr pos:start="497:44" pos:end="497:47"><name pos:start="497:44" pos:end="497:47">addr</name></expr></argument>, <argument pos:start="497:50" pos:end="497:50"><expr pos:start="497:50" pos:end="497:50"><literal type="number" pos:start="497:50" pos:end="497:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="501:17" pos:end="523:17"><if pos:start="501:17" pos:end="519:17">if <condition pos:start="501:20" pos:end="501:37">(<expr pos:start="501:21" pos:end="501:36"><name pos:start="501:21" pos:end="501:24">insn</name> <operator pos:start="501:26" pos:end="501:26">&amp;</operator> <operator pos:start="501:28" pos:end="501:28">(</operator><literal type="number" pos:start="501:29" pos:end="501:29">1</literal> <operator pos:start="501:31" pos:end="501:32">&lt;&lt;</operator> <literal type="number" pos:start="501:34" pos:end="501:35">21</literal><operator pos:start="501:36" pos:end="501:36">)</operator></expr>)</condition> <block pos:start="501:39" pos:end="519:17">{<block_content pos:start="505:21" pos:end="517:43">

                    <comment type="block" pos:start="503:21" pos:end="503:51">/* Base register writeback.  */</comment>

                    <if_stmt pos:start="505:21" pos:end="509:21"><if pos:start="505:21" pos:end="509:21">if <condition pos:start="505:24" pos:end="505:41">(<expr pos:start="505:25" pos:end="505:40"><name pos:start="505:25" pos:end="505:28">insn</name> <operator pos:start="505:30" pos:end="505:30">&amp;</operator> <operator pos:start="505:32" pos:end="505:32">(</operator><literal type="number" pos:start="505:33" pos:end="505:33">1</literal> <operator pos:start="505:35" pos:end="505:36">&lt;&lt;</operator> <literal type="number" pos:start="505:38" pos:end="505:39">24</literal><operator pos:start="505:40" pos:end="505:40">)</operator></expr>)</condition> <block pos:start="505:43" pos:end="509:21">{<block_content pos:start="507:25" pos:end="507:62">

                        <expr_stmt pos:start="507:25" pos:end="507:62"><expr pos:start="507:25" pos:end="507:61"><call pos:start="507:25" pos:end="507:61"><name pos:start="507:25" pos:end="507:40">tcg_gen_addi_i32</name><argument_list pos:start="507:41" pos:end="507:61">(<argument pos:start="507:42" pos:end="507:45"><expr pos:start="507:42" pos:end="507:45"><name pos:start="507:42" pos:end="507:45">addr</name></expr></argument>, <argument pos:start="507:48" pos:end="507:51"><expr pos:start="507:48" pos:end="507:51"><name pos:start="507:48" pos:end="507:51">addr</name></expr></argument>, <argument pos:start="507:54" pos:end="507:60"><expr pos:start="507:54" pos:end="507:60"><operator pos:start="507:54" pos:end="507:54">-</operator><name pos:start="507:55" pos:end="507:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="511:21" pos:end="511:75">/* Fault if writeback register is in register list.  */</comment>

                    <if_stmt pos:start="513:21" pos:end="515:40"><if pos:start="513:21" pos:end="515:40">if <condition pos:start="513:24" pos:end="513:41">(<expr pos:start="513:25" pos:end="513:40"><name pos:start="513:25" pos:end="513:28">insn</name> <operator pos:start="513:30" pos:end="513:30">&amp;</operator> <operator pos:start="513:32" pos:end="513:32">(</operator><literal type="number" pos:start="513:33" pos:end="513:33">1</literal> <operator pos:start="513:35" pos:end="513:36">&lt;&lt;</operator> <name pos:start="513:38" pos:end="513:39">rn</name><operator pos:start="513:40" pos:end="513:40">)</operator></expr>)</condition><block type="pseudo" pos:start="515:25" pos:end="515:40"><block_content pos:start="515:25" pos:end="515:40">

                        <goto pos:start="515:25" pos:end="515:40">goto <name pos:start="515:30" pos:end="515:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="517:21" pos:end="517:43"><expr pos:start="517:21" pos:end="517:42"><call pos:start="517:21" pos:end="517:42"><name pos:start="517:21" pos:end="517:29">store_reg</name><argument_list pos:start="517:30" pos:end="517:42">(<argument pos:start="517:31" pos:end="517:31"><expr pos:start="517:31" pos:end="517:31"><name pos:start="517:31" pos:end="517:31">s</name></expr></argument>, <argument pos:start="517:34" pos:end="517:35"><expr pos:start="517:34" pos:end="517:35"><name pos:start="517:34" pos:end="517:35">rn</name></expr></argument>, <argument pos:start="517:38" pos:end="517:41"><expr pos:start="517:38" pos:end="517:41"><name pos:start="517:38" pos:end="517:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="519:19" pos:end="523:17">else <block pos:start="519:24" pos:end="523:17">{<block_content pos:start="521:21" pos:end="521:44">

                    <expr_stmt pos:start="521:21" pos:end="521:44"><expr pos:start="521:21" pos:end="521:43"><call pos:start="521:21" pos:end="521:43"><name pos:start="521:21" pos:end="521:37">tcg_temp_free_i32</name><argument_list pos:start="521:38" pos:end="521:43">(<argument pos:start="521:39" pos:end="521:42"><expr pos:start="521:39" pos:end="521:42"><name pos:start="521:39" pos:end="521:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="529:9" pos:end="529:14">break;</break>

    <case pos:start="531:5" pos:end="531:11">case <expr pos:start="531:10" pos:end="531:10"><literal type="number" pos:start="531:10" pos:end="531:10">5</literal></expr>:</case>



        <expr_stmt pos:start="535:9" pos:end="535:32"><expr pos:start="535:9" pos:end="535:31"><name pos:start="535:9" pos:end="535:10">op</name> <operator pos:start="535:12" pos:end="535:12">=</operator> <operator pos:start="535:14" pos:end="535:14">(</operator><name pos:start="535:15" pos:end="535:18">insn</name> <operator pos:start="535:20" pos:end="535:21">&gt;&gt;</operator> <literal type="number" pos:start="535:23" pos:end="535:24">21</literal><operator pos:start="535:25" pos:end="535:25">)</operator> <operator pos:start="535:27" pos:end="535:27">&amp;</operator> <literal type="number" pos:start="535:29" pos:end="535:31">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="537:9" pos:end="627:9"><if pos:start="537:9" pos:end="581:9">if <condition pos:start="537:12" pos:end="537:20">(<expr pos:start="537:13" pos:end="537:19"><name pos:start="537:13" pos:end="537:14">op</name> <operator pos:start="537:16" pos:end="537:17">==</operator> <literal type="number" pos:start="537:19" pos:end="537:19">6</literal></expr>)</condition> <block pos:start="537:22" pos:end="581:9">{<block_content pos:start="541:13" pos:end="579:34">

            <comment type="block" pos:start="539:13" pos:end="539:33">/* Halfword pack.  */</comment>

            <expr_stmt pos:start="541:13" pos:end="541:34"><expr pos:start="541:13" pos:end="541:33"><name pos:start="541:13" pos:end="541:15">tmp</name> <operator pos:start="541:17" pos:end="541:17">=</operator> <call pos:start="541:19" pos:end="541:33"><name pos:start="541:19" pos:end="541:26">load_reg</name><argument_list pos:start="541:27" pos:end="541:33">(<argument pos:start="541:28" pos:end="541:28"><expr pos:start="541:28" pos:end="541:28"><name pos:start="541:28" pos:end="541:28">s</name></expr></argument>, <argument pos:start="541:31" pos:end="541:32"><expr pos:start="541:31" pos:end="541:32"><name pos:start="541:31" pos:end="541:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:35"><expr pos:start="543:13" pos:end="543:34"><name pos:start="543:13" pos:end="543:16">tmp2</name> <operator pos:start="543:18" pos:end="543:18">=</operator> <call pos:start="543:20" pos:end="543:34"><name pos:start="543:20" pos:end="543:27">load_reg</name><argument_list pos:start="543:28" pos:end="543:34">(<argument pos:start="543:29" pos:end="543:29"><expr pos:start="543:29" pos:end="543:29"><name pos:start="543:29" pos:end="543:29">s</name></expr></argument>, <argument pos:start="543:32" pos:end="543:33"><expr pos:start="543:32" pos:end="543:33"><name pos:start="543:32" pos:end="543:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="545:13" pos:end="545:64"><expr pos:start="545:13" pos:end="545:63"><name pos:start="545:13" pos:end="545:17">shift</name> <operator pos:start="545:19" pos:end="545:19">=</operator> <operator pos:start="545:21" pos:end="545:21">(</operator><operator pos:start="545:22" pos:end="545:22">(</operator><name pos:start="545:23" pos:end="545:26">insn</name> <operator pos:start="545:28" pos:end="545:29">&gt;&gt;</operator> <literal type="number" pos:start="545:31" pos:end="545:32">10</literal><operator pos:start="545:33" pos:end="545:33">)</operator> <operator pos:start="545:35" pos:end="545:35">&amp;</operator> <literal type="number" pos:start="545:37" pos:end="545:40">0x1c</literal><operator pos:start="545:41" pos:end="545:41">)</operator> <operator pos:start="545:43" pos:end="545:43">|</operator> <operator pos:start="545:45" pos:end="545:45">(</operator><operator pos:start="545:46" pos:end="545:46">(</operator><name pos:start="545:47" pos:end="545:50">insn</name> <operator pos:start="545:52" pos:end="545:53">&gt;&gt;</operator> <literal type="number" pos:start="545:55" pos:end="545:55">6</literal><operator pos:start="545:56" pos:end="545:56">)</operator> <operator pos:start="545:58" pos:end="545:58">&amp;</operator> <literal type="number" pos:start="545:60" pos:end="545:62">0x3</literal><operator pos:start="545:63" pos:end="545:63">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="547:13" pos:end="573:13"><if pos:start="547:13" pos:end="561:13">if <condition pos:start="547:16" pos:end="547:32">(<expr pos:start="547:17" pos:end="547:31"><name pos:start="547:17" pos:end="547:20">insn</name> <operator pos:start="547:22" pos:end="547:22">&amp;</operator> <operator pos:start="547:24" pos:end="547:24">(</operator><literal type="number" pos:start="547:25" pos:end="547:25">1</literal> <operator pos:start="547:27" pos:end="547:28">&lt;&lt;</operator> <literal type="number" pos:start="547:30" pos:end="547:30">5</literal><operator pos:start="547:31" pos:end="547:31">)</operator></expr>)</condition> <block pos:start="547:34" pos:end="561:13">{<block_content pos:start="551:17" pos:end="559:47">

                <comment type="block" pos:start="549:17" pos:end="549:27">/* pkhtb */</comment>

                <if_stmt pos:start="551:17" pos:end="553:31"><if pos:start="551:17" pos:end="553:31">if <condition pos:start="551:20" pos:end="551:31">(<expr pos:start="551:21" pos:end="551:30"><name pos:start="551:21" pos:end="551:25">shift</name> <operator pos:start="551:27" pos:end="551:28">==</operator> <literal type="number" pos:start="551:30" pos:end="551:30">0</literal></expr>)</condition><block type="pseudo" pos:start="553:21" pos:end="553:31"><block_content pos:start="553:21" pos:end="553:31">

                    <expr_stmt pos:start="553:21" pos:end="553:31"><expr pos:start="553:21" pos:end="553:30"><name pos:start="553:21" pos:end="553:25">shift</name> <operator pos:start="553:27" pos:end="553:27">=</operator> <literal type="number" pos:start="553:29" pos:end="553:30">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="555:17" pos:end="555:52"><expr pos:start="555:17" pos:end="555:51"><call pos:start="555:17" pos:end="555:51"><name pos:start="555:17" pos:end="555:32">tcg_gen_sari_i32</name><argument_list pos:start="555:33" pos:end="555:51">(<argument pos:start="555:34" pos:end="555:37"><expr pos:start="555:34" pos:end="555:37"><name pos:start="555:34" pos:end="555:37">tmp2</name></expr></argument>, <argument pos:start="555:40" pos:end="555:43"><expr pos:start="555:40" pos:end="555:43"><name pos:start="555:40" pos:end="555:43">tmp2</name></expr></argument>, <argument pos:start="555:46" pos:end="555:50"><expr pos:start="555:46" pos:end="555:50"><name pos:start="555:46" pos:end="555:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="557:17" pos:end="557:55"><expr pos:start="557:17" pos:end="557:54"><call pos:start="557:17" pos:end="557:54"><name pos:start="557:17" pos:end="557:32">tcg_gen_andi_i32</name><argument_list pos:start="557:33" pos:end="557:54">(<argument pos:start="557:34" pos:end="557:36"><expr pos:start="557:34" pos:end="557:36"><name pos:start="557:34" pos:end="557:36">tmp</name></expr></argument>, <argument pos:start="557:39" pos:end="557:41"><expr pos:start="557:39" pos:end="557:41"><name pos:start="557:39" pos:end="557:41">tmp</name></expr></argument>, <argument pos:start="557:44" pos:end="557:53"><expr pos:start="557:44" pos:end="557:53"><literal type="number" pos:start="557:44" pos:end="557:53">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="559:17" pos:end="559:47"><expr pos:start="559:17" pos:end="559:46"><call pos:start="559:17" pos:end="559:46"><name pos:start="559:17" pos:end="559:34">tcg_gen_ext16u_i32</name><argument_list pos:start="559:35" pos:end="559:46">(<argument pos:start="559:36" pos:end="559:39"><expr pos:start="559:36" pos:end="559:39"><name pos:start="559:36" pos:end="559:39">tmp2</name></expr></argument>, <argument pos:start="559:42" pos:end="559:45"><expr pos:start="559:42" pos:end="559:45"><name pos:start="559:42" pos:end="559:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="561:15" pos:end="573:13">else <block pos:start="561:20" pos:end="573:13">{<block_content pos:start="565:17" pos:end="571:57">

                <comment type="block" pos:start="563:17" pos:end="563:27">/* pkhbt */</comment>

                <if_stmt pos:start="565:17" pos:end="567:56"><if pos:start="565:17" pos:end="567:56">if <condition pos:start="565:20" pos:end="565:26">(<expr pos:start="565:21" pos:end="565:25"><name pos:start="565:21" pos:end="565:25">shift</name></expr>)</condition><block type="pseudo" pos:start="567:21" pos:end="567:56"><block_content pos:start="567:21" pos:end="567:56">

                    <expr_stmt pos:start="567:21" pos:end="567:56"><expr pos:start="567:21" pos:end="567:55"><call pos:start="567:21" pos:end="567:55"><name pos:start="567:21" pos:end="567:36">tcg_gen_shli_i32</name><argument_list pos:start="567:37" pos:end="567:55">(<argument pos:start="567:38" pos:end="567:41"><expr pos:start="567:38" pos:end="567:41"><name pos:start="567:38" pos:end="567:41">tmp2</name></expr></argument>, <argument pos:start="567:44" pos:end="567:47"><expr pos:start="567:44" pos:end="567:47"><name pos:start="567:44" pos:end="567:47">tmp2</name></expr></argument>, <argument pos:start="567:50" pos:end="567:54"><expr pos:start="567:50" pos:end="567:54"><name pos:start="567:50" pos:end="567:54">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="569:17" pos:end="569:45"><expr pos:start="569:17" pos:end="569:44"><call pos:start="569:17" pos:end="569:44"><name pos:start="569:17" pos:end="569:34">tcg_gen_ext16u_i32</name><argument_list pos:start="569:35" pos:end="569:44">(<argument pos:start="569:36" pos:end="569:38"><expr pos:start="569:36" pos:end="569:38"><name pos:start="569:36" pos:end="569:38">tmp</name></expr></argument>, <argument pos:start="569:41" pos:end="569:43"><expr pos:start="569:41" pos:end="569:43"><name pos:start="569:41" pos:end="569:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="571:17" pos:end="571:57"><expr pos:start="571:17" pos:end="571:56"><call pos:start="571:17" pos:end="571:56"><name pos:start="571:17" pos:end="571:32">tcg_gen_andi_i32</name><argument_list pos:start="571:33" pos:end="571:56">(<argument pos:start="571:34" pos:end="571:37"><expr pos:start="571:34" pos:end="571:37"><name pos:start="571:34" pos:end="571:37">tmp2</name></expr></argument>, <argument pos:start="571:40" pos:end="571:43"><expr pos:start="571:40" pos:end="571:43"><name pos:start="571:40" pos:end="571:43">tmp2</name></expr></argument>, <argument pos:start="571:46" pos:end="571:55"><expr pos:start="571:46" pos:end="571:55"><literal type="number" pos:start="571:46" pos:end="571:55">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="575:13" pos:end="575:43"><expr pos:start="575:13" pos:end="575:42"><call pos:start="575:13" pos:end="575:42"><name pos:start="575:13" pos:end="575:26">tcg_gen_or_i32</name><argument_list pos:start="575:27" pos:end="575:42">(<argument pos:start="575:28" pos:end="575:30"><expr pos:start="575:28" pos:end="575:30"><name pos:start="575:28" pos:end="575:30">tmp</name></expr></argument>, <argument pos:start="575:33" pos:end="575:35"><expr pos:start="575:33" pos:end="575:35"><name pos:start="575:33" pos:end="575:35">tmp</name></expr></argument>, <argument pos:start="575:38" pos:end="575:41"><expr pos:start="575:38" pos:end="575:41"><name pos:start="575:38" pos:end="575:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="577:13" pos:end="577:36"><expr pos:start="577:13" pos:end="577:35"><call pos:start="577:13" pos:end="577:35"><name pos:start="577:13" pos:end="577:29">tcg_temp_free_i32</name><argument_list pos:start="577:30" pos:end="577:35">(<argument pos:start="577:31" pos:end="577:34"><expr pos:start="577:31" pos:end="577:34"><name pos:start="577:31" pos:end="577:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:34"><expr pos:start="579:13" pos:end="579:33"><call pos:start="579:13" pos:end="579:33"><name pos:start="579:13" pos:end="579:21">store_reg</name><argument_list pos:start="579:22" pos:end="579:33">(<argument pos:start="579:23" pos:end="579:23"><expr pos:start="579:23" pos:end="579:23"><name pos:start="579:23" pos:end="579:23">s</name></expr></argument>, <argument pos:start="579:26" pos:end="579:27"><expr pos:start="579:26" pos:end="579:27"><name pos:start="579:26" pos:end="579:27">rd</name></expr></argument>, <argument pos:start="579:30" pos:end="579:32"><expr pos:start="579:30" pos:end="579:32"><name pos:start="579:30" pos:end="579:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="581:11" pos:end="627:9">else <block pos:start="581:16" pos:end="627:9">{<block_content pos:start="585:13" pos:end="625:13">

            <comment type="block" pos:start="583:13" pos:end="583:59">/* Data processing register constant shift.  */</comment>

            <if_stmt pos:start="585:13" pos:end="595:13"><if pos:start="585:13" pos:end="591:13">if <condition pos:start="585:16" pos:end="585:25">(<expr pos:start="585:17" pos:end="585:24"><name pos:start="585:17" pos:end="585:18">rn</name> <operator pos:start="585:20" pos:end="585:21">==</operator> <literal type="number" pos:start="585:23" pos:end="585:24">15</literal></expr>)</condition> <block pos:start="585:27" pos:end="591:13">{<block_content pos:start="587:17" pos:end="589:41">

                <expr_stmt pos:start="587:17" pos:end="587:41"><expr pos:start="587:17" pos:end="587:40"><name pos:start="587:17" pos:end="587:19">tmp</name> <operator pos:start="587:21" pos:end="587:21">=</operator> <call pos:start="587:23" pos:end="587:40"><name pos:start="587:23" pos:end="587:38">tcg_temp_new_i32</name><argument_list pos:start="587:39" pos:end="587:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="589:17" pos:end="589:41"><expr pos:start="589:17" pos:end="589:40"><call pos:start="589:17" pos:end="589:40"><name pos:start="589:17" pos:end="589:32">tcg_gen_movi_i32</name><argument_list pos:start="589:33" pos:end="589:40">(<argument pos:start="589:34" pos:end="589:36"><expr pos:start="589:34" pos:end="589:36"><name pos:start="589:34" pos:end="589:36">tmp</name></expr></argument>, <argument pos:start="589:39" pos:end="589:39"><expr pos:start="589:39" pos:end="589:39"><literal type="number" pos:start="589:39" pos:end="589:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="591:15" pos:end="595:13">else <block pos:start="591:20" pos:end="595:13">{<block_content pos:start="593:17" pos:end="593:38">

                <expr_stmt pos:start="593:17" pos:end="593:38"><expr pos:start="593:17" pos:end="593:37"><name pos:start="593:17" pos:end="593:19">tmp</name> <operator pos:start="593:21" pos:end="593:21">=</operator> <call pos:start="593:23" pos:end="593:37"><name pos:start="593:23" pos:end="593:30">load_reg</name><argument_list pos:start="593:31" pos:end="593:37">(<argument pos:start="593:32" pos:end="593:32"><expr pos:start="593:32" pos:end="593:32"><name pos:start="593:32" pos:end="593:32">s</name></expr></argument>, <argument pos:start="593:35" pos:end="593:36"><expr pos:start="593:35" pos:end="593:36"><name pos:start="593:35" pos:end="593:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:35"><expr pos:start="597:13" pos:end="597:34"><name pos:start="597:13" pos:end="597:16">tmp2</name> <operator pos:start="597:18" pos:end="597:18">=</operator> <call pos:start="597:20" pos:end="597:34"><name pos:start="597:20" pos:end="597:27">load_reg</name><argument_list pos:start="597:28" pos:end="597:34">(<argument pos:start="597:29" pos:end="597:29"><expr pos:start="597:29" pos:end="597:29"><name pos:start="597:29" pos:end="597:29">s</name></expr></argument>, <argument pos:start="597:32" pos:end="597:33"><expr pos:start="597:32" pos:end="597:33"><name pos:start="597:32" pos:end="597:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="601:13" pos:end="601:38"><expr pos:start="601:13" pos:end="601:37"><name pos:start="601:13" pos:end="601:19">shiftop</name> <operator pos:start="601:21" pos:end="601:21">=</operator> <operator pos:start="601:23" pos:end="601:23">(</operator><name pos:start="601:24" pos:end="601:27">insn</name> <operator pos:start="601:29" pos:end="601:30">&gt;&gt;</operator> <literal type="number" pos:start="601:32" pos:end="601:32">4</literal><operator pos:start="601:33" pos:end="601:33">)</operator> <operator pos:start="601:35" pos:end="601:35">&amp;</operator> <literal type="number" pos:start="601:37" pos:end="601:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="603:13" pos:end="603:62"><expr pos:start="603:13" pos:end="603:61"><name pos:start="603:13" pos:end="603:17">shift</name> <operator pos:start="603:19" pos:end="603:19">=</operator> <operator pos:start="603:21" pos:end="603:21">(</operator><operator pos:start="603:22" pos:end="603:22">(</operator><name pos:start="603:23" pos:end="603:26">insn</name> <operator pos:start="603:28" pos:end="603:29">&gt;&gt;</operator> <literal type="number" pos:start="603:31" pos:end="603:31">6</literal><operator pos:start="603:32" pos:end="603:32">)</operator> <operator pos:start="603:34" pos:end="603:34">&amp;</operator> <literal type="number" pos:start="603:36" pos:end="603:36">3</literal><operator pos:start="603:37" pos:end="603:37">)</operator> <operator pos:start="603:39" pos:end="603:39">|</operator> <operator pos:start="603:41" pos:end="603:41">(</operator><operator pos:start="603:42" pos:end="603:42">(</operator><name pos:start="603:43" pos:end="603:46">insn</name> <operator pos:start="603:48" pos:end="603:49">&gt;&gt;</operator> <literal type="number" pos:start="603:51" pos:end="603:52">10</literal><operator pos:start="603:53" pos:end="603:53">)</operator> <operator pos:start="603:55" pos:end="603:55">&amp;</operator> <literal type="number" pos:start="603:57" pos:end="603:60">0x1c</literal><operator pos:start="603:61" pos:end="603:61">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="605:13" pos:end="605:44"><expr pos:start="605:13" pos:end="605:43"><name pos:start="605:13" pos:end="605:17">conds</name> <operator pos:start="605:19" pos:end="605:19">=</operator> <operator pos:start="605:21" pos:end="605:21">(</operator><name pos:start="605:22" pos:end="605:25">insn</name> <operator pos:start="605:27" pos:end="605:27">&amp;</operator> <operator pos:start="605:29" pos:end="605:29">(</operator><literal type="number" pos:start="605:30" pos:end="605:30">1</literal> <operator pos:start="605:32" pos:end="605:33">&lt;&lt;</operator> <literal type="number" pos:start="605:35" pos:end="605:36">20</literal><operator pos:start="605:37" pos:end="605:37">)</operator><operator pos:start="605:38" pos:end="605:38">)</operator> <operator pos:start="605:40" pos:end="605:41">!=</operator> <literal type="number" pos:start="605:43" pos:end="605:43">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="607:13" pos:end="607:54"><expr pos:start="607:13" pos:end="607:53"><name pos:start="607:13" pos:end="607:20">logic_cc</name> <operator pos:start="607:22" pos:end="607:22">=</operator> <operator pos:start="607:24" pos:end="607:24">(</operator><name pos:start="607:25" pos:end="607:29">conds</name> <operator pos:start="607:31" pos:end="607:32">&amp;&amp;</operator> <call pos:start="607:34" pos:end="607:52"><name pos:start="607:34" pos:end="607:48">thumb2_logic_op</name><argument_list pos:start="607:49" pos:end="607:52">(<argument pos:start="607:50" pos:end="607:51"><expr pos:start="607:50" pos:end="607:51"><name pos:start="607:50" pos:end="607:51">op</name></expr></argument>)</argument_list></call><operator pos:start="607:53" pos:end="607:53">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="609:13" pos:end="609:61"><expr pos:start="609:13" pos:end="609:60"><call pos:start="609:13" pos:end="609:60"><name pos:start="609:13" pos:end="609:28">gen_arm_shift_im</name><argument_list pos:start="609:29" pos:end="609:60">(<argument pos:start="609:30" pos:end="609:33"><expr pos:start="609:30" pos:end="609:33"><name pos:start="609:30" pos:end="609:33">tmp2</name></expr></argument>, <argument pos:start="609:36" pos:end="609:42"><expr pos:start="609:36" pos:end="609:42"><name pos:start="609:36" pos:end="609:42">shiftop</name></expr></argument>, <argument pos:start="609:45" pos:end="609:49"><expr pos:start="609:45" pos:end="609:49"><name pos:start="609:45" pos:end="609:49">shift</name></expr></argument>, <argument pos:start="609:52" pos:end="609:59"><expr pos:start="609:52" pos:end="609:59"><name pos:start="609:52" pos:end="609:59">logic_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="611:13" pos:end="613:32"><if pos:start="611:13" pos:end="613:32">if <condition pos:start="611:16" pos:end="611:63">(<expr pos:start="611:17" pos:end="611:62"><call pos:start="611:17" pos:end="611:62"><name pos:start="611:17" pos:end="611:34">gen_thumb2_data_op</name><argument_list pos:start="611:35" pos:end="611:62">(<argument pos:start="611:36" pos:end="611:36"><expr pos:start="611:36" pos:end="611:36"><name pos:start="611:36" pos:end="611:36">s</name></expr></argument>, <argument pos:start="611:39" pos:end="611:40"><expr pos:start="611:39" pos:end="611:40"><name pos:start="611:39" pos:end="611:40">op</name></expr></argument>, <argument pos:start="611:43" pos:end="611:47"><expr pos:start="611:43" pos:end="611:47"><name pos:start="611:43" pos:end="611:47">conds</name></expr></argument>, <argument pos:start="611:50" pos:end="611:50"><expr pos:start="611:50" pos:end="611:50"><literal type="number" pos:start="611:50" pos:end="611:50">0</literal></expr></argument>, <argument pos:start="611:53" pos:end="611:55"><expr pos:start="611:53" pos:end="611:55"><name pos:start="611:53" pos:end="611:55">tmp</name></expr></argument>, <argument pos:start="611:58" pos:end="611:61"><expr pos:start="611:58" pos:end="611:61"><name pos:start="611:58" pos:end="611:61">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="613:17" pos:end="613:32"><block_content pos:start="613:17" pos:end="613:32">

                <goto pos:start="613:17" pos:end="613:32">goto <name pos:start="613:22" pos:end="613:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="615:13" pos:end="615:36"><expr pos:start="615:13" pos:end="615:35"><call pos:start="615:13" pos:end="615:35"><name pos:start="615:13" pos:end="615:29">tcg_temp_free_i32</name><argument_list pos:start="615:30" pos:end="615:35">(<argument pos:start="615:31" pos:end="615:34"><expr pos:start="615:31" pos:end="615:34"><name pos:start="615:31" pos:end="615:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="617:13" pos:end="625:13"><if pos:start="617:13" pos:end="621:13">if <condition pos:start="617:16" pos:end="617:25">(<expr pos:start="617:17" pos:end="617:24"><name pos:start="617:17" pos:end="617:18">rd</name> <operator pos:start="617:20" pos:end="617:21">!=</operator> <literal type="number" pos:start="617:23" pos:end="617:24">15</literal></expr>)</condition> <block pos:start="617:27" pos:end="621:13">{<block_content pos:start="619:17" pos:end="619:38">

                <expr_stmt pos:start="619:17" pos:end="619:38"><expr pos:start="619:17" pos:end="619:37"><call pos:start="619:17" pos:end="619:37"><name pos:start="619:17" pos:end="619:25">store_reg</name><argument_list pos:start="619:26" pos:end="619:37">(<argument pos:start="619:27" pos:end="619:27"><expr pos:start="619:27" pos:end="619:27"><name pos:start="619:27" pos:end="619:27">s</name></expr></argument>, <argument pos:start="619:30" pos:end="619:31"><expr pos:start="619:30" pos:end="619:31"><name pos:start="619:30" pos:end="619:31">rd</name></expr></argument>, <argument pos:start="619:34" pos:end="619:36"><expr pos:start="619:34" pos:end="619:36"><name pos:start="619:34" pos:end="619:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="621:15" pos:end="625:13">else <block pos:start="621:20" pos:end="625:13">{<block_content pos:start="623:17" pos:end="623:39">

                <expr_stmt pos:start="623:17" pos:end="623:39"><expr pos:start="623:17" pos:end="623:38"><call pos:start="623:17" pos:end="623:38"><name pos:start="623:17" pos:end="623:33">tcg_temp_free_i32</name><argument_list pos:start="623:34" pos:end="623:38">(<argument pos:start="623:35" pos:end="623:37"><expr pos:start="623:35" pos:end="623:37"><name pos:start="623:35" pos:end="623:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="629:9" pos:end="629:14">break;</break>

    <case pos:start="631:5" pos:end="631:12">case <expr pos:start="631:10" pos:end="631:11"><literal type="number" pos:start="631:10" pos:end="631:11">13</literal></expr>:</case> <comment type="block" pos:start="631:14" pos:end="631:41">/* Misc data processing.  */</comment>

        <expr_stmt pos:start="633:9" pos:end="633:52"><expr pos:start="633:9" pos:end="633:51"><name pos:start="633:9" pos:end="633:10">op</name> <operator pos:start="633:12" pos:end="633:12">=</operator> <operator pos:start="633:14" pos:end="633:14">(</operator><operator pos:start="633:15" pos:end="633:15">(</operator><name pos:start="633:16" pos:end="633:19">insn</name> <operator pos:start="633:21" pos:end="633:22">&gt;&gt;</operator> <literal type="number" pos:start="633:24" pos:end="633:25">22</literal><operator pos:start="633:26" pos:end="633:26">)</operator> <operator pos:start="633:28" pos:end="633:28">&amp;</operator> <literal type="number" pos:start="633:30" pos:end="633:30">6</literal><operator pos:start="633:31" pos:end="633:31">)</operator> <operator pos:start="633:33" pos:end="633:33">|</operator> <operator pos:start="633:35" pos:end="633:35">(</operator><operator pos:start="633:36" pos:end="633:36">(</operator><name pos:start="633:37" pos:end="633:40">insn</name> <operator pos:start="633:42" pos:end="633:43">&gt;&gt;</operator> <literal type="number" pos:start="633:45" pos:end="633:45">7</literal><operator pos:start="633:46" pos:end="633:46">)</operator> <operator pos:start="633:48" pos:end="633:48">&amp;</operator> <literal type="number" pos:start="633:50" pos:end="633:50">1</literal><operator pos:start="633:51" pos:end="633:51">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="635:9" pos:end="637:28"><if pos:start="635:9" pos:end="637:28">if <condition pos:start="635:12" pos:end="635:48">(<expr pos:start="635:13" pos:end="635:47"><name pos:start="635:13" pos:end="635:14">op</name> <operator pos:start="635:16" pos:end="635:16">&lt;</operator> <literal type="number" pos:start="635:18" pos:end="635:18">4</literal> <operator pos:start="635:20" pos:end="635:21">&amp;&amp;</operator> <operator pos:start="635:23" pos:end="635:23">(</operator><name pos:start="635:24" pos:end="635:27">insn</name> <operator pos:start="635:29" pos:end="635:29">&amp;</operator> <literal type="number" pos:start="635:31" pos:end="635:36">0xf000</literal><operator pos:start="635:37" pos:end="635:37">)</operator> <operator pos:start="635:39" pos:end="635:40">!=</operator> <literal type="number" pos:start="635:42" pos:end="635:47">0xf000</literal></expr>)</condition><block type="pseudo" pos:start="637:13" pos:end="637:28"><block_content pos:start="637:13" pos:end="637:28">

            <goto pos:start="637:13" pos:end="637:28">goto <name pos:start="637:18" pos:end="637:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <switch pos:start="639:9" pos:end="1139:9">switch <condition pos:start="639:16" pos:end="639:19">(<expr pos:start="639:17" pos:end="639:18"><name pos:start="639:17" pos:end="639:18">op</name></expr>)</condition> <block pos:start="639:21" pos:end="1139:9">{<block_content pos:start="641:9" pos:end="1137:18">

        <case pos:start="641:9" pos:end="641:15">case <expr pos:start="641:14" pos:end="641:14"><literal type="number" pos:start="641:14" pos:end="641:14">0</literal></expr>:</case> <comment type="block" pos:start="641:17" pos:end="641:49">/* Register controlled shift.  */</comment>

            <expr_stmt pos:start="643:13" pos:end="643:34"><expr pos:start="643:13" pos:end="643:33"><name pos:start="643:13" pos:end="643:15">tmp</name> <operator pos:start="643:17" pos:end="643:17">=</operator> <call pos:start="643:19" pos:end="643:33"><name pos:start="643:19" pos:end="643:26">load_reg</name><argument_list pos:start="643:27" pos:end="643:33">(<argument pos:start="643:28" pos:end="643:28"><expr pos:start="643:28" pos:end="643:28"><name pos:start="643:28" pos:end="643:28">s</name></expr></argument>, <argument pos:start="643:31" pos:end="643:32"><expr pos:start="643:31" pos:end="643:32"><name pos:start="643:31" pos:end="643:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:35"><expr pos:start="645:13" pos:end="645:34"><name pos:start="645:13" pos:end="645:16">tmp2</name> <operator pos:start="645:18" pos:end="645:18">=</operator> <call pos:start="645:20" pos:end="645:34"><name pos:start="645:20" pos:end="645:27">load_reg</name><argument_list pos:start="645:28" pos:end="645:34">(<argument pos:start="645:29" pos:end="645:29"><expr pos:start="645:29" pos:end="645:29"><name pos:start="645:29" pos:end="645:29">s</name></expr></argument>, <argument pos:start="645:32" pos:end="645:33"><expr pos:start="645:32" pos:end="645:33"><name pos:start="645:32" pos:end="645:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="647:13" pos:end="649:32"><if pos:start="647:13" pos:end="649:32">if <condition pos:start="647:16" pos:end="647:35">(<expr pos:start="647:17" pos:end="647:34"><operator pos:start="647:17" pos:end="647:17">(</operator><name pos:start="647:18" pos:end="647:21">insn</name> <operator pos:start="647:23" pos:end="647:23">&amp;</operator> <literal type="number" pos:start="647:25" pos:end="647:28">0x70</literal><operator pos:start="647:29" pos:end="647:29">)</operator> <operator pos:start="647:31" pos:end="647:32">!=</operator> <literal type="number" pos:start="647:34" pos:end="647:34">0</literal></expr>)</condition><block type="pseudo" pos:start="649:17" pos:end="649:32"><block_content pos:start="649:17" pos:end="649:32">

                <goto pos:start="649:17" pos:end="649:32">goto <name pos:start="649:22" pos:end="649:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="651:13" pos:end="651:34"><expr pos:start="651:13" pos:end="651:33"><name pos:start="651:13" pos:end="651:14">op</name> <operator pos:start="651:16" pos:end="651:16">=</operator> <operator pos:start="651:18" pos:end="651:18">(</operator><name pos:start="651:19" pos:end="651:22">insn</name> <operator pos:start="651:24" pos:end="651:25">&gt;&gt;</operator> <literal type="number" pos:start="651:27" pos:end="651:28">21</literal><operator pos:start="651:29" pos:end="651:29">)</operator> <operator pos:start="651:31" pos:end="651:31">&amp;</operator> <literal type="number" pos:start="651:33" pos:end="651:33">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="653:13" pos:end="653:47"><expr pos:start="653:13" pos:end="653:46"><name pos:start="653:13" pos:end="653:20">logic_cc</name> <operator pos:start="653:22" pos:end="653:22">=</operator> <operator pos:start="653:24" pos:end="653:24">(</operator><name pos:start="653:25" pos:end="653:28">insn</name> <operator pos:start="653:30" pos:end="653:30">&amp;</operator> <operator pos:start="653:32" pos:end="653:32">(</operator><literal type="number" pos:start="653:33" pos:end="653:33">1</literal> <operator pos:start="653:35" pos:end="653:36">&lt;&lt;</operator> <literal type="number" pos:start="653:38" pos:end="653:39">20</literal><operator pos:start="653:40" pos:end="653:40">)</operator><operator pos:start="653:41" pos:end="653:41">)</operator> <operator pos:start="653:43" pos:end="653:44">!=</operator> <literal type="number" pos:start="653:46" pos:end="653:46">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="655:13" pos:end="655:55"><expr pos:start="655:13" pos:end="655:54"><call pos:start="655:13" pos:end="655:54"><name pos:start="655:13" pos:end="655:29">gen_arm_shift_reg</name><argument_list pos:start="655:30" pos:end="655:54">(<argument pos:start="655:31" pos:end="655:33"><expr pos:start="655:31" pos:end="655:33"><name pos:start="655:31" pos:end="655:33">tmp</name></expr></argument>, <argument pos:start="655:36" pos:end="655:37"><expr pos:start="655:36" pos:end="655:37"><name pos:start="655:36" pos:end="655:37">op</name></expr></argument>, <argument pos:start="655:40" pos:end="655:43"><expr pos:start="655:40" pos:end="655:43"><name pos:start="655:40" pos:end="655:43">tmp2</name></expr></argument>, <argument pos:start="655:46" pos:end="655:53"><expr pos:start="655:46" pos:end="655:53"><name pos:start="655:46" pos:end="655:53">logic_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="657:13" pos:end="659:34"><if pos:start="657:13" pos:end="659:34">if <condition pos:start="657:16" pos:end="657:25">(<expr pos:start="657:17" pos:end="657:24"><name pos:start="657:17" pos:end="657:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="659:17" pos:end="659:34"><block_content pos:start="659:17" pos:end="659:34">

                <expr_stmt pos:start="659:17" pos:end="659:34"><expr pos:start="659:17" pos:end="659:33"><call pos:start="659:17" pos:end="659:33"><name pos:start="659:17" pos:end="659:28">gen_logic_CC</name><argument_list pos:start="659:29" pos:end="659:33">(<argument pos:start="659:30" pos:end="659:32"><expr pos:start="659:30" pos:end="659:32"><name pos:start="659:30" pos:end="659:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="661:13" pos:end="661:42"><expr pos:start="661:13" pos:end="661:41"><call pos:start="661:13" pos:end="661:41"><name pos:start="661:13" pos:end="661:24">store_reg_bx</name><argument_list pos:start="661:25" pos:end="661:41">(<argument pos:start="661:26" pos:end="661:28"><expr pos:start="661:26" pos:end="661:28"><name pos:start="661:26" pos:end="661:28">env</name></expr></argument>, <argument pos:start="661:31" pos:end="661:31"><expr pos:start="661:31" pos:end="661:31"><name pos:start="661:31" pos:end="661:31">s</name></expr></argument>, <argument pos:start="661:34" pos:end="661:35"><expr pos:start="661:34" pos:end="661:35"><name pos:start="661:34" pos:end="661:35">rd</name></expr></argument>, <argument pos:start="661:38" pos:end="661:40"><expr pos:start="661:38" pos:end="661:40"><name pos:start="661:38" pos:end="661:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="663:13" pos:end="663:18">break;</break>

        <case pos:start="665:9" pos:end="665:15">case <expr pos:start="665:14" pos:end="665:14"><literal type="number" pos:start="665:14" pos:end="665:14">1</literal></expr>:</case> <comment type="block" pos:start="665:17" pos:end="665:40">/* Sign/zero extend.  */</comment>

            <expr_stmt pos:start="667:13" pos:end="667:34"><expr pos:start="667:13" pos:end="667:33"><name pos:start="667:13" pos:end="667:15">tmp</name> <operator pos:start="667:17" pos:end="667:17">=</operator> <call pos:start="667:19" pos:end="667:33"><name pos:start="667:19" pos:end="667:26">load_reg</name><argument_list pos:start="667:27" pos:end="667:33">(<argument pos:start="667:28" pos:end="667:28"><expr pos:start="667:28" pos:end="667:28"><name pos:start="667:28" pos:end="667:28">s</name></expr></argument>, <argument pos:start="667:31" pos:end="667:32"><expr pos:start="667:31" pos:end="667:32"><name pos:start="667:31" pos:end="667:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="669:13" pos:end="669:36"><expr pos:start="669:13" pos:end="669:35"><name pos:start="669:13" pos:end="669:17">shift</name> <operator pos:start="669:19" pos:end="669:19">=</operator> <operator pos:start="669:21" pos:end="669:21">(</operator><name pos:start="669:22" pos:end="669:25">insn</name> <operator pos:start="669:27" pos:end="669:28">&gt;&gt;</operator> <literal type="number" pos:start="669:30" pos:end="669:30">4</literal><operator pos:start="669:31" pos:end="669:31">)</operator> <operator pos:start="669:33" pos:end="669:33">&amp;</operator> <literal type="number" pos:start="669:35" pos:end="669:35">3</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="671:13" pos:end="673:49">/* ??? In many cases it's not neccessary to do a

               rotate, a shift is sufficient.  */</comment>

            <if_stmt pos:start="675:13" pos:end="677:55"><if pos:start="675:13" pos:end="677:55">if <condition pos:start="675:16" pos:end="675:27">(<expr pos:start="675:17" pos:end="675:26"><name pos:start="675:17" pos:end="675:21">shift</name> <operator pos:start="675:23" pos:end="675:24">!=</operator> <literal type="number" pos:start="675:26" pos:end="675:26">0</literal></expr>)</condition><block type="pseudo" pos:start="677:17" pos:end="677:55"><block_content pos:start="677:17" pos:end="677:55">

                <expr_stmt pos:start="677:17" pos:end="677:55"><expr pos:start="677:17" pos:end="677:54"><call pos:start="677:17" pos:end="677:54"><name pos:start="677:17" pos:end="677:33">tcg_gen_rotri_i32</name><argument_list pos:start="677:34" pos:end="677:54">(<argument pos:start="677:35" pos:end="677:37"><expr pos:start="677:35" pos:end="677:37"><name pos:start="677:35" pos:end="677:37">tmp</name></expr></argument>, <argument pos:start="677:40" pos:end="677:42"><expr pos:start="677:40" pos:end="677:42"><name pos:start="677:40" pos:end="677:42">tmp</name></expr></argument>, <argument pos:start="677:45" pos:end="677:53"><expr pos:start="677:45" pos:end="677:53"><name pos:start="677:45" pos:end="677:49">shift</name> <operator pos:start="677:51" pos:end="677:51">*</operator> <literal type="number" pos:start="677:53" pos:end="677:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:34"><expr pos:start="679:13" pos:end="679:33"><name pos:start="679:13" pos:end="679:14">op</name> <operator pos:start="679:16" pos:end="679:16">=</operator> <operator pos:start="679:18" pos:end="679:18">(</operator><name pos:start="679:19" pos:end="679:22">insn</name> <operator pos:start="679:24" pos:end="679:25">&gt;&gt;</operator> <literal type="number" pos:start="679:27" pos:end="679:28">20</literal><operator pos:start="679:29" pos:end="679:29">)</operator> <operator pos:start="679:31" pos:end="679:31">&amp;</operator> <literal type="number" pos:start="679:33" pos:end="679:33">7</literal></expr>;</expr_stmt>

            <switch pos:start="681:13" pos:end="697:13">switch <condition pos:start="681:20" pos:end="681:23">(<expr pos:start="681:21" pos:end="681:22"><name pos:start="681:21" pos:end="681:22">op</name></expr>)</condition> <block pos:start="681:25" pos:end="697:13">{<block_content pos:start="683:13" pos:end="695:37">

            <case pos:start="683:13" pos:end="683:19">case <expr pos:start="683:18" pos:end="683:18"><literal type="number" pos:start="683:18" pos:end="683:18">0</literal></expr>:</case> <expr_stmt pos:start="683:21" pos:end="683:34"><expr pos:start="683:21" pos:end="683:33"><call pos:start="683:21" pos:end="683:33"><name pos:start="683:21" pos:end="683:28">gen_sxth</name><argument_list pos:start="683:29" pos:end="683:33">(<argument pos:start="683:30" pos:end="683:32"><expr pos:start="683:30" pos:end="683:32"><name pos:start="683:30" pos:end="683:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="683:38" pos:end="683:43">break;</break>

            <case pos:start="685:13" pos:end="685:19">case <expr pos:start="685:18" pos:end="685:18"><literal type="number" pos:start="685:18" pos:end="685:18">1</literal></expr>:</case> <expr_stmt pos:start="685:21" pos:end="685:34"><expr pos:start="685:21" pos:end="685:33"><call pos:start="685:21" pos:end="685:33"><name pos:start="685:21" pos:end="685:28">gen_uxth</name><argument_list pos:start="685:29" pos:end="685:33">(<argument pos:start="685:30" pos:end="685:32"><expr pos:start="685:30" pos:end="685:32"><name pos:start="685:30" pos:end="685:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="685:38" pos:end="685:43">break;</break>

            <case pos:start="687:13" pos:end="687:19">case <expr pos:start="687:18" pos:end="687:18"><literal type="number" pos:start="687:18" pos:end="687:18">2</literal></expr>:</case> <expr_stmt pos:start="687:21" pos:end="687:36"><expr pos:start="687:21" pos:end="687:35"><call pos:start="687:21" pos:end="687:35"><name pos:start="687:21" pos:end="687:30">gen_sxtb16</name><argument_list pos:start="687:31" pos:end="687:35">(<argument pos:start="687:32" pos:end="687:34"><expr pos:start="687:32" pos:end="687:34"><name pos:start="687:32" pos:end="687:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="687:38" pos:end="687:43">break;</break>

            <case pos:start="689:13" pos:end="689:19">case <expr pos:start="689:18" pos:end="689:18"><literal type="number" pos:start="689:18" pos:end="689:18">3</literal></expr>:</case> <expr_stmt pos:start="689:21" pos:end="689:36"><expr pos:start="689:21" pos:end="689:35"><call pos:start="689:21" pos:end="689:35"><name pos:start="689:21" pos:end="689:30">gen_uxtb16</name><argument_list pos:start="689:31" pos:end="689:35">(<argument pos:start="689:32" pos:end="689:34"><expr pos:start="689:32" pos:end="689:34"><name pos:start="689:32" pos:end="689:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="689:38" pos:end="689:43">break;</break>

            <case pos:start="691:13" pos:end="691:19">case <expr pos:start="691:18" pos:end="691:18"><literal type="number" pos:start="691:18" pos:end="691:18">4</literal></expr>:</case> <expr_stmt pos:start="691:21" pos:end="691:34"><expr pos:start="691:21" pos:end="691:33"><call pos:start="691:21" pos:end="691:33"><name pos:start="691:21" pos:end="691:28">gen_sxtb</name><argument_list pos:start="691:29" pos:end="691:33">(<argument pos:start="691:30" pos:end="691:32"><expr pos:start="691:30" pos:end="691:32"><name pos:start="691:30" pos:end="691:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="691:38" pos:end="691:43">break;</break>

            <case pos:start="693:13" pos:end="693:19">case <expr pos:start="693:18" pos:end="693:18"><literal type="number" pos:start="693:18" pos:end="693:18">5</literal></expr>:</case> <expr_stmt pos:start="693:21" pos:end="693:34"><expr pos:start="693:21" pos:end="693:33"><call pos:start="693:21" pos:end="693:33"><name pos:start="693:21" pos:end="693:28">gen_uxtb</name><argument_list pos:start="693:29" pos:end="693:33">(<argument pos:start="693:30" pos:end="693:32"><expr pos:start="693:30" pos:end="693:32"><name pos:start="693:30" pos:end="693:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="693:38" pos:end="693:43">break;</break>

            <default pos:start="695:13" pos:end="695:20">default:</default> <goto pos:start="695:22" pos:end="695:37">goto <name pos:start="695:27" pos:end="695:36">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <if_stmt pos:start="699:13" pos:end="715:13"><if pos:start="699:13" pos:end="715:13">if <condition pos:start="699:16" pos:end="699:25">(<expr pos:start="699:17" pos:end="699:24"><name pos:start="699:17" pos:end="699:18">rn</name> <operator pos:start="699:20" pos:end="699:21">!=</operator> <literal type="number" pos:start="699:23" pos:end="699:24">15</literal></expr>)</condition> <block pos:start="699:27" pos:end="715:13">{<block_content pos:start="701:17" pos:end="713:17">

                <expr_stmt pos:start="701:17" pos:end="701:39"><expr pos:start="701:17" pos:end="701:38"><name pos:start="701:17" pos:end="701:20">tmp2</name> <operator pos:start="701:22" pos:end="701:22">=</operator> <call pos:start="701:24" pos:end="701:38"><name pos:start="701:24" pos:end="701:31">load_reg</name><argument_list pos:start="701:32" pos:end="701:38">(<argument pos:start="701:33" pos:end="701:33"><expr pos:start="701:33" pos:end="701:33"><name pos:start="701:33" pos:end="701:33">s</name></expr></argument>, <argument pos:start="701:36" pos:end="701:37"><expr pos:start="701:36" pos:end="701:37"><name pos:start="701:36" pos:end="701:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="703:17" pos:end="713:17"><if pos:start="703:17" pos:end="707:17">if <condition pos:start="703:20" pos:end="703:35">(<expr pos:start="703:21" pos:end="703:34"><operator pos:start="703:21" pos:end="703:21">(</operator><name pos:start="703:22" pos:end="703:23">op</name> <operator pos:start="703:25" pos:end="703:26">&gt;&gt;</operator> <literal type="number" pos:start="703:28" pos:end="703:28">1</literal><operator pos:start="703:29" pos:end="703:29">)</operator> <operator pos:start="703:31" pos:end="703:32">==</operator> <literal type="number" pos:start="703:34" pos:end="703:34">1</literal></expr>)</condition> <block pos:start="703:37" pos:end="707:17">{<block_content pos:start="705:21" pos:end="705:41">

                    <expr_stmt pos:start="705:21" pos:end="705:41"><expr pos:start="705:21" pos:end="705:40"><call pos:start="705:21" pos:end="705:40"><name pos:start="705:21" pos:end="705:29">gen_add16</name><argument_list pos:start="705:30" pos:end="705:40">(<argument pos:start="705:31" pos:end="705:33"><expr pos:start="705:31" pos:end="705:33"><name pos:start="705:31" pos:end="705:33">tmp</name></expr></argument>, <argument pos:start="705:36" pos:end="705:39"><expr pos:start="705:36" pos:end="705:39"><name pos:start="705:36" pos:end="705:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="707:19" pos:end="713:17">else <block pos:start="707:24" pos:end="713:17">{<block_content pos:start="709:21" pos:end="711:44">

                    <expr_stmt pos:start="709:21" pos:end="709:52"><expr pos:start="709:21" pos:end="709:51"><call pos:start="709:21" pos:end="709:51"><name pos:start="709:21" pos:end="709:35">tcg_gen_add_i32</name><argument_list pos:start="709:36" pos:end="709:51">(<argument pos:start="709:37" pos:end="709:39"><expr pos:start="709:37" pos:end="709:39"><name pos:start="709:37" pos:end="709:39">tmp</name></expr></argument>, <argument pos:start="709:42" pos:end="709:44"><expr pos:start="709:42" pos:end="709:44"><name pos:start="709:42" pos:end="709:44">tmp</name></expr></argument>, <argument pos:start="709:47" pos:end="709:50"><expr pos:start="709:47" pos:end="709:50"><name pos:start="709:47" pos:end="709:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="711:21" pos:end="711:44"><expr pos:start="711:21" pos:end="711:43"><call pos:start="711:21" pos:end="711:43"><name pos:start="711:21" pos:end="711:37">tcg_temp_free_i32</name><argument_list pos:start="711:38" pos:end="711:43">(<argument pos:start="711:39" pos:end="711:42"><expr pos:start="711:39" pos:end="711:42"><name pos:start="711:39" pos:end="711:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="717:13" pos:end="717:34"><expr pos:start="717:13" pos:end="717:33"><call pos:start="717:13" pos:end="717:33"><name pos:start="717:13" pos:end="717:21">store_reg</name><argument_list pos:start="717:22" pos:end="717:33">(<argument pos:start="717:23" pos:end="717:23"><expr pos:start="717:23" pos:end="717:23"><name pos:start="717:23" pos:end="717:23">s</name></expr></argument>, <argument pos:start="717:26" pos:end="717:27"><expr pos:start="717:26" pos:end="717:27"><name pos:start="717:26" pos:end="717:27">rd</name></expr></argument>, <argument pos:start="717:30" pos:end="717:32"><expr pos:start="717:30" pos:end="717:32"><name pos:start="717:30" pos:end="717:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="719:13" pos:end="719:18">break;</break>

        <case pos:start="721:9" pos:end="721:15">case <expr pos:start="721:14" pos:end="721:14"><literal type="number" pos:start="721:14" pos:end="721:14">2</literal></expr>:</case> <comment type="block" pos:start="721:17" pos:end="721:41">/* SIMD add/subtract.  */</comment>

            <expr_stmt pos:start="723:13" pos:end="723:34"><expr pos:start="723:13" pos:end="723:33"><name pos:start="723:13" pos:end="723:14">op</name> <operator pos:start="723:16" pos:end="723:16">=</operator> <operator pos:start="723:18" pos:end="723:18">(</operator><name pos:start="723:19" pos:end="723:22">insn</name> <operator pos:start="723:24" pos:end="723:25">&gt;&gt;</operator> <literal type="number" pos:start="723:27" pos:end="723:28">20</literal><operator pos:start="723:29" pos:end="723:29">)</operator> <operator pos:start="723:31" pos:end="723:31">&amp;</operator> <literal type="number" pos:start="723:33" pos:end="723:33">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="725:13" pos:end="725:36"><expr pos:start="725:13" pos:end="725:35"><name pos:start="725:13" pos:end="725:17">shift</name> <operator pos:start="725:19" pos:end="725:19">=</operator> <operator pos:start="725:21" pos:end="725:21">(</operator><name pos:start="725:22" pos:end="725:25">insn</name> <operator pos:start="725:27" pos:end="725:28">&gt;&gt;</operator> <literal type="number" pos:start="725:30" pos:end="725:30">4</literal><operator pos:start="725:31" pos:end="725:31">)</operator> <operator pos:start="725:33" pos:end="725:33">&amp;</operator> <literal type="number" pos:start="725:35" pos:end="725:35">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="727:13" pos:end="729:32"><if pos:start="727:13" pos:end="729:32">if <condition pos:start="727:16" pos:end="727:50">(<expr pos:start="727:17" pos:end="727:49"><operator pos:start="727:17" pos:end="727:17">(</operator><name pos:start="727:18" pos:end="727:19">op</name> <operator pos:start="727:21" pos:end="727:21">&amp;</operator> <literal type="number" pos:start="727:23" pos:end="727:23">3</literal><operator pos:start="727:24" pos:end="727:24">)</operator> <operator pos:start="727:26" pos:end="727:27">==</operator> <literal type="number" pos:start="727:29" pos:end="727:29">3</literal> <operator pos:start="727:31" pos:end="727:32">||</operator> <operator pos:start="727:34" pos:end="727:34">(</operator><name pos:start="727:35" pos:end="727:39">shift</name> <operator pos:start="727:41" pos:end="727:41">&amp;</operator> <literal type="number" pos:start="727:43" pos:end="727:43">3</literal><operator pos:start="727:44" pos:end="727:44">)</operator> <operator pos:start="727:46" pos:end="727:47">==</operator> <literal type="number" pos:start="727:49" pos:end="727:49">3</literal></expr>)</condition><block type="pseudo" pos:start="729:17" pos:end="729:32"><block_content pos:start="729:17" pos:end="729:32">

                <goto pos:start="729:17" pos:end="729:32">goto <name pos:start="729:22" pos:end="729:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:34"><expr pos:start="731:13" pos:end="731:33"><name pos:start="731:13" pos:end="731:15">tmp</name> <operator pos:start="731:17" pos:end="731:17">=</operator> <call pos:start="731:19" pos:end="731:33"><name pos:start="731:19" pos:end="731:26">load_reg</name><argument_list pos:start="731:27" pos:end="731:33">(<argument pos:start="731:28" pos:end="731:28"><expr pos:start="731:28" pos:end="731:28"><name pos:start="731:28" pos:end="731:28">s</name></expr></argument>, <argument pos:start="731:31" pos:end="731:32"><expr pos:start="731:31" pos:end="731:32"><name pos:start="731:31" pos:end="731:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:35"><expr pos:start="733:13" pos:end="733:34"><name pos:start="733:13" pos:end="733:16">tmp2</name> <operator pos:start="733:18" pos:end="733:18">=</operator> <call pos:start="733:20" pos:end="733:34"><name pos:start="733:20" pos:end="733:27">load_reg</name><argument_list pos:start="733:28" pos:end="733:34">(<argument pos:start="733:29" pos:end="733:29"><expr pos:start="733:29" pos:end="733:29"><name pos:start="733:29" pos:end="733:29">s</name></expr></argument>, <argument pos:start="733:32" pos:end="733:33"><expr pos:start="733:32" pos:end="733:33"><name pos:start="733:32" pos:end="733:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:61"><expr pos:start="735:13" pos:end="735:60"><call pos:start="735:13" pos:end="735:60"><name pos:start="735:13" pos:end="735:38">gen_thumb2_parallel_addsub</name><argument_list pos:start="735:39" pos:end="735:60">(<argument pos:start="735:40" pos:end="735:41"><expr pos:start="735:40" pos:end="735:41"><name pos:start="735:40" pos:end="735:41">op</name></expr></argument>, <argument pos:start="735:44" pos:end="735:48"><expr pos:start="735:44" pos:end="735:48"><name pos:start="735:44" pos:end="735:48">shift</name></expr></argument>, <argument pos:start="735:51" pos:end="735:53"><expr pos:start="735:51" pos:end="735:53"><name pos:start="735:51" pos:end="735:53">tmp</name></expr></argument>, <argument pos:start="735:56" pos:end="735:59"><expr pos:start="735:56" pos:end="735:59"><name pos:start="735:56" pos:end="735:59">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:36"><expr pos:start="737:13" pos:end="737:35"><call pos:start="737:13" pos:end="737:35"><name pos:start="737:13" pos:end="737:29">tcg_temp_free_i32</name><argument_list pos:start="737:30" pos:end="737:35">(<argument pos:start="737:31" pos:end="737:34"><expr pos:start="737:31" pos:end="737:34"><name pos:start="737:31" pos:end="737:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:34"><expr pos:start="739:13" pos:end="739:33"><call pos:start="739:13" pos:end="739:33"><name pos:start="739:13" pos:end="739:21">store_reg</name><argument_list pos:start="739:22" pos:end="739:33">(<argument pos:start="739:23" pos:end="739:23"><expr pos:start="739:23" pos:end="739:23"><name pos:start="739:23" pos:end="739:23">s</name></expr></argument>, <argument pos:start="739:26" pos:end="739:27"><expr pos:start="739:26" pos:end="739:27"><name pos:start="739:26" pos:end="739:27">rd</name></expr></argument>, <argument pos:start="739:30" pos:end="739:32"><expr pos:start="739:30" pos:end="739:32"><name pos:start="739:30" pos:end="739:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="741:13" pos:end="741:18">break;</break>

        <case pos:start="743:9" pos:end="743:15">case <expr pos:start="743:14" pos:end="743:14"><literal type="number" pos:start="743:14" pos:end="743:14">3</literal></expr>:</case> <comment type="block" pos:start="743:17" pos:end="743:45">/* Other data processing.  */</comment>

            <expr_stmt pos:start="745:13" pos:end="745:59"><expr pos:start="745:13" pos:end="745:58"><name pos:start="745:13" pos:end="745:14">op</name> <operator pos:start="745:16" pos:end="745:16">=</operator> <operator pos:start="745:18" pos:end="745:18">(</operator><operator pos:start="745:19" pos:end="745:19">(</operator><name pos:start="745:20" pos:end="745:23">insn</name> <operator pos:start="745:25" pos:end="745:26">&gt;&gt;</operator> <literal type="number" pos:start="745:28" pos:end="745:29">17</literal><operator pos:start="745:30" pos:end="745:30">)</operator> <operator pos:start="745:32" pos:end="745:32">&amp;</operator> <literal type="number" pos:start="745:34" pos:end="745:37">0x38</literal><operator pos:start="745:38" pos:end="745:38">)</operator> <operator pos:start="745:40" pos:end="745:40">|</operator> <operator pos:start="745:42" pos:end="745:42">(</operator><operator pos:start="745:43" pos:end="745:43">(</operator><name pos:start="745:44" pos:end="745:47">insn</name> <operator pos:start="745:49" pos:end="745:50">&gt;&gt;</operator> <literal type="number" pos:start="745:52" pos:end="745:52">4</literal><operator pos:start="745:53" pos:end="745:53">)</operator> <operator pos:start="745:55" pos:end="745:55">&amp;</operator> <literal type="number" pos:start="745:57" pos:end="745:57">7</literal><operator pos:start="745:58" pos:end="745:58">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="747:13" pos:end="827:13"><if pos:start="747:13" pos:end="769:13">if <condition pos:start="747:16" pos:end="747:23">(<expr pos:start="747:17" pos:end="747:22"><name pos:start="747:17" pos:end="747:18">op</name> <operator pos:start="747:20" pos:end="747:20">&lt;</operator> <literal type="number" pos:start="747:22" pos:end="747:22">4</literal></expr>)</condition> <block pos:start="747:25" pos:end="769:13">{<block_content pos:start="751:17" pos:end="767:40">

                <comment type="block" pos:start="749:17" pos:end="749:47">/* Saturating add/subtract.  */</comment>

                <expr_stmt pos:start="751:17" pos:end="751:38"><expr pos:start="751:17" pos:end="751:37"><name pos:start="751:17" pos:end="751:19">tmp</name> <operator pos:start="751:21" pos:end="751:21">=</operator> <call pos:start="751:23" pos:end="751:37"><name pos:start="751:23" pos:end="751:30">load_reg</name><argument_list pos:start="751:31" pos:end="751:37">(<argument pos:start="751:32" pos:end="751:32"><expr pos:start="751:32" pos:end="751:32"><name pos:start="751:32" pos:end="751:32">s</name></expr></argument>, <argument pos:start="751:35" pos:end="751:36"><expr pos:start="751:35" pos:end="751:36"><name pos:start="751:35" pos:end="751:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="753:17" pos:end="753:39"><expr pos:start="753:17" pos:end="753:38"><name pos:start="753:17" pos:end="753:20">tmp2</name> <operator pos:start="753:22" pos:end="753:22">=</operator> <call pos:start="753:24" pos:end="753:38"><name pos:start="753:24" pos:end="753:31">load_reg</name><argument_list pos:start="753:32" pos:end="753:38">(<argument pos:start="753:33" pos:end="753:33"><expr pos:start="753:33" pos:end="753:33"><name pos:start="753:33" pos:end="753:33">s</name></expr></argument>, <argument pos:start="753:36" pos:end="753:37"><expr pos:start="753:36" pos:end="753:37"><name pos:start="753:36" pos:end="753:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="755:17" pos:end="757:57"><if pos:start="755:17" pos:end="757:57">if <condition pos:start="755:20" pos:end="755:27">(<expr pos:start="755:21" pos:end="755:26"><name pos:start="755:21" pos:end="755:22">op</name> <operator pos:start="755:24" pos:end="755:24">&amp;</operator> <literal type="number" pos:start="755:26" pos:end="755:26">1</literal></expr>)</condition><block type="pseudo" pos:start="757:21" pos:end="757:57"><block_content pos:start="757:21" pos:end="757:57">

                    <expr_stmt pos:start="757:21" pos:end="757:57"><expr pos:start="757:21" pos:end="757:56"><call pos:start="757:21" pos:end="757:56"><name pos:start="757:21" pos:end="757:46">gen_helper_double_saturate</name><argument_list pos:start="757:47" pos:end="757:56">(<argument pos:start="757:48" pos:end="757:50"><expr pos:start="757:48" pos:end="757:50"><name pos:start="757:48" pos:end="757:50">tmp</name></expr></argument>, <argument pos:start="757:53" pos:end="757:55"><expr pos:start="757:53" pos:end="757:55"><name pos:start="757:53" pos:end="757:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="759:17" pos:end="765:60"><if pos:start="759:17" pos:end="761:60">if <condition pos:start="759:20" pos:end="759:27">(<expr pos:start="759:21" pos:end="759:26"><name pos:start="759:21" pos:end="759:22">op</name> <operator pos:start="759:24" pos:end="759:24">&amp;</operator> <literal type="number" pos:start="759:26" pos:end="759:26">2</literal></expr>)</condition><block type="pseudo" pos:start="761:21" pos:end="761:60"><block_content pos:start="761:21" pos:end="761:60">

                    <expr_stmt pos:start="761:21" pos:end="761:60"><expr pos:start="761:21" pos:end="761:59"><call pos:start="761:21" pos:end="761:59"><name pos:start="761:21" pos:end="761:43">gen_helper_sub_saturate</name><argument_list pos:start="761:44" pos:end="761:59">(<argument pos:start="761:45" pos:end="761:47"><expr pos:start="761:45" pos:end="761:47"><name pos:start="761:45" pos:end="761:47">tmp</name></expr></argument>, <argument pos:start="761:50" pos:end="761:53"><expr pos:start="761:50" pos:end="761:53"><name pos:start="761:50" pos:end="761:53">tmp2</name></expr></argument>, <argument pos:start="761:56" pos:end="761:58"><expr pos:start="761:56" pos:end="761:58"><name pos:start="761:56" pos:end="761:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="763:17" pos:end="765:60">else<block type="pseudo" pos:start="765:21" pos:end="765:60"><block_content pos:start="765:21" pos:end="765:60">

                    <expr_stmt pos:start="765:21" pos:end="765:60"><expr pos:start="765:21" pos:end="765:59"><call pos:start="765:21" pos:end="765:59"><name pos:start="765:21" pos:end="765:43">gen_helper_add_saturate</name><argument_list pos:start="765:44" pos:end="765:59">(<argument pos:start="765:45" pos:end="765:47"><expr pos:start="765:45" pos:end="765:47"><name pos:start="765:45" pos:end="765:47">tmp</name></expr></argument>, <argument pos:start="765:50" pos:end="765:52"><expr pos:start="765:50" pos:end="765:52"><name pos:start="765:50" pos:end="765:52">tmp</name></expr></argument>, <argument pos:start="765:55" pos:end="765:58"><expr pos:start="765:55" pos:end="765:58"><name pos:start="765:55" pos:end="765:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="767:17" pos:end="767:40"><expr pos:start="767:17" pos:end="767:39"><call pos:start="767:17" pos:end="767:39"><name pos:start="767:17" pos:end="767:33">tcg_temp_free_i32</name><argument_list pos:start="767:34" pos:end="767:39">(<argument pos:start="767:35" pos:end="767:38"><expr pos:start="767:35" pos:end="767:38"><name pos:start="767:35" pos:end="767:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="769:15" pos:end="827:13">else <block pos:start="769:20" pos:end="827:13">{<block_content pos:start="771:17" pos:end="825:17">

                <expr_stmt pos:start="771:17" pos:end="771:38"><expr pos:start="771:17" pos:end="771:37"><name pos:start="771:17" pos:end="771:19">tmp</name> <operator pos:start="771:21" pos:end="771:21">=</operator> <call pos:start="771:23" pos:end="771:37"><name pos:start="771:23" pos:end="771:30">load_reg</name><argument_list pos:start="771:31" pos:end="771:37">(<argument pos:start="771:32" pos:end="771:32"><expr pos:start="771:32" pos:end="771:32"><name pos:start="771:32" pos:end="771:32">s</name></expr></argument>, <argument pos:start="771:35" pos:end="771:36"><expr pos:start="771:35" pos:end="771:36"><name pos:start="771:35" pos:end="771:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="773:17" pos:end="825:17">switch <condition pos:start="773:24" pos:end="773:27">(<expr pos:start="773:25" pos:end="773:26"><name pos:start="773:25" pos:end="773:26">op</name></expr>)</condition> <block pos:start="773:29" pos:end="825:17">{<block_content pos:start="775:17" pos:end="823:36">

                <case pos:start="775:17" pos:end="775:26">case <expr pos:start="775:22" pos:end="775:25"><literal type="number" pos:start="775:22" pos:end="775:25">0x0a</literal></expr>:</case> <comment type="block" pos:start="775:28" pos:end="775:37">/* rbit */</comment>

                    <expr_stmt pos:start="777:21" pos:end="777:46"><expr pos:start="777:21" pos:end="777:45"><call pos:start="777:21" pos:end="777:45"><name pos:start="777:21" pos:end="777:35">gen_helper_rbit</name><argument_list pos:start="777:36" pos:end="777:45">(<argument pos:start="777:37" pos:end="777:39"><expr pos:start="777:37" pos:end="777:39"><name pos:start="777:37" pos:end="777:39">tmp</name></expr></argument>, <argument pos:start="777:42" pos:end="777:44"><expr pos:start="777:42" pos:end="777:44"><name pos:start="777:42" pos:end="777:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="779:21" pos:end="779:26">break;</break>

                <case pos:start="781:17" pos:end="781:26">case <expr pos:start="781:22" pos:end="781:25"><literal type="number" pos:start="781:22" pos:end="781:25">0x08</literal></expr>:</case> <comment type="block" pos:start="781:28" pos:end="781:36">/* rev */</comment>

                    <expr_stmt pos:start="783:21" pos:end="783:50"><expr pos:start="783:21" pos:end="783:49"><call pos:start="783:21" pos:end="783:49"><name pos:start="783:21" pos:end="783:39">tcg_gen_bswap32_i32</name><argument_list pos:start="783:40" pos:end="783:49">(<argument pos:start="783:41" pos:end="783:43"><expr pos:start="783:41" pos:end="783:43"><name pos:start="783:41" pos:end="783:43">tmp</name></expr></argument>, <argument pos:start="783:46" pos:end="783:48"><expr pos:start="783:46" pos:end="783:48"><name pos:start="783:46" pos:end="783:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="785:21" pos:end="785:26">break;</break>

                <case pos:start="787:17" pos:end="787:26">case <expr pos:start="787:22" pos:end="787:25"><literal type="number" pos:start="787:22" pos:end="787:25">0x09</literal></expr>:</case> <comment type="block" pos:start="787:28" pos:end="787:38">/* rev16 */</comment>

                    <expr_stmt pos:start="789:21" pos:end="789:35"><expr pos:start="789:21" pos:end="789:34"><call pos:start="789:21" pos:end="789:34"><name pos:start="789:21" pos:end="789:29">gen_rev16</name><argument_list pos:start="789:30" pos:end="789:34">(<argument pos:start="789:31" pos:end="789:33"><expr pos:start="789:31" pos:end="789:33"><name pos:start="789:31" pos:end="789:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="791:21" pos:end="791:26">break;</break>

                <case pos:start="793:17" pos:end="793:26">case <expr pos:start="793:22" pos:end="793:25"><literal type="number" pos:start="793:22" pos:end="793:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="793:28" pos:end="793:38">/* revsh */</comment>

                    <expr_stmt pos:start="795:21" pos:end="795:35"><expr pos:start="795:21" pos:end="795:34"><call pos:start="795:21" pos:end="795:34"><name pos:start="795:21" pos:end="795:29">gen_revsh</name><argument_list pos:start="795:30" pos:end="795:34">(<argument pos:start="795:31" pos:end="795:33"><expr pos:start="795:31" pos:end="795:33"><name pos:start="795:31" pos:end="795:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="797:21" pos:end="797:26">break;</break>

                <case pos:start="799:17" pos:end="799:26">case <expr pos:start="799:22" pos:end="799:25"><literal type="number" pos:start="799:22" pos:end="799:25">0x10</literal></expr>:</case> <comment type="block" pos:start="799:28" pos:end="799:36">/* sel */</comment>

                    <expr_stmt pos:start="801:21" pos:end="801:43"><expr pos:start="801:21" pos:end="801:42"><name pos:start="801:21" pos:end="801:24">tmp2</name> <operator pos:start="801:26" pos:end="801:26">=</operator> <call pos:start="801:28" pos:end="801:42"><name pos:start="801:28" pos:end="801:35">load_reg</name><argument_list pos:start="801:36" pos:end="801:42">(<argument pos:start="801:37" pos:end="801:37"><expr pos:start="801:37" pos:end="801:37"><name pos:start="801:37" pos:end="801:37">s</name></expr></argument>, <argument pos:start="801:40" pos:end="801:41"><expr pos:start="801:40" pos:end="801:41"><name pos:start="801:40" pos:end="801:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="803:21" pos:end="803:46"><expr pos:start="803:21" pos:end="803:45"><name pos:start="803:21" pos:end="803:24">tmp3</name> <operator pos:start="803:26" pos:end="803:26">=</operator> <call pos:start="803:28" pos:end="803:45"><name pos:start="803:28" pos:end="803:43">tcg_temp_new_i32</name><argument_list pos:start="803:44" pos:end="803:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="805:21" pos:end="805:74"><expr pos:start="805:21" pos:end="805:73"><call pos:start="805:21" pos:end="805:73"><name pos:start="805:21" pos:end="805:34">tcg_gen_ld_i32</name><argument_list pos:start="805:35" pos:end="805:73">(<argument pos:start="805:36" pos:end="805:39"><expr pos:start="805:36" pos:end="805:39"><name pos:start="805:36" pos:end="805:39">tmp3</name></expr></argument>, <argument pos:start="805:42" pos:end="805:48"><expr pos:start="805:42" pos:end="805:48"><name pos:start="805:42" pos:end="805:48">cpu_env</name></expr></argument>, <argument pos:start="805:51" pos:end="805:72"><expr pos:start="805:51" pos:end="805:72"><call pos:start="805:51" pos:end="805:72"><name pos:start="805:51" pos:end="805:58">offsetof</name><argument_list pos:start="805:59" pos:end="805:72">(<argument pos:start="805:60" pos:end="805:67"><expr pos:start="805:60" pos:end="805:67"><name pos:start="805:60" pos:end="805:67">CPUState</name></expr></argument>, <argument pos:start="805:70" pos:end="805:71"><expr pos:start="805:70" pos:end="805:71"><name pos:start="805:70" pos:end="805:71">GE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="807:21" pos:end="807:63"><expr pos:start="807:21" pos:end="807:62"><call pos:start="807:21" pos:end="807:62"><name pos:start="807:21" pos:end="807:40">gen_helper_sel_flags</name><argument_list pos:start="807:41" pos:end="807:62">(<argument pos:start="807:42" pos:end="807:44"><expr pos:start="807:42" pos:end="807:44"><name pos:start="807:42" pos:end="807:44">tmp</name></expr></argument>, <argument pos:start="807:47" pos:end="807:50"><expr pos:start="807:47" pos:end="807:50"><name pos:start="807:47" pos:end="807:50">tmp3</name></expr></argument>, <argument pos:start="807:53" pos:end="807:55"><expr pos:start="807:53" pos:end="807:55"><name pos:start="807:53" pos:end="807:55">tmp</name></expr></argument>, <argument pos:start="807:58" pos:end="807:61"><expr pos:start="807:58" pos:end="807:61"><name pos:start="807:58" pos:end="807:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="809:21" pos:end="809:44"><expr pos:start="809:21" pos:end="809:43"><call pos:start="809:21" pos:end="809:43"><name pos:start="809:21" pos:end="809:37">tcg_temp_free_i32</name><argument_list pos:start="809:38" pos:end="809:43">(<argument pos:start="809:39" pos:end="809:42"><expr pos:start="809:39" pos:end="809:42"><name pos:start="809:39" pos:end="809:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="811:21" pos:end="811:44"><expr pos:start="811:21" pos:end="811:43"><call pos:start="811:21" pos:end="811:43"><name pos:start="811:21" pos:end="811:37">tcg_temp_free_i32</name><argument_list pos:start="811:38" pos:end="811:43">(<argument pos:start="811:39" pos:end="811:42"><expr pos:start="811:39" pos:end="811:42"><name pos:start="811:39" pos:end="811:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="813:21" pos:end="813:26">break;</break>

                <case pos:start="815:17" pos:end="815:26">case <expr pos:start="815:22" pos:end="815:25"><literal type="number" pos:start="815:22" pos:end="815:25">0x18</literal></expr>:</case> <comment type="block" pos:start="815:28" pos:end="815:36">/* clz */</comment>

                    <expr_stmt pos:start="817:21" pos:end="817:45"><expr pos:start="817:21" pos:end="817:44"><call pos:start="817:21" pos:end="817:44"><name pos:start="817:21" pos:end="817:34">gen_helper_clz</name><argument_list pos:start="817:35" pos:end="817:44">(<argument pos:start="817:36" pos:end="817:38"><expr pos:start="817:36" pos:end="817:38"><name pos:start="817:36" pos:end="817:38">tmp</name></expr></argument>, <argument pos:start="817:41" pos:end="817:43"><expr pos:start="817:41" pos:end="817:43"><name pos:start="817:41" pos:end="817:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="819:21" pos:end="819:26">break;</break>

                <default pos:start="821:17" pos:end="821:24">default:</default>

                    <goto pos:start="823:21" pos:end="823:36">goto <name pos:start="823:26" pos:end="823:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="829:13" pos:end="829:34"><expr pos:start="829:13" pos:end="829:33"><call pos:start="829:13" pos:end="829:33"><name pos:start="829:13" pos:end="829:21">store_reg</name><argument_list pos:start="829:22" pos:end="829:33">(<argument pos:start="829:23" pos:end="829:23"><expr pos:start="829:23" pos:end="829:23"><name pos:start="829:23" pos:end="829:23">s</name></expr></argument>, <argument pos:start="829:26" pos:end="829:27"><expr pos:start="829:26" pos:end="829:27"><name pos:start="829:26" pos:end="829:27">rd</name></expr></argument>, <argument pos:start="829:30" pos:end="829:32"><expr pos:start="829:30" pos:end="829:32"><name pos:start="829:30" pos:end="829:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="831:13" pos:end="831:18">break;</break>

        <case pos:start="833:9" pos:end="833:15">case <expr pos:start="833:14" pos:end="833:14"><literal type="number" pos:start="833:14" pos:end="833:14">4</literal></expr>:</case> <case pos:start="833:17" pos:end="833:23">case <expr pos:start="833:22" pos:end="833:22"><literal type="number" pos:start="833:22" pos:end="833:22">5</literal></expr>:</case> <comment type="block" pos:start="833:25" pos:end="833:77">/* 32-bit multiply.  Sum of absolute differences.  */</comment>

            <expr_stmt pos:start="835:13" pos:end="835:35"><expr pos:start="835:13" pos:end="835:34"><name pos:start="835:13" pos:end="835:14">op</name> <operator pos:start="835:16" pos:end="835:16">=</operator> <operator pos:start="835:18" pos:end="835:18">(</operator><name pos:start="835:19" pos:end="835:22">insn</name> <operator pos:start="835:24" pos:end="835:25">&gt;&gt;</operator> <literal type="number" pos:start="835:27" pos:end="835:27">4</literal><operator pos:start="835:28" pos:end="835:28">)</operator> <operator pos:start="835:30" pos:end="835:30">&amp;</operator> <literal type="number" pos:start="835:32" pos:end="835:34">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="837:13" pos:end="837:34"><expr pos:start="837:13" pos:end="837:33"><name pos:start="837:13" pos:end="837:15">tmp</name> <operator pos:start="837:17" pos:end="837:17">=</operator> <call pos:start="837:19" pos:end="837:33"><name pos:start="837:19" pos:end="837:26">load_reg</name><argument_list pos:start="837:27" pos:end="837:33">(<argument pos:start="837:28" pos:end="837:28"><expr pos:start="837:28" pos:end="837:28"><name pos:start="837:28" pos:end="837:28">s</name></expr></argument>, <argument pos:start="837:31" pos:end="837:32"><expr pos:start="837:31" pos:end="837:32"><name pos:start="837:31" pos:end="837:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="839:13" pos:end="839:35"><expr pos:start="839:13" pos:end="839:34"><name pos:start="839:13" pos:end="839:16">tmp2</name> <operator pos:start="839:18" pos:end="839:18">=</operator> <call pos:start="839:20" pos:end="839:34"><name pos:start="839:20" pos:end="839:27">load_reg</name><argument_list pos:start="839:28" pos:end="839:34">(<argument pos:start="839:29" pos:end="839:29"><expr pos:start="839:29" pos:end="839:29"><name pos:start="839:29" pos:end="839:29">s</name></expr></argument>, <argument pos:start="839:32" pos:end="839:33"><expr pos:start="839:32" pos:end="839:33"><name pos:start="839:32" pos:end="839:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="841:13" pos:end="1011:13">switch <condition pos:start="841:20" pos:end="841:37">(<expr pos:start="841:21" pos:end="841:36"><operator pos:start="841:21" pos:end="841:21">(</operator><name pos:start="841:22" pos:end="841:25">insn</name> <operator pos:start="841:27" pos:end="841:28">&gt;&gt;</operator> <literal type="number" pos:start="841:30" pos:end="841:31">20</literal><operator pos:start="841:32" pos:end="841:32">)</operator> <operator pos:start="841:34" pos:end="841:34">&amp;</operator> <literal type="number" pos:start="841:36" pos:end="841:36">7</literal></expr>)</condition> <block pos:start="841:39" pos:end="1011:13">{<block_content pos:start="843:13" pos:end="1009:22">

            <case pos:start="843:13" pos:end="843:19">case <expr pos:start="843:18" pos:end="843:18"><literal type="number" pos:start="843:18" pos:end="843:18">0</literal></expr>:</case> <comment type="block" pos:start="843:21" pos:end="843:39">/* 32 x 32 -&gt; 32 */</comment>

                <expr_stmt pos:start="845:17" pos:end="845:48"><expr pos:start="845:17" pos:end="845:47"><call pos:start="845:17" pos:end="845:47"><name pos:start="845:17" pos:end="845:31">tcg_gen_mul_i32</name><argument_list pos:start="845:32" pos:end="845:47">(<argument pos:start="845:33" pos:end="845:35"><expr pos:start="845:33" pos:end="845:35"><name pos:start="845:33" pos:end="845:35">tmp</name></expr></argument>, <argument pos:start="845:38" pos:end="845:40"><expr pos:start="845:38" pos:end="845:40"><name pos:start="845:38" pos:end="845:40">tmp</name></expr></argument>, <argument pos:start="845:43" pos:end="845:46"><expr pos:start="845:43" pos:end="845:46"><name pos:start="845:43" pos:end="845:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="847:17" pos:end="847:40"><expr pos:start="847:17" pos:end="847:39"><call pos:start="847:17" pos:end="847:39"><name pos:start="847:17" pos:end="847:33">tcg_temp_free_i32</name><argument_list pos:start="847:34" pos:end="847:39">(<argument pos:start="847:35" pos:end="847:38"><expr pos:start="847:35" pos:end="847:38"><name pos:start="847:35" pos:end="847:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="849:17" pos:end="863:17"><if pos:start="849:17" pos:end="863:17">if <condition pos:start="849:20" pos:end="849:29">(<expr pos:start="849:21" pos:end="849:28"><name pos:start="849:21" pos:end="849:22">rs</name> <operator pos:start="849:24" pos:end="849:25">!=</operator> <literal type="number" pos:start="849:27" pos:end="849:28">15</literal></expr>)</condition> <block pos:start="849:31" pos:end="863:17">{<block_content pos:start="851:21" pos:end="861:44">

                    <expr_stmt pos:start="851:21" pos:end="851:43"><expr pos:start="851:21" pos:end="851:42"><name pos:start="851:21" pos:end="851:24">tmp2</name> <operator pos:start="851:26" pos:end="851:26">=</operator> <call pos:start="851:28" pos:end="851:42"><name pos:start="851:28" pos:end="851:35">load_reg</name><argument_list pos:start="851:36" pos:end="851:42">(<argument pos:start="851:37" pos:end="851:37"><expr pos:start="851:37" pos:end="851:37"><name pos:start="851:37" pos:end="851:37">s</name></expr></argument>, <argument pos:start="851:40" pos:end="851:41"><expr pos:start="851:40" pos:end="851:41"><name pos:start="851:40" pos:end="851:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="853:21" pos:end="859:56"><if pos:start="853:21" pos:end="855:56">if <condition pos:start="853:24" pos:end="853:27">(<expr pos:start="853:25" pos:end="853:26"><name pos:start="853:25" pos:end="853:26">op</name></expr>)</condition><block type="pseudo" pos:start="855:25" pos:end="855:56"><block_content pos:start="855:25" pos:end="855:56">

                        <expr_stmt pos:start="855:25" pos:end="855:56"><expr pos:start="855:25" pos:end="855:55"><call pos:start="855:25" pos:end="855:55"><name pos:start="855:25" pos:end="855:39">tcg_gen_sub_i32</name><argument_list pos:start="855:40" pos:end="855:55">(<argument pos:start="855:41" pos:end="855:43"><expr pos:start="855:41" pos:end="855:43"><name pos:start="855:41" pos:end="855:43">tmp</name></expr></argument>, <argument pos:start="855:46" pos:end="855:49"><expr pos:start="855:46" pos:end="855:49"><name pos:start="855:46" pos:end="855:49">tmp2</name></expr></argument>, <argument pos:start="855:52" pos:end="855:54"><expr pos:start="855:52" pos:end="855:54"><name pos:start="855:52" pos:end="855:54">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="857:21" pos:end="859:56">else<block type="pseudo" pos:start="859:25" pos:end="859:56"><block_content pos:start="859:25" pos:end="859:56">

                        <expr_stmt pos:start="859:25" pos:end="859:56"><expr pos:start="859:25" pos:end="859:55"><call pos:start="859:25" pos:end="859:55"><name pos:start="859:25" pos:end="859:39">tcg_gen_add_i32</name><argument_list pos:start="859:40" pos:end="859:55">(<argument pos:start="859:41" pos:end="859:43"><expr pos:start="859:41" pos:end="859:43"><name pos:start="859:41" pos:end="859:43">tmp</name></expr></argument>, <argument pos:start="859:46" pos:end="859:48"><expr pos:start="859:46" pos:end="859:48"><name pos:start="859:46" pos:end="859:48">tmp</name></expr></argument>, <argument pos:start="859:51" pos:end="859:54"><expr pos:start="859:51" pos:end="859:54"><name pos:start="859:51" pos:end="859:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="861:21" pos:end="861:44"><expr pos:start="861:21" pos:end="861:43"><call pos:start="861:21" pos:end="861:43"><name pos:start="861:21" pos:end="861:37">tcg_temp_free_i32</name><argument_list pos:start="861:38" pos:end="861:43">(<argument pos:start="861:39" pos:end="861:42"><expr pos:start="861:39" pos:end="861:42"><name pos:start="861:39" pos:end="861:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="865:17" pos:end="865:22">break;</break>

            <case pos:start="867:13" pos:end="867:19">case <expr pos:start="867:18" pos:end="867:18"><literal type="number" pos:start="867:18" pos:end="867:18">1</literal></expr>:</case> <comment type="block" pos:start="867:21" pos:end="867:39">/* 16 x 16 -&gt; 32 */</comment>

                <expr_stmt pos:start="869:17" pos:end="869:53"><expr pos:start="869:17" pos:end="869:52"><call pos:start="869:17" pos:end="869:52"><name pos:start="869:17" pos:end="869:25">gen_mulxy</name><argument_list pos:start="869:26" pos:end="869:52">(<argument pos:start="869:27" pos:end="869:29"><expr pos:start="869:27" pos:end="869:29"><name pos:start="869:27" pos:end="869:29">tmp</name></expr></argument>, <argument pos:start="869:32" pos:end="869:35"><expr pos:start="869:32" pos:end="869:35"><name pos:start="869:32" pos:end="869:35">tmp2</name></expr></argument>, <argument pos:start="869:38" pos:end="869:43"><expr pos:start="869:38" pos:end="869:43"><name pos:start="869:38" pos:end="869:39">op</name> <operator pos:start="869:41" pos:end="869:41">&amp;</operator> <literal type="number" pos:start="869:43" pos:end="869:43">2</literal></expr></argument>, <argument pos:start="869:46" pos:end="869:51"><expr pos:start="869:46" pos:end="869:51"><name pos:start="869:46" pos:end="869:47">op</name> <operator pos:start="869:49" pos:end="869:49">&amp;</operator> <literal type="number" pos:start="869:51" pos:end="869:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="871:17" pos:end="871:40"><expr pos:start="871:17" pos:end="871:39"><call pos:start="871:17" pos:end="871:39"><name pos:start="871:17" pos:end="871:33">tcg_temp_free_i32</name><argument_list pos:start="871:34" pos:end="871:39">(<argument pos:start="871:35" pos:end="871:38"><expr pos:start="871:35" pos:end="871:38"><name pos:start="871:35" pos:end="871:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="873:17" pos:end="881:17"><if pos:start="873:17" pos:end="881:17">if <condition pos:start="873:20" pos:end="873:29">(<expr pos:start="873:21" pos:end="873:28"><name pos:start="873:21" pos:end="873:22">rs</name> <operator pos:start="873:24" pos:end="873:25">!=</operator> <literal type="number" pos:start="873:27" pos:end="873:28">15</literal></expr>)</condition> <block pos:start="873:31" pos:end="881:17">{<block_content pos:start="875:21" pos:end="879:44">

                    <expr_stmt pos:start="875:21" pos:end="875:43"><expr pos:start="875:21" pos:end="875:42"><name pos:start="875:21" pos:end="875:24">tmp2</name> <operator pos:start="875:26" pos:end="875:26">=</operator> <call pos:start="875:28" pos:end="875:42"><name pos:start="875:28" pos:end="875:35">load_reg</name><argument_list pos:start="875:36" pos:end="875:42">(<argument pos:start="875:37" pos:end="875:37"><expr pos:start="875:37" pos:end="875:37"><name pos:start="875:37" pos:end="875:37">s</name></expr></argument>, <argument pos:start="875:40" pos:end="875:41"><expr pos:start="875:40" pos:end="875:41"><name pos:start="875:40" pos:end="875:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="877:21" pos:end="877:56"><expr pos:start="877:21" pos:end="877:55"><call pos:start="877:21" pos:end="877:55"><name pos:start="877:21" pos:end="877:39">gen_helper_add_setq</name><argument_list pos:start="877:40" pos:end="877:55">(<argument pos:start="877:41" pos:end="877:43"><expr pos:start="877:41" pos:end="877:43"><name pos:start="877:41" pos:end="877:43">tmp</name></expr></argument>, <argument pos:start="877:46" pos:end="877:48"><expr pos:start="877:46" pos:end="877:48"><name pos:start="877:46" pos:end="877:48">tmp</name></expr></argument>, <argument pos:start="877:51" pos:end="877:54"><expr pos:start="877:51" pos:end="877:54"><name pos:start="877:51" pos:end="877:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="879:21" pos:end="879:44"><expr pos:start="879:21" pos:end="879:43"><call pos:start="879:21" pos:end="879:43"><name pos:start="879:21" pos:end="879:37">tcg_temp_free_i32</name><argument_list pos:start="879:38" pos:end="879:43">(<argument pos:start="879:39" pos:end="879:42"><expr pos:start="879:39" pos:end="879:42"><name pos:start="879:39" pos:end="879:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="883:17" pos:end="883:22">break;</break>

            <case pos:start="885:13" pos:end="885:19">case <expr pos:start="885:18" pos:end="885:18"><literal type="number" pos:start="885:18" pos:end="885:18">2</literal></expr>:</case> <comment type="block" pos:start="885:21" pos:end="885:45">/* Dual multiply add.  */</comment>

            <case pos:start="887:13" pos:end="887:19">case <expr pos:start="887:18" pos:end="887:18"><literal type="number" pos:start="887:18" pos:end="887:18">4</literal></expr>:</case> <comment type="block" pos:start="887:21" pos:end="887:50">/* Dual multiply subtract.  */</comment>

                <if_stmt pos:start="889:17" pos:end="891:40"><if pos:start="889:17" pos:end="891:40">if <condition pos:start="889:20" pos:end="889:23">(<expr pos:start="889:21" pos:end="889:22"><name pos:start="889:21" pos:end="889:22">op</name></expr>)</condition><block type="pseudo" pos:start="891:21" pos:end="891:40"><block_content pos:start="891:21" pos:end="891:40">

                    <expr_stmt pos:start="891:21" pos:end="891:40"><expr pos:start="891:21" pos:end="891:39"><call pos:start="891:21" pos:end="891:39"><name pos:start="891:21" pos:end="891:33">gen_swap_half</name><argument_list pos:start="891:34" pos:end="891:39">(<argument pos:start="891:35" pos:end="891:38"><expr pos:start="891:35" pos:end="891:38"><name pos:start="891:35" pos:end="891:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="893:17" pos:end="893:41"><expr pos:start="893:17" pos:end="893:40"><call pos:start="893:17" pos:end="893:40"><name pos:start="893:17" pos:end="893:29">gen_smul_dual</name><argument_list pos:start="893:30" pos:end="893:40">(<argument pos:start="893:31" pos:end="893:33"><expr pos:start="893:31" pos:end="893:33"><name pos:start="893:31" pos:end="893:33">tmp</name></expr></argument>, <argument pos:start="893:36" pos:end="893:39"><expr pos:start="893:36" pos:end="893:39"><name pos:start="893:36" pos:end="893:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="895:17" pos:end="895:53">/* This addition cannot overflow.  */</comment>

                <if_stmt pos:start="897:17" pos:end="905:17"><if pos:start="897:17" pos:end="901:17">if <condition pos:start="897:20" pos:end="897:37">(<expr pos:start="897:21" pos:end="897:36"><name pos:start="897:21" pos:end="897:24">insn</name> <operator pos:start="897:26" pos:end="897:26">&amp;</operator> <operator pos:start="897:28" pos:end="897:28">(</operator><literal type="number" pos:start="897:29" pos:end="897:29">1</literal> <operator pos:start="897:31" pos:end="897:32">&lt;&lt;</operator> <literal type="number" pos:start="897:34" pos:end="897:35">22</literal><operator pos:start="897:36" pos:end="897:36">)</operator></expr>)</condition> <block pos:start="897:39" pos:end="901:17">{<block_content pos:start="899:21" pos:end="899:52">

                    <expr_stmt pos:start="899:21" pos:end="899:52"><expr pos:start="899:21" pos:end="899:51"><call pos:start="899:21" pos:end="899:51"><name pos:start="899:21" pos:end="899:35">tcg_gen_sub_i32</name><argument_list pos:start="899:36" pos:end="899:51">(<argument pos:start="899:37" pos:end="899:39"><expr pos:start="899:37" pos:end="899:39"><name pos:start="899:37" pos:end="899:39">tmp</name></expr></argument>, <argument pos:start="899:42" pos:end="899:44"><expr pos:start="899:42" pos:end="899:44"><name pos:start="899:42" pos:end="899:44">tmp</name></expr></argument>, <argument pos:start="899:47" pos:end="899:50"><expr pos:start="899:47" pos:end="899:50"><name pos:start="899:47" pos:end="899:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="901:19" pos:end="905:17">else <block pos:start="901:24" pos:end="905:17">{<block_content pos:start="903:21" pos:end="903:52">

                    <expr_stmt pos:start="903:21" pos:end="903:52"><expr pos:start="903:21" pos:end="903:51"><call pos:start="903:21" pos:end="903:51"><name pos:start="903:21" pos:end="903:35">tcg_gen_add_i32</name><argument_list pos:start="903:36" pos:end="903:51">(<argument pos:start="903:37" pos:end="903:39"><expr pos:start="903:37" pos:end="903:39"><name pos:start="903:37" pos:end="903:39">tmp</name></expr></argument>, <argument pos:start="903:42" pos:end="903:44"><expr pos:start="903:42" pos:end="903:44"><name pos:start="903:42" pos:end="903:44">tmp</name></expr></argument>, <argument pos:start="903:47" pos:end="903:50"><expr pos:start="903:47" pos:end="903:50"><name pos:start="903:47" pos:end="903:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="907:17" pos:end="907:40"><expr pos:start="907:17" pos:end="907:39"><call pos:start="907:17" pos:end="907:39"><name pos:start="907:17" pos:end="907:33">tcg_temp_free_i32</name><argument_list pos:start="907:34" pos:end="907:39">(<argument pos:start="907:35" pos:end="907:38"><expr pos:start="907:35" pos:end="907:38"><name pos:start="907:35" pos:end="907:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="909:17" pos:end="919:19"><if pos:start="909:17" pos:end="919:19">if <condition pos:start="909:20" pos:end="909:29">(<expr pos:start="909:21" pos:end="909:28"><name pos:start="909:21" pos:end="909:22">rs</name> <operator pos:start="909:24" pos:end="909:25">!=</operator> <literal type="number" pos:start="909:27" pos:end="909:28">15</literal></expr>)</condition>

                  <block pos:start="911:19" pos:end="919:19">{<block_content pos:start="913:21" pos:end="917:44">

                    <expr_stmt pos:start="913:21" pos:end="913:43"><expr pos:start="913:21" pos:end="913:42"><name pos:start="913:21" pos:end="913:24">tmp2</name> <operator pos:start="913:26" pos:end="913:26">=</operator> <call pos:start="913:28" pos:end="913:42"><name pos:start="913:28" pos:end="913:35">load_reg</name><argument_list pos:start="913:36" pos:end="913:42">(<argument pos:start="913:37" pos:end="913:37"><expr pos:start="913:37" pos:end="913:37"><name pos:start="913:37" pos:end="913:37">s</name></expr></argument>, <argument pos:start="913:40" pos:end="913:41"><expr pos:start="913:40" pos:end="913:41"><name pos:start="913:40" pos:end="913:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="915:21" pos:end="915:56"><expr pos:start="915:21" pos:end="915:55"><call pos:start="915:21" pos:end="915:55"><name pos:start="915:21" pos:end="915:39">gen_helper_add_setq</name><argument_list pos:start="915:40" pos:end="915:55">(<argument pos:start="915:41" pos:end="915:43"><expr pos:start="915:41" pos:end="915:43"><name pos:start="915:41" pos:end="915:43">tmp</name></expr></argument>, <argument pos:start="915:46" pos:end="915:48"><expr pos:start="915:46" pos:end="915:48"><name pos:start="915:46" pos:end="915:48">tmp</name></expr></argument>, <argument pos:start="915:51" pos:end="915:54"><expr pos:start="915:51" pos:end="915:54"><name pos:start="915:51" pos:end="915:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="917:21" pos:end="917:44"><expr pos:start="917:21" pos:end="917:43"><call pos:start="917:21" pos:end="917:43"><name pos:start="917:21" pos:end="917:37">tcg_temp_free_i32</name><argument_list pos:start="917:38" pos:end="917:43">(<argument pos:start="917:39" pos:end="917:42"><expr pos:start="917:39" pos:end="917:42"><name pos:start="917:39" pos:end="917:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  </block_content>}</block></if></if_stmt>

                <break pos:start="921:17" pos:end="921:22">break;</break>

            <case pos:start="923:13" pos:end="923:19">case <expr pos:start="923:18" pos:end="923:18"><literal type="number" pos:start="923:18" pos:end="923:18">3</literal></expr>:</case> <comment type="block" pos:start="923:21" pos:end="923:42">/* 32 * 16 -&gt; 32msb */</comment>

                <if_stmt pos:start="925:17" pos:end="931:35"><if pos:start="925:17" pos:end="927:53">if <condition pos:start="925:20" pos:end="925:23">(<expr pos:start="925:21" pos:end="925:22"><name pos:start="925:21" pos:end="925:22">op</name></expr>)</condition><block type="pseudo" pos:start="927:21" pos:end="927:53"><block_content pos:start="927:21" pos:end="927:53">

                    <expr_stmt pos:start="927:21" pos:end="927:53"><expr pos:start="927:21" pos:end="927:52"><call pos:start="927:21" pos:end="927:52"><name pos:start="927:21" pos:end="927:36">tcg_gen_sari_i32</name><argument_list pos:start="927:37" pos:end="927:52">(<argument pos:start="927:38" pos:end="927:41"><expr pos:start="927:38" pos:end="927:41"><name pos:start="927:38" pos:end="927:41">tmp2</name></expr></argument>, <argument pos:start="927:44" pos:end="927:47"><expr pos:start="927:44" pos:end="927:47"><name pos:start="927:44" pos:end="927:47">tmp2</name></expr></argument>, <argument pos:start="927:50" pos:end="927:51"><expr pos:start="927:50" pos:end="927:51"><literal type="number" pos:start="927:50" pos:end="927:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="929:17" pos:end="931:35">else<block type="pseudo" pos:start="931:21" pos:end="931:35"><block_content pos:start="931:21" pos:end="931:35">

                    <expr_stmt pos:start="931:21" pos:end="931:35"><expr pos:start="931:21" pos:end="931:34"><call pos:start="931:21" pos:end="931:34"><name pos:start="931:21" pos:end="931:28">gen_sxth</name><argument_list pos:start="931:29" pos:end="931:34">(<argument pos:start="931:30" pos:end="931:33"><expr pos:start="931:30" pos:end="931:33"><name pos:start="931:30" pos:end="931:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="933:17" pos:end="933:52"><expr pos:start="933:17" pos:end="933:51"><name pos:start="933:17" pos:end="933:21">tmp64</name> <operator pos:start="933:23" pos:end="933:23">=</operator> <call pos:start="933:25" pos:end="933:51"><name pos:start="933:25" pos:end="933:40">gen_muls_i64_i32</name><argument_list pos:start="933:41" pos:end="933:51">(<argument pos:start="933:42" pos:end="933:44"><expr pos:start="933:42" pos:end="933:44"><name pos:start="933:42" pos:end="933:44">tmp</name></expr></argument>, <argument pos:start="933:47" pos:end="933:50"><expr pos:start="933:47" pos:end="933:50"><name pos:start="933:47" pos:end="933:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="935:17" pos:end="935:51"><expr pos:start="935:17" pos:end="935:50"><call pos:start="935:17" pos:end="935:50"><name pos:start="935:17" pos:end="935:32">tcg_gen_shri_i64</name><argument_list pos:start="935:33" pos:end="935:50">(<argument pos:start="935:34" pos:end="935:38"><expr pos:start="935:34" pos:end="935:38"><name pos:start="935:34" pos:end="935:38">tmp64</name></expr></argument>, <argument pos:start="935:41" pos:end="935:45"><expr pos:start="935:41" pos:end="935:45"><name pos:start="935:41" pos:end="935:45">tmp64</name></expr></argument>, <argument pos:start="935:48" pos:end="935:49"><expr pos:start="935:48" pos:end="935:49"><literal type="number" pos:start="935:48" pos:end="935:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="937:17" pos:end="937:41"><expr pos:start="937:17" pos:end="937:40"><name pos:start="937:17" pos:end="937:19">tmp</name> <operator pos:start="937:21" pos:end="937:21">=</operator> <call pos:start="937:23" pos:end="937:40"><name pos:start="937:23" pos:end="937:38">tcg_temp_new_i32</name><argument_list pos:start="937:39" pos:end="937:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="939:17" pos:end="939:50"><expr pos:start="939:17" pos:end="939:49"><call pos:start="939:17" pos:end="939:49"><name pos:start="939:17" pos:end="939:37">tcg_gen_trunc_i64_i32</name><argument_list pos:start="939:38" pos:end="939:49">(<argument pos:start="939:39" pos:end="939:41"><expr pos:start="939:39" pos:end="939:41"><name pos:start="939:39" pos:end="939:41">tmp</name></expr></argument>, <argument pos:start="939:44" pos:end="939:48"><expr pos:start="939:44" pos:end="939:48"><name pos:start="939:44" pos:end="939:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="941:17" pos:end="941:41"><expr pos:start="941:17" pos:end="941:40"><call pos:start="941:17" pos:end="941:40"><name pos:start="941:17" pos:end="941:33">tcg_temp_free_i64</name><argument_list pos:start="941:34" pos:end="941:40">(<argument pos:start="941:35" pos:end="941:39"><expr pos:start="941:35" pos:end="941:39"><name pos:start="941:35" pos:end="941:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="943:17" pos:end="953:19"><if pos:start="943:17" pos:end="953:19">if <condition pos:start="943:20" pos:end="943:29">(<expr pos:start="943:21" pos:end="943:28"><name pos:start="943:21" pos:end="943:22">rs</name> <operator pos:start="943:24" pos:end="943:25">!=</operator> <literal type="number" pos:start="943:27" pos:end="943:28">15</literal></expr>)</condition>

                  <block pos:start="945:19" pos:end="953:19">{<block_content pos:start="947:21" pos:end="951:44">

                    <expr_stmt pos:start="947:21" pos:end="947:43"><expr pos:start="947:21" pos:end="947:42"><name pos:start="947:21" pos:end="947:24">tmp2</name> <operator pos:start="947:26" pos:end="947:26">=</operator> <call pos:start="947:28" pos:end="947:42"><name pos:start="947:28" pos:end="947:35">load_reg</name><argument_list pos:start="947:36" pos:end="947:42">(<argument pos:start="947:37" pos:end="947:37"><expr pos:start="947:37" pos:end="947:37"><name pos:start="947:37" pos:end="947:37">s</name></expr></argument>, <argument pos:start="947:40" pos:end="947:41"><expr pos:start="947:40" pos:end="947:41"><name pos:start="947:40" pos:end="947:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="949:21" pos:end="949:56"><expr pos:start="949:21" pos:end="949:55"><call pos:start="949:21" pos:end="949:55"><name pos:start="949:21" pos:end="949:39">gen_helper_add_setq</name><argument_list pos:start="949:40" pos:end="949:55">(<argument pos:start="949:41" pos:end="949:43"><expr pos:start="949:41" pos:end="949:43"><name pos:start="949:41" pos:end="949:43">tmp</name></expr></argument>, <argument pos:start="949:46" pos:end="949:48"><expr pos:start="949:46" pos:end="949:48"><name pos:start="949:46" pos:end="949:48">tmp</name></expr></argument>, <argument pos:start="949:51" pos:end="949:54"><expr pos:start="949:51" pos:end="949:54"><name pos:start="949:51" pos:end="949:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="951:21" pos:end="951:44"><expr pos:start="951:21" pos:end="951:43"><call pos:start="951:21" pos:end="951:43"><name pos:start="951:21" pos:end="951:37">tcg_temp_free_i32</name><argument_list pos:start="951:38" pos:end="951:43">(<argument pos:start="951:39" pos:end="951:42"><expr pos:start="951:39" pos:end="951:42"><name pos:start="951:39" pos:end="951:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  </block_content>}</block></if></if_stmt>

                <break pos:start="955:17" pos:end="955:22">break;</break>

            <case pos:start="957:13" pos:end="957:19">case <expr pos:start="957:18" pos:end="957:18"><literal type="number" pos:start="957:18" pos:end="957:18">5</literal></expr>:</case> <case pos:start="957:21" pos:end="957:27">case <expr pos:start="957:26" pos:end="957:26"><literal type="number" pos:start="957:26" pos:end="957:26">6</literal></expr>:</case> <comment type="block" pos:start="957:29" pos:end="957:72">/* 32 * 32 -&gt; 32msb (SMMUL, SMMLA, SMMLS) */</comment>

                <expr_stmt pos:start="959:17" pos:end="959:52"><expr pos:start="959:17" pos:end="959:51"><name pos:start="959:17" pos:end="959:21">tmp64</name> <operator pos:start="959:23" pos:end="959:23">=</operator> <call pos:start="959:25" pos:end="959:51"><name pos:start="959:25" pos:end="959:40">gen_muls_i64_i32</name><argument_list pos:start="959:41" pos:end="959:51">(<argument pos:start="959:42" pos:end="959:44"><expr pos:start="959:42" pos:end="959:44"><name pos:start="959:42" pos:end="959:44">tmp</name></expr></argument>, <argument pos:start="959:47" pos:end="959:50"><expr pos:start="959:47" pos:end="959:50"><name pos:start="959:47" pos:end="959:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="961:17" pos:end="975:17"><if pos:start="961:17" pos:end="975:17">if <condition pos:start="961:20" pos:end="961:29">(<expr pos:start="961:21" pos:end="961:28"><name pos:start="961:21" pos:end="961:22">rs</name> <operator pos:start="961:24" pos:end="961:25">!=</operator> <literal type="number" pos:start="961:27" pos:end="961:28">15</literal></expr>)</condition> <block pos:start="961:31" pos:end="975:17">{<block_content pos:start="963:21" pos:end="973:21">

                    <expr_stmt pos:start="963:21" pos:end="963:42"><expr pos:start="963:21" pos:end="963:41"><name pos:start="963:21" pos:end="963:23">tmp</name> <operator pos:start="963:25" pos:end="963:25">=</operator> <call pos:start="963:27" pos:end="963:41"><name pos:start="963:27" pos:end="963:34">load_reg</name><argument_list pos:start="963:35" pos:end="963:41">(<argument pos:start="963:36" pos:end="963:36"><expr pos:start="963:36" pos:end="963:36"><name pos:start="963:36" pos:end="963:36">s</name></expr></argument>, <argument pos:start="963:39" pos:end="963:40"><expr pos:start="963:39" pos:end="963:40"><name pos:start="963:39" pos:end="963:40">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="965:21" pos:end="973:21"><if pos:start="965:21" pos:end="969:21">if <condition pos:start="965:24" pos:end="965:41">(<expr pos:start="965:25" pos:end="965:40"><name pos:start="965:25" pos:end="965:28">insn</name> <operator pos:start="965:30" pos:end="965:30">&amp;</operator> <operator pos:start="965:32" pos:end="965:32">(</operator><literal type="number" pos:start="965:33" pos:end="965:33">1</literal> <operator pos:start="965:35" pos:end="965:36">&lt;&lt;</operator> <literal type="number" pos:start="965:38" pos:end="965:39">20</literal><operator pos:start="965:40" pos:end="965:40">)</operator></expr>)</condition> <block pos:start="965:43" pos:end="969:21">{<block_content pos:start="967:25" pos:end="967:57">

                        <expr_stmt pos:start="967:25" pos:end="967:57"><expr pos:start="967:25" pos:end="967:56"><name pos:start="967:25" pos:end="967:29">tmp64</name> <operator pos:start="967:31" pos:end="967:31">=</operator> <call pos:start="967:33" pos:end="967:56"><name pos:start="967:33" pos:end="967:44">gen_addq_msw</name><argument_list pos:start="967:45" pos:end="967:56">(<argument pos:start="967:46" pos:end="967:50"><expr pos:start="967:46" pos:end="967:50"><name pos:start="967:46" pos:end="967:50">tmp64</name></expr></argument>, <argument pos:start="967:53" pos:end="967:55"><expr pos:start="967:53" pos:end="967:55"><name pos:start="967:53" pos:end="967:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="969:23" pos:end="973:21">else <block pos:start="969:28" pos:end="973:21">{<block_content pos:start="971:25" pos:end="971:57">

                        <expr_stmt pos:start="971:25" pos:end="971:57"><expr pos:start="971:25" pos:end="971:56"><name pos:start="971:25" pos:end="971:29">tmp64</name> <operator pos:start="971:31" pos:end="971:31">=</operator> <call pos:start="971:33" pos:end="971:56"><name pos:start="971:33" pos:end="971:44">gen_subq_msw</name><argument_list pos:start="971:45" pos:end="971:56">(<argument pos:start="971:46" pos:end="971:50"><expr pos:start="971:46" pos:end="971:50"><name pos:start="971:46" pos:end="971:50">tmp64</name></expr></argument>, <argument pos:start="971:53" pos:end="971:55"><expr pos:start="971:53" pos:end="971:55"><name pos:start="971:53" pos:end="971:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="977:17" pos:end="981:17"><if pos:start="977:17" pos:end="981:17">if <condition pos:start="977:20" pos:end="977:36">(<expr pos:start="977:21" pos:end="977:35"><name pos:start="977:21" pos:end="977:24">insn</name> <operator pos:start="977:26" pos:end="977:26">&amp;</operator> <operator pos:start="977:28" pos:end="977:28">(</operator><literal type="number" pos:start="977:29" pos:end="977:29">1</literal> <operator pos:start="977:31" pos:end="977:32">&lt;&lt;</operator> <literal type="number" pos:start="977:34" pos:end="977:34">4</literal><operator pos:start="977:35" pos:end="977:35">)</operator></expr>)</condition> <block pos:start="977:38" pos:end="981:17">{<block_content pos:start="979:21" pos:end="979:64">

                    <expr_stmt pos:start="979:21" pos:end="979:64"><expr pos:start="979:21" pos:end="979:63"><call pos:start="979:21" pos:end="979:63"><name pos:start="979:21" pos:end="979:36">tcg_gen_addi_i64</name><argument_list pos:start="979:37" pos:end="979:63">(<argument pos:start="979:38" pos:end="979:42"><expr pos:start="979:38" pos:end="979:42"><name pos:start="979:38" pos:end="979:42">tmp64</name></expr></argument>, <argument pos:start="979:45" pos:end="979:49"><expr pos:start="979:45" pos:end="979:49"><name pos:start="979:45" pos:end="979:49">tmp64</name></expr></argument>, <argument pos:start="979:52" pos:end="979:62"><expr pos:start="979:52" pos:end="979:62"><literal type="number" pos:start="979:52" pos:end="979:62">0x80000000u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="983:17" pos:end="983:51"><expr pos:start="983:17" pos:end="983:50"><call pos:start="983:17" pos:end="983:50"><name pos:start="983:17" pos:end="983:32">tcg_gen_shri_i64</name><argument_list pos:start="983:33" pos:end="983:50">(<argument pos:start="983:34" pos:end="983:38"><expr pos:start="983:34" pos:end="983:38"><name pos:start="983:34" pos:end="983:38">tmp64</name></expr></argument>, <argument pos:start="983:41" pos:end="983:45"><expr pos:start="983:41" pos:end="983:45"><name pos:start="983:41" pos:end="983:45">tmp64</name></expr></argument>, <argument pos:start="983:48" pos:end="983:49"><expr pos:start="983:48" pos:end="983:49"><literal type="number" pos:start="983:48" pos:end="983:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="985:17" pos:end="985:41"><expr pos:start="985:17" pos:end="985:40"><name pos:start="985:17" pos:end="985:19">tmp</name> <operator pos:start="985:21" pos:end="985:21">=</operator> <call pos:start="985:23" pos:end="985:40"><name pos:start="985:23" pos:end="985:38">tcg_temp_new_i32</name><argument_list pos:start="985:39" pos:end="985:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="987:17" pos:end="987:50"><expr pos:start="987:17" pos:end="987:49"><call pos:start="987:17" pos:end="987:49"><name pos:start="987:17" pos:end="987:37">tcg_gen_trunc_i64_i32</name><argument_list pos:start="987:38" pos:end="987:49">(<argument pos:start="987:39" pos:end="987:41"><expr pos:start="987:39" pos:end="987:41"><name pos:start="987:39" pos:end="987:41">tmp</name></expr></argument>, <argument pos:start="987:44" pos:end="987:48"><expr pos:start="987:44" pos:end="987:48"><name pos:start="987:44" pos:end="987:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="989:17" pos:end="989:41"><expr pos:start="989:17" pos:end="989:40"><call pos:start="989:17" pos:end="989:40"><name pos:start="989:17" pos:end="989:33">tcg_temp_free_i64</name><argument_list pos:start="989:34" pos:end="989:40">(<argument pos:start="989:35" pos:end="989:39"><expr pos:start="989:35" pos:end="989:39"><name pos:start="989:35" pos:end="989:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="991:17" pos:end="991:22">break;</break>

            <case pos:start="993:13" pos:end="993:19">case <expr pos:start="993:18" pos:end="993:18"><literal type="number" pos:start="993:18" pos:end="993:18">7</literal></expr>:</case> <comment type="block" pos:start="993:21" pos:end="993:64">/* Unsigned sum of absolute differences.  */</comment>

                <expr_stmt pos:start="995:17" pos:end="995:49"><expr pos:start="995:17" pos:end="995:48"><call pos:start="995:17" pos:end="995:48"><name pos:start="995:17" pos:end="995:32">gen_helper_usad8</name><argument_list pos:start="995:33" pos:end="995:48">(<argument pos:start="995:34" pos:end="995:36"><expr pos:start="995:34" pos:end="995:36"><name pos:start="995:34" pos:end="995:36">tmp</name></expr></argument>, <argument pos:start="995:39" pos:end="995:41"><expr pos:start="995:39" pos:end="995:41"><name pos:start="995:39" pos:end="995:41">tmp</name></expr></argument>, <argument pos:start="995:44" pos:end="995:47"><expr pos:start="995:44" pos:end="995:47"><name pos:start="995:44" pos:end="995:47">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="997:17" pos:end="997:40"><expr pos:start="997:17" pos:end="997:39"><call pos:start="997:17" pos:end="997:39"><name pos:start="997:17" pos:end="997:33">tcg_temp_free_i32</name><argument_list pos:start="997:34" pos:end="997:39">(<argument pos:start="997:35" pos:end="997:38"><expr pos:start="997:35" pos:end="997:38"><name pos:start="997:35" pos:end="997:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="999:17" pos:end="1007:17"><if pos:start="999:17" pos:end="1007:17">if <condition pos:start="999:20" pos:end="999:29">(<expr pos:start="999:21" pos:end="999:28"><name pos:start="999:21" pos:end="999:22">rs</name> <operator pos:start="999:24" pos:end="999:25">!=</operator> <literal type="number" pos:start="999:27" pos:end="999:28">15</literal></expr>)</condition> <block pos:start="999:31" pos:end="1007:17">{<block_content pos:start="1001:21" pos:end="1005:44">

                    <expr_stmt pos:start="1001:21" pos:end="1001:43"><expr pos:start="1001:21" pos:end="1001:42"><name pos:start="1001:21" pos:end="1001:24">tmp2</name> <operator pos:start="1001:26" pos:end="1001:26">=</operator> <call pos:start="1001:28" pos:end="1001:42"><name pos:start="1001:28" pos:end="1001:35">load_reg</name><argument_list pos:start="1001:36" pos:end="1001:42">(<argument pos:start="1001:37" pos:end="1001:37"><expr pos:start="1001:37" pos:end="1001:37"><name pos:start="1001:37" pos:end="1001:37">s</name></expr></argument>, <argument pos:start="1001:40" pos:end="1001:41"><expr pos:start="1001:40" pos:end="1001:41"><name pos:start="1001:40" pos:end="1001:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1003:21" pos:end="1003:52"><expr pos:start="1003:21" pos:end="1003:51"><call pos:start="1003:21" pos:end="1003:51"><name pos:start="1003:21" pos:end="1003:35">tcg_gen_add_i32</name><argument_list pos:start="1003:36" pos:end="1003:51">(<argument pos:start="1003:37" pos:end="1003:39"><expr pos:start="1003:37" pos:end="1003:39"><name pos:start="1003:37" pos:end="1003:39">tmp</name></expr></argument>, <argument pos:start="1003:42" pos:end="1003:44"><expr pos:start="1003:42" pos:end="1003:44"><name pos:start="1003:42" pos:end="1003:44">tmp</name></expr></argument>, <argument pos:start="1003:47" pos:end="1003:50"><expr pos:start="1003:47" pos:end="1003:50"><name pos:start="1003:47" pos:end="1003:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1005:21" pos:end="1005:44"><expr pos:start="1005:21" pos:end="1005:43"><call pos:start="1005:21" pos:end="1005:43"><name pos:start="1005:21" pos:end="1005:37">tcg_temp_free_i32</name><argument_list pos:start="1005:38" pos:end="1005:43">(<argument pos:start="1005:39" pos:end="1005:42"><expr pos:start="1005:39" pos:end="1005:42"><name pos:start="1005:39" pos:end="1005:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1009:17" pos:end="1009:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1013:13" pos:end="1013:34"><expr pos:start="1013:13" pos:end="1013:33"><call pos:start="1013:13" pos:end="1013:33"><name pos:start="1013:13" pos:end="1013:21">store_reg</name><argument_list pos:start="1013:22" pos:end="1013:33">(<argument pos:start="1013:23" pos:end="1013:23"><expr pos:start="1013:23" pos:end="1013:23"><name pos:start="1013:23" pos:end="1013:23">s</name></expr></argument>, <argument pos:start="1013:26" pos:end="1013:27"><expr pos:start="1013:26" pos:end="1013:27"><name pos:start="1013:26" pos:end="1013:27">rd</name></expr></argument>, <argument pos:start="1013:30" pos:end="1013:32"><expr pos:start="1013:30" pos:end="1013:32"><name pos:start="1013:30" pos:end="1013:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1015:13" pos:end="1015:18">break;</break>

        <case pos:start="1017:9" pos:end="1017:15">case <expr pos:start="1017:14" pos:end="1017:14"><literal type="number" pos:start="1017:14" pos:end="1017:14">6</literal></expr>:</case> <case pos:start="1017:17" pos:end="1017:23">case <expr pos:start="1017:22" pos:end="1017:22"><literal type="number" pos:start="1017:22" pos:end="1017:22">7</literal></expr>:</case> <comment type="block" pos:start="1017:25" pos:end="1017:55">/* 64-bit multiply, Divide.  */</comment>

            <expr_stmt pos:start="1019:13" pos:end="1019:61"><expr pos:start="1019:13" pos:end="1019:60"><name pos:start="1019:13" pos:end="1019:14">op</name> <operator pos:start="1019:16" pos:end="1019:16">=</operator> <operator pos:start="1019:18" pos:end="1019:18">(</operator><operator pos:start="1019:19" pos:end="1019:19">(</operator><name pos:start="1019:20" pos:end="1019:23">insn</name> <operator pos:start="1019:25" pos:end="1019:26">&gt;&gt;</operator> <literal type="number" pos:start="1019:28" pos:end="1019:28">4</literal><operator pos:start="1019:29" pos:end="1019:29">)</operator> <operator pos:start="1019:31" pos:end="1019:31">&amp;</operator> <literal type="number" pos:start="1019:33" pos:end="1019:35">0xf</literal><operator pos:start="1019:36" pos:end="1019:36">)</operator> <operator pos:start="1019:38" pos:end="1019:38">|</operator> <operator pos:start="1019:40" pos:end="1019:40">(</operator><operator pos:start="1019:41" pos:end="1019:41">(</operator><name pos:start="1019:42" pos:end="1019:45">insn</name> <operator pos:start="1019:47" pos:end="1019:48">&gt;&gt;</operator> <literal type="number" pos:start="1019:50" pos:end="1019:51">16</literal><operator pos:start="1019:52" pos:end="1019:52">)</operator> <operator pos:start="1019:54" pos:end="1019:54">&amp;</operator> <literal type="number" pos:start="1019:56" pos:end="1019:59">0x70</literal><operator pos:start="1019:60" pos:end="1019:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1021:13" pos:end="1021:34"><expr pos:start="1021:13" pos:end="1021:33"><name pos:start="1021:13" pos:end="1021:15">tmp</name> <operator pos:start="1021:17" pos:end="1021:17">=</operator> <call pos:start="1021:19" pos:end="1021:33"><name pos:start="1021:19" pos:end="1021:26">load_reg</name><argument_list pos:start="1021:27" pos:end="1021:33">(<argument pos:start="1021:28" pos:end="1021:28"><expr pos:start="1021:28" pos:end="1021:28"><name pos:start="1021:28" pos:end="1021:28">s</name></expr></argument>, <argument pos:start="1021:31" pos:end="1021:32"><expr pos:start="1021:31" pos:end="1021:32"><name pos:start="1021:31" pos:end="1021:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1023:13" pos:end="1023:35"><expr pos:start="1023:13" pos:end="1023:34"><name pos:start="1023:13" pos:end="1023:16">tmp2</name> <operator pos:start="1023:18" pos:end="1023:18">=</operator> <call pos:start="1023:20" pos:end="1023:34"><name pos:start="1023:20" pos:end="1023:27">load_reg</name><argument_list pos:start="1023:28" pos:end="1023:34">(<argument pos:start="1023:29" pos:end="1023:29"><expr pos:start="1023:29" pos:end="1023:29"><name pos:start="1023:29" pos:end="1023:29">s</name></expr></argument>, <argument pos:start="1023:32" pos:end="1023:33"><expr pos:start="1023:32" pos:end="1023:33"><name pos:start="1023:32" pos:end="1023:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1025:13" pos:end="1135:13"><if pos:start="1025:13" pos:end="1045:13">if <condition pos:start="1025:16" pos:end="1025:36">(<expr pos:start="1025:17" pos:end="1025:35"><operator pos:start="1025:17" pos:end="1025:17">(</operator><name pos:start="1025:18" pos:end="1025:19">op</name> <operator pos:start="1025:21" pos:end="1025:21">&amp;</operator> <literal type="number" pos:start="1025:23" pos:end="1025:26">0x50</literal><operator pos:start="1025:27" pos:end="1025:27">)</operator> <operator pos:start="1025:29" pos:end="1025:30">==</operator> <literal type="number" pos:start="1025:32" pos:end="1025:35">0x10</literal></expr>)</condition> <block pos:start="1025:38" pos:end="1045:13">{<block_content pos:start="1029:17" pos:end="1043:38">

                <comment type="block" pos:start="1027:17" pos:end="1027:32">/* sdiv, udiv */</comment>

                <if_stmt pos:start="1029:17" pos:end="1031:36"><if pos:start="1029:17" pos:end="1031:36">if <condition pos:start="1029:20" pos:end="1029:55">(<expr pos:start="1029:21" pos:end="1029:54"><operator pos:start="1029:21" pos:end="1029:21">!</operator><call pos:start="1029:22" pos:end="1029:54"><name pos:start="1029:22" pos:end="1029:32">arm_feature</name><argument_list pos:start="1029:33" pos:end="1029:54">(<argument pos:start="1029:34" pos:end="1029:36"><expr pos:start="1029:34" pos:end="1029:36"><name pos:start="1029:34" pos:end="1029:36">env</name></expr></argument>, <argument pos:start="1029:39" pos:end="1029:53"><expr pos:start="1029:39" pos:end="1029:53"><name pos:start="1029:39" pos:end="1029:53">ARM_FEATURE_DIV</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1031:21" pos:end="1031:36"><block_content pos:start="1031:21" pos:end="1031:36">

                    <goto pos:start="1031:21" pos:end="1031:36">goto <name pos:start="1031:26" pos:end="1031:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="1033:17" pos:end="1039:52"><if pos:start="1033:17" pos:end="1035:52">if <condition pos:start="1033:20" pos:end="1033:30">(<expr pos:start="1033:21" pos:end="1033:29"><name pos:start="1033:21" pos:end="1033:22">op</name> <operator pos:start="1033:24" pos:end="1033:24">&amp;</operator> <literal type="number" pos:start="1033:26" pos:end="1033:29">0x20</literal></expr>)</condition><block type="pseudo" pos:start="1035:21" pos:end="1035:52"><block_content pos:start="1035:21" pos:end="1035:52">

                    <expr_stmt pos:start="1035:21" pos:end="1035:52"><expr pos:start="1035:21" pos:end="1035:51"><call pos:start="1035:21" pos:end="1035:51"><name pos:start="1035:21" pos:end="1035:35">gen_helper_udiv</name><argument_list pos:start="1035:36" pos:end="1035:51">(<argument pos:start="1035:37" pos:end="1035:39"><expr pos:start="1035:37" pos:end="1035:39"><name pos:start="1035:37" pos:end="1035:39">tmp</name></expr></argument>, <argument pos:start="1035:42" pos:end="1035:44"><expr pos:start="1035:42" pos:end="1035:44"><name pos:start="1035:42" pos:end="1035:44">tmp</name></expr></argument>, <argument pos:start="1035:47" pos:end="1035:50"><expr pos:start="1035:47" pos:end="1035:50"><name pos:start="1035:47" pos:end="1035:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1037:17" pos:end="1039:52">else<block type="pseudo" pos:start="1039:21" pos:end="1039:52"><block_content pos:start="1039:21" pos:end="1039:52">

                    <expr_stmt pos:start="1039:21" pos:end="1039:52"><expr pos:start="1039:21" pos:end="1039:51"><call pos:start="1039:21" pos:end="1039:51"><name pos:start="1039:21" pos:end="1039:35">gen_helper_sdiv</name><argument_list pos:start="1039:36" pos:end="1039:51">(<argument pos:start="1039:37" pos:end="1039:39"><expr pos:start="1039:37" pos:end="1039:39"><name pos:start="1039:37" pos:end="1039:39">tmp</name></expr></argument>, <argument pos:start="1039:42" pos:end="1039:44"><expr pos:start="1039:42" pos:end="1039:44"><name pos:start="1039:42" pos:end="1039:44">tmp</name></expr></argument>, <argument pos:start="1039:47" pos:end="1039:50"><expr pos:start="1039:47" pos:end="1039:50"><name pos:start="1039:47" pos:end="1039:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1041:17" pos:end="1041:40"><expr pos:start="1041:17" pos:end="1041:39"><call pos:start="1041:17" pos:end="1041:39"><name pos:start="1041:17" pos:end="1041:33">tcg_temp_free_i32</name><argument_list pos:start="1041:34" pos:end="1041:39">(<argument pos:start="1041:35" pos:end="1041:38"><expr pos:start="1041:35" pos:end="1041:38"><name pos:start="1041:35" pos:end="1041:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1043:17" pos:end="1043:38"><expr pos:start="1043:17" pos:end="1043:37"><call pos:start="1043:17" pos:end="1043:37"><name pos:start="1043:17" pos:end="1043:25">store_reg</name><argument_list pos:start="1043:26" pos:end="1043:37">(<argument pos:start="1043:27" pos:end="1043:27"><expr pos:start="1043:27" pos:end="1043:27"><name pos:start="1043:27" pos:end="1043:27">s</name></expr></argument>, <argument pos:start="1043:30" pos:end="1043:31"><expr pos:start="1043:30" pos:end="1043:31"><name pos:start="1043:30" pos:end="1043:31">rd</name></expr></argument>, <argument pos:start="1043:34" pos:end="1043:36"><expr pos:start="1043:34" pos:end="1043:36"><name pos:start="1043:34" pos:end="1043:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1045:15" pos:end="1081:13">else if <condition pos:start="1045:23" pos:end="1045:41">(<expr pos:start="1045:24" pos:end="1045:40"><operator pos:start="1045:24" pos:end="1045:24">(</operator><name pos:start="1045:25" pos:end="1045:26">op</name> <operator pos:start="1045:28" pos:end="1045:28">&amp;</operator> <literal type="number" pos:start="1045:30" pos:end="1045:32">0xe</literal><operator pos:start="1045:33" pos:end="1045:33">)</operator> <operator pos:start="1045:35" pos:end="1045:36">==</operator> <literal type="number" pos:start="1045:38" pos:end="1045:40">0xc</literal></expr>)</condition> <block pos:start="1045:43" pos:end="1081:13">{<block_content pos:start="1049:17" pos:end="1079:41">

                <comment type="block" pos:start="1047:17" pos:end="1047:53">/* Dual multiply accumulate long.  */</comment>

                <if_stmt pos:start="1049:17" pos:end="1051:40"><if pos:start="1049:17" pos:end="1051:40">if <condition pos:start="1049:20" pos:end="1049:27">(<expr pos:start="1049:21" pos:end="1049:26"><name pos:start="1049:21" pos:end="1049:22">op</name> <operator pos:start="1049:24" pos:end="1049:24">&amp;</operator> <literal type="number" pos:start="1049:26" pos:end="1049:26">1</literal></expr>)</condition><block type="pseudo" pos:start="1051:21" pos:end="1051:40"><block_content pos:start="1051:21" pos:end="1051:40">

                    <expr_stmt pos:start="1051:21" pos:end="1051:40"><expr pos:start="1051:21" pos:end="1051:39"><call pos:start="1051:21" pos:end="1051:39"><name pos:start="1051:21" pos:end="1051:33">gen_swap_half</name><argument_list pos:start="1051:34" pos:end="1051:39">(<argument pos:start="1051:35" pos:end="1051:38"><expr pos:start="1051:35" pos:end="1051:38"><name pos:start="1051:35" pos:end="1051:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1053:17" pos:end="1053:41"><expr pos:start="1053:17" pos:end="1053:40"><call pos:start="1053:17" pos:end="1053:40"><name pos:start="1053:17" pos:end="1053:29">gen_smul_dual</name><argument_list pos:start="1053:30" pos:end="1053:40">(<argument pos:start="1053:31" pos:end="1053:33"><expr pos:start="1053:31" pos:end="1053:33"><name pos:start="1053:31" pos:end="1053:33">tmp</name></expr></argument>, <argument pos:start="1053:36" pos:end="1053:39"><expr pos:start="1053:36" pos:end="1053:39"><name pos:start="1053:36" pos:end="1053:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1055:17" pos:end="1063:17"><if pos:start="1055:17" pos:end="1059:17">if <condition pos:start="1055:20" pos:end="1055:30">(<expr pos:start="1055:21" pos:end="1055:29"><name pos:start="1055:21" pos:end="1055:22">op</name> <operator pos:start="1055:24" pos:end="1055:24">&amp;</operator> <literal type="number" pos:start="1055:26" pos:end="1055:29">0x10</literal></expr>)</condition> <block pos:start="1055:32" pos:end="1059:17">{<block_content pos:start="1057:21" pos:end="1057:52">

                    <expr_stmt pos:start="1057:21" pos:end="1057:52"><expr pos:start="1057:21" pos:end="1057:51"><call pos:start="1057:21" pos:end="1057:51"><name pos:start="1057:21" pos:end="1057:35">tcg_gen_sub_i32</name><argument_list pos:start="1057:36" pos:end="1057:51">(<argument pos:start="1057:37" pos:end="1057:39"><expr pos:start="1057:37" pos:end="1057:39"><name pos:start="1057:37" pos:end="1057:39">tmp</name></expr></argument>, <argument pos:start="1057:42" pos:end="1057:44"><expr pos:start="1057:42" pos:end="1057:44"><name pos:start="1057:42" pos:end="1057:44">tmp</name></expr></argument>, <argument pos:start="1057:47" pos:end="1057:50"><expr pos:start="1057:47" pos:end="1057:50"><name pos:start="1057:47" pos:end="1057:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1059:19" pos:end="1063:17">else <block pos:start="1059:24" pos:end="1063:17">{<block_content pos:start="1061:21" pos:end="1061:52">

                    <expr_stmt pos:start="1061:21" pos:end="1061:52"><expr pos:start="1061:21" pos:end="1061:51"><call pos:start="1061:21" pos:end="1061:51"><name pos:start="1061:21" pos:end="1061:35">tcg_gen_add_i32</name><argument_list pos:start="1061:36" pos:end="1061:51">(<argument pos:start="1061:37" pos:end="1061:39"><expr pos:start="1061:37" pos:end="1061:39"><name pos:start="1061:37" pos:end="1061:39">tmp</name></expr></argument>, <argument pos:start="1061:42" pos:end="1061:44"><expr pos:start="1061:42" pos:end="1061:44"><name pos:start="1061:42" pos:end="1061:44">tmp</name></expr></argument>, <argument pos:start="1061:47" pos:end="1061:50"><expr pos:start="1061:47" pos:end="1061:50"><name pos:start="1061:47" pos:end="1061:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1065:17" pos:end="1065:40"><expr pos:start="1065:17" pos:end="1065:39"><call pos:start="1065:17" pos:end="1065:39"><name pos:start="1065:17" pos:end="1065:33">tcg_temp_free_i32</name><argument_list pos:start="1065:34" pos:end="1065:39">(<argument pos:start="1065:35" pos:end="1065:38"><expr pos:start="1065:35" pos:end="1065:38"><name pos:start="1065:35" pos:end="1065:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1067:17" pos:end="1067:28">/* BUGFIX */</comment>

                <expr_stmt pos:start="1069:17" pos:end="1069:43"><expr pos:start="1069:17" pos:end="1069:42"><name pos:start="1069:17" pos:end="1069:21">tmp64</name> <operator pos:start="1069:23" pos:end="1069:23">=</operator> <call pos:start="1069:25" pos:end="1069:42"><name pos:start="1069:25" pos:end="1069:40">tcg_temp_new_i64</name><argument_list pos:start="1069:41" pos:end="1069:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1071:17" pos:end="1071:48"><expr pos:start="1071:17" pos:end="1071:47"><call pos:start="1071:17" pos:end="1071:47"><name pos:start="1071:17" pos:end="1071:35">tcg_gen_ext_i32_i64</name><argument_list pos:start="1071:36" pos:end="1071:47">(<argument pos:start="1071:37" pos:end="1071:41"><expr pos:start="1071:37" pos:end="1071:41"><name pos:start="1071:37" pos:end="1071:41">tmp64</name></expr></argument>, <argument pos:start="1071:44" pos:end="1071:46"><expr pos:start="1071:44" pos:end="1071:46"><name pos:start="1071:44" pos:end="1071:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1073:17" pos:end="1073:39"><expr pos:start="1073:17" pos:end="1073:38"><call pos:start="1073:17" pos:end="1073:38"><name pos:start="1073:17" pos:end="1073:33">tcg_temp_free_i32</name><argument_list pos:start="1073:34" pos:end="1073:38">(<argument pos:start="1073:35" pos:end="1073:37"><expr pos:start="1073:35" pos:end="1073:37"><name pos:start="1073:35" pos:end="1073:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1075:17" pos:end="1075:43"><expr pos:start="1075:17" pos:end="1075:42"><call pos:start="1075:17" pos:end="1075:42"><name pos:start="1075:17" pos:end="1075:24">gen_addq</name><argument_list pos:start="1075:25" pos:end="1075:42">(<argument pos:start="1075:26" pos:end="1075:26"><expr pos:start="1075:26" pos:end="1075:26"><name pos:start="1075:26" pos:end="1075:26">s</name></expr></argument>, <argument pos:start="1075:29" pos:end="1075:33"><expr pos:start="1075:29" pos:end="1075:33"><name pos:start="1075:29" pos:end="1075:33">tmp64</name></expr></argument>, <argument pos:start="1075:36" pos:end="1075:37"><expr pos:start="1075:36" pos:end="1075:37"><name pos:start="1075:36" pos:end="1075:37">rs</name></expr></argument>, <argument pos:start="1075:40" pos:end="1075:41"><expr pos:start="1075:40" pos:end="1075:41"><name pos:start="1075:40" pos:end="1075:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1077:17" pos:end="1077:49"><expr pos:start="1077:17" pos:end="1077:48"><call pos:start="1077:17" pos:end="1077:48"><name pos:start="1077:17" pos:end="1077:30">gen_storeq_reg</name><argument_list pos:start="1077:31" pos:end="1077:48">(<argument pos:start="1077:32" pos:end="1077:32"><expr pos:start="1077:32" pos:end="1077:32"><name pos:start="1077:32" pos:end="1077:32">s</name></expr></argument>, <argument pos:start="1077:35" pos:end="1077:36"><expr pos:start="1077:35" pos:end="1077:36"><name pos:start="1077:35" pos:end="1077:36">rs</name></expr></argument>, <argument pos:start="1077:39" pos:end="1077:40"><expr pos:start="1077:39" pos:end="1077:40"><name pos:start="1077:39" pos:end="1077:40">rd</name></expr></argument>, <argument pos:start="1077:43" pos:end="1077:47"><expr pos:start="1077:43" pos:end="1077:47"><name pos:start="1077:43" pos:end="1077:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1079:17" pos:end="1079:41"><expr pos:start="1079:17" pos:end="1079:40"><call pos:start="1079:17" pos:end="1079:40"><name pos:start="1079:17" pos:end="1079:33">tcg_temp_free_i64</name><argument_list pos:start="1079:34" pos:end="1079:40">(<argument pos:start="1079:35" pos:end="1079:39"><expr pos:start="1079:35" pos:end="1079:39"><name pos:start="1079:35" pos:end="1079:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1081:15" pos:end="1135:13">else <block pos:start="1081:20" pos:end="1135:13">{<block_content pos:start="1083:17" pos:end="1133:41">

                <if_stmt pos:start="1083:17" pos:end="1113:17"><if pos:start="1083:17" pos:end="1089:17">if <condition pos:start="1083:20" pos:end="1083:30">(<expr pos:start="1083:21" pos:end="1083:29"><name pos:start="1083:21" pos:end="1083:22">op</name> <operator pos:start="1083:24" pos:end="1083:24">&amp;</operator> <literal type="number" pos:start="1083:26" pos:end="1083:29">0x20</literal></expr>)</condition> <block pos:start="1083:32" pos:end="1089:17">{<block_content pos:start="1087:21" pos:end="1087:56">

                    <comment type="block" pos:start="1085:21" pos:end="1085:51">/* Unsigned 64-bit multiply  */</comment>

                    <expr_stmt pos:start="1087:21" pos:end="1087:56"><expr pos:start="1087:21" pos:end="1087:55"><name pos:start="1087:21" pos:end="1087:25">tmp64</name> <operator pos:start="1087:27" pos:end="1087:27">=</operator> <call pos:start="1087:29" pos:end="1087:55"><name pos:start="1087:29" pos:end="1087:44">gen_mulu_i64_i32</name><argument_list pos:start="1087:45" pos:end="1087:55">(<argument pos:start="1087:46" pos:end="1087:48"><expr pos:start="1087:46" pos:end="1087:48"><name pos:start="1087:46" pos:end="1087:48">tmp</name></expr></argument>, <argument pos:start="1087:51" pos:end="1087:54"><expr pos:start="1087:51" pos:end="1087:54"><name pos:start="1087:51" pos:end="1087:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1089:19" pos:end="1113:17">else <block pos:start="1089:24" pos:end="1113:17">{<block_content pos:start="1091:21" pos:end="1111:21">

                    <if_stmt pos:start="1091:21" pos:end="1111:21"><if pos:start="1091:21" pos:end="1105:21">if <condition pos:start="1091:24" pos:end="1091:31">(<expr pos:start="1091:25" pos:end="1091:30"><name pos:start="1091:25" pos:end="1091:26">op</name> <operator pos:start="1091:28" pos:end="1091:28">&amp;</operator> <literal type="number" pos:start="1091:30" pos:end="1091:30">8</literal></expr>)</condition> <block pos:start="1091:33" pos:end="1105:21">{<block_content pos:start="1095:25" pos:end="1103:47">

                        <comment type="block" pos:start="1093:25" pos:end="1093:37">/* smlalxy */</comment>

                        <expr_stmt pos:start="1095:25" pos:end="1095:61"><expr pos:start="1095:25" pos:end="1095:60"><call pos:start="1095:25" pos:end="1095:60"><name pos:start="1095:25" pos:end="1095:33">gen_mulxy</name><argument_list pos:start="1095:34" pos:end="1095:60">(<argument pos:start="1095:35" pos:end="1095:37"><expr pos:start="1095:35" pos:end="1095:37"><name pos:start="1095:35" pos:end="1095:37">tmp</name></expr></argument>, <argument pos:start="1095:40" pos:end="1095:43"><expr pos:start="1095:40" pos:end="1095:43"><name pos:start="1095:40" pos:end="1095:43">tmp2</name></expr></argument>, <argument pos:start="1095:46" pos:end="1095:51"><expr pos:start="1095:46" pos:end="1095:51"><name pos:start="1095:46" pos:end="1095:47">op</name> <operator pos:start="1095:49" pos:end="1095:49">&amp;</operator> <literal type="number" pos:start="1095:51" pos:end="1095:51">2</literal></expr></argument>, <argument pos:start="1095:54" pos:end="1095:59"><expr pos:start="1095:54" pos:end="1095:59"><name pos:start="1095:54" pos:end="1095:55">op</name> <operator pos:start="1095:57" pos:end="1095:57">&amp;</operator> <literal type="number" pos:start="1095:59" pos:end="1095:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1097:25" pos:end="1097:48"><expr pos:start="1097:25" pos:end="1097:47"><call pos:start="1097:25" pos:end="1097:47"><name pos:start="1097:25" pos:end="1097:41">tcg_temp_free_i32</name><argument_list pos:start="1097:42" pos:end="1097:47">(<argument pos:start="1097:43" pos:end="1097:46"><expr pos:start="1097:43" pos:end="1097:46"><name pos:start="1097:43" pos:end="1097:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1099:25" pos:end="1099:51"><expr pos:start="1099:25" pos:end="1099:50"><name pos:start="1099:25" pos:end="1099:29">tmp64</name> <operator pos:start="1099:31" pos:end="1099:31">=</operator> <call pos:start="1099:33" pos:end="1099:50"><name pos:start="1099:33" pos:end="1099:48">tcg_temp_new_i64</name><argument_list pos:start="1099:49" pos:end="1099:50">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1101:25" pos:end="1101:56"><expr pos:start="1101:25" pos:end="1101:55"><call pos:start="1101:25" pos:end="1101:55"><name pos:start="1101:25" pos:end="1101:43">tcg_gen_ext_i32_i64</name><argument_list pos:start="1101:44" pos:end="1101:55">(<argument pos:start="1101:45" pos:end="1101:49"><expr pos:start="1101:45" pos:end="1101:49"><name pos:start="1101:45" pos:end="1101:49">tmp64</name></expr></argument>, <argument pos:start="1101:52" pos:end="1101:54"><expr pos:start="1101:52" pos:end="1101:54"><name pos:start="1101:52" pos:end="1101:54">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1103:25" pos:end="1103:47"><expr pos:start="1103:25" pos:end="1103:46"><call pos:start="1103:25" pos:end="1103:46"><name pos:start="1103:25" pos:end="1103:41">tcg_temp_free_i32</name><argument_list pos:start="1103:42" pos:end="1103:46">(<argument pos:start="1103:43" pos:end="1103:45"><expr pos:start="1103:43" pos:end="1103:45"><name pos:start="1103:43" pos:end="1103:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1105:23" pos:end="1111:21">else <block pos:start="1105:28" pos:end="1111:21">{<block_content pos:start="1109:25" pos:end="1109:60">

                        <comment type="block" pos:start="1107:25" pos:end="1107:53">/* Signed 64-bit multiply  */</comment>

                        <expr_stmt pos:start="1109:25" pos:end="1109:60"><expr pos:start="1109:25" pos:end="1109:59"><name pos:start="1109:25" pos:end="1109:29">tmp64</name> <operator pos:start="1109:31" pos:end="1109:31">=</operator> <call pos:start="1109:33" pos:end="1109:59"><name pos:start="1109:33" pos:end="1109:48">gen_muls_i64_i32</name><argument_list pos:start="1109:49" pos:end="1109:59">(<argument pos:start="1109:50" pos:end="1109:52"><expr pos:start="1109:50" pos:end="1109:52"><name pos:start="1109:50" pos:end="1109:52">tmp</name></expr></argument>, <argument pos:start="1109:55" pos:end="1109:58"><expr pos:start="1109:55" pos:end="1109:58"><name pos:start="1109:55" pos:end="1109:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="1115:17" pos:end="1129:17"><if pos:start="1115:17" pos:end="1123:17">if <condition pos:start="1115:20" pos:end="1115:27">(<expr pos:start="1115:21" pos:end="1115:26"><name pos:start="1115:21" pos:end="1115:22">op</name> <operator pos:start="1115:24" pos:end="1115:24">&amp;</operator> <literal type="number" pos:start="1115:26" pos:end="1115:26">4</literal></expr>)</condition> <block pos:start="1115:29" pos:end="1123:17">{<block_content pos:start="1119:21" pos:end="1121:46">

                    <comment type="block" pos:start="1117:21" pos:end="1117:31">/* umaal */</comment>

                    <expr_stmt pos:start="1119:21" pos:end="1119:46"><expr pos:start="1119:21" pos:end="1119:45"><call pos:start="1119:21" pos:end="1119:45"><name pos:start="1119:21" pos:end="1119:31">gen_addq_lo</name><argument_list pos:start="1119:32" pos:end="1119:45">(<argument pos:start="1119:33" pos:end="1119:33"><expr pos:start="1119:33" pos:end="1119:33"><name pos:start="1119:33" pos:end="1119:33">s</name></expr></argument>, <argument pos:start="1119:36" pos:end="1119:40"><expr pos:start="1119:36" pos:end="1119:40"><name pos:start="1119:36" pos:end="1119:40">tmp64</name></expr></argument>, <argument pos:start="1119:43" pos:end="1119:44"><expr pos:start="1119:43" pos:end="1119:44"><name pos:start="1119:43" pos:end="1119:44">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1121:21" pos:end="1121:46"><expr pos:start="1121:21" pos:end="1121:45"><call pos:start="1121:21" pos:end="1121:45"><name pos:start="1121:21" pos:end="1121:31">gen_addq_lo</name><argument_list pos:start="1121:32" pos:end="1121:45">(<argument pos:start="1121:33" pos:end="1121:33"><expr pos:start="1121:33" pos:end="1121:33"><name pos:start="1121:33" pos:end="1121:33">s</name></expr></argument>, <argument pos:start="1121:36" pos:end="1121:40"><expr pos:start="1121:36" pos:end="1121:40"><name pos:start="1121:36" pos:end="1121:40">tmp64</name></expr></argument>, <argument pos:start="1121:43" pos:end="1121:44"><expr pos:start="1121:43" pos:end="1121:44"><name pos:start="1121:43" pos:end="1121:44">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1123:19" pos:end="1129:17">else if <condition pos:start="1123:27" pos:end="1123:37">(<expr pos:start="1123:28" pos:end="1123:36"><name pos:start="1123:28" pos:end="1123:29">op</name> <operator pos:start="1123:31" pos:end="1123:31">&amp;</operator> <literal type="number" pos:start="1123:33" pos:end="1123:36">0x40</literal></expr>)</condition> <block pos:start="1123:39" pos:end="1129:17">{<block_content pos:start="1127:21" pos:end="1127:47">

                    <comment type="block" pos:start="1125:21" pos:end="1125:45">/* 64-bit accumulate.  */</comment>

                    <expr_stmt pos:start="1127:21" pos:end="1127:47"><expr pos:start="1127:21" pos:end="1127:46"><call pos:start="1127:21" pos:end="1127:46"><name pos:start="1127:21" pos:end="1127:28">gen_addq</name><argument_list pos:start="1127:29" pos:end="1127:46">(<argument pos:start="1127:30" pos:end="1127:30"><expr pos:start="1127:30" pos:end="1127:30"><name pos:start="1127:30" pos:end="1127:30">s</name></expr></argument>, <argument pos:start="1127:33" pos:end="1127:37"><expr pos:start="1127:33" pos:end="1127:37"><name pos:start="1127:33" pos:end="1127:37">tmp64</name></expr></argument>, <argument pos:start="1127:40" pos:end="1127:41"><expr pos:start="1127:40" pos:end="1127:41"><name pos:start="1127:40" pos:end="1127:41">rs</name></expr></argument>, <argument pos:start="1127:44" pos:end="1127:45"><expr pos:start="1127:44" pos:end="1127:45"><name pos:start="1127:44" pos:end="1127:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1131:17" pos:end="1131:49"><expr pos:start="1131:17" pos:end="1131:48"><call pos:start="1131:17" pos:end="1131:48"><name pos:start="1131:17" pos:end="1131:30">gen_storeq_reg</name><argument_list pos:start="1131:31" pos:end="1131:48">(<argument pos:start="1131:32" pos:end="1131:32"><expr pos:start="1131:32" pos:end="1131:32"><name pos:start="1131:32" pos:end="1131:32">s</name></expr></argument>, <argument pos:start="1131:35" pos:end="1131:36"><expr pos:start="1131:35" pos:end="1131:36"><name pos:start="1131:35" pos:end="1131:36">rs</name></expr></argument>, <argument pos:start="1131:39" pos:end="1131:40"><expr pos:start="1131:39" pos:end="1131:40"><name pos:start="1131:39" pos:end="1131:40">rd</name></expr></argument>, <argument pos:start="1131:43" pos:end="1131:47"><expr pos:start="1131:43" pos:end="1131:47"><name pos:start="1131:43" pos:end="1131:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1133:41"><expr pos:start="1133:17" pos:end="1133:40"><call pos:start="1133:17" pos:end="1133:40"><name pos:start="1133:17" pos:end="1133:33">tcg_temp_free_i64</name><argument_list pos:start="1133:34" pos:end="1133:40">(<argument pos:start="1133:35" pos:end="1133:39"><expr pos:start="1133:35" pos:end="1133:39"><name pos:start="1133:35" pos:end="1133:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1137:13" pos:end="1137:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1141:9" pos:end="1141:14">break;</break>

    <case pos:start="1143:5" pos:end="1143:11">case <expr pos:start="1143:10" pos:end="1143:10"><literal type="number" pos:start="1143:10" pos:end="1143:10">6</literal></expr>:</case> <case pos:start="1143:13" pos:end="1143:19">case <expr pos:start="1143:18" pos:end="1143:18"><literal type="number" pos:start="1143:18" pos:end="1143:18">7</literal></expr>:</case> <case pos:start="1143:21" pos:end="1143:28">case <expr pos:start="1143:26" pos:end="1143:27"><literal type="number" pos:start="1143:26" pos:end="1143:27">14</literal></expr>:</case> <case pos:start="1143:30" pos:end="1143:37">case <expr pos:start="1143:35" pos:end="1143:36"><literal type="number" pos:start="1143:35" pos:end="1143:36">15</literal></expr>:</case>

        <comment type="block" pos:start="1145:9" pos:end="1145:27">/* Coprocessor.  */</comment>

        <if_stmt pos:start="1147:9" pos:end="1167:9"><if pos:start="1147:9" pos:end="1157:9">if <condition pos:start="1147:12" pos:end="1147:36">(<expr pos:start="1147:13" pos:end="1147:35"><operator pos:start="1147:13" pos:end="1147:13">(</operator><operator pos:start="1147:14" pos:end="1147:14">(</operator><name pos:start="1147:15" pos:end="1147:18">insn</name> <operator pos:start="1147:20" pos:end="1147:21">&gt;&gt;</operator> <literal type="number" pos:start="1147:23" pos:end="1147:24">24</literal><operator pos:start="1147:25" pos:end="1147:25">)</operator> <operator pos:start="1147:27" pos:end="1147:27">&amp;</operator> <literal type="number" pos:start="1147:29" pos:end="1147:29">3</literal><operator pos:start="1147:30" pos:end="1147:30">)</operator> <operator pos:start="1147:32" pos:end="1147:33">==</operator> <literal type="number" pos:start="1147:35" pos:end="1147:35">3</literal></expr>)</condition> <block pos:start="1147:38" pos:end="1157:9">{<block_content pos:start="1151:13" pos:end="1155:32">

            <comment type="block" pos:start="1149:13" pos:end="1149:62">/* Translate into the equivalent ARM encoding.  */</comment>

            <expr_stmt pos:start="1151:13" pos:end="1151:79"><expr pos:start="1151:13" pos:end="1151:78"><name pos:start="1151:13" pos:end="1151:16">insn</name> <operator pos:start="1151:18" pos:end="1151:18">=</operator> <operator pos:start="1151:20" pos:end="1151:20">(</operator><name pos:start="1151:21" pos:end="1151:24">insn</name> <operator pos:start="1151:26" pos:end="1151:26">&amp;</operator> <literal type="number" pos:start="1151:28" pos:end="1151:37">0xe2ffffff</literal><operator pos:start="1151:38" pos:end="1151:38">)</operator> <operator pos:start="1151:40" pos:end="1151:40">|</operator> <operator pos:start="1151:42" pos:end="1151:42">(</operator><operator pos:start="1151:43" pos:end="1151:43">(</operator><name pos:start="1151:44" pos:end="1151:47">insn</name> <operator pos:start="1151:49" pos:end="1151:49">&amp;</operator> <operator pos:start="1151:51" pos:end="1151:51">(</operator><literal type="number" pos:start="1151:52" pos:end="1151:52">1</literal> <operator pos:start="1151:54" pos:end="1151:55">&lt;&lt;</operator> <literal type="number" pos:start="1151:57" pos:end="1151:58">28</literal><operator pos:start="1151:59" pos:end="1151:59">)</operator><operator pos:start="1151:60" pos:end="1151:60">)</operator> <operator pos:start="1151:62" pos:end="1151:63">&gt;&gt;</operator> <literal type="number" pos:start="1151:65" pos:end="1151:65">4</literal><operator pos:start="1151:66" pos:end="1151:66">)</operator> <operator pos:start="1151:68" pos:end="1151:68">|</operator> <operator pos:start="1151:70" pos:end="1151:70">(</operator><literal type="number" pos:start="1151:71" pos:end="1151:71">1</literal> <operator pos:start="1151:73" pos:end="1151:74">&lt;&lt;</operator> <literal type="number" pos:start="1151:76" pos:end="1151:77">28</literal><operator pos:start="1151:78" pos:end="1151:78">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1153:13" pos:end="1155:32"><if pos:start="1153:13" pos:end="1155:32">if <condition pos:start="1153:16" pos:end="1153:51">(<expr pos:start="1153:17" pos:end="1153:50"><call pos:start="1153:17" pos:end="1153:50"><name pos:start="1153:17" pos:end="1153:36">disas_neon_data_insn</name><argument_list pos:start="1153:37" pos:end="1153:50">(<argument pos:start="1153:38" pos:end="1153:40"><expr pos:start="1153:38" pos:end="1153:40"><name pos:start="1153:38" pos:end="1153:40">env</name></expr></argument>, <argument pos:start="1153:43" pos:end="1153:43"><expr pos:start="1153:43" pos:end="1153:43"><name pos:start="1153:43" pos:end="1153:43">s</name></expr></argument>, <argument pos:start="1153:46" pos:end="1153:49"><expr pos:start="1153:46" pos:end="1153:49"><name pos:start="1153:46" pos:end="1153:49">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1155:17" pos:end="1155:32"><block_content pos:start="1155:17" pos:end="1155:32">

                <goto pos:start="1155:17" pos:end="1155:32">goto <name pos:start="1155:22" pos:end="1155:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1157:11" pos:end="1167:9">else <block pos:start="1157:16" pos:end="1167:9">{<block_content pos:start="1159:13" pos:end="1165:32">

            <if_stmt pos:start="1159:13" pos:end="1161:32"><if pos:start="1159:13" pos:end="1161:32">if <condition pos:start="1159:16" pos:end="1159:33">(<expr pos:start="1159:17" pos:end="1159:32"><name pos:start="1159:17" pos:end="1159:20">insn</name> <operator pos:start="1159:22" pos:end="1159:22">&amp;</operator> <operator pos:start="1159:24" pos:end="1159:24">(</operator><literal type="number" pos:start="1159:25" pos:end="1159:25">1</literal> <operator pos:start="1159:27" pos:end="1159:28">&lt;&lt;</operator> <literal type="number" pos:start="1159:30" pos:end="1159:31">28</literal><operator pos:start="1159:32" pos:end="1159:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1161:17" pos:end="1161:32"><block_content pos:start="1161:17" pos:end="1161:32">

                <goto pos:start="1161:17" pos:end="1161:32">goto <name pos:start="1161:22" pos:end="1161:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1163:13" pos:end="1165:32"><if pos:start="1163:13" pos:end="1165:32">if <condition pos:start="1163:16" pos:end="1163:49">(<expr pos:start="1163:17" pos:end="1163:48"><call pos:start="1163:17" pos:end="1163:48"><name pos:start="1163:17" pos:end="1163:33">disas_coproc_insn</name> <argument_list pos:start="1163:35" pos:end="1163:48">(<argument pos:start="1163:36" pos:end="1163:38"><expr pos:start="1163:36" pos:end="1163:38"><name pos:start="1163:36" pos:end="1163:38">env</name></expr></argument>, <argument pos:start="1163:41" pos:end="1163:41"><expr pos:start="1163:41" pos:end="1163:41"><name pos:start="1163:41" pos:end="1163:41">s</name></expr></argument>, <argument pos:start="1163:44" pos:end="1163:47"><expr pos:start="1163:44" pos:end="1163:47"><name pos:start="1163:44" pos:end="1163:47">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1165:17" pos:end="1165:32"><block_content pos:start="1165:17" pos:end="1165:32">

                <goto pos:start="1165:17" pos:end="1165:32">goto <name pos:start="1165:22" pos:end="1165:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1169:9" pos:end="1169:14">break;</break>

    <case pos:start="1171:5" pos:end="1171:11">case <expr pos:start="1171:10" pos:end="1171:10"><literal type="number" pos:start="1171:10" pos:end="1171:10">8</literal></expr>:</case> <case pos:start="1171:13" pos:end="1171:19">case <expr pos:start="1171:18" pos:end="1171:18"><literal type="number" pos:start="1171:18" pos:end="1171:18">9</literal></expr>:</case> <case pos:start="1171:21" pos:end="1171:28">case <expr pos:start="1171:26" pos:end="1171:27"><literal type="number" pos:start="1171:26" pos:end="1171:27">10</literal></expr>:</case> <case pos:start="1171:30" pos:end="1171:37">case <expr pos:start="1171:35" pos:end="1171:36"><literal type="number" pos:start="1171:35" pos:end="1171:36">11</literal></expr>:</case>

        <if_stmt pos:start="1173:9" pos:end="1797:9"><if pos:start="1173:9" pos:end="1493:9">if <condition pos:start="1173:12" pos:end="1173:29">(<expr pos:start="1173:13" pos:end="1173:28"><name pos:start="1173:13" pos:end="1173:16">insn</name> <operator pos:start="1173:18" pos:end="1173:18">&amp;</operator> <operator pos:start="1173:20" pos:end="1173:20">(</operator><literal type="number" pos:start="1173:21" pos:end="1173:21">1</literal> <operator pos:start="1173:23" pos:end="1173:24">&lt;&lt;</operator> <literal type="number" pos:start="1173:26" pos:end="1173:27">15</literal><operator pos:start="1173:28" pos:end="1173:28">)</operator></expr>)</condition> <block pos:start="1173:31" pos:end="1493:9">{<block_content pos:start="1177:13" pos:end="1491:13">

            <comment type="block" pos:start="1175:13" pos:end="1175:42">/* Branches, misc control.  */</comment>

            <if_stmt pos:start="1177:13" pos:end="1491:13"><if pos:start="1177:13" pos:end="1229:13">if <condition pos:start="1177:16" pos:end="1177:30">(<expr pos:start="1177:17" pos:end="1177:29"><name pos:start="1177:17" pos:end="1177:20">insn</name> <operator pos:start="1177:22" pos:end="1177:22">&amp;</operator> <literal type="number" pos:start="1177:24" pos:end="1177:29">0x5000</literal></expr>)</condition> <block pos:start="1177:32" pos:end="1229:13">{<block_content pos:start="1183:17" pos:end="1227:17">

                <comment type="block" pos:start="1179:17" pos:end="1179:44">/* Unconditional branch.  */</comment>

                <comment type="block" pos:start="1181:17" pos:end="1181:60">/* signextend(hw1[10:0]) -&gt; offset[:12].  */</comment>

                <expr_stmt pos:start="1183:17" pos:end="1183:69"><expr pos:start="1183:17" pos:end="1183:68"><name pos:start="1183:17" pos:end="1183:22">offset</name> <operator pos:start="1183:24" pos:end="1183:24">=</operator> <operator pos:start="1183:26" pos:end="1183:26">(</operator><operator pos:start="1183:27" pos:end="1183:27">(</operator><name pos:start="1183:28" pos:end="1183:34">int32_t</name><operator pos:start="1183:35" pos:end="1183:35">)</operator><name pos:start="1183:36" pos:end="1183:39">insn</name> <operator pos:start="1183:41" pos:end="1183:42">&lt;&lt;</operator> <literal type="number" pos:start="1183:44" pos:end="1183:44">5</literal><operator pos:start="1183:45" pos:end="1183:45">)</operator> <operator pos:start="1183:47" pos:end="1183:48">&gt;&gt;</operator> <literal type="number" pos:start="1183:50" pos:end="1183:50">9</literal> <operator pos:start="1183:52" pos:end="1183:52">&amp;</operator> <operator pos:start="1183:54" pos:end="1183:54">~</operator><operator pos:start="1183:55" pos:end="1183:55">(</operator><name pos:start="1183:56" pos:end="1183:62">int32_t</name><operator pos:start="1183:63" pos:end="1183:63">)</operator><literal type="number" pos:start="1183:64" pos:end="1183:68">0xfff</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1185:17" pos:end="1185:49">/* hw1[10:0] -&gt; offset[11:1].  */</comment>

                <expr_stmt pos:start="1187:17" pos:end="1187:46"><expr pos:start="1187:17" pos:end="1187:45"><name pos:start="1187:17" pos:end="1187:22">offset</name> <operator pos:start="1187:24" pos:end="1187:25">|=</operator> <operator pos:start="1187:27" pos:end="1187:27">(</operator><name pos:start="1187:28" pos:end="1187:31">insn</name> <operator pos:start="1187:33" pos:end="1187:33">&amp;</operator> <literal type="number" pos:start="1187:35" pos:end="1187:39">0x7ff</literal><operator pos:start="1187:40" pos:end="1187:40">)</operator> <operator pos:start="1187:42" pos:end="1187:43">&lt;&lt;</operator> <literal type="number" pos:start="1187:45" pos:end="1187:45">1</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1189:17" pos:end="1193:44">/* (~hw2[13, 11] ^ offset[24]) -&gt; offset[23,22]

                   offset[24:22] already have the same value because of the

                   sign extension above.  */</comment>

                <expr_stmt pos:start="1195:17" pos:end="1195:54"><expr pos:start="1195:17" pos:end="1195:53"><name pos:start="1195:17" pos:end="1195:22">offset</name> <operator pos:start="1195:24" pos:end="1195:25">^=</operator> <operator pos:start="1195:27" pos:end="1195:27">(</operator><operator pos:start="1195:28" pos:end="1195:28">(</operator><operator pos:start="1195:29" pos:end="1195:29">~</operator><name pos:start="1195:30" pos:end="1195:33">insn</name><operator pos:start="1195:34" pos:end="1195:34">)</operator> <operator pos:start="1195:36" pos:end="1195:36">&amp;</operator> <operator pos:start="1195:38" pos:end="1195:38">(</operator><literal type="number" pos:start="1195:39" pos:end="1195:39">1</literal> <operator pos:start="1195:41" pos:end="1195:42">&lt;&lt;</operator> <literal type="number" pos:start="1195:44" pos:end="1195:45">13</literal><operator pos:start="1195:46" pos:end="1195:46">)</operator><operator pos:start="1195:47" pos:end="1195:47">)</operator> <operator pos:start="1195:49" pos:end="1195:50">&lt;&lt;</operator> <literal type="number" pos:start="1195:52" pos:end="1195:53">10</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1197:17" pos:end="1197:54"><expr pos:start="1197:17" pos:end="1197:53"><name pos:start="1197:17" pos:end="1197:22">offset</name> <operator pos:start="1197:24" pos:end="1197:25">^=</operator> <operator pos:start="1197:27" pos:end="1197:27">(</operator><operator pos:start="1197:28" pos:end="1197:28">(</operator><operator pos:start="1197:29" pos:end="1197:29">~</operator><name pos:start="1197:30" pos:end="1197:33">insn</name><operator pos:start="1197:34" pos:end="1197:34">)</operator> <operator pos:start="1197:36" pos:end="1197:36">&amp;</operator> <operator pos:start="1197:38" pos:end="1197:38">(</operator><literal type="number" pos:start="1197:39" pos:end="1197:39">1</literal> <operator pos:start="1197:41" pos:end="1197:42">&lt;&lt;</operator> <literal type="number" pos:start="1197:44" pos:end="1197:45">11</literal><operator pos:start="1197:46" pos:end="1197:46">)</operator><operator pos:start="1197:47" pos:end="1197:47">)</operator> <operator pos:start="1197:49" pos:end="1197:50">&lt;&lt;</operator> <literal type="number" pos:start="1197:52" pos:end="1197:53">11</literal></expr>;</expr_stmt>



                <if_stmt pos:start="1201:17" pos:end="1207:17"><if pos:start="1201:17" pos:end="1207:17">if <condition pos:start="1201:20" pos:end="1201:37">(<expr pos:start="1201:21" pos:end="1201:36"><name pos:start="1201:21" pos:end="1201:24">insn</name> <operator pos:start="1201:26" pos:end="1201:26">&amp;</operator> <operator pos:start="1201:28" pos:end="1201:28">(</operator><literal type="number" pos:start="1201:29" pos:end="1201:29">1</literal> <operator pos:start="1201:31" pos:end="1201:32">&lt;&lt;</operator> <literal type="number" pos:start="1201:34" pos:end="1201:35">14</literal><operator pos:start="1201:36" pos:end="1201:36">)</operator></expr>)</condition> <block pos:start="1201:39" pos:end="1207:17">{<block_content pos:start="1205:21" pos:end="1205:59">

                    <comment type="block" pos:start="1203:21" pos:end="1203:43">/* Branch and link.  */</comment>

                    <expr_stmt pos:start="1205:21" pos:end="1205:59"><expr pos:start="1205:21" pos:end="1205:58"><call pos:start="1205:21" pos:end="1205:58"><name pos:start="1205:21" pos:end="1205:36">tcg_gen_movi_i32</name><argument_list pos:start="1205:37" pos:end="1205:58">(<argument pos:start="1205:38" pos:end="1205:46"><expr pos:start="1205:38" pos:end="1205:46"><name pos:start="1205:38" pos:end="1205:46"><name pos:start="1205:38" pos:end="1205:42">cpu_R</name><index pos:start="1205:43" pos:end="1205:46">[<expr pos:start="1205:44" pos:end="1205:45"><literal type="number" pos:start="1205:44" pos:end="1205:45">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="1205:49" pos:end="1205:57"><expr pos:start="1205:49" pos:end="1205:57"><name pos:start="1205:49" pos:end="1205:53"><name pos:start="1205:49" pos:end="1205:49">s</name><operator pos:start="1205:50" pos:end="1205:51">-&gt;</operator><name pos:start="1205:52" pos:end="1205:53">pc</name></name> <operator pos:start="1205:55" pos:end="1205:55">|</operator> <literal type="number" pos:start="1205:57" pos:end="1205:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="1211:17" pos:end="1211:32"><expr pos:start="1211:17" pos:end="1211:31"><name pos:start="1211:17" pos:end="1211:22">offset</name> <operator pos:start="1211:24" pos:end="1211:25">+=</operator> <name pos:start="1211:27" pos:end="1211:31"><name pos:start="1211:27" pos:end="1211:27">s</name><operator pos:start="1211:28" pos:end="1211:29">-&gt;</operator><name pos:start="1211:30" pos:end="1211:31">pc</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="1213:17" pos:end="1227:17"><if pos:start="1213:17" pos:end="1219:17">if <condition pos:start="1213:20" pos:end="1213:37">(<expr pos:start="1213:21" pos:end="1213:36"><name pos:start="1213:21" pos:end="1213:24">insn</name> <operator pos:start="1213:26" pos:end="1213:26">&amp;</operator> <operator pos:start="1213:28" pos:end="1213:28">(</operator><literal type="number" pos:start="1213:29" pos:end="1213:29">1</literal> <operator pos:start="1213:31" pos:end="1213:32">&lt;&lt;</operator> <literal type="number" pos:start="1213:34" pos:end="1213:35">12</literal><operator pos:start="1213:36" pos:end="1213:36">)</operator></expr>)</condition> <block pos:start="1213:39" pos:end="1219:17">{<block_content pos:start="1217:21" pos:end="1217:39">

                    <comment type="block" pos:start="1215:21" pos:end="1215:30">/* b/bl */</comment>

                    <expr_stmt pos:start="1217:21" pos:end="1217:39"><expr pos:start="1217:21" pos:end="1217:38"><call pos:start="1217:21" pos:end="1217:38"><name pos:start="1217:21" pos:end="1217:27">gen_jmp</name><argument_list pos:start="1217:28" pos:end="1217:38">(<argument pos:start="1217:29" pos:end="1217:29"><expr pos:start="1217:29" pos:end="1217:29"><name pos:start="1217:29" pos:end="1217:29">s</name></expr></argument>, <argument pos:start="1217:32" pos:end="1217:37"><expr pos:start="1217:32" pos:end="1217:37"><name pos:start="1217:32" pos:end="1217:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1219:19" pos:end="1227:17">else <block pos:start="1219:24" pos:end="1227:17">{<block_content pos:start="1223:21" pos:end="1225:41">

                    <comment type="block" pos:start="1221:21" pos:end="1221:29">/* blx */</comment>

                    <expr_stmt pos:start="1223:21" pos:end="1223:43"><expr pos:start="1223:21" pos:end="1223:42"><name pos:start="1223:21" pos:end="1223:26">offset</name> <operator pos:start="1223:28" pos:end="1223:29">&amp;=</operator> <operator pos:start="1223:31" pos:end="1223:31">~</operator><operator pos:start="1223:32" pos:end="1223:32">(</operator><name pos:start="1223:33" pos:end="1223:40">uint32_t</name><operator pos:start="1223:41" pos:end="1223:41">)</operator><literal type="number" pos:start="1223:42" pos:end="1223:42">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1225:21" pos:end="1225:41"><expr pos:start="1225:21" pos:end="1225:40"><call pos:start="1225:21" pos:end="1225:40"><name pos:start="1225:21" pos:end="1225:29">gen_bx_im</name><argument_list pos:start="1225:30" pos:end="1225:40">(<argument pos:start="1225:31" pos:end="1225:31"><expr pos:start="1225:31" pos:end="1225:31"><name pos:start="1225:31" pos:end="1225:31">s</name></expr></argument>, <argument pos:start="1225:34" pos:end="1225:39"><expr pos:start="1225:34" pos:end="1225:39"><name pos:start="1225:34" pos:end="1225:39">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1229:15" pos:end="1449:13">else if <condition pos:start="1229:23" pos:end="1229:47">(<expr pos:start="1229:24" pos:end="1229:46"><operator pos:start="1229:24" pos:end="1229:24">(</operator><operator pos:start="1229:25" pos:end="1229:25">(</operator><name pos:start="1229:26" pos:end="1229:29">insn</name> <operator pos:start="1229:31" pos:end="1229:32">&gt;&gt;</operator> <literal type="number" pos:start="1229:34" pos:end="1229:35">23</literal><operator pos:start="1229:36" pos:end="1229:36">)</operator> <operator pos:start="1229:38" pos:end="1229:38">&amp;</operator> <literal type="number" pos:start="1229:40" pos:end="1229:40">7</literal><operator pos:start="1229:41" pos:end="1229:41">)</operator> <operator pos:start="1229:43" pos:end="1229:44">==</operator> <literal type="number" pos:start="1229:46" pos:end="1229:46">7</literal></expr>)</condition> <block pos:start="1229:49" pos:end="1449:13">{<block_content pos:start="1233:17" pos:end="1447:17">

                <comment type="block" pos:start="1231:17" pos:end="1231:34">/* Misc control */</comment>

                <if_stmt pos:start="1233:17" pos:end="1235:36"><if pos:start="1233:17" pos:end="1235:36">if <condition pos:start="1233:20" pos:end="1233:37">(<expr pos:start="1233:21" pos:end="1233:36"><name pos:start="1233:21" pos:end="1233:24">insn</name> <operator pos:start="1233:26" pos:end="1233:26">&amp;</operator> <operator pos:start="1233:28" pos:end="1233:28">(</operator><literal type="number" pos:start="1233:29" pos:end="1233:29">1</literal> <operator pos:start="1233:31" pos:end="1233:32">&lt;&lt;</operator> <literal type="number" pos:start="1233:34" pos:end="1233:35">13</literal><operator pos:start="1233:36" pos:end="1233:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1235:21" pos:end="1235:36"><block_content pos:start="1235:21" pos:end="1235:36">

                    <goto pos:start="1235:21" pos:end="1235:36">goto <name pos:start="1235:26" pos:end="1235:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>



                <if_stmt pos:start="1239:17" pos:end="1447:17"><if pos:start="1239:17" pos:end="1245:17">if <condition pos:start="1239:20" pos:end="1239:37">(<expr pos:start="1239:21" pos:end="1239:36"><name pos:start="1239:21" pos:end="1239:24">insn</name> <operator pos:start="1239:26" pos:end="1239:26">&amp;</operator> <operator pos:start="1239:28" pos:end="1239:28">(</operator><literal type="number" pos:start="1239:29" pos:end="1239:29">1</literal> <operator pos:start="1239:31" pos:end="1239:32">&lt;&lt;</operator> <literal type="number" pos:start="1239:34" pos:end="1239:35">26</literal><operator pos:start="1239:36" pos:end="1239:36">)</operator></expr>)</condition> <block pos:start="1239:39" pos:end="1245:17">{<block_content pos:start="1243:21" pos:end="1243:36">

                    <comment type="block" pos:start="1241:21" pos:end="1241:51">/* Secure monitor call (v6Z) */</comment>

                    <goto pos:start="1243:21" pos:end="1243:36">goto <name pos:start="1243:26" pos:end="1243:35">illegal_op</name>;</goto> <comment type="block" pos:start="1243:38" pos:end="1243:60">/* not implemented.  */</comment>

                </block_content>}</block></if> <else pos:start="1245:19" pos:end="1447:17">else <block pos:start="1245:24" pos:end="1447:17">{<block_content pos:start="1247:21" pos:end="1445:21">

                    <expr_stmt pos:start="1247:21" pos:end="1247:42"><expr pos:start="1247:21" pos:end="1247:41"><name pos:start="1247:21" pos:end="1247:22">op</name> <operator pos:start="1247:24" pos:end="1247:24">=</operator> <operator pos:start="1247:26" pos:end="1247:26">(</operator><name pos:start="1247:27" pos:end="1247:30">insn</name> <operator pos:start="1247:32" pos:end="1247:33">&gt;&gt;</operator> <literal type="number" pos:start="1247:35" pos:end="1247:36">20</literal><operator pos:start="1247:37" pos:end="1247:37">)</operator> <operator pos:start="1247:39" pos:end="1247:39">&amp;</operator> <literal type="number" pos:start="1247:41" pos:end="1247:41">7</literal></expr>;</expr_stmt>

                    <switch pos:start="1249:21" pos:end="1445:21">switch <condition pos:start="1249:28" pos:end="1249:31">(<expr pos:start="1249:29" pos:end="1249:30"><name pos:start="1249:29" pos:end="1249:30">op</name></expr>)</condition> <block pos:start="1249:33" pos:end="1445:21">{<block_content pos:start="1251:21" pos:end="1443:30">

                    <case pos:start="1251:21" pos:end="1251:27">case <expr pos:start="1251:26" pos:end="1251:26"><literal type="number" pos:start="1251:26" pos:end="1251:26">0</literal></expr>:</case> <comment type="block" pos:start="1251:29" pos:end="1251:44">/* msr cpsr.  */</comment>

                        <if_stmt pos:start="1253:25" pos:end="1269:25"><if pos:start="1253:25" pos:end="1269:25">if <condition pos:start="1253:28" pos:end="1253:38">(<expr pos:start="1253:29" pos:end="1253:37"><call pos:start="1253:29" pos:end="1253:37"><name pos:start="1253:29" pos:end="1253:32">IS_M</name><argument_list pos:start="1253:33" pos:end="1253:37">(<argument pos:start="1253:34" pos:end="1253:36"><expr pos:start="1253:34" pos:end="1253:36"><name pos:start="1253:34" pos:end="1253:36">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1253:40" pos:end="1269:25">{<block_content pos:start="1255:29" pos:end="1267:34">

                            <expr_stmt pos:start="1255:29" pos:end="1255:50"><expr pos:start="1255:29" pos:end="1255:49"><name pos:start="1255:29" pos:end="1255:31">tmp</name> <operator pos:start="1255:33" pos:end="1255:33">=</operator> <call pos:start="1255:35" pos:end="1255:49"><name pos:start="1255:35" pos:end="1255:42">load_reg</name><argument_list pos:start="1255:43" pos:end="1255:49">(<argument pos:start="1255:44" pos:end="1255:44"><expr pos:start="1255:44" pos:end="1255:44"><name pos:start="1255:44" pos:end="1255:44">s</name></expr></argument>, <argument pos:start="1255:47" pos:end="1255:48"><expr pos:start="1255:47" pos:end="1255:48"><name pos:start="1255:47" pos:end="1255:48">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1257:29" pos:end="1257:62"><expr pos:start="1257:29" pos:end="1257:61"><name pos:start="1257:29" pos:end="1257:32">addr</name> <operator pos:start="1257:34" pos:end="1257:34">=</operator> <call pos:start="1257:36" pos:end="1257:61"><name pos:start="1257:36" pos:end="1257:48">tcg_const_i32</name><argument_list pos:start="1257:49" pos:end="1257:61">(<argument pos:start="1257:50" pos:end="1257:60"><expr pos:start="1257:50" pos:end="1257:60"><name pos:start="1257:50" pos:end="1257:53">insn</name> <operator pos:start="1257:55" pos:end="1257:55">&amp;</operator> <literal type="number" pos:start="1257:57" pos:end="1257:60">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1259:29" pos:end="1259:67"><expr pos:start="1259:29" pos:end="1259:66"><call pos:start="1259:29" pos:end="1259:66"><name pos:start="1259:29" pos:end="1259:46">gen_helper_v7m_msr</name><argument_list pos:start="1259:47" pos:end="1259:66">(<argument pos:start="1259:48" pos:end="1259:54"><expr pos:start="1259:48" pos:end="1259:54"><name pos:start="1259:48" pos:end="1259:54">cpu_env</name></expr></argument>, <argument pos:start="1259:57" pos:end="1259:60"><expr pos:start="1259:57" pos:end="1259:60"><name pos:start="1259:57" pos:end="1259:60">addr</name></expr></argument>, <argument pos:start="1259:63" pos:end="1259:65"><expr pos:start="1259:63" pos:end="1259:65"><name pos:start="1259:63" pos:end="1259:65">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1261:29" pos:end="1261:52"><expr pos:start="1261:29" pos:end="1261:51"><call pos:start="1261:29" pos:end="1261:51"><name pos:start="1261:29" pos:end="1261:45">tcg_temp_free_i32</name><argument_list pos:start="1261:46" pos:end="1261:51">(<argument pos:start="1261:47" pos:end="1261:50"><expr pos:start="1261:47" pos:end="1261:50"><name pos:start="1261:47" pos:end="1261:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1263:29" pos:end="1263:51"><expr pos:start="1263:29" pos:end="1263:50"><call pos:start="1263:29" pos:end="1263:50"><name pos:start="1263:29" pos:end="1263:45">tcg_temp_free_i32</name><argument_list pos:start="1263:46" pos:end="1263:50">(<argument pos:start="1263:47" pos:end="1263:49"><expr pos:start="1263:47" pos:end="1263:49"><name pos:start="1263:47" pos:end="1263:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1265:29" pos:end="1265:45"><expr pos:start="1265:29" pos:end="1265:44"><call pos:start="1265:29" pos:end="1265:44"><name pos:start="1265:29" pos:end="1265:41">gen_lookup_tb</name><argument_list pos:start="1265:42" pos:end="1265:44">(<argument pos:start="1265:43" pos:end="1265:43"><expr pos:start="1265:43" pos:end="1265:43"><name pos:start="1265:43" pos:end="1265:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1267:29" pos:end="1267:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="1271:25" pos:end="1271:42">/* fall through */</comment>

                    <case pos:start="1273:21" pos:end="1273:27">case <expr pos:start="1273:26" pos:end="1273:26"><literal type="number" pos:start="1273:26" pos:end="1273:26">1</literal></expr>:</case> <comment type="block" pos:start="1273:29" pos:end="1273:44">/* msr spsr.  */</comment>

                        <if_stmt pos:start="1275:25" pos:end="1277:44"><if pos:start="1275:25" pos:end="1277:44">if <condition pos:start="1275:28" pos:end="1275:38">(<expr pos:start="1275:29" pos:end="1275:37"><call pos:start="1275:29" pos:end="1275:37"><name pos:start="1275:29" pos:end="1275:32">IS_M</name><argument_list pos:start="1275:33" pos:end="1275:37">(<argument pos:start="1275:34" pos:end="1275:36"><expr pos:start="1275:34" pos:end="1275:36"><name pos:start="1275:34" pos:end="1275:36">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1277:29" pos:end="1277:44"><block_content pos:start="1277:29" pos:end="1277:44">

                            <goto pos:start="1277:29" pos:end="1277:44">goto <name pos:start="1277:34" pos:end="1277:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1279:25" pos:end="1279:46"><expr pos:start="1279:25" pos:end="1279:45"><name pos:start="1279:25" pos:end="1279:27">tmp</name> <operator pos:start="1279:29" pos:end="1279:29">=</operator> <call pos:start="1279:31" pos:end="1279:45"><name pos:start="1279:31" pos:end="1279:38">load_reg</name><argument_list pos:start="1279:39" pos:end="1279:45">(<argument pos:start="1279:40" pos:end="1279:40"><expr pos:start="1279:40" pos:end="1279:40"><name pos:start="1279:40" pos:end="1279:40">s</name></expr></argument>, <argument pos:start="1279:43" pos:end="1279:44"><expr pos:start="1279:43" pos:end="1279:44"><name pos:start="1279:43" pos:end="1279:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1281:25" pos:end="1287:44"><if pos:start="1281:25" pos:end="1287:44">if <condition pos:start="1281:28" pos:end="1285:44">(<expr pos:start="1281:29" pos:end="1285:43"><call pos:start="1281:29" pos:end="1285:43"><name pos:start="1281:29" pos:end="1281:39">gen_set_psr</name><argument_list pos:start="1281:40" pos:end="1285:43">(<argument pos:start="1281:41" pos:end="1281:41"><expr pos:start="1281:41" pos:end="1281:41"><name pos:start="1281:41" pos:end="1281:41">s</name></expr></argument>,

                              <argument pos:start="1283:31" pos:end="1283:74"><expr pos:start="1283:31" pos:end="1283:74"><call pos:start="1283:31" pos:end="1283:74"><name pos:start="1283:31" pos:end="1283:38">msr_mask</name><argument_list pos:start="1283:39" pos:end="1283:74">(<argument pos:start="1283:40" pos:end="1283:42"><expr pos:start="1283:40" pos:end="1283:42"><name pos:start="1283:40" pos:end="1283:42">env</name></expr></argument>, <argument pos:start="1283:45" pos:end="1283:45"><expr pos:start="1283:45" pos:end="1283:45"><name pos:start="1283:45" pos:end="1283:45">s</name></expr></argument>, <argument pos:start="1283:48" pos:end="1283:64"><expr pos:start="1283:48" pos:end="1283:64"><operator pos:start="1283:48" pos:end="1283:48">(</operator><name pos:start="1283:49" pos:end="1283:52">insn</name> <operator pos:start="1283:54" pos:end="1283:55">&gt;&gt;</operator> <literal type="number" pos:start="1283:57" pos:end="1283:57">8</literal><operator pos:start="1283:58" pos:end="1283:58">)</operator> <operator pos:start="1283:60" pos:end="1283:60">&amp;</operator> <literal type="number" pos:start="1283:62" pos:end="1283:64">0xf</literal></expr></argument>, <argument pos:start="1283:67" pos:end="1283:73"><expr pos:start="1283:67" pos:end="1283:73"><name pos:start="1283:67" pos:end="1283:68">op</name> <operator pos:start="1283:70" pos:end="1283:71">==</operator> <literal type="number" pos:start="1283:73" pos:end="1283:73">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="1285:31" pos:end="1285:37"><expr pos:start="1285:31" pos:end="1285:37"><name pos:start="1285:31" pos:end="1285:32">op</name> <operator pos:start="1285:34" pos:end="1285:35">==</operator> <literal type="number" pos:start="1285:37" pos:end="1285:37">1</literal></expr></argument>, <argument pos:start="1285:40" pos:end="1285:42"><expr pos:start="1285:40" pos:end="1285:42"><name pos:start="1285:40" pos:end="1285:42">tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1287:29" pos:end="1287:44"><block_content pos:start="1287:29" pos:end="1287:44">

                            <goto pos:start="1287:29" pos:end="1287:44">goto <name pos:start="1287:34" pos:end="1287:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <break pos:start="1289:25" pos:end="1289:30">break;</break>

                    <case pos:start="1291:21" pos:end="1291:27">case <expr pos:start="1291:26" pos:end="1291:26"><literal type="number" pos:start="1291:26" pos:end="1291:26">2</literal></expr>:</case> <comment type="block" pos:start="1291:29" pos:end="1291:49">/* cps, nop-hint.  */</comment>

                        <if_stmt pos:start="1293:25" pos:end="1297:25"><if pos:start="1293:25" pos:end="1297:25">if <condition pos:start="1293:28" pos:end="1293:51">(<expr pos:start="1293:29" pos:end="1293:50"><operator pos:start="1293:29" pos:end="1293:29">(</operator><operator pos:start="1293:30" pos:end="1293:30">(</operator><name pos:start="1293:31" pos:end="1293:34">insn</name> <operator pos:start="1293:36" pos:end="1293:37">&gt;&gt;</operator> <literal type="number" pos:start="1293:39" pos:end="1293:39">8</literal><operator pos:start="1293:40" pos:end="1293:40">)</operator> <operator pos:start="1293:42" pos:end="1293:42">&amp;</operator> <literal type="number" pos:start="1293:44" pos:end="1293:44">7</literal><operator pos:start="1293:45" pos:end="1293:45">)</operator> <operator pos:start="1293:47" pos:end="1293:48">==</operator> <literal type="number" pos:start="1293:50" pos:end="1293:50">0</literal></expr>)</condition> <block pos:start="1293:53" pos:end="1297:25">{<block_content pos:start="1295:29" pos:end="1295:57">

                            <expr_stmt pos:start="1295:29" pos:end="1295:57"><expr pos:start="1295:29" pos:end="1295:56"><call pos:start="1295:29" pos:end="1295:56"><name pos:start="1295:29" pos:end="1295:40">gen_nop_hint</name><argument_list pos:start="1295:41" pos:end="1295:56">(<argument pos:start="1295:42" pos:end="1295:42"><expr pos:start="1295:42" pos:end="1295:42"><name pos:start="1295:42" pos:end="1295:42">s</name></expr></argument>, <argument pos:start="1295:45" pos:end="1295:55"><expr pos:start="1295:45" pos:end="1295:55"><name pos:start="1295:45" pos:end="1295:48">insn</name> <operator pos:start="1295:50" pos:end="1295:50">&amp;</operator> <literal type="number" pos:start="1295:52" pos:end="1295:55">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="1299:25" pos:end="1299:63">/* Implemented as NOP in user mode.  */</comment>

                        <if_stmt pos:start="1301:25" pos:end="1303:34"><if pos:start="1301:25" pos:end="1303:34">if <condition pos:start="1301:28" pos:end="1301:39">(<expr pos:start="1301:29" pos:end="1301:38"><call pos:start="1301:29" pos:end="1301:38"><name pos:start="1301:29" pos:end="1301:35">IS_USER</name><argument_list pos:start="1301:36" pos:end="1301:38">(<argument pos:start="1301:37" pos:end="1301:37"><expr pos:start="1301:37" pos:end="1301:37"><name pos:start="1301:37" pos:end="1301:37">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1303:29" pos:end="1303:34"><block_content pos:start="1303:29" pos:end="1303:34">

                            <break pos:start="1303:29" pos:end="1303:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1305:25" pos:end="1305:35"><expr pos:start="1305:25" pos:end="1305:34"><name pos:start="1305:25" pos:end="1305:30">offset</name> <operator pos:start="1305:32" pos:end="1305:32">=</operator> <literal type="number" pos:start="1305:34" pos:end="1305:34">0</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="1307:25" pos:end="1307:32"><expr pos:start="1307:25" pos:end="1307:31"><name pos:start="1307:25" pos:end="1307:27">imm</name> <operator pos:start="1307:29" pos:end="1307:29">=</operator> <literal type="number" pos:start="1307:31" pos:end="1307:31">0</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="1309:25" pos:end="1327:25"><if pos:start="1309:25" pos:end="1327:25">if <condition pos:start="1309:28" pos:end="1309:45">(<expr pos:start="1309:29" pos:end="1309:44"><name pos:start="1309:29" pos:end="1309:32">insn</name> <operator pos:start="1309:34" pos:end="1309:34">&amp;</operator> <operator pos:start="1309:36" pos:end="1309:36">(</operator><literal type="number" pos:start="1309:37" pos:end="1309:37">1</literal> <operator pos:start="1309:39" pos:end="1309:40">&lt;&lt;</operator> <literal type="number" pos:start="1309:42" pos:end="1309:43">10</literal><operator pos:start="1309:44" pos:end="1309:44">)</operator></expr>)</condition> <block pos:start="1309:47" pos:end="1327:25">{<block_content pos:start="1311:29" pos:end="1325:63">

                            <if_stmt pos:start="1311:29" pos:end="1313:49"><if pos:start="1311:29" pos:end="1313:49">if <condition pos:start="1311:32" pos:end="1311:48">(<expr pos:start="1311:33" pos:end="1311:47"><name pos:start="1311:33" pos:end="1311:36">insn</name> <operator pos:start="1311:38" pos:end="1311:38">&amp;</operator> <operator pos:start="1311:40" pos:end="1311:40">(</operator><literal type="number" pos:start="1311:41" pos:end="1311:41">1</literal> <operator pos:start="1311:43" pos:end="1311:44">&lt;&lt;</operator> <literal type="number" pos:start="1311:46" pos:end="1311:46">7</literal><operator pos:start="1311:47" pos:end="1311:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1313:33" pos:end="1313:49"><block_content pos:start="1313:33" pos:end="1313:49">

                                <expr_stmt pos:start="1313:33" pos:end="1313:49"><expr pos:start="1313:33" pos:end="1313:48"><name pos:start="1313:33" pos:end="1313:38">offset</name> <operator pos:start="1313:40" pos:end="1313:41">|=</operator> <name pos:start="1313:43" pos:end="1313:48">CPSR_A</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1315:29" pos:end="1317:49"><if pos:start="1315:29" pos:end="1317:49">if <condition pos:start="1315:32" pos:end="1315:48">(<expr pos:start="1315:33" pos:end="1315:47"><name pos:start="1315:33" pos:end="1315:36">insn</name> <operator pos:start="1315:38" pos:end="1315:38">&amp;</operator> <operator pos:start="1315:40" pos:end="1315:40">(</operator><literal type="number" pos:start="1315:41" pos:end="1315:41">1</literal> <operator pos:start="1315:43" pos:end="1315:44">&lt;&lt;</operator> <literal type="number" pos:start="1315:46" pos:end="1315:46">6</literal><operator pos:start="1315:47" pos:end="1315:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1317:33" pos:end="1317:49"><block_content pos:start="1317:33" pos:end="1317:49">

                                <expr_stmt pos:start="1317:33" pos:end="1317:49"><expr pos:start="1317:33" pos:end="1317:48"><name pos:start="1317:33" pos:end="1317:38">offset</name> <operator pos:start="1317:40" pos:end="1317:41">|=</operator> <name pos:start="1317:43" pos:end="1317:48">CPSR_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1319:29" pos:end="1321:49"><if pos:start="1319:29" pos:end="1321:49">if <condition pos:start="1319:32" pos:end="1319:48">(<expr pos:start="1319:33" pos:end="1319:47"><name pos:start="1319:33" pos:end="1319:36">insn</name> <operator pos:start="1319:38" pos:end="1319:38">&amp;</operator> <operator pos:start="1319:40" pos:end="1319:40">(</operator><literal type="number" pos:start="1319:41" pos:end="1319:41">1</literal> <operator pos:start="1319:43" pos:end="1319:44">&lt;&lt;</operator> <literal type="number" pos:start="1319:46" pos:end="1319:46">5</literal><operator pos:start="1319:47" pos:end="1319:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1321:33" pos:end="1321:49"><block_content pos:start="1321:33" pos:end="1321:49">

                                <expr_stmt pos:start="1321:33" pos:end="1321:49"><expr pos:start="1321:33" pos:end="1321:48"><name pos:start="1321:33" pos:end="1321:38">offset</name> <operator pos:start="1321:40" pos:end="1321:41">|=</operator> <name pos:start="1321:43" pos:end="1321:48">CPSR_F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1323:29" pos:end="1325:63"><if pos:start="1323:29" pos:end="1325:63">if <condition pos:start="1323:32" pos:end="1323:48">(<expr pos:start="1323:33" pos:end="1323:47"><name pos:start="1323:33" pos:end="1323:36">insn</name> <operator pos:start="1323:38" pos:end="1323:38">&amp;</operator> <operator pos:start="1323:40" pos:end="1323:40">(</operator><literal type="number" pos:start="1323:41" pos:end="1323:41">1</literal> <operator pos:start="1323:43" pos:end="1323:44">&lt;&lt;</operator> <literal type="number" pos:start="1323:46" pos:end="1323:46">9</literal><operator pos:start="1323:47" pos:end="1323:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1325:33" pos:end="1325:63"><block_content pos:start="1325:33" pos:end="1325:63">

                                <expr_stmt pos:start="1325:33" pos:end="1325:63"><expr pos:start="1325:33" pos:end="1325:62"><name pos:start="1325:33" pos:end="1325:35">imm</name> <operator pos:start="1325:37" pos:end="1325:37">=</operator> <name pos:start="1325:39" pos:end="1325:44">CPSR_A</name> <operator pos:start="1325:46" pos:end="1325:46">|</operator> <name pos:start="1325:48" pos:end="1325:53">CPSR_I</name> <operator pos:start="1325:55" pos:end="1325:55">|</operator> <name pos:start="1325:57" pos:end="1325:62">CPSR_F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1329:25" pos:end="1335:25"><if pos:start="1329:25" pos:end="1335:25">if <condition pos:start="1329:28" pos:end="1329:44">(<expr pos:start="1329:29" pos:end="1329:43"><name pos:start="1329:29" pos:end="1329:32">insn</name> <operator pos:start="1329:34" pos:end="1329:34">&amp;</operator> <operator pos:start="1329:36" pos:end="1329:36">(</operator><literal type="number" pos:start="1329:37" pos:end="1329:37">1</literal> <operator pos:start="1329:39" pos:end="1329:40">&lt;&lt;</operator> <literal type="number" pos:start="1329:42" pos:end="1329:42">8</literal><operator pos:start="1329:43" pos:end="1329:43">)</operator></expr>)</condition> <block pos:start="1329:46" pos:end="1335:25">{<block_content pos:start="1331:29" pos:end="1333:49">

                            <expr_stmt pos:start="1331:29" pos:end="1331:43"><expr pos:start="1331:29" pos:end="1331:42"><name pos:start="1331:29" pos:end="1331:34">offset</name> <operator pos:start="1331:36" pos:end="1331:37">|=</operator> <literal type="number" pos:start="1331:39" pos:end="1331:42">0x1f</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="1333:29" pos:end="1333:49"><expr pos:start="1333:29" pos:end="1333:48"><name pos:start="1333:29" pos:end="1333:31">imm</name> <operator pos:start="1333:33" pos:end="1333:34">|=</operator> <operator pos:start="1333:36" pos:end="1333:36">(</operator><name pos:start="1333:37" pos:end="1333:40">insn</name> <operator pos:start="1333:42" pos:end="1333:42">&amp;</operator> <literal type="number" pos:start="1333:44" pos:end="1333:47">0x1f</literal><operator pos:start="1333:48" pos:end="1333:48">)</operator></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1337:25" pos:end="1341:25"><if pos:start="1337:25" pos:end="1341:25">if <condition pos:start="1337:28" pos:end="1337:35">(<expr pos:start="1337:29" pos:end="1337:34"><name pos:start="1337:29" pos:end="1337:34">offset</name></expr>)</condition> <block pos:start="1337:37" pos:end="1341:25">{<block_content pos:start="1339:29" pos:end="1339:62">

                            <expr_stmt pos:start="1339:29" pos:end="1339:62"><expr pos:start="1339:29" pos:end="1339:61"><call pos:start="1339:29" pos:end="1339:61"><name pos:start="1339:29" pos:end="1339:42">gen_set_psr_im</name><argument_list pos:start="1339:43" pos:end="1339:61">(<argument pos:start="1339:44" pos:end="1339:44"><expr pos:start="1339:44" pos:end="1339:44"><name pos:start="1339:44" pos:end="1339:44">s</name></expr></argument>, <argument pos:start="1339:47" pos:end="1339:52"><expr pos:start="1339:47" pos:end="1339:52"><name pos:start="1339:47" pos:end="1339:52">offset</name></expr></argument>, <argument pos:start="1339:55" pos:end="1339:55"><expr pos:start="1339:55" pos:end="1339:55"><literal type="number" pos:start="1339:55" pos:end="1339:55">0</literal></expr></argument>, <argument pos:start="1339:58" pos:end="1339:60"><expr pos:start="1339:58" pos:end="1339:60"><name pos:start="1339:58" pos:end="1339:60">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1343:25" pos:end="1343:30">break;</break>

                    <case pos:start="1345:21" pos:end="1345:27">case <expr pos:start="1345:26" pos:end="1345:26"><literal type="number" pos:start="1345:26" pos:end="1345:26">3</literal></expr>:</case> <comment type="block" pos:start="1345:29" pos:end="1345:62">/* Special control operations.  */</comment>

                        <expr_stmt pos:start="1347:25" pos:end="1347:32"><expr pos:start="1347:25" pos:end="1347:31"><call pos:start="1347:25" pos:end="1347:31"><name pos:start="1347:25" pos:end="1347:28">ARCH</name><argument_list pos:start="1347:29" pos:end="1347:31">(<argument pos:start="1347:30" pos:end="1347:30"><expr pos:start="1347:30" pos:end="1347:30"><literal type="number" pos:start="1347:30" pos:end="1347:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1349:25" pos:end="1349:47"><expr pos:start="1349:25" pos:end="1349:46"><name pos:start="1349:25" pos:end="1349:26">op</name> <operator pos:start="1349:28" pos:end="1349:28">=</operator> <operator pos:start="1349:30" pos:end="1349:30">(</operator><name pos:start="1349:31" pos:end="1349:34">insn</name> <operator pos:start="1349:36" pos:end="1349:37">&gt;&gt;</operator> <literal type="number" pos:start="1349:39" pos:end="1349:39">4</literal><operator pos:start="1349:40" pos:end="1349:40">)</operator> <operator pos:start="1349:42" pos:end="1349:42">&amp;</operator> <literal type="number" pos:start="1349:44" pos:end="1349:46">0xf</literal></expr>;</expr_stmt>

                        <switch pos:start="1351:25" pos:end="1373:25">switch <condition pos:start="1351:32" pos:end="1351:35">(<expr pos:start="1351:33" pos:end="1351:34"><name pos:start="1351:33" pos:end="1351:34">op</name></expr>)</condition> <block pos:start="1351:37" pos:end="1373:25">{<block_content pos:start="1353:25" pos:end="1371:44">

                        <case pos:start="1353:25" pos:end="1353:31">case <expr pos:start="1353:30" pos:end="1353:30"><literal type="number" pos:start="1353:30" pos:end="1353:30">2</literal></expr>:</case> <comment type="block" pos:start="1353:33" pos:end="1353:43">/* clrex */</comment>

                            <expr_stmt pos:start="1355:29" pos:end="1355:41"><expr pos:start="1355:29" pos:end="1355:40"><call pos:start="1355:29" pos:end="1355:40"><name pos:start="1355:29" pos:end="1355:37">gen_clrex</name><argument_list pos:start="1355:38" pos:end="1355:40">(<argument pos:start="1355:39" pos:end="1355:39"><expr pos:start="1355:39" pos:end="1355:39"><name pos:start="1355:39" pos:end="1355:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1357:29" pos:end="1357:34">break;</break>

                        <case pos:start="1359:25" pos:end="1359:31">case <expr pos:start="1359:30" pos:end="1359:30"><literal type="number" pos:start="1359:30" pos:end="1359:30">4</literal></expr>:</case> <comment type="block" pos:start="1359:33" pos:end="1359:41">/* dsb */</comment>

                        <case pos:start="1361:25" pos:end="1361:31">case <expr pos:start="1361:30" pos:end="1361:30"><literal type="number" pos:start="1361:30" pos:end="1361:30">5</literal></expr>:</case> <comment type="block" pos:start="1361:33" pos:end="1361:41">/* dmb */</comment>

                        <case pos:start="1363:25" pos:end="1363:31">case <expr pos:start="1363:30" pos:end="1363:30"><literal type="number" pos:start="1363:30" pos:end="1363:30">6</literal></expr>:</case> <comment type="block" pos:start="1363:33" pos:end="1363:41">/* isb */</comment>

                            <comment type="block" pos:start="1365:29" pos:end="1365:57">/* These execute as NOPs.  */</comment>

                            <break pos:start="1367:29" pos:end="1367:34">break;</break>

                        <default pos:start="1369:25" pos:end="1369:32">default:</default>

                            <goto pos:start="1371:29" pos:end="1371:44">goto <name pos:start="1371:34" pos:end="1371:43">illegal_op</name>;</goto>

                        </block_content>}</block></switch>

                        <break pos:start="1375:25" pos:end="1375:30">break;</break>

                    <case pos:start="1377:21" pos:end="1377:27">case <expr pos:start="1377:26" pos:end="1377:26"><literal type="number" pos:start="1377:26" pos:end="1377:26">4</literal></expr>:</case> <comment type="block" pos:start="1377:29" pos:end="1377:37">/* bxj */</comment>

                        <comment type="block" pos:start="1379:25" pos:end="1379:71">/* Trivial implementation equivalent to bx.  */</comment>

                        <expr_stmt pos:start="1381:25" pos:end="1381:46"><expr pos:start="1381:25" pos:end="1381:45"><name pos:start="1381:25" pos:end="1381:27">tmp</name> <operator pos:start="1381:29" pos:end="1381:29">=</operator> <call pos:start="1381:31" pos:end="1381:45"><name pos:start="1381:31" pos:end="1381:38">load_reg</name><argument_list pos:start="1381:39" pos:end="1381:45">(<argument pos:start="1381:40" pos:end="1381:40"><expr pos:start="1381:40" pos:end="1381:40"><name pos:start="1381:40" pos:end="1381:40">s</name></expr></argument>, <argument pos:start="1381:43" pos:end="1381:44"><expr pos:start="1381:43" pos:end="1381:44"><name pos:start="1381:43" pos:end="1381:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1383:25" pos:end="1383:39"><expr pos:start="1383:25" pos:end="1383:38"><call pos:start="1383:25" pos:end="1383:38"><name pos:start="1383:25" pos:end="1383:30">gen_bx</name><argument_list pos:start="1383:31" pos:end="1383:38">(<argument pos:start="1383:32" pos:end="1383:32"><expr pos:start="1383:32" pos:end="1383:32"><name pos:start="1383:32" pos:end="1383:32">s</name></expr></argument>, <argument pos:start="1383:35" pos:end="1383:37"><expr pos:start="1383:35" pos:end="1383:37"><name pos:start="1383:35" pos:end="1383:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1385:25" pos:end="1385:30">break;</break>

                    <case pos:start="1387:21" pos:end="1387:27">case <expr pos:start="1387:26" pos:end="1387:26"><literal type="number" pos:start="1387:26" pos:end="1387:26">5</literal></expr>:</case> <comment type="block" pos:start="1387:29" pos:end="1387:52">/* Exception return.  */</comment>

                        <if_stmt pos:start="1389:25" pos:end="1393:25"><if pos:start="1389:25" pos:end="1393:25">if <condition pos:start="1389:28" pos:end="1389:39">(<expr pos:start="1389:29" pos:end="1389:38"><call pos:start="1389:29" pos:end="1389:38"><name pos:start="1389:29" pos:end="1389:35">IS_USER</name><argument_list pos:start="1389:36" pos:end="1389:38">(<argument pos:start="1389:37" pos:end="1389:37"><expr pos:start="1389:37" pos:end="1389:37"><name pos:start="1389:37" pos:end="1389:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1389:41" pos:end="1393:25">{<block_content pos:start="1391:29" pos:end="1391:44">

                            <goto pos:start="1391:29" pos:end="1391:44">goto <name pos:start="1391:34" pos:end="1391:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1395:25" pos:end="1399:25"><if pos:start="1395:25" pos:end="1399:25">if <condition pos:start="1395:28" pos:end="1395:49">(<expr pos:start="1395:29" pos:end="1395:48"><name pos:start="1395:29" pos:end="1395:30">rn</name> <operator pos:start="1395:32" pos:end="1395:33">!=</operator> <literal type="number" pos:start="1395:35" pos:end="1395:36">14</literal> <operator pos:start="1395:38" pos:end="1395:39">||</operator> <name pos:start="1395:41" pos:end="1395:42">rd</name> <operator pos:start="1395:44" pos:end="1395:45">!=</operator> <literal type="number" pos:start="1395:47" pos:end="1395:48">15</literal></expr>)</condition> <block pos:start="1395:51" pos:end="1399:25">{<block_content pos:start="1397:29" pos:end="1397:44">

                            <goto pos:start="1397:29" pos:end="1397:44">goto <name pos:start="1397:34" pos:end="1397:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1401:25" pos:end="1401:46"><expr pos:start="1401:25" pos:end="1401:45"><name pos:start="1401:25" pos:end="1401:27">tmp</name> <operator pos:start="1401:29" pos:end="1401:29">=</operator> <call pos:start="1401:31" pos:end="1401:45"><name pos:start="1401:31" pos:end="1401:38">load_reg</name><argument_list pos:start="1401:39" pos:end="1401:45">(<argument pos:start="1401:40" pos:end="1401:40"><expr pos:start="1401:40" pos:end="1401:40"><name pos:start="1401:40" pos:end="1401:40">s</name></expr></argument>, <argument pos:start="1401:43" pos:end="1401:44"><expr pos:start="1401:43" pos:end="1401:44"><name pos:start="1401:43" pos:end="1401:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1403:25" pos:end="1403:64"><expr pos:start="1403:25" pos:end="1403:63"><call pos:start="1403:25" pos:end="1403:63"><name pos:start="1403:25" pos:end="1403:40">tcg_gen_subi_i32</name><argument_list pos:start="1403:41" pos:end="1403:63">(<argument pos:start="1403:42" pos:end="1403:44"><expr pos:start="1403:42" pos:end="1403:44"><name pos:start="1403:42" pos:end="1403:44">tmp</name></expr></argument>, <argument pos:start="1403:47" pos:end="1403:49"><expr pos:start="1403:47" pos:end="1403:49"><name pos:start="1403:47" pos:end="1403:49">tmp</name></expr></argument>, <argument pos:start="1403:52" pos:end="1403:62"><expr pos:start="1403:52" pos:end="1403:62"><name pos:start="1403:52" pos:end="1403:55">insn</name> <operator pos:start="1403:57" pos:end="1403:57">&amp;</operator> <literal type="number" pos:start="1403:59" pos:end="1403:62">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1405:25" pos:end="1405:53"><expr pos:start="1405:25" pos:end="1405:52"><call pos:start="1405:25" pos:end="1405:52"><name pos:start="1405:25" pos:end="1405:44">gen_exception_return</name><argument_list pos:start="1405:45" pos:end="1405:52">(<argument pos:start="1405:46" pos:end="1405:46"><expr pos:start="1405:46" pos:end="1405:46"><name pos:start="1405:46" pos:end="1405:46">s</name></expr></argument>, <argument pos:start="1405:49" pos:end="1405:51"><expr pos:start="1405:49" pos:end="1405:51"><name pos:start="1405:49" pos:end="1405:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1407:25" pos:end="1407:30">break;</break>

                    <case pos:start="1409:21" pos:end="1409:27">case <expr pos:start="1409:26" pos:end="1409:26"><literal type="number" pos:start="1409:26" pos:end="1409:26">6</literal></expr>:</case> <comment type="block" pos:start="1409:29" pos:end="1409:44">/* mrs cpsr.  */</comment>

                        <expr_stmt pos:start="1411:25" pos:end="1411:49"><expr pos:start="1411:25" pos:end="1411:48"><name pos:start="1411:25" pos:end="1411:27">tmp</name> <operator pos:start="1411:29" pos:end="1411:29">=</operator> <call pos:start="1411:31" pos:end="1411:48"><name pos:start="1411:31" pos:end="1411:46">tcg_temp_new_i32</name><argument_list pos:start="1411:47" pos:end="1411:48">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1413:25" pos:end="1425:25"><if pos:start="1413:25" pos:end="1421:25">if <condition pos:start="1413:28" pos:end="1413:38">(<expr pos:start="1413:29" pos:end="1413:37"><call pos:start="1413:29" pos:end="1413:37"><name pos:start="1413:29" pos:end="1413:32">IS_M</name><argument_list pos:start="1413:33" pos:end="1413:37">(<argument pos:start="1413:34" pos:end="1413:36"><expr pos:start="1413:34" pos:end="1413:36"><name pos:start="1413:34" pos:end="1413:36">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1413:40" pos:end="1421:25">{<block_content pos:start="1415:29" pos:end="1419:52">

                            <expr_stmt pos:start="1415:29" pos:end="1415:62"><expr pos:start="1415:29" pos:end="1415:61"><name pos:start="1415:29" pos:end="1415:32">addr</name> <operator pos:start="1415:34" pos:end="1415:34">=</operator> <call pos:start="1415:36" pos:end="1415:61"><name pos:start="1415:36" pos:end="1415:48">tcg_const_i32</name><argument_list pos:start="1415:49" pos:end="1415:61">(<argument pos:start="1415:50" pos:end="1415:60"><expr pos:start="1415:50" pos:end="1415:60"><name pos:start="1415:50" pos:end="1415:53">insn</name> <operator pos:start="1415:55" pos:end="1415:55">&amp;</operator> <literal type="number" pos:start="1415:57" pos:end="1415:60">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1417:29" pos:end="1417:67"><expr pos:start="1417:29" pos:end="1417:66"><call pos:start="1417:29" pos:end="1417:66"><name pos:start="1417:29" pos:end="1417:46">gen_helper_v7m_mrs</name><argument_list pos:start="1417:47" pos:end="1417:66">(<argument pos:start="1417:48" pos:end="1417:50"><expr pos:start="1417:48" pos:end="1417:50"><name pos:start="1417:48" pos:end="1417:50">tmp</name></expr></argument>, <argument pos:start="1417:53" pos:end="1417:59"><expr pos:start="1417:53" pos:end="1417:59"><name pos:start="1417:53" pos:end="1417:59">cpu_env</name></expr></argument>, <argument pos:start="1417:62" pos:end="1417:65"><expr pos:start="1417:62" pos:end="1417:65"><name pos:start="1417:62" pos:end="1417:65">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1419:29" pos:end="1419:52"><expr pos:start="1419:29" pos:end="1419:51"><call pos:start="1419:29" pos:end="1419:51"><name pos:start="1419:29" pos:end="1419:45">tcg_temp_free_i32</name><argument_list pos:start="1419:46" pos:end="1419:51">(<argument pos:start="1419:47" pos:end="1419:50"><expr pos:start="1419:47" pos:end="1419:50"><name pos:start="1419:47" pos:end="1419:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1421:27" pos:end="1425:25">else <block pos:start="1421:32" pos:end="1425:25">{<block_content pos:start="1423:29" pos:end="1423:54">

                            <expr_stmt pos:start="1423:29" pos:end="1423:54"><expr pos:start="1423:29" pos:end="1423:53"><call pos:start="1423:29" pos:end="1423:53"><name pos:start="1423:29" pos:end="1423:48">gen_helper_cpsr_read</name><argument_list pos:start="1423:49" pos:end="1423:53">(<argument pos:start="1423:50" pos:end="1423:52"><expr pos:start="1423:50" pos:end="1423:52"><name pos:start="1423:50" pos:end="1423:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1427:25" pos:end="1427:46"><expr pos:start="1427:25" pos:end="1427:45"><call pos:start="1427:25" pos:end="1427:45"><name pos:start="1427:25" pos:end="1427:33">store_reg</name><argument_list pos:start="1427:34" pos:end="1427:45">(<argument pos:start="1427:35" pos:end="1427:35"><expr pos:start="1427:35" pos:end="1427:35"><name pos:start="1427:35" pos:end="1427:35">s</name></expr></argument>, <argument pos:start="1427:38" pos:end="1427:39"><expr pos:start="1427:38" pos:end="1427:39"><name pos:start="1427:38" pos:end="1427:39">rd</name></expr></argument>, <argument pos:start="1427:42" pos:end="1427:44"><expr pos:start="1427:42" pos:end="1427:44"><name pos:start="1427:42" pos:end="1427:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1429:25" pos:end="1429:30">break;</break>

                    <case pos:start="1431:21" pos:end="1431:27">case <expr pos:start="1431:26" pos:end="1431:26"><literal type="number" pos:start="1431:26" pos:end="1431:26">7</literal></expr>:</case> <comment type="block" pos:start="1431:29" pos:end="1431:44">/* mrs spsr.  */</comment>

                        <comment type="block" pos:start="1433:25" pos:end="1433:59">/* Not accessible in user mode.  */</comment>

                        <if_stmt pos:start="1435:25" pos:end="1437:44"><if pos:start="1435:25" pos:end="1437:44">if <condition pos:start="1435:28" pos:end="1435:52">(<expr pos:start="1435:29" pos:end="1435:51"><call pos:start="1435:29" pos:end="1435:38"><name pos:start="1435:29" pos:end="1435:35">IS_USER</name><argument_list pos:start="1435:36" pos:end="1435:38">(<argument pos:start="1435:37" pos:end="1435:37"><expr pos:start="1435:37" pos:end="1435:37"><name pos:start="1435:37" pos:end="1435:37">s</name></expr></argument>)</argument_list></call> <operator pos:start="1435:40" pos:end="1435:41">||</operator> <call pos:start="1435:43" pos:end="1435:51"><name pos:start="1435:43" pos:end="1435:46">IS_M</name><argument_list pos:start="1435:47" pos:end="1435:51">(<argument pos:start="1435:48" pos:end="1435:50"><expr pos:start="1435:48" pos:end="1435:50"><name pos:start="1435:48" pos:end="1435:50">env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1437:29" pos:end="1437:44"><block_content pos:start="1437:29" pos:end="1437:44">

                            <goto pos:start="1437:29" pos:end="1437:44">goto <name pos:start="1437:34" pos:end="1437:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1439:25" pos:end="1439:51"><expr pos:start="1439:25" pos:end="1439:50"><name pos:start="1439:25" pos:end="1439:27">tmp</name> <operator pos:start="1439:29" pos:end="1439:29">=</operator> <call pos:start="1439:31" pos:end="1439:50"><name pos:start="1439:31" pos:end="1439:44">load_cpu_field</name><argument_list pos:start="1439:45" pos:end="1439:50">(<argument pos:start="1439:46" pos:end="1439:49"><expr pos:start="1439:46" pos:end="1439:49"><name pos:start="1439:46" pos:end="1439:49">spsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1441:25" pos:end="1441:46"><expr pos:start="1441:25" pos:end="1441:45"><call pos:start="1441:25" pos:end="1441:45"><name pos:start="1441:25" pos:end="1441:33">store_reg</name><argument_list pos:start="1441:34" pos:end="1441:45">(<argument pos:start="1441:35" pos:end="1441:35"><expr pos:start="1441:35" pos:end="1441:35"><name pos:start="1441:35" pos:end="1441:35">s</name></expr></argument>, <argument pos:start="1441:38" pos:end="1441:39"><expr pos:start="1441:38" pos:end="1441:39"><name pos:start="1441:38" pos:end="1441:39">rd</name></expr></argument>, <argument pos:start="1441:42" pos:end="1441:44"><expr pos:start="1441:42" pos:end="1441:44"><name pos:start="1441:42" pos:end="1441:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1443:25" pos:end="1443:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1449:15" pos:end="1491:13">else <block pos:start="1449:20" pos:end="1491:13">{<block_content pos:start="1453:17" pos:end="1489:43">

                <comment type="block" pos:start="1451:17" pos:end="1451:42">/* Conditional branch.  */</comment>

                <expr_stmt pos:start="1453:17" pos:end="1453:40"><expr pos:start="1453:17" pos:end="1453:39"><name pos:start="1453:17" pos:end="1453:18">op</name> <operator pos:start="1453:20" pos:end="1453:20">=</operator> <operator pos:start="1453:22" pos:end="1453:22">(</operator><name pos:start="1453:23" pos:end="1453:26">insn</name> <operator pos:start="1453:28" pos:end="1453:29">&gt;&gt;</operator> <literal type="number" pos:start="1453:31" pos:end="1453:32">22</literal><operator pos:start="1453:33" pos:end="1453:33">)</operator> <operator pos:start="1453:35" pos:end="1453:35">&amp;</operator> <literal type="number" pos:start="1453:37" pos:end="1453:39">0xf</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1455:17" pos:end="1455:71">/* Generate a conditional jump to next instruction.  */</comment>

                <expr_stmt pos:start="1457:17" pos:end="1457:47"><expr pos:start="1457:17" pos:end="1457:46"><name pos:start="1457:17" pos:end="1457:28"><name pos:start="1457:17" pos:end="1457:17">s</name><operator pos:start="1457:18" pos:end="1457:19">-&gt;</operator><name pos:start="1457:20" pos:end="1457:28">condlabel</name></name> <operator pos:start="1457:30" pos:end="1457:30">=</operator> <call pos:start="1457:32" pos:end="1457:46"><name pos:start="1457:32" pos:end="1457:44">gen_new_label</name><argument_list pos:start="1457:45" pos:end="1457:46">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1459:17" pos:end="1459:50"><expr pos:start="1459:17" pos:end="1459:49"><call pos:start="1459:17" pos:end="1459:49"><name pos:start="1459:17" pos:end="1459:27">gen_test_cc</name><argument_list pos:start="1459:28" pos:end="1459:49">(<argument pos:start="1459:29" pos:end="1459:34"><expr pos:start="1459:29" pos:end="1459:34"><name pos:start="1459:29" pos:end="1459:30">op</name> <operator pos:start="1459:32" pos:end="1459:32">^</operator> <literal type="number" pos:start="1459:34" pos:end="1459:34">1</literal></expr></argument>, <argument pos:start="1459:37" pos:end="1459:48"><expr pos:start="1459:37" pos:end="1459:48"><name pos:start="1459:37" pos:end="1459:48"><name pos:start="1459:37" pos:end="1459:37">s</name><operator pos:start="1459:38" pos:end="1459:39">-&gt;</operator><name pos:start="1459:40" pos:end="1459:48">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1461:17" pos:end="1461:31"><expr pos:start="1461:17" pos:end="1461:30"><name pos:start="1461:17" pos:end="1461:26"><name pos:start="1461:17" pos:end="1461:17">s</name><operator pos:start="1461:18" pos:end="1461:19">-&gt;</operator><name pos:start="1461:20" pos:end="1461:26">condjmp</name></name> <operator pos:start="1461:28" pos:end="1461:28">=</operator> <literal type="number" pos:start="1461:30" pos:end="1461:30">1</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="1465:17" pos:end="1465:47">/* offset[11:1] = insn[10:0] */</comment>

                <expr_stmt pos:start="1467:17" pos:end="1467:45"><expr pos:start="1467:17" pos:end="1467:44"><name pos:start="1467:17" pos:end="1467:22">offset</name> <operator pos:start="1467:24" pos:end="1467:24">=</operator> <operator pos:start="1467:26" pos:end="1467:26">(</operator><name pos:start="1467:27" pos:end="1467:30">insn</name> <operator pos:start="1467:32" pos:end="1467:32">&amp;</operator> <literal type="number" pos:start="1467:34" pos:end="1467:38">0x7ff</literal><operator pos:start="1467:39" pos:end="1467:39">)</operator> <operator pos:start="1467:41" pos:end="1467:42">&lt;&lt;</operator> <literal type="number" pos:start="1467:44" pos:end="1467:44">1</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1469:17" pos:end="1469:51">/* offset[17:12] = insn[21:16].  */</comment>

                <expr_stmt pos:start="1471:17" pos:end="1471:51"><expr pos:start="1471:17" pos:end="1471:50"><name pos:start="1471:17" pos:end="1471:22">offset</name> <operator pos:start="1471:24" pos:end="1471:25">|=</operator> <operator pos:start="1471:27" pos:end="1471:27">(</operator><name pos:start="1471:28" pos:end="1471:31">insn</name> <operator pos:start="1471:33" pos:end="1471:33">&amp;</operator> <literal type="number" pos:start="1471:35" pos:end="1471:44">0x003f0000</literal><operator pos:start="1471:45" pos:end="1471:45">)</operator> <operator pos:start="1471:47" pos:end="1471:48">&gt;&gt;</operator> <literal type="number" pos:start="1471:50" pos:end="1471:50">4</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1473:17" pos:end="1473:48">/* offset[31:20] = insn[26].  */</comment>

                <expr_stmt pos:start="1475:17" pos:end="1475:70"><expr pos:start="1475:17" pos:end="1475:69"><name pos:start="1475:17" pos:end="1475:22">offset</name> <operator pos:start="1475:24" pos:end="1475:25">|=</operator> <operator pos:start="1475:27" pos:end="1475:27">(</operator><operator pos:start="1475:28" pos:end="1475:28">(</operator><name pos:start="1475:29" pos:end="1475:35">int32_t</name><operator pos:start="1475:36" pos:end="1475:36">)</operator><operator pos:start="1475:37" pos:end="1475:37">(</operator><operator pos:start="1475:38" pos:end="1475:38">(</operator><name pos:start="1475:39" pos:end="1475:42">insn</name> <operator pos:start="1475:44" pos:end="1475:45">&lt;&lt;</operator> <literal type="number" pos:start="1475:47" pos:end="1475:47">5</literal><operator pos:start="1475:48" pos:end="1475:48">)</operator> <operator pos:start="1475:50" pos:end="1475:50">&amp;</operator> <literal type="number" pos:start="1475:52" pos:end="1475:61">0x80000000</literal><operator pos:start="1475:62" pos:end="1475:62">)</operator><operator pos:start="1475:63" pos:end="1475:63">)</operator> <operator pos:start="1475:65" pos:end="1475:66">&gt;&gt;</operator> <literal type="number" pos:start="1475:68" pos:end="1475:69">11</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1477:17" pos:end="1477:45">/* offset[18] = insn[13].  */</comment>

                <expr_stmt pos:start="1479:17" pos:end="1479:50"><expr pos:start="1479:17" pos:end="1479:49"><name pos:start="1479:17" pos:end="1479:22">offset</name> <operator pos:start="1479:24" pos:end="1479:25">|=</operator> <operator pos:start="1479:27" pos:end="1479:27">(</operator><name pos:start="1479:28" pos:end="1479:31">insn</name> <operator pos:start="1479:33" pos:end="1479:33">&amp;</operator> <operator pos:start="1479:35" pos:end="1479:35">(</operator><literal type="number" pos:start="1479:36" pos:end="1479:36">1</literal> <operator pos:start="1479:38" pos:end="1479:39">&lt;&lt;</operator> <literal type="number" pos:start="1479:41" pos:end="1479:42">13</literal><operator pos:start="1479:43" pos:end="1479:43">)</operator><operator pos:start="1479:44" pos:end="1479:44">)</operator> <operator pos:start="1479:46" pos:end="1479:47">&lt;&lt;</operator> <literal type="number" pos:start="1479:49" pos:end="1479:49">5</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1481:17" pos:end="1481:45">/* offset[19] = insn[11].  */</comment>

                <expr_stmt pos:start="1483:17" pos:end="1483:50"><expr pos:start="1483:17" pos:end="1483:49"><name pos:start="1483:17" pos:end="1483:22">offset</name> <operator pos:start="1483:24" pos:end="1483:25">|=</operator> <operator pos:start="1483:27" pos:end="1483:27">(</operator><name pos:start="1483:28" pos:end="1483:31">insn</name> <operator pos:start="1483:33" pos:end="1483:33">&amp;</operator> <operator pos:start="1483:35" pos:end="1483:35">(</operator><literal type="number" pos:start="1483:36" pos:end="1483:36">1</literal> <operator pos:start="1483:38" pos:end="1483:39">&lt;&lt;</operator> <literal type="number" pos:start="1483:41" pos:end="1483:42">11</literal><operator pos:start="1483:43" pos:end="1483:43">)</operator><operator pos:start="1483:44" pos:end="1483:44">)</operator> <operator pos:start="1483:46" pos:end="1483:47">&lt;&lt;</operator> <literal type="number" pos:start="1483:49" pos:end="1483:49">8</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="1487:17" pos:end="1487:40">/* jump to the offset */</comment>

                <expr_stmt pos:start="1489:17" pos:end="1489:43"><expr pos:start="1489:17" pos:end="1489:42"><call pos:start="1489:17" pos:end="1489:42"><name pos:start="1489:17" pos:end="1489:23">gen_jmp</name><argument_list pos:start="1489:24" pos:end="1489:42">(<argument pos:start="1489:25" pos:end="1489:25"><expr pos:start="1489:25" pos:end="1489:25"><name pos:start="1489:25" pos:end="1489:25">s</name></expr></argument>, <argument pos:start="1489:28" pos:end="1489:41"><expr pos:start="1489:28" pos:end="1489:41"><name pos:start="1489:28" pos:end="1489:32"><name pos:start="1489:28" pos:end="1489:28">s</name><operator pos:start="1489:29" pos:end="1489:30">-&gt;</operator><name pos:start="1489:31" pos:end="1489:32">pc</name></name> <operator pos:start="1489:34" pos:end="1489:34">+</operator> <name pos:start="1489:36" pos:end="1489:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1493:11" pos:end="1797:9">else <block pos:start="1493:16" pos:end="1797:9">{<block_content pos:start="1497:13" pos:end="1795:13">

            <comment type="block" pos:start="1495:13" pos:end="1495:45">/* Data processing immediate.  */</comment>

            <if_stmt pos:start="1497:13" pos:end="1795:13"><if pos:start="1497:13" pos:end="1701:13">if <condition pos:start="1497:16" pos:end="1497:33">(<expr pos:start="1497:17" pos:end="1497:32"><name pos:start="1497:17" pos:end="1497:20">insn</name> <operator pos:start="1497:22" pos:end="1497:22">&amp;</operator> <operator pos:start="1497:24" pos:end="1497:24">(</operator><literal type="number" pos:start="1497:25" pos:end="1497:25">1</literal> <operator pos:start="1497:27" pos:end="1497:28">&lt;&lt;</operator> <literal type="number" pos:start="1497:30" pos:end="1497:31">25</literal><operator pos:start="1497:32" pos:end="1497:32">)</operator></expr>)</condition> <block pos:start="1497:35" pos:end="1701:13">{<block_content pos:start="1499:17" pos:end="1699:17">

                <if_stmt pos:start="1499:17" pos:end="1699:17"><if pos:start="1499:17" pos:end="1629:17">if <condition pos:start="1499:20" pos:end="1499:37">(<expr pos:start="1499:21" pos:end="1499:36"><name pos:start="1499:21" pos:end="1499:24">insn</name> <operator pos:start="1499:26" pos:end="1499:26">&amp;</operator> <operator pos:start="1499:28" pos:end="1499:28">(</operator><literal type="number" pos:start="1499:29" pos:end="1499:29">1</literal> <operator pos:start="1499:31" pos:end="1499:32">&lt;&lt;</operator> <literal type="number" pos:start="1499:34" pos:end="1499:35">24</literal><operator pos:start="1499:36" pos:end="1499:36">)</operator></expr>)</condition> <block pos:start="1499:39" pos:end="1629:17">{<block_content pos:start="1501:21" pos:end="1627:42">

                    <if_stmt pos:start="1501:21" pos:end="1503:40"><if pos:start="1501:21" pos:end="1503:40">if <condition pos:start="1501:24" pos:end="1501:41">(<expr pos:start="1501:25" pos:end="1501:40"><name pos:start="1501:25" pos:end="1501:28">insn</name> <operator pos:start="1501:30" pos:end="1501:30">&amp;</operator> <operator pos:start="1501:32" pos:end="1501:32">(</operator><literal type="number" pos:start="1501:33" pos:end="1501:33">1</literal> <operator pos:start="1501:35" pos:end="1501:36">&lt;&lt;</operator> <literal type="number" pos:start="1501:38" pos:end="1501:39">20</literal><operator pos:start="1501:40" pos:end="1501:40">)</operator></expr>)</condition><block type="pseudo" pos:start="1503:25" pos:end="1503:40"><block_content pos:start="1503:25" pos:end="1503:40">

                        <goto pos:start="1503:25" pos:end="1503:40">goto <name pos:start="1503:30" pos:end="1503:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="1505:21" pos:end="1505:45">/* Bitfield/Saturate.  */</comment>

                    <expr_stmt pos:start="1507:21" pos:end="1507:42"><expr pos:start="1507:21" pos:end="1507:41"><name pos:start="1507:21" pos:end="1507:22">op</name> <operator pos:start="1507:24" pos:end="1507:24">=</operator> <operator pos:start="1507:26" pos:end="1507:26">(</operator><name pos:start="1507:27" pos:end="1507:30">insn</name> <operator pos:start="1507:32" pos:end="1507:33">&gt;&gt;</operator> <literal type="number" pos:start="1507:35" pos:end="1507:36">21</literal><operator pos:start="1507:37" pos:end="1507:37">)</operator> <operator pos:start="1507:39" pos:end="1507:39">&amp;</operator> <literal type="number" pos:start="1507:41" pos:end="1507:41">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1509:21" pos:end="1509:38"><expr pos:start="1509:21" pos:end="1509:37"><name pos:start="1509:21" pos:end="1509:23">imm</name> <operator pos:start="1509:25" pos:end="1509:25">=</operator> <name pos:start="1509:27" pos:end="1509:30">insn</name> <operator pos:start="1509:32" pos:end="1509:32">&amp;</operator> <literal type="number" pos:start="1509:34" pos:end="1509:37">0x1f</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1511:21" pos:end="1511:70"><expr pos:start="1511:21" pos:end="1511:69"><name pos:start="1511:21" pos:end="1511:25">shift</name> <operator pos:start="1511:27" pos:end="1511:27">=</operator> <operator pos:start="1511:29" pos:end="1511:29">(</operator><operator pos:start="1511:30" pos:end="1511:30">(</operator><name pos:start="1511:31" pos:end="1511:34">insn</name> <operator pos:start="1511:36" pos:end="1511:37">&gt;&gt;</operator> <literal type="number" pos:start="1511:39" pos:end="1511:39">6</literal><operator pos:start="1511:40" pos:end="1511:40">)</operator> <operator pos:start="1511:42" pos:end="1511:42">&amp;</operator> <literal type="number" pos:start="1511:44" pos:end="1511:44">3</literal><operator pos:start="1511:45" pos:end="1511:45">)</operator> <operator pos:start="1511:47" pos:end="1511:47">|</operator> <operator pos:start="1511:49" pos:end="1511:49">(</operator><operator pos:start="1511:50" pos:end="1511:50">(</operator><name pos:start="1511:51" pos:end="1511:54">insn</name> <operator pos:start="1511:56" pos:end="1511:57">&gt;&gt;</operator> <literal type="number" pos:start="1511:59" pos:end="1511:60">10</literal><operator pos:start="1511:61" pos:end="1511:61">)</operator> <operator pos:start="1511:63" pos:end="1511:63">&amp;</operator> <literal type="number" pos:start="1511:65" pos:end="1511:68">0x1c</literal><operator pos:start="1511:69" pos:end="1511:69">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="1513:21" pos:end="1523:21"><if pos:start="1513:21" pos:end="1519:21">if <condition pos:start="1513:24" pos:end="1513:33">(<expr pos:start="1513:25" pos:end="1513:32"><name pos:start="1513:25" pos:end="1513:26">rn</name> <operator pos:start="1513:28" pos:end="1513:29">==</operator> <literal type="number" pos:start="1513:31" pos:end="1513:32">15</literal></expr>)</condition> <block pos:start="1513:35" pos:end="1519:21">{<block_content pos:start="1515:25" pos:end="1517:49">

                        <expr_stmt pos:start="1515:25" pos:end="1515:49"><expr pos:start="1515:25" pos:end="1515:48"><name pos:start="1515:25" pos:end="1515:27">tmp</name> <operator pos:start="1515:29" pos:end="1515:29">=</operator> <call pos:start="1515:31" pos:end="1515:48"><name pos:start="1515:31" pos:end="1515:46">tcg_temp_new_i32</name><argument_list pos:start="1515:47" pos:end="1515:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1517:25" pos:end="1517:49"><expr pos:start="1517:25" pos:end="1517:48"><call pos:start="1517:25" pos:end="1517:48"><name pos:start="1517:25" pos:end="1517:40">tcg_gen_movi_i32</name><argument_list pos:start="1517:41" pos:end="1517:48">(<argument pos:start="1517:42" pos:end="1517:44"><expr pos:start="1517:42" pos:end="1517:44"><name pos:start="1517:42" pos:end="1517:44">tmp</name></expr></argument>, <argument pos:start="1517:47" pos:end="1517:47"><expr pos:start="1517:47" pos:end="1517:47"><literal type="number" pos:start="1517:47" pos:end="1517:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1519:23" pos:end="1523:21">else <block pos:start="1519:28" pos:end="1523:21">{<block_content pos:start="1521:25" pos:end="1521:46">

                        <expr_stmt pos:start="1521:25" pos:end="1521:46"><expr pos:start="1521:25" pos:end="1521:45"><name pos:start="1521:25" pos:end="1521:27">tmp</name> <operator pos:start="1521:29" pos:end="1521:29">=</operator> <call pos:start="1521:31" pos:end="1521:45"><name pos:start="1521:31" pos:end="1521:38">load_reg</name><argument_list pos:start="1521:39" pos:end="1521:45">(<argument pos:start="1521:40" pos:end="1521:40"><expr pos:start="1521:40" pos:end="1521:40"><name pos:start="1521:40" pos:end="1521:40">s</name></expr></argument>, <argument pos:start="1521:43" pos:end="1521:44"><expr pos:start="1521:43" pos:end="1521:44"><name pos:start="1521:43" pos:end="1521:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <switch pos:start="1525:21" pos:end="1625:21">switch <condition pos:start="1525:28" pos:end="1525:31">(<expr pos:start="1525:29" pos:end="1525:30"><name pos:start="1525:29" pos:end="1525:30">op</name></expr>)</condition> <block pos:start="1525:33" pos:end="1625:21">{<block_content pos:start="1527:21" pos:end="1623:30">

                    <case pos:start="1527:21" pos:end="1527:27">case <expr pos:start="1527:26" pos:end="1527:26"><literal type="number" pos:start="1527:26" pos:end="1527:26">2</literal></expr>:</case> <comment type="block" pos:start="1527:29" pos:end="1527:59">/* Signed bitfield extract.  */</comment>

                        <expr_stmt pos:start="1529:25" pos:end="1529:30"><expr pos:start="1529:25" pos:end="1529:29"><name pos:start="1529:25" pos:end="1529:27">imm</name><operator pos:start="1529:28" pos:end="1529:29">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="1531:25" pos:end="1533:44"><if pos:start="1531:25" pos:end="1533:44">if <condition pos:start="1531:28" pos:end="1531:45">(<expr pos:start="1531:29" pos:end="1531:44"><name pos:start="1531:29" pos:end="1531:33">shift</name> <operator pos:start="1531:35" pos:end="1531:35">+</operator> <name pos:start="1531:37" pos:end="1531:39">imm</name> <operator pos:start="1531:41" pos:end="1531:41">&gt;</operator> <literal type="number" pos:start="1531:43" pos:end="1531:44">32</literal></expr>)</condition><block type="pseudo" pos:start="1533:29" pos:end="1533:44"><block_content pos:start="1533:29" pos:end="1533:44">

                            <goto pos:start="1533:29" pos:end="1533:44">goto <name pos:start="1533:34" pos:end="1533:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <if_stmt pos:start="1535:25" pos:end="1537:54"><if pos:start="1535:25" pos:end="1537:54">if <condition pos:start="1535:28" pos:end="1535:37">(<expr pos:start="1535:29" pos:end="1535:36"><name pos:start="1535:29" pos:end="1535:31">imm</name> <operator pos:start="1535:33" pos:end="1535:33">&lt;</operator> <literal type="number" pos:start="1535:35" pos:end="1535:36">32</literal></expr>)</condition><block type="pseudo" pos:start="1537:29" pos:end="1537:54"><block_content pos:start="1537:29" pos:end="1537:54">

                            <expr_stmt pos:start="1537:29" pos:end="1537:54"><expr pos:start="1537:29" pos:end="1537:53"><call pos:start="1537:29" pos:end="1537:53"><name pos:start="1537:29" pos:end="1537:36">gen_sbfx</name><argument_list pos:start="1537:37" pos:end="1537:53">(<argument pos:start="1537:38" pos:end="1537:40"><expr pos:start="1537:38" pos:end="1537:40"><name pos:start="1537:38" pos:end="1537:40">tmp</name></expr></argument>, <argument pos:start="1537:43" pos:end="1537:47"><expr pos:start="1537:43" pos:end="1537:47"><name pos:start="1537:43" pos:end="1537:47">shift</name></expr></argument>, <argument pos:start="1537:50" pos:end="1537:52"><expr pos:start="1537:50" pos:end="1537:52"><name pos:start="1537:50" pos:end="1537:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <break pos:start="1539:25" pos:end="1539:30">break;</break>

                    <case pos:start="1541:21" pos:end="1541:27">case <expr pos:start="1541:26" pos:end="1541:26"><literal type="number" pos:start="1541:26" pos:end="1541:26">6</literal></expr>:</case> <comment type="block" pos:start="1541:29" pos:end="1541:61">/* Unsigned bitfield extract.  */</comment>

                        <expr_stmt pos:start="1543:25" pos:end="1543:30"><expr pos:start="1543:25" pos:end="1543:29"><name pos:start="1543:25" pos:end="1543:27">imm</name><operator pos:start="1543:28" pos:end="1543:29">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="1545:25" pos:end="1547:44"><if pos:start="1545:25" pos:end="1547:44">if <condition pos:start="1545:28" pos:end="1545:45">(<expr pos:start="1545:29" pos:end="1545:44"><name pos:start="1545:29" pos:end="1545:33">shift</name> <operator pos:start="1545:35" pos:end="1545:35">+</operator> <name pos:start="1545:37" pos:end="1545:39">imm</name> <operator pos:start="1545:41" pos:end="1545:41">&gt;</operator> <literal type="number" pos:start="1545:43" pos:end="1545:44">32</literal></expr>)</condition><block type="pseudo" pos:start="1547:29" pos:end="1547:44"><block_content pos:start="1547:29" pos:end="1547:44">

                            <goto pos:start="1547:29" pos:end="1547:44">goto <name pos:start="1547:34" pos:end="1547:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <if_stmt pos:start="1549:25" pos:end="1551:66"><if pos:start="1549:25" pos:end="1551:66">if <condition pos:start="1549:28" pos:end="1549:37">(<expr pos:start="1549:29" pos:end="1549:36"><name pos:start="1549:29" pos:end="1549:31">imm</name> <operator pos:start="1549:33" pos:end="1549:33">&lt;</operator> <literal type="number" pos:start="1549:35" pos:end="1549:36">32</literal></expr>)</condition><block type="pseudo" pos:start="1551:29" pos:end="1551:66"><block_content pos:start="1551:29" pos:end="1551:66">

                            <expr_stmt pos:start="1551:29" pos:end="1551:66"><expr pos:start="1551:29" pos:end="1551:65"><call pos:start="1551:29" pos:end="1551:65"><name pos:start="1551:29" pos:end="1551:36">gen_ubfx</name><argument_list pos:start="1551:37" pos:end="1551:65">(<argument pos:start="1551:38" pos:end="1551:40"><expr pos:start="1551:38" pos:end="1551:40"><name pos:start="1551:38" pos:end="1551:40">tmp</name></expr></argument>, <argument pos:start="1551:43" pos:end="1551:47"><expr pos:start="1551:43" pos:end="1551:47"><name pos:start="1551:43" pos:end="1551:47">shift</name></expr></argument>, <argument pos:start="1551:50" pos:end="1551:64"><expr pos:start="1551:50" pos:end="1551:64"><operator pos:start="1551:50" pos:end="1551:50">(</operator><literal type="number" pos:start="1551:51" pos:end="1551:52">1u</literal> <operator pos:start="1551:54" pos:end="1551:55">&lt;&lt;</operator> <name pos:start="1551:57" pos:end="1551:59">imm</name><operator pos:start="1551:60" pos:end="1551:60">)</operator> <operator pos:start="1551:62" pos:end="1551:62">-</operator> <literal type="number" pos:start="1551:64" pos:end="1551:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <break pos:start="1553:25" pos:end="1553:30">break;</break>

                    <case pos:start="1555:21" pos:end="1555:27">case <expr pos:start="1555:26" pos:end="1555:26"><literal type="number" pos:start="1555:26" pos:end="1555:26">3</literal></expr>:</case> <comment type="block" pos:start="1555:29" pos:end="1555:57">/* Bitfield insert/clear.  */</comment>

                        <if_stmt pos:start="1557:25" pos:end="1559:44"><if pos:start="1557:25" pos:end="1559:44">if <condition pos:start="1557:28" pos:end="1557:40">(<expr pos:start="1557:29" pos:end="1557:39"><name pos:start="1557:29" pos:end="1557:31">imm</name> <operator pos:start="1557:33" pos:end="1557:33">&lt;</operator> <name pos:start="1557:35" pos:end="1557:39">shift</name></expr>)</condition><block type="pseudo" pos:start="1559:29" pos:end="1559:44"><block_content pos:start="1559:29" pos:end="1559:44">

                            <goto pos:start="1559:29" pos:end="1559:44">goto <name pos:start="1559:34" pos:end="1559:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1561:25" pos:end="1561:46"><expr pos:start="1561:25" pos:end="1561:45"><name pos:start="1561:25" pos:end="1561:27">imm</name> <operator pos:start="1561:29" pos:end="1561:29">=</operator> <name pos:start="1561:31" pos:end="1561:33">imm</name> <operator pos:start="1561:35" pos:end="1561:35">+</operator> <literal type="number" pos:start="1561:37" pos:end="1561:39">1</literal> <operator pos:start="1561:39" pos:end="1561:39">-</operator> <name pos:start="1561:41" pos:end="1561:45">shift</name></expr>;</expr_stmt>

                        <if_stmt pos:start="1563:25" pos:end="1571:25"><if pos:start="1563:25" pos:end="1571:25">if <condition pos:start="1563:28" pos:end="1563:38">(<expr pos:start="1563:29" pos:end="1563:37"><name pos:start="1563:29" pos:end="1563:31">imm</name> <operator pos:start="1563:33" pos:end="1563:34">!=</operator> <literal type="number" pos:start="1563:36" pos:end="1563:37">32</literal></expr>)</condition> <block pos:start="1563:40" pos:end="1571:25">{<block_content pos:start="1565:29" pos:end="1569:52">

                            <expr_stmt pos:start="1565:29" pos:end="1565:51"><expr pos:start="1565:29" pos:end="1565:50"><name pos:start="1565:29" pos:end="1565:32">tmp2</name> <operator pos:start="1565:34" pos:end="1565:34">=</operator> <call pos:start="1565:36" pos:end="1565:50"><name pos:start="1565:36" pos:end="1565:43">load_reg</name><argument_list pos:start="1565:44" pos:end="1565:50">(<argument pos:start="1565:45" pos:end="1565:45"><expr pos:start="1565:45" pos:end="1565:45"><name pos:start="1565:45" pos:end="1565:45">s</name></expr></argument>, <argument pos:start="1565:48" pos:end="1565:49"><expr pos:start="1565:48" pos:end="1565:49"><name pos:start="1565:48" pos:end="1565:49">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1567:29" pos:end="1567:76"><expr pos:start="1567:29" pos:end="1567:75"><call pos:start="1567:29" pos:end="1567:75"><name pos:start="1567:29" pos:end="1567:35">gen_bfi</name><argument_list pos:start="1567:36" pos:end="1567:75">(<argument pos:start="1567:37" pos:end="1567:39"><expr pos:start="1567:37" pos:end="1567:39"><name pos:start="1567:37" pos:end="1567:39">tmp</name></expr></argument>, <argument pos:start="1567:42" pos:end="1567:45"><expr pos:start="1567:42" pos:end="1567:45"><name pos:start="1567:42" pos:end="1567:45">tmp2</name></expr></argument>, <argument pos:start="1567:48" pos:end="1567:50"><expr pos:start="1567:48" pos:end="1567:50"><name pos:start="1567:48" pos:end="1567:50">tmp</name></expr></argument>, <argument pos:start="1567:53" pos:end="1567:57"><expr pos:start="1567:53" pos:end="1567:57"><name pos:start="1567:53" pos:end="1567:57">shift</name></expr></argument>, <argument pos:start="1567:60" pos:end="1567:74"><expr pos:start="1567:60" pos:end="1567:74"><operator pos:start="1567:60" pos:end="1567:60">(</operator><literal type="number" pos:start="1567:61" pos:end="1567:62">1u</literal> <operator pos:start="1567:64" pos:end="1567:65">&lt;&lt;</operator> <name pos:start="1567:67" pos:end="1567:69">imm</name><operator pos:start="1567:70" pos:end="1567:70">)</operator> <operator pos:start="1567:72" pos:end="1567:72">-</operator> <literal type="number" pos:start="1567:74" pos:end="1567:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1569:29" pos:end="1569:52"><expr pos:start="1569:29" pos:end="1569:51"><call pos:start="1569:29" pos:end="1569:51"><name pos:start="1569:29" pos:end="1569:45">tcg_temp_free_i32</name><argument_list pos:start="1569:46" pos:end="1569:51">(<argument pos:start="1569:47" pos:end="1569:50"><expr pos:start="1569:47" pos:end="1569:50"><name pos:start="1569:47" pos:end="1569:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1573:25" pos:end="1573:30">break;</break>

                    <case pos:start="1575:21" pos:end="1575:27">case <expr pos:start="1575:26" pos:end="1575:26"><literal type="number" pos:start="1575:26" pos:end="1575:26">7</literal></expr>:</case>

                        <goto pos:start="1577:25" pos:end="1577:40">goto <name pos:start="1577:30" pos:end="1577:39">illegal_op</name>;</goto>

                    <default pos:start="1579:21" pos:end="1579:28">default:</default> <comment type="block" pos:start="1579:30" pos:end="1579:45">/* Saturate.  */</comment>

                        <if_stmt pos:start="1581:25" pos:end="1591:25"><if pos:start="1581:25" pos:end="1591:25">if <condition pos:start="1581:28" pos:end="1581:34">(<expr pos:start="1581:29" pos:end="1581:33"><name pos:start="1581:29" pos:end="1581:33">shift</name></expr>)</condition> <block pos:start="1581:36" pos:end="1591:25">{<block_content pos:start="1583:29" pos:end="1589:66">

                            <if_stmt pos:start="1583:29" pos:end="1589:66"><if pos:start="1583:29" pos:end="1585:66">if <condition pos:start="1583:32" pos:end="1583:39">(<expr pos:start="1583:33" pos:end="1583:38"><name pos:start="1583:33" pos:end="1583:34">op</name> <operator pos:start="1583:36" pos:end="1583:36">&amp;</operator> <literal type="number" pos:start="1583:38" pos:end="1583:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1585:33" pos:end="1585:66"><block_content pos:start="1585:33" pos:end="1585:66">

                                <expr_stmt pos:start="1585:33" pos:end="1585:66"><expr pos:start="1585:33" pos:end="1585:65"><call pos:start="1585:33" pos:end="1585:65"><name pos:start="1585:33" pos:end="1585:48">tcg_gen_sari_i32</name><argument_list pos:start="1585:49" pos:end="1585:65">(<argument pos:start="1585:50" pos:end="1585:52"><expr pos:start="1585:50" pos:end="1585:52"><name pos:start="1585:50" pos:end="1585:52">tmp</name></expr></argument>, <argument pos:start="1585:55" pos:end="1585:57"><expr pos:start="1585:55" pos:end="1585:57"><name pos:start="1585:55" pos:end="1585:57">tmp</name></expr></argument>, <argument pos:start="1585:60" pos:end="1585:64"><expr pos:start="1585:60" pos:end="1585:64"><name pos:start="1585:60" pos:end="1585:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1587:29" pos:end="1589:66">else<block type="pseudo" pos:start="1589:33" pos:end="1589:66"><block_content pos:start="1589:33" pos:end="1589:66">

                                <expr_stmt pos:start="1589:33" pos:end="1589:66"><expr pos:start="1589:33" pos:end="1589:65"><call pos:start="1589:33" pos:end="1589:65"><name pos:start="1589:33" pos:end="1589:48">tcg_gen_shli_i32</name><argument_list pos:start="1589:49" pos:end="1589:65">(<argument pos:start="1589:50" pos:end="1589:52"><expr pos:start="1589:50" pos:end="1589:52"><name pos:start="1589:50" pos:end="1589:52">tmp</name></expr></argument>, <argument pos:start="1589:55" pos:end="1589:57"><expr pos:start="1589:55" pos:end="1589:57"><name pos:start="1589:55" pos:end="1589:57">tmp</name></expr></argument>, <argument pos:start="1589:60" pos:end="1589:64"><expr pos:start="1589:60" pos:end="1589:64"><name pos:start="1589:60" pos:end="1589:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1593:25" pos:end="1593:50"><expr pos:start="1593:25" pos:end="1593:49"><name pos:start="1593:25" pos:end="1593:28">tmp2</name> <operator pos:start="1593:30" pos:end="1593:30">=</operator> <call pos:start="1593:32" pos:end="1593:49"><name pos:start="1593:32" pos:end="1593:44">tcg_const_i32</name><argument_list pos:start="1593:45" pos:end="1593:49">(<argument pos:start="1593:46" pos:end="1593:48"><expr pos:start="1593:46" pos:end="1593:48"><name pos:start="1593:46" pos:end="1593:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1595:25" pos:end="1619:25"><if pos:start="1595:25" pos:end="1607:25">if <condition pos:start="1595:28" pos:end="1595:35">(<expr pos:start="1595:29" pos:end="1595:34"><name pos:start="1595:29" pos:end="1595:30">op</name> <operator pos:start="1595:32" pos:end="1595:32">&amp;</operator> <literal type="number" pos:start="1595:34" pos:end="1595:34">4</literal></expr>)</condition> <block pos:start="1595:37" pos:end="1607:25">{<block_content pos:start="1599:29" pos:end="1605:64">

                            <comment type="block" pos:start="1597:29" pos:end="1597:44">/* Unsigned.  */</comment>

                            <if_stmt pos:start="1599:29" pos:end="1605:64"><if pos:start="1599:29" pos:end="1601:66">if <condition pos:start="1599:32" pos:end="1599:55">(<expr pos:start="1599:33" pos:end="1599:54"><operator pos:start="1599:33" pos:end="1599:33">(</operator><name pos:start="1599:34" pos:end="1599:35">op</name> <operator pos:start="1599:37" pos:end="1599:37">&amp;</operator> <literal type="number" pos:start="1599:39" pos:end="1599:39">1</literal><operator pos:start="1599:40" pos:end="1599:40">)</operator> <operator pos:start="1599:42" pos:end="1599:43">&amp;&amp;</operator> <name pos:start="1599:45" pos:end="1599:49">shift</name> <operator pos:start="1599:51" pos:end="1599:52">==</operator> <literal type="number" pos:start="1599:54" pos:end="1599:54">0</literal></expr>)</condition><block type="pseudo" pos:start="1601:33" pos:end="1601:66"><block_content pos:start="1601:33" pos:end="1601:66">

                                <expr_stmt pos:start="1601:33" pos:end="1601:66"><expr pos:start="1601:33" pos:end="1601:65"><call pos:start="1601:33" pos:end="1601:65"><name pos:start="1601:33" pos:end="1601:49">gen_helper_usat16</name><argument_list pos:start="1601:50" pos:end="1601:65">(<argument pos:start="1601:51" pos:end="1601:53"><expr pos:start="1601:51" pos:end="1601:53"><name pos:start="1601:51" pos:end="1601:53">tmp</name></expr></argument>, <argument pos:start="1601:56" pos:end="1601:58"><expr pos:start="1601:56" pos:end="1601:58"><name pos:start="1601:56" pos:end="1601:58">tmp</name></expr></argument>, <argument pos:start="1601:61" pos:end="1601:64"><expr pos:start="1601:61" pos:end="1601:64"><name pos:start="1601:61" pos:end="1601:64">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1603:29" pos:end="1605:64">else<block type="pseudo" pos:start="1605:33" pos:end="1605:64"><block_content pos:start="1605:33" pos:end="1605:64">

                                <expr_stmt pos:start="1605:33" pos:end="1605:64"><expr pos:start="1605:33" pos:end="1605:63"><call pos:start="1605:33" pos:end="1605:63"><name pos:start="1605:33" pos:end="1605:47">gen_helper_usat</name><argument_list pos:start="1605:48" pos:end="1605:63">(<argument pos:start="1605:49" pos:end="1605:51"><expr pos:start="1605:49" pos:end="1605:51"><name pos:start="1605:49" pos:end="1605:51">tmp</name></expr></argument>, <argument pos:start="1605:54" pos:end="1605:56"><expr pos:start="1605:54" pos:end="1605:56"><name pos:start="1605:54" pos:end="1605:56">tmp</name></expr></argument>, <argument pos:start="1605:59" pos:end="1605:62"><expr pos:start="1605:59" pos:end="1605:62"><name pos:start="1605:59" pos:end="1605:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="1607:27" pos:end="1619:25">else <block pos:start="1607:32" pos:end="1619:25">{<block_content pos:start="1611:29" pos:end="1617:64">

                            <comment type="block" pos:start="1609:29" pos:end="1609:42">/* Signed.  */</comment>

                            <if_stmt pos:start="1611:29" pos:end="1617:64"><if pos:start="1611:29" pos:end="1613:66">if <condition pos:start="1611:32" pos:end="1611:55">(<expr pos:start="1611:33" pos:end="1611:54"><operator pos:start="1611:33" pos:end="1611:33">(</operator><name pos:start="1611:34" pos:end="1611:35">op</name> <operator pos:start="1611:37" pos:end="1611:37">&amp;</operator> <literal type="number" pos:start="1611:39" pos:end="1611:39">1</literal><operator pos:start="1611:40" pos:end="1611:40">)</operator> <operator pos:start="1611:42" pos:end="1611:43">&amp;&amp;</operator> <name pos:start="1611:45" pos:end="1611:49">shift</name> <operator pos:start="1611:51" pos:end="1611:52">==</operator> <literal type="number" pos:start="1611:54" pos:end="1611:54">0</literal></expr>)</condition><block type="pseudo" pos:start="1613:33" pos:end="1613:66"><block_content pos:start="1613:33" pos:end="1613:66">

                                <expr_stmt pos:start="1613:33" pos:end="1613:66"><expr pos:start="1613:33" pos:end="1613:65"><call pos:start="1613:33" pos:end="1613:65"><name pos:start="1613:33" pos:end="1613:49">gen_helper_ssat16</name><argument_list pos:start="1613:50" pos:end="1613:65">(<argument pos:start="1613:51" pos:end="1613:53"><expr pos:start="1613:51" pos:end="1613:53"><name pos:start="1613:51" pos:end="1613:53">tmp</name></expr></argument>, <argument pos:start="1613:56" pos:end="1613:58"><expr pos:start="1613:56" pos:end="1613:58"><name pos:start="1613:56" pos:end="1613:58">tmp</name></expr></argument>, <argument pos:start="1613:61" pos:end="1613:64"><expr pos:start="1613:61" pos:end="1613:64"><name pos:start="1613:61" pos:end="1613:64">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1615:29" pos:end="1617:64">else<block type="pseudo" pos:start="1617:33" pos:end="1617:64"><block_content pos:start="1617:33" pos:end="1617:64">

                                <expr_stmt pos:start="1617:33" pos:end="1617:64"><expr pos:start="1617:33" pos:end="1617:63"><call pos:start="1617:33" pos:end="1617:63"><name pos:start="1617:33" pos:end="1617:47">gen_helper_ssat</name><argument_list pos:start="1617:48" pos:end="1617:63">(<argument pos:start="1617:49" pos:end="1617:51"><expr pos:start="1617:49" pos:end="1617:51"><name pos:start="1617:49" pos:end="1617:51">tmp</name></expr></argument>, <argument pos:start="1617:54" pos:end="1617:56"><expr pos:start="1617:54" pos:end="1617:56"><name pos:start="1617:54" pos:end="1617:56">tmp</name></expr></argument>, <argument pos:start="1617:59" pos:end="1617:62"><expr pos:start="1617:59" pos:end="1617:62"><name pos:start="1617:59" pos:end="1617:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1621:25" pos:end="1621:48"><expr pos:start="1621:25" pos:end="1621:47"><call pos:start="1621:25" pos:end="1621:47"><name pos:start="1621:25" pos:end="1621:41">tcg_temp_free_i32</name><argument_list pos:start="1621:42" pos:end="1621:47">(<argument pos:start="1621:43" pos:end="1621:46"><expr pos:start="1621:43" pos:end="1621:46"><name pos:start="1621:43" pos:end="1621:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1623:25" pos:end="1623:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="1627:21" pos:end="1627:42"><expr pos:start="1627:21" pos:end="1627:41"><call pos:start="1627:21" pos:end="1627:41"><name pos:start="1627:21" pos:end="1627:29">store_reg</name><argument_list pos:start="1627:30" pos:end="1627:41">(<argument pos:start="1627:31" pos:end="1627:31"><expr pos:start="1627:31" pos:end="1627:31"><name pos:start="1627:31" pos:end="1627:31">s</name></expr></argument>, <argument pos:start="1627:34" pos:end="1627:35"><expr pos:start="1627:34" pos:end="1627:35"><name pos:start="1627:34" pos:end="1627:35">rd</name></expr></argument>, <argument pos:start="1627:38" pos:end="1627:40"><expr pos:start="1627:38" pos:end="1627:40"><name pos:start="1627:38" pos:end="1627:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1629:19" pos:end="1699:17">else <block pos:start="1629:24" pos:end="1699:17">{<block_content pos:start="1631:21" pos:end="1697:42">

                    <expr_stmt pos:start="1631:21" pos:end="1633:67"><expr pos:start="1631:21" pos:end="1633:66"><name pos:start="1631:21" pos:end="1631:23">imm</name> <operator pos:start="1631:25" pos:end="1631:25">=</operator> <operator pos:start="1631:27" pos:end="1631:27">(</operator><operator pos:start="1631:28" pos:end="1631:28">(</operator><name pos:start="1631:29" pos:end="1631:32">insn</name> <operator pos:start="1631:34" pos:end="1631:34">&amp;</operator> <literal type="number" pos:start="1631:36" pos:end="1631:45">0x04000000</literal><operator pos:start="1631:46" pos:end="1631:46">)</operator> <operator pos:start="1631:48" pos:end="1631:49">&gt;&gt;</operator> <literal type="number" pos:start="1631:51" pos:end="1631:52">15</literal><operator pos:start="1631:53" pos:end="1631:53">)</operator>

                          <operator pos:start="1633:27" pos:end="1633:27">|</operator> <operator pos:start="1633:29" pos:end="1633:29">(</operator><operator pos:start="1633:30" pos:end="1633:30">(</operator><name pos:start="1633:31" pos:end="1633:34">insn</name> <operator pos:start="1633:36" pos:end="1633:36">&amp;</operator> <literal type="number" pos:start="1633:38" pos:end="1633:43">0x7000</literal><operator pos:start="1633:44" pos:end="1633:44">)</operator> <operator pos:start="1633:46" pos:end="1633:47">&gt;&gt;</operator> <literal type="number" pos:start="1633:49" pos:end="1633:49">4</literal><operator pos:start="1633:50" pos:end="1633:50">)</operator> <operator pos:start="1633:52" pos:end="1633:52">|</operator> <operator pos:start="1633:54" pos:end="1633:54">(</operator><name pos:start="1633:55" pos:end="1633:58">insn</name> <operator pos:start="1633:60" pos:end="1633:60">&amp;</operator> <literal type="number" pos:start="1633:62" pos:end="1633:65">0xff</literal><operator pos:start="1633:66" pos:end="1633:66">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="1635:21" pos:end="1695:21"><if pos:start="1635:21" pos:end="1661:21">if <condition pos:start="1635:24" pos:end="1635:41">(<expr pos:start="1635:25" pos:end="1635:40"><name pos:start="1635:25" pos:end="1635:28">insn</name> <operator pos:start="1635:30" pos:end="1635:30">&amp;</operator> <operator pos:start="1635:32" pos:end="1635:32">(</operator><literal type="number" pos:start="1635:33" pos:end="1635:33">1</literal> <operator pos:start="1635:35" pos:end="1635:36">&lt;&lt;</operator> <literal type="number" pos:start="1635:38" pos:end="1635:39">22</literal><operator pos:start="1635:40" pos:end="1635:40">)</operator></expr>)</condition> <block pos:start="1635:43" pos:end="1661:21">{<block_content pos:start="1639:25" pos:end="1659:25">

                        <comment type="block" pos:start="1637:25" pos:end="1637:48">/* 16-bit immediate.  */</comment>

                        <expr_stmt pos:start="1639:25" pos:end="1639:52"><expr pos:start="1639:25" pos:end="1639:51"><name pos:start="1639:25" pos:end="1639:27">imm</name> <operator pos:start="1639:29" pos:end="1639:30">|=</operator> <operator pos:start="1639:32" pos:end="1639:32">(</operator><name pos:start="1639:33" pos:end="1639:36">insn</name> <operator pos:start="1639:38" pos:end="1639:39">&gt;&gt;</operator> <literal type="number" pos:start="1639:41" pos:end="1639:41">4</literal><operator pos:start="1639:42" pos:end="1639:42">)</operator> <operator pos:start="1639:44" pos:end="1639:44">&amp;</operator> <literal type="number" pos:start="1639:46" pos:end="1639:51">0xf000</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="1641:25" pos:end="1659:25"><if pos:start="1641:25" pos:end="1651:25">if <condition pos:start="1641:28" pos:end="1641:45">(<expr pos:start="1641:29" pos:end="1641:44"><name pos:start="1641:29" pos:end="1641:32">insn</name> <operator pos:start="1641:34" pos:end="1641:34">&amp;</operator> <operator pos:start="1641:36" pos:end="1641:36">(</operator><literal type="number" pos:start="1641:37" pos:end="1641:37">1</literal> <operator pos:start="1641:39" pos:end="1641:40">&lt;&lt;</operator> <literal type="number" pos:start="1641:42" pos:end="1641:43">23</literal><operator pos:start="1641:44" pos:end="1641:44">)</operator></expr>)</condition> <block pos:start="1641:47" pos:end="1651:25">{<block_content pos:start="1645:29" pos:end="1649:65">

                            <comment type="block" pos:start="1643:29" pos:end="1643:38">/* movt */</comment>

                            <expr_stmt pos:start="1645:29" pos:end="1645:50"><expr pos:start="1645:29" pos:end="1645:49"><name pos:start="1645:29" pos:end="1645:31">tmp</name> <operator pos:start="1645:33" pos:end="1645:33">=</operator> <call pos:start="1645:35" pos:end="1645:49"><name pos:start="1645:35" pos:end="1645:42">load_reg</name><argument_list pos:start="1645:43" pos:end="1645:49">(<argument pos:start="1645:44" pos:end="1645:44"><expr pos:start="1645:44" pos:end="1645:44"><name pos:start="1645:44" pos:end="1645:44">s</name></expr></argument>, <argument pos:start="1645:47" pos:end="1645:48"><expr pos:start="1645:47" pos:end="1645:48"><name pos:start="1645:47" pos:end="1645:48">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1647:29" pos:end="1647:57"><expr pos:start="1647:29" pos:end="1647:56"><call pos:start="1647:29" pos:end="1647:56"><name pos:start="1647:29" pos:end="1647:46">tcg_gen_ext16u_i32</name><argument_list pos:start="1647:47" pos:end="1647:56">(<argument pos:start="1647:48" pos:end="1647:50"><expr pos:start="1647:48" pos:end="1647:50"><name pos:start="1647:48" pos:end="1647:50">tmp</name></expr></argument>, <argument pos:start="1647:53" pos:end="1647:55"><expr pos:start="1647:53" pos:end="1647:55"><name pos:start="1647:53" pos:end="1647:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1649:29" pos:end="1649:65"><expr pos:start="1649:29" pos:end="1649:64"><call pos:start="1649:29" pos:end="1649:64"><name pos:start="1649:29" pos:end="1649:43">tcg_gen_ori_i32</name><argument_list pos:start="1649:44" pos:end="1649:64">(<argument pos:start="1649:45" pos:end="1649:47"><expr pos:start="1649:45" pos:end="1649:47"><name pos:start="1649:45" pos:end="1649:47">tmp</name></expr></argument>, <argument pos:start="1649:50" pos:end="1649:52"><expr pos:start="1649:50" pos:end="1649:52"><name pos:start="1649:50" pos:end="1649:52">tmp</name></expr></argument>, <argument pos:start="1649:55" pos:end="1649:63"><expr pos:start="1649:55" pos:end="1649:63"><name pos:start="1649:55" pos:end="1649:57">imm</name> <operator pos:start="1649:59" pos:end="1649:60">&lt;&lt;</operator> <literal type="number" pos:start="1649:62" pos:end="1649:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1651:27" pos:end="1659:25">else <block pos:start="1651:32" pos:end="1659:25">{<block_content pos:start="1655:29" pos:end="1657:55">

                            <comment type="block" pos:start="1653:29" pos:end="1653:38">/* movw */</comment>

                            <expr_stmt pos:start="1655:29" pos:end="1655:53"><expr pos:start="1655:29" pos:end="1655:52"><name pos:start="1655:29" pos:end="1655:31">tmp</name> <operator pos:start="1655:33" pos:end="1655:33">=</operator> <call pos:start="1655:35" pos:end="1655:52"><name pos:start="1655:35" pos:end="1655:50">tcg_temp_new_i32</name><argument_list pos:start="1655:51" pos:end="1655:52">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1657:29" pos:end="1657:55"><expr pos:start="1657:29" pos:end="1657:54"><call pos:start="1657:29" pos:end="1657:54"><name pos:start="1657:29" pos:end="1657:44">tcg_gen_movi_i32</name><argument_list pos:start="1657:45" pos:end="1657:54">(<argument pos:start="1657:46" pos:end="1657:48"><expr pos:start="1657:46" pos:end="1657:48"><name pos:start="1657:46" pos:end="1657:48">tmp</name></expr></argument>, <argument pos:start="1657:51" pos:end="1657:53"><expr pos:start="1657:51" pos:end="1657:53"><name pos:start="1657:51" pos:end="1657:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1661:23" pos:end="1695:21">else <block pos:start="1661:28" pos:end="1695:21">{<block_content pos:start="1665:25" pos:end="1693:25">

                        <comment type="block" pos:start="1663:25" pos:end="1663:56">/* Add/sub 12-bit immediate.  */</comment>

                        <if_stmt pos:start="1665:25" pos:end="1693:25"><if pos:start="1665:25" pos:end="1681:25">if <condition pos:start="1665:28" pos:end="1665:37">(<expr pos:start="1665:29" pos:end="1665:36"><name pos:start="1665:29" pos:end="1665:30">rn</name> <operator pos:start="1665:32" pos:end="1665:33">==</operator> <literal type="number" pos:start="1665:35" pos:end="1665:36">15</literal></expr>)</condition> <block pos:start="1665:39" pos:end="1681:25">{<block_content pos:start="1667:29" pos:end="1679:58">

                            <expr_stmt pos:start="1667:29" pos:end="1667:58"><expr pos:start="1667:29" pos:end="1667:57"><name pos:start="1667:29" pos:end="1667:34">offset</name> <operator pos:start="1667:36" pos:end="1667:36">=</operator> <name pos:start="1667:38" pos:end="1667:42"><name pos:start="1667:38" pos:end="1667:38">s</name><operator pos:start="1667:39" pos:end="1667:40">-&gt;</operator><name pos:start="1667:41" pos:end="1667:42">pc</name></name> <operator pos:start="1667:44" pos:end="1667:44">&amp;</operator> <operator pos:start="1667:46" pos:end="1667:46">~</operator><operator pos:start="1667:47" pos:end="1667:47">(</operator><name pos:start="1667:48" pos:end="1667:55">uint32_t</name><operator pos:start="1667:56" pos:end="1667:56">)</operator><literal type="number" pos:start="1667:57" pos:end="1667:57">3</literal></expr>;</expr_stmt>

                            <if_stmt pos:start="1669:29" pos:end="1675:46"><if pos:start="1669:29" pos:end="1671:46">if <condition pos:start="1669:32" pos:end="1669:49">(<expr pos:start="1669:33" pos:end="1669:48"><name pos:start="1669:33" pos:end="1669:36">insn</name> <operator pos:start="1669:38" pos:end="1669:38">&amp;</operator> <operator pos:start="1669:40" pos:end="1669:40">(</operator><literal type="number" pos:start="1669:41" pos:end="1669:41">1</literal> <operator pos:start="1669:43" pos:end="1669:44">&lt;&lt;</operator> <literal type="number" pos:start="1669:46" pos:end="1669:47">23</literal><operator pos:start="1669:48" pos:end="1669:48">)</operator></expr>)</condition><block type="pseudo" pos:start="1671:33" pos:end="1671:46"><block_content pos:start="1671:33" pos:end="1671:46">

                                <expr_stmt pos:start="1671:33" pos:end="1671:46"><expr pos:start="1671:33" pos:end="1671:45"><name pos:start="1671:33" pos:end="1671:38">offset</name> <operator pos:start="1671:40" pos:end="1671:41">-=</operator> <name pos:start="1671:43" pos:end="1671:45">imm</name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1673:29" pos:end="1675:46">else<block type="pseudo" pos:start="1675:33" pos:end="1675:46"><block_content pos:start="1675:33" pos:end="1675:46">

                                <expr_stmt pos:start="1675:33" pos:end="1675:46"><expr pos:start="1675:33" pos:end="1675:45"><name pos:start="1675:33" pos:end="1675:38">offset</name> <operator pos:start="1675:40" pos:end="1675:41">+=</operator> <name pos:start="1675:43" pos:end="1675:45">imm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt pos:start="1677:29" pos:end="1677:53"><expr pos:start="1677:29" pos:end="1677:52"><name pos:start="1677:29" pos:end="1677:31">tmp</name> <operator pos:start="1677:33" pos:end="1677:33">=</operator> <call pos:start="1677:35" pos:end="1677:52"><name pos:start="1677:35" pos:end="1677:50">tcg_temp_new_i32</name><argument_list pos:start="1677:51" pos:end="1677:52">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1679:29" pos:end="1679:58"><expr pos:start="1679:29" pos:end="1679:57"><call pos:start="1679:29" pos:end="1679:57"><name pos:start="1679:29" pos:end="1679:44">tcg_gen_movi_i32</name><argument_list pos:start="1679:45" pos:end="1679:57">(<argument pos:start="1679:46" pos:end="1679:48"><expr pos:start="1679:46" pos:end="1679:48"><name pos:start="1679:46" pos:end="1679:48">tmp</name></expr></argument>, <argument pos:start="1679:51" pos:end="1679:56"><expr pos:start="1679:51" pos:end="1679:56"><name pos:start="1679:51" pos:end="1679:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1681:27" pos:end="1693:25">else <block pos:start="1681:32" pos:end="1693:25">{<block_content pos:start="1683:29" pos:end="1691:64">

                            <expr_stmt pos:start="1683:29" pos:end="1683:50"><expr pos:start="1683:29" pos:end="1683:49"><name pos:start="1683:29" pos:end="1683:31">tmp</name> <operator pos:start="1683:33" pos:end="1683:33">=</operator> <call pos:start="1683:35" pos:end="1683:49"><name pos:start="1683:35" pos:end="1683:42">load_reg</name><argument_list pos:start="1683:43" pos:end="1683:49">(<argument pos:start="1683:44" pos:end="1683:44"><expr pos:start="1683:44" pos:end="1683:44"><name pos:start="1683:44" pos:end="1683:44">s</name></expr></argument>, <argument pos:start="1683:47" pos:end="1683:48"><expr pos:start="1683:47" pos:end="1683:48"><name pos:start="1683:47" pos:end="1683:48">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="1685:29" pos:end="1691:64"><if pos:start="1685:29" pos:end="1687:64">if <condition pos:start="1685:32" pos:end="1685:49">(<expr pos:start="1685:33" pos:end="1685:48"><name pos:start="1685:33" pos:end="1685:36">insn</name> <operator pos:start="1685:38" pos:end="1685:38">&amp;</operator> <operator pos:start="1685:40" pos:end="1685:40">(</operator><literal type="number" pos:start="1685:41" pos:end="1685:41">1</literal> <operator pos:start="1685:43" pos:end="1685:44">&lt;&lt;</operator> <literal type="number" pos:start="1685:46" pos:end="1685:47">23</literal><operator pos:start="1685:48" pos:end="1685:48">)</operator></expr>)</condition><block type="pseudo" pos:start="1687:33" pos:end="1687:64"><block_content pos:start="1687:33" pos:end="1687:64">

                                <expr_stmt pos:start="1687:33" pos:end="1687:64"><expr pos:start="1687:33" pos:end="1687:63"><call pos:start="1687:33" pos:end="1687:63"><name pos:start="1687:33" pos:end="1687:48">tcg_gen_subi_i32</name><argument_list pos:start="1687:49" pos:end="1687:63">(<argument pos:start="1687:50" pos:end="1687:52"><expr pos:start="1687:50" pos:end="1687:52"><name pos:start="1687:50" pos:end="1687:52">tmp</name></expr></argument>, <argument pos:start="1687:55" pos:end="1687:57"><expr pos:start="1687:55" pos:end="1687:57"><name pos:start="1687:55" pos:end="1687:57">tmp</name></expr></argument>, <argument pos:start="1687:60" pos:end="1687:62"><expr pos:start="1687:60" pos:end="1687:62"><name pos:start="1687:60" pos:end="1687:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1689:29" pos:end="1691:64">else<block type="pseudo" pos:start="1691:33" pos:end="1691:64"><block_content pos:start="1691:33" pos:end="1691:64">

                                <expr_stmt pos:start="1691:33" pos:end="1691:64"><expr pos:start="1691:33" pos:end="1691:63"><call pos:start="1691:33" pos:end="1691:63"><name pos:start="1691:33" pos:end="1691:48">tcg_gen_addi_i32</name><argument_list pos:start="1691:49" pos:end="1691:63">(<argument pos:start="1691:50" pos:end="1691:52"><expr pos:start="1691:50" pos:end="1691:52"><name pos:start="1691:50" pos:end="1691:52">tmp</name></expr></argument>, <argument pos:start="1691:55" pos:end="1691:57"><expr pos:start="1691:55" pos:end="1691:57"><name pos:start="1691:55" pos:end="1691:57">tmp</name></expr></argument>, <argument pos:start="1691:60" pos:end="1691:62"><expr pos:start="1691:60" pos:end="1691:62"><name pos:start="1691:60" pos:end="1691:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1697:21" pos:end="1697:42"><expr pos:start="1697:21" pos:end="1697:41"><call pos:start="1697:21" pos:end="1697:41"><name pos:start="1697:21" pos:end="1697:29">store_reg</name><argument_list pos:start="1697:30" pos:end="1697:41">(<argument pos:start="1697:31" pos:end="1697:31"><expr pos:start="1697:31" pos:end="1697:31"><name pos:start="1697:31" pos:end="1697:31">s</name></expr></argument>, <argument pos:start="1697:34" pos:end="1697:35"><expr pos:start="1697:34" pos:end="1697:35"><name pos:start="1697:34" pos:end="1697:35">rd</name></expr></argument>, <argument pos:start="1697:38" pos:end="1697:40"><expr pos:start="1697:38" pos:end="1697:40"><name pos:start="1697:38" pos:end="1697:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1701:15" pos:end="1795:13">else <block pos:start="1701:20" pos:end="1795:13">{<block_content pos:start="1703:17" pos:end="1793:17">

                <decl_stmt pos:start="1703:17" pos:end="1703:36"><decl pos:start="1703:17" pos:end="1703:35"><type pos:start="1703:17" pos:end="1703:19"><name pos:start="1703:17" pos:end="1703:19">int</name></type> <name pos:start="1703:21" pos:end="1703:31">shifter_out</name> <init pos:start="1703:33" pos:end="1703:35">= <expr pos:start="1703:35" pos:end="1703:35"><literal type="number" pos:start="1703:35" pos:end="1703:35">0</literal></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="1705:17" pos:end="1705:49">/* modified 12-bit immediate.  */</comment>

                <expr_stmt pos:start="1707:17" pos:end="1707:78"><expr pos:start="1707:17" pos:end="1707:77"><name pos:start="1707:17" pos:end="1707:21">shift</name> <operator pos:start="1707:23" pos:end="1707:23">=</operator> <operator pos:start="1707:25" pos:end="1707:25">(</operator><operator pos:start="1707:26" pos:end="1707:26">(</operator><name pos:start="1707:27" pos:end="1707:30">insn</name> <operator pos:start="1707:32" pos:end="1707:32">&amp;</operator> <literal type="number" pos:start="1707:34" pos:end="1707:43">0x04000000</literal><operator pos:start="1707:44" pos:end="1707:44">)</operator> <operator pos:start="1707:46" pos:end="1707:47">&gt;&gt;</operator> <literal type="number" pos:start="1707:49" pos:end="1707:50">23</literal><operator pos:start="1707:51" pos:end="1707:51">)</operator> <operator pos:start="1707:53" pos:end="1707:53">|</operator> <operator pos:start="1707:55" pos:end="1707:55">(</operator><operator pos:start="1707:56" pos:end="1707:56">(</operator><name pos:start="1707:57" pos:end="1707:60">insn</name> <operator pos:start="1707:62" pos:end="1707:62">&amp;</operator> <literal type="number" pos:start="1707:64" pos:end="1707:69">0x7000</literal><operator pos:start="1707:70" pos:end="1707:70">)</operator> <operator pos:start="1707:72" pos:end="1707:73">&gt;&gt;</operator> <literal type="number" pos:start="1707:75" pos:end="1707:76">12</literal><operator pos:start="1707:77" pos:end="1707:77">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1709:17" pos:end="1709:36"><expr pos:start="1709:17" pos:end="1709:35"><name pos:start="1709:17" pos:end="1709:19">imm</name> <operator pos:start="1709:21" pos:end="1709:21">=</operator> <operator pos:start="1709:23" pos:end="1709:23">(</operator><name pos:start="1709:24" pos:end="1709:27">insn</name> <operator pos:start="1709:29" pos:end="1709:29">&amp;</operator> <literal type="number" pos:start="1709:31" pos:end="1709:34">0xff</literal><operator pos:start="1709:35" pos:end="1709:35">)</operator></expr>;</expr_stmt>

                <switch pos:start="1711:17" pos:end="1753:17">switch <condition pos:start="1711:24" pos:end="1711:30">(<expr pos:start="1711:25" pos:end="1711:29"><name pos:start="1711:25" pos:end="1711:29">shift</name></expr>)</condition> <block pos:start="1711:32" pos:end="1753:17">{<block_content pos:start="1713:17" pos:end="1751:26">

                <case pos:start="1713:17" pos:end="1713:23">case <expr pos:start="1713:22" pos:end="1713:22"><literal type="number" pos:start="1713:22" pos:end="1713:22">0</literal></expr>:</case> <comment type="block" pos:start="1713:25" pos:end="1713:32">/* XY */</comment>

                    <comment type="block" pos:start="1715:21" pos:end="1715:41">/* Nothing to do.  */</comment>

                    <break pos:start="1717:21" pos:end="1717:26">break;</break>

                <case pos:start="1719:17" pos:end="1719:23">case <expr pos:start="1719:22" pos:end="1719:22"><literal type="number" pos:start="1719:22" pos:end="1719:22">1</literal></expr>:</case> <comment type="block" pos:start="1719:25" pos:end="1719:38">/* 00XY00XY */</comment>

                    <expr_stmt pos:start="1721:21" pos:end="1721:37"><expr pos:start="1721:21" pos:end="1721:36"><name pos:start="1721:21" pos:end="1721:23">imm</name> <operator pos:start="1721:25" pos:end="1721:26">|=</operator> <name pos:start="1721:28" pos:end="1721:30">imm</name> <operator pos:start="1721:32" pos:end="1721:33">&lt;&lt;</operator> <literal type="number" pos:start="1721:35" pos:end="1721:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="1723:21" pos:end="1723:26">break;</break>

                <case pos:start="1725:17" pos:end="1725:23">case <expr pos:start="1725:22" pos:end="1725:22"><literal type="number" pos:start="1725:22" pos:end="1725:22">2</literal></expr>:</case> <comment type="block" pos:start="1725:25" pos:end="1725:38">/* XY00XY00 */</comment>

                    <expr_stmt pos:start="1727:21" pos:end="1727:37"><expr pos:start="1727:21" pos:end="1727:36"><name pos:start="1727:21" pos:end="1727:23">imm</name> <operator pos:start="1727:25" pos:end="1727:26">|=</operator> <name pos:start="1727:28" pos:end="1727:30">imm</name> <operator pos:start="1727:32" pos:end="1727:33">&lt;&lt;</operator> <literal type="number" pos:start="1727:35" pos:end="1727:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1729:21" pos:end="1729:30"><expr pos:start="1729:21" pos:end="1729:29"><name pos:start="1729:21" pos:end="1729:23">imm</name> <operator pos:start="1729:25" pos:end="1729:27">&lt;&lt;=</operator> <literal type="number" pos:start="1729:29" pos:end="1729:29">8</literal></expr>;</expr_stmt>

                    <break pos:start="1731:21" pos:end="1731:26">break;</break>

                <case pos:start="1733:17" pos:end="1733:23">case <expr pos:start="1733:22" pos:end="1733:22"><literal type="number" pos:start="1733:22" pos:end="1733:22">3</literal></expr>:</case> <comment type="block" pos:start="1733:25" pos:end="1733:38">/* XYXYXYXY */</comment>

                    <expr_stmt pos:start="1735:21" pos:end="1735:37"><expr pos:start="1735:21" pos:end="1735:36"><name pos:start="1735:21" pos:end="1735:23">imm</name> <operator pos:start="1735:25" pos:end="1735:26">|=</operator> <name pos:start="1735:28" pos:end="1735:30">imm</name> <operator pos:start="1735:32" pos:end="1735:33">&lt;&lt;</operator> <literal type="number" pos:start="1735:35" pos:end="1735:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1737:21" pos:end="1737:36"><expr pos:start="1737:21" pos:end="1737:35"><name pos:start="1737:21" pos:end="1737:23">imm</name> <operator pos:start="1737:25" pos:end="1737:26">|=</operator> <name pos:start="1737:28" pos:end="1737:30">imm</name> <operator pos:start="1737:32" pos:end="1737:33">&lt;&lt;</operator> <literal type="number" pos:start="1737:35" pos:end="1737:35">8</literal></expr>;</expr_stmt>

                    <break pos:start="1739:21" pos:end="1739:26">break;</break>

                <default pos:start="1741:17" pos:end="1741:24">default:</default> <comment type="block" pos:start="1741:26" pos:end="1741:49">/* Rotated constant.  */</comment>

                    <expr_stmt pos:start="1743:21" pos:end="1743:54"><expr pos:start="1743:21" pos:end="1743:53"><name pos:start="1743:21" pos:end="1743:25">shift</name> <operator pos:start="1743:27" pos:end="1743:27">=</operator> <operator pos:start="1743:29" pos:end="1743:29">(</operator><name pos:start="1743:30" pos:end="1743:34">shift</name> <operator pos:start="1743:36" pos:end="1743:37">&lt;&lt;</operator> <literal type="number" pos:start="1743:39" pos:end="1743:39">1</literal><operator pos:start="1743:40" pos:end="1743:40">)</operator> <operator pos:start="1743:42" pos:end="1743:42">|</operator> <operator pos:start="1743:44" pos:end="1743:44">(</operator><name pos:start="1743:45" pos:end="1743:47">imm</name> <operator pos:start="1743:49" pos:end="1743:50">&gt;&gt;</operator> <literal type="number" pos:start="1743:52" pos:end="1743:52">7</literal><operator pos:start="1743:53" pos:end="1743:53">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1745:21" pos:end="1745:32"><expr pos:start="1745:21" pos:end="1745:31"><name pos:start="1745:21" pos:end="1745:23">imm</name> <operator pos:start="1745:25" pos:end="1745:26">|=</operator> <literal type="number" pos:start="1745:28" pos:end="1745:31">0x80</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1747:21" pos:end="1747:46"><expr pos:start="1747:21" pos:end="1747:45"><name pos:start="1747:21" pos:end="1747:23">imm</name> <operator pos:start="1747:25" pos:end="1747:25">=</operator> <name pos:start="1747:27" pos:end="1747:29">imm</name> <operator pos:start="1747:31" pos:end="1747:32">&lt;&lt;</operator> <operator pos:start="1747:34" pos:end="1747:34">(</operator><literal type="number" pos:start="1747:35" pos:end="1747:38">32</literal> <operator pos:start="1747:38" pos:end="1747:38">-</operator> <name pos:start="1747:40" pos:end="1747:44">shift</name><operator pos:start="1747:45" pos:end="1747:45">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1749:21" pos:end="1749:36"><expr pos:start="1749:21" pos:end="1749:35"><name pos:start="1749:21" pos:end="1749:31">shifter_out</name> <operator pos:start="1749:33" pos:end="1749:33">=</operator> <literal type="number" pos:start="1749:35" pos:end="1749:35">1</literal></expr>;</expr_stmt>

                    <break pos:start="1751:21" pos:end="1751:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="1755:17" pos:end="1755:42"><expr pos:start="1755:17" pos:end="1755:41"><name pos:start="1755:17" pos:end="1755:20">tmp2</name> <operator pos:start="1755:22" pos:end="1755:22">=</operator> <call pos:start="1755:24" pos:end="1755:41"><name pos:start="1755:24" pos:end="1755:39">tcg_temp_new_i32</name><argument_list pos:start="1755:40" pos:end="1755:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1757:17" pos:end="1757:44"><expr pos:start="1757:17" pos:end="1757:43"><call pos:start="1757:17" pos:end="1757:43"><name pos:start="1757:17" pos:end="1757:32">tcg_gen_movi_i32</name><argument_list pos:start="1757:33" pos:end="1757:43">(<argument pos:start="1757:34" pos:end="1757:37"><expr pos:start="1757:34" pos:end="1757:37"><name pos:start="1757:34" pos:end="1757:37">tmp2</name></expr></argument>, <argument pos:start="1757:40" pos:end="1757:42"><expr pos:start="1757:40" pos:end="1757:42"><name pos:start="1757:40" pos:end="1757:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1759:17" pos:end="1759:40"><expr pos:start="1759:17" pos:end="1759:39"><name pos:start="1759:17" pos:end="1759:18">rn</name> <operator pos:start="1759:20" pos:end="1759:20">=</operator> <operator pos:start="1759:22" pos:end="1759:22">(</operator><name pos:start="1759:23" pos:end="1759:26">insn</name> <operator pos:start="1759:28" pos:end="1759:29">&gt;&gt;</operator> <literal type="number" pos:start="1759:31" pos:end="1759:32">16</literal><operator pos:start="1759:33" pos:end="1759:33">)</operator> <operator pos:start="1759:35" pos:end="1759:35">&amp;</operator> <literal type="number" pos:start="1759:37" pos:end="1759:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1761:17" pos:end="1771:17"><if pos:start="1761:17" pos:end="1767:17">if <condition pos:start="1761:20" pos:end="1761:29">(<expr pos:start="1761:21" pos:end="1761:28"><name pos:start="1761:21" pos:end="1761:22">rn</name> <operator pos:start="1761:24" pos:end="1761:25">==</operator> <literal type="number" pos:start="1761:27" pos:end="1761:28">15</literal></expr>)</condition> <block pos:start="1761:31" pos:end="1767:17">{<block_content pos:start="1763:21" pos:end="1765:45">

                    <expr_stmt pos:start="1763:21" pos:end="1763:45"><expr pos:start="1763:21" pos:end="1763:44"><name pos:start="1763:21" pos:end="1763:23">tmp</name> <operator pos:start="1763:25" pos:end="1763:25">=</operator> <call pos:start="1763:27" pos:end="1763:44"><name pos:start="1763:27" pos:end="1763:42">tcg_temp_new_i32</name><argument_list pos:start="1763:43" pos:end="1763:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1765:21" pos:end="1765:45"><expr pos:start="1765:21" pos:end="1765:44"><call pos:start="1765:21" pos:end="1765:44"><name pos:start="1765:21" pos:end="1765:36">tcg_gen_movi_i32</name><argument_list pos:start="1765:37" pos:end="1765:44">(<argument pos:start="1765:38" pos:end="1765:40"><expr pos:start="1765:38" pos:end="1765:40"><name pos:start="1765:38" pos:end="1765:40">tmp</name></expr></argument>, <argument pos:start="1765:43" pos:end="1765:43"><expr pos:start="1765:43" pos:end="1765:43"><literal type="number" pos:start="1765:43" pos:end="1765:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1767:19" pos:end="1771:17">else <block pos:start="1767:24" pos:end="1771:17">{<block_content pos:start="1769:21" pos:end="1769:42">

                    <expr_stmt pos:start="1769:21" pos:end="1769:42"><expr pos:start="1769:21" pos:end="1769:41"><name pos:start="1769:21" pos:end="1769:23">tmp</name> <operator pos:start="1769:25" pos:end="1769:25">=</operator> <call pos:start="1769:27" pos:end="1769:41"><name pos:start="1769:27" pos:end="1769:34">load_reg</name><argument_list pos:start="1769:35" pos:end="1769:41">(<argument pos:start="1769:36" pos:end="1769:36"><expr pos:start="1769:36" pos:end="1769:36"><name pos:start="1769:36" pos:end="1769:36">s</name></expr></argument>, <argument pos:start="1769:39" pos:end="1769:40"><expr pos:start="1769:39" pos:end="1769:40"><name pos:start="1769:39" pos:end="1769:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1773:17" pos:end="1773:40"><expr pos:start="1773:17" pos:end="1773:39"><name pos:start="1773:17" pos:end="1773:18">op</name> <operator pos:start="1773:20" pos:end="1773:20">=</operator> <operator pos:start="1773:22" pos:end="1773:22">(</operator><name pos:start="1773:23" pos:end="1773:26">insn</name> <operator pos:start="1773:28" pos:end="1773:29">&gt;&gt;</operator> <literal type="number" pos:start="1773:31" pos:end="1773:32">21</literal><operator pos:start="1773:33" pos:end="1773:33">)</operator> <operator pos:start="1773:35" pos:end="1773:35">&amp;</operator> <literal type="number" pos:start="1773:37" pos:end="1773:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1775:17" pos:end="1779:36"><if pos:start="1775:17" pos:end="1779:36">if <condition pos:start="1775:20" pos:end="1777:63">(<expr pos:start="1775:21" pos:end="1777:62"><call pos:start="1775:21" pos:end="1777:62"><name pos:start="1775:21" pos:end="1775:38">gen_thumb2_data_op</name><argument_list pos:start="1775:39" pos:end="1777:62">(<argument pos:start="1775:40" pos:end="1775:40"><expr pos:start="1775:40" pos:end="1775:40"><name pos:start="1775:40" pos:end="1775:40">s</name></expr></argument>, <argument pos:start="1775:43" pos:end="1775:44"><expr pos:start="1775:43" pos:end="1775:44"><name pos:start="1775:43" pos:end="1775:44">op</name></expr></argument>, <argument pos:start="1775:47" pos:end="1775:69"><expr pos:start="1775:47" pos:end="1775:69"><operator pos:start="1775:47" pos:end="1775:47">(</operator><name pos:start="1775:48" pos:end="1775:51">insn</name> <operator pos:start="1775:53" pos:end="1775:53">&amp;</operator> <operator pos:start="1775:55" pos:end="1775:55">(</operator><literal type="number" pos:start="1775:56" pos:end="1775:56">1</literal> <operator pos:start="1775:58" pos:end="1775:59">&lt;&lt;</operator> <literal type="number" pos:start="1775:61" pos:end="1775:62">20</literal><operator pos:start="1775:63" pos:end="1775:63">)</operator><operator pos:start="1775:64" pos:end="1775:64">)</operator> <operator pos:start="1775:66" pos:end="1775:67">!=</operator> <literal type="number" pos:start="1775:69" pos:end="1775:69">0</literal></expr></argument>,

                                       <argument pos:start="1777:40" pos:end="1777:50"><expr pos:start="1777:40" pos:end="1777:50"><name pos:start="1777:40" pos:end="1777:50">shifter_out</name></expr></argument>, <argument pos:start="1777:53" pos:end="1777:55"><expr pos:start="1777:53" pos:end="1777:55"><name pos:start="1777:53" pos:end="1777:55">tmp</name></expr></argument>, <argument pos:start="1777:58" pos:end="1777:61"><expr pos:start="1777:58" pos:end="1777:61"><name pos:start="1777:58" pos:end="1777:61">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1779:21" pos:end="1779:36"><block_content pos:start="1779:21" pos:end="1779:36">

                    <goto pos:start="1779:21" pos:end="1779:36">goto <name pos:start="1779:26" pos:end="1779:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1781:17" pos:end="1781:40"><expr pos:start="1781:17" pos:end="1781:39"><call pos:start="1781:17" pos:end="1781:39"><name pos:start="1781:17" pos:end="1781:33">tcg_temp_free_i32</name><argument_list pos:start="1781:34" pos:end="1781:39">(<argument pos:start="1781:35" pos:end="1781:38"><expr pos:start="1781:35" pos:end="1781:38"><name pos:start="1781:35" pos:end="1781:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1783:17" pos:end="1783:39"><expr pos:start="1783:17" pos:end="1783:38"><name pos:start="1783:17" pos:end="1783:18">rd</name> <operator pos:start="1783:20" pos:end="1783:20">=</operator> <operator pos:start="1783:22" pos:end="1783:22">(</operator><name pos:start="1783:23" pos:end="1783:26">insn</name> <operator pos:start="1783:28" pos:end="1783:29">&gt;&gt;</operator> <literal type="number" pos:start="1783:31" pos:end="1783:31">8</literal><operator pos:start="1783:32" pos:end="1783:32">)</operator> <operator pos:start="1783:34" pos:end="1783:34">&amp;</operator> <literal type="number" pos:start="1783:36" pos:end="1783:38">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1785:17" pos:end="1793:17"><if pos:start="1785:17" pos:end="1789:17">if <condition pos:start="1785:20" pos:end="1785:29">(<expr pos:start="1785:21" pos:end="1785:28"><name pos:start="1785:21" pos:end="1785:22">rd</name> <operator pos:start="1785:24" pos:end="1785:25">!=</operator> <literal type="number" pos:start="1785:27" pos:end="1785:28">15</literal></expr>)</condition> <block pos:start="1785:31" pos:end="1789:17">{<block_content pos:start="1787:21" pos:end="1787:42">

                    <expr_stmt pos:start="1787:21" pos:end="1787:42"><expr pos:start="1787:21" pos:end="1787:41"><call pos:start="1787:21" pos:end="1787:41"><name pos:start="1787:21" pos:end="1787:29">store_reg</name><argument_list pos:start="1787:30" pos:end="1787:41">(<argument pos:start="1787:31" pos:end="1787:31"><expr pos:start="1787:31" pos:end="1787:31"><name pos:start="1787:31" pos:end="1787:31">s</name></expr></argument>, <argument pos:start="1787:34" pos:end="1787:35"><expr pos:start="1787:34" pos:end="1787:35"><name pos:start="1787:34" pos:end="1787:35">rd</name></expr></argument>, <argument pos:start="1787:38" pos:end="1787:40"><expr pos:start="1787:38" pos:end="1787:40"><name pos:start="1787:38" pos:end="1787:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1789:19" pos:end="1793:17">else <block pos:start="1789:24" pos:end="1793:17">{<block_content pos:start="1791:21" pos:end="1791:43">

                    <expr_stmt pos:start="1791:21" pos:end="1791:43"><expr pos:start="1791:21" pos:end="1791:42"><call pos:start="1791:21" pos:end="1791:42"><name pos:start="1791:21" pos:end="1791:37">tcg_temp_free_i32</name><argument_list pos:start="1791:38" pos:end="1791:42">(<argument pos:start="1791:39" pos:end="1791:41"><expr pos:start="1791:39" pos:end="1791:41"><name pos:start="1791:39" pos:end="1791:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1799:9" pos:end="1799:14">break;</break>

    <case pos:start="1801:5" pos:end="1801:12">case <expr pos:start="1801:10" pos:end="1801:11"><literal type="number" pos:start="1801:10" pos:end="1801:11">12</literal></expr>:</case> <comment type="block" pos:start="1801:14" pos:end="1801:48">/* Load/store single data item.  */</comment>

        <block pos:start="1803:9" pos:end="2083:9">{<block_content pos:start="1805:9" pos:end="2081:9">

        <decl_stmt pos:start="1805:9" pos:end="1805:24"><decl pos:start="1805:9" pos:end="1805:23"><type pos:start="1805:9" pos:end="1805:11"><name pos:start="1805:9" pos:end="1805:11">int</name></type> <name pos:start="1805:13" pos:end="1805:19">postinc</name> <init pos:start="1805:21" pos:end="1805:23">= <expr pos:start="1805:23" pos:end="1805:23"><literal type="number" pos:start="1805:23" pos:end="1805:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="1807:9" pos:end="1807:26"><decl pos:start="1807:9" pos:end="1807:25"><type pos:start="1807:9" pos:end="1807:11"><name pos:start="1807:9" pos:end="1807:11">int</name></type> <name pos:start="1807:13" pos:end="1807:21">writeback</name> <init pos:start="1807:23" pos:end="1807:25">= <expr pos:start="1807:25" pos:end="1807:25"><literal type="number" pos:start="1807:25" pos:end="1807:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="1809:9" pos:end="1809:17"><decl pos:start="1809:9" pos:end="1809:16"><type pos:start="1809:9" pos:end="1809:11"><name pos:start="1809:9" pos:end="1809:11">int</name></type> <name pos:start="1809:13" pos:end="1809:16">user</name></decl>;</decl_stmt>

        <if_stmt pos:start="1811:9" pos:end="1819:9"><if pos:start="1811:9" pos:end="1819:9">if <condition pos:start="1811:12" pos:end="1811:46">(<expr pos:start="1811:13" pos:end="1811:45"><operator pos:start="1811:13" pos:end="1811:13">(</operator><name pos:start="1811:14" pos:end="1811:17">insn</name> <operator pos:start="1811:19" pos:end="1811:19">&amp;</operator> <literal type="number" pos:start="1811:21" pos:end="1811:30">0x01100000</literal><operator pos:start="1811:31" pos:end="1811:31">)</operator> <operator pos:start="1811:33" pos:end="1811:34">==</operator> <literal type="number" pos:start="1811:36" pos:end="1811:45">0x01000000</literal></expr>)</condition> <block pos:start="1811:48" pos:end="1819:9">{<block_content pos:start="1813:13" pos:end="1817:18">

            <if_stmt pos:start="1813:13" pos:end="1815:32"><if pos:start="1813:13" pos:end="1815:32">if <condition pos:start="1813:16" pos:end="1813:49">(<expr pos:start="1813:17" pos:end="1813:48"><call pos:start="1813:17" pos:end="1813:48"><name pos:start="1813:17" pos:end="1813:34">disas_neon_ls_insn</name><argument_list pos:start="1813:35" pos:end="1813:48">(<argument pos:start="1813:36" pos:end="1813:38"><expr pos:start="1813:36" pos:end="1813:38"><name pos:start="1813:36" pos:end="1813:38">env</name></expr></argument>, <argument pos:start="1813:41" pos:end="1813:41"><expr pos:start="1813:41" pos:end="1813:41"><name pos:start="1813:41" pos:end="1813:41">s</name></expr></argument>, <argument pos:start="1813:44" pos:end="1813:47"><expr pos:start="1813:44" pos:end="1813:47"><name pos:start="1813:44" pos:end="1813:47">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1815:17" pos:end="1815:32"><block_content pos:start="1815:17" pos:end="1815:32">

                <goto pos:start="1815:17" pos:end="1815:32">goto <name pos:start="1815:22" pos:end="1815:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="1817:13" pos:end="1817:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1821:9" pos:end="1821:53"><expr pos:start="1821:9" pos:end="1821:52"><name pos:start="1821:9" pos:end="1821:10">op</name> <operator pos:start="1821:12" pos:end="1821:12">=</operator> <operator pos:start="1821:14" pos:end="1821:14">(</operator><operator pos:start="1821:15" pos:end="1821:15">(</operator><name pos:start="1821:16" pos:end="1821:19">insn</name> <operator pos:start="1821:21" pos:end="1821:22">&gt;&gt;</operator> <literal type="number" pos:start="1821:24" pos:end="1821:25">21</literal><operator pos:start="1821:26" pos:end="1821:26">)</operator> <operator pos:start="1821:28" pos:end="1821:28">&amp;</operator> <literal type="number" pos:start="1821:30" pos:end="1821:30">3</literal><operator pos:start="1821:31" pos:end="1821:31">)</operator> <operator pos:start="1821:33" pos:end="1821:33">|</operator> <operator pos:start="1821:35" pos:end="1821:35">(</operator><operator pos:start="1821:36" pos:end="1821:36">(</operator><name pos:start="1821:37" pos:end="1821:40">insn</name> <operator pos:start="1821:42" pos:end="1821:43">&gt;&gt;</operator> <literal type="number" pos:start="1821:45" pos:end="1821:46">22</literal><operator pos:start="1821:47" pos:end="1821:47">)</operator> <operator pos:start="1821:49" pos:end="1821:49">&amp;</operator> <literal type="number" pos:start="1821:51" pos:end="1821:51">4</literal><operator pos:start="1821:52" pos:end="1821:52">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="1823:9" pos:end="1891:9"><if pos:start="1823:9" pos:end="1891:9">if <condition pos:start="1823:12" pos:end="1823:21">(<expr pos:start="1823:13" pos:end="1823:20"><name pos:start="1823:13" pos:end="1823:14">rs</name> <operator pos:start="1823:16" pos:end="1823:17">==</operator> <literal type="number" pos:start="1823:19" pos:end="1823:20">15</literal></expr>)</condition> <block pos:start="1823:23" pos:end="1891:9">{<block_content pos:start="1825:13" pos:end="1889:13">

            <if_stmt pos:start="1825:13" pos:end="1829:13"><if pos:start="1825:13" pos:end="1829:13">if <condition pos:start="1825:16" pos:end="1825:36">(<expr pos:start="1825:17" pos:end="1825:35"><operator pos:start="1825:17" pos:end="1825:17">!</operator><operator pos:start="1825:18" pos:end="1825:18">(</operator><name pos:start="1825:19" pos:end="1825:22">insn</name> <operator pos:start="1825:24" pos:end="1825:24">&amp;</operator> <operator pos:start="1825:26" pos:end="1825:26">(</operator><literal type="number" pos:start="1825:27" pos:end="1825:27">1</literal> <operator pos:start="1825:29" pos:end="1825:30">&lt;&lt;</operator> <literal type="number" pos:start="1825:32" pos:end="1825:33">20</literal><operator pos:start="1825:34" pos:end="1825:34">)</operator><operator pos:start="1825:35" pos:end="1825:35">)</operator></expr>)</condition> <block pos:start="1825:38" pos:end="1829:13">{<block_content pos:start="1827:17" pos:end="1827:32">

                <goto pos:start="1827:17" pos:end="1827:32">goto <name pos:start="1827:22" pos:end="1827:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1831:13" pos:end="1889:13"><if pos:start="1831:13" pos:end="1889:13">if <condition pos:start="1831:16" pos:end="1831:24">(<expr pos:start="1831:17" pos:end="1831:23"><name pos:start="1831:17" pos:end="1831:18">op</name> <operator pos:start="1831:20" pos:end="1831:21">!=</operator> <literal type="number" pos:start="1831:23" pos:end="1831:23">2</literal></expr>)</condition> <block pos:start="1831:26" pos:end="1889:13">{<block_content pos:start="1855:17" pos:end="1887:25">

                <comment type="block" pos:start="1833:17" pos:end="1853:19">/* Byte or halfword load space with dest == r15 : memory hints.

                 * Catch them early so we don't emit pointless addressing code.

                 * This space is a mix of:

                 *  PLD/PLDW/PLI,  which we implement as NOPs (note that unlike

                 *     the ARM encodings, PLDW space doesn't UNDEF for non-v7MP

                 *     cores)

                 *  unallocated hints, which must be treated as NOPs

                 *  UNPREDICTABLE space, which we NOP or UNDEF depending on

                 *     which is easiest for the decoding logic

                 *  Some space which must UNDEF

                 */</comment>

                <decl_stmt pos:start="1855:17" pos:end="1855:43"><decl pos:start="1855:17" pos:end="1855:42"><type pos:start="1855:17" pos:end="1855:19"><name pos:start="1855:17" pos:end="1855:19">int</name></type> <name pos:start="1855:21" pos:end="1855:23">op1</name> <init pos:start="1855:25" pos:end="1855:42">= <expr pos:start="1855:27" pos:end="1855:42"><operator pos:start="1855:27" pos:end="1855:27">(</operator><name pos:start="1855:28" pos:end="1855:31">insn</name> <operator pos:start="1855:33" pos:end="1855:34">&gt;&gt;</operator> <literal type="number" pos:start="1855:36" pos:end="1855:37">23</literal><operator pos:start="1855:38" pos:end="1855:38">)</operator> <operator pos:start="1855:40" pos:end="1855:40">&amp;</operator> <literal type="number" pos:start="1855:42" pos:end="1855:42">3</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1857:17" pos:end="1857:45"><decl pos:start="1857:17" pos:end="1857:44"><type pos:start="1857:17" pos:end="1857:19"><name pos:start="1857:17" pos:end="1857:19">int</name></type> <name pos:start="1857:21" pos:end="1857:23">op2</name> <init pos:start="1857:25" pos:end="1857:44">= <expr pos:start="1857:27" pos:end="1857:44"><operator pos:start="1857:27" pos:end="1857:27">(</operator><name pos:start="1857:28" pos:end="1857:31">insn</name> <operator pos:start="1857:33" pos:end="1857:34">&gt;&gt;</operator> <literal type="number" pos:start="1857:36" pos:end="1857:36">6</literal><operator pos:start="1857:37" pos:end="1857:37">)</operator> <operator pos:start="1857:39" pos:end="1857:39">&amp;</operator> <literal type="number" pos:start="1857:41" pos:end="1857:44">0x3f</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1859:17" pos:end="1863:17"><if pos:start="1859:17" pos:end="1863:17">if <condition pos:start="1859:20" pos:end="1859:27">(<expr pos:start="1859:21" pos:end="1859:26"><name pos:start="1859:21" pos:end="1859:22">op</name> <operator pos:start="1859:24" pos:end="1859:24">&amp;</operator> <literal type="number" pos:start="1859:26" pos:end="1859:26">2</literal></expr>)</condition> <block pos:start="1859:29" pos:end="1863:17">{<block_content pos:start="1861:21" pos:end="1861:36">

                    <goto pos:start="1861:21" pos:end="1861:36">goto <name pos:start="1861:26" pos:end="1861:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1865:17" pos:end="1871:17"><if pos:start="1865:17" pos:end="1871:17">if <condition pos:start="1865:20" pos:end="1865:29">(<expr pos:start="1865:21" pos:end="1865:28"><name pos:start="1865:21" pos:end="1865:22">rn</name> <operator pos:start="1865:24" pos:end="1865:25">==</operator> <literal type="number" pos:start="1865:27" pos:end="1865:28">15</literal></expr>)</condition> <block pos:start="1865:31" pos:end="1871:17">{<block_content pos:start="1869:21" pos:end="1869:29">

                    <comment type="block" pos:start="1867:21" pos:end="1867:59">/* UNPREDICTABLE or unallocated hint */</comment>

                    <return pos:start="1869:21" pos:end="1869:29">return <expr pos:start="1869:28" pos:end="1869:28"><literal type="number" pos:start="1869:28" pos:end="1869:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1873:17" pos:end="1877:17"><if pos:start="1873:17" pos:end="1877:17">if <condition pos:start="1873:20" pos:end="1873:28">(<expr pos:start="1873:21" pos:end="1873:27"><name pos:start="1873:21" pos:end="1873:23">op1</name> <operator pos:start="1873:25" pos:end="1873:25">&amp;</operator> <literal type="number" pos:start="1873:27" pos:end="1873:27">1</literal></expr>)</condition> <block pos:start="1873:30" pos:end="1877:17">{<block_content pos:start="1875:21" pos:end="1875:29">

                    <return pos:start="1875:21" pos:end="1875:29">return <expr pos:start="1875:28" pos:end="1875:28"><literal type="number" pos:start="1875:28" pos:end="1875:28">0</literal></expr>;</return> <comment type="block" pos:start="1875:31" pos:end="1875:60">/* PLD* or unallocated hint */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1879:17" pos:end="1883:17"><if pos:start="1879:17" pos:end="1883:17">if <condition pos:start="1879:20" pos:end="1879:57">(<expr pos:start="1879:21" pos:end="1879:56"><operator pos:start="1879:21" pos:end="1879:21">(</operator><name pos:start="1879:22" pos:end="1879:24">op2</name> <operator pos:start="1879:26" pos:end="1879:27">==</operator> <literal type="number" pos:start="1879:29" pos:end="1879:29">0</literal><operator pos:start="1879:30" pos:end="1879:30">)</operator> <operator pos:start="1879:32" pos:end="1879:33">||</operator> <operator pos:start="1879:35" pos:end="1879:35">(</operator><operator pos:start="1879:36" pos:end="1879:36">(</operator><name pos:start="1879:37" pos:end="1879:39">op2</name> <operator pos:start="1879:41" pos:end="1879:41">&amp;</operator> <literal type="number" pos:start="1879:43" pos:end="1879:46">0x3c</literal><operator pos:start="1879:47" pos:end="1879:47">)</operator> <operator pos:start="1879:49" pos:end="1879:50">==</operator> <literal type="number" pos:start="1879:52" pos:end="1879:55">0x30</literal><operator pos:start="1879:56" pos:end="1879:56">)</operator></expr>)</condition> <block pos:start="1879:59" pos:end="1883:17">{<block_content pos:start="1881:21" pos:end="1881:29">

                    <return pos:start="1881:21" pos:end="1881:29">return <expr pos:start="1881:28" pos:end="1881:28"><literal type="number" pos:start="1881:28" pos:end="1881:28">0</literal></expr>;</return> <comment type="block" pos:start="1881:31" pos:end="1881:60">/* PLD* or unallocated hint */</comment>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1885:17" pos:end="1885:54">/* UNDEF space, or an UNPREDICTABLE */</comment>

                <return pos:start="1887:17" pos:end="1887:25">return <expr pos:start="1887:24" pos:end="1887:24"><literal type="number" pos:start="1887:24" pos:end="1887:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1893:9" pos:end="1893:26"><expr pos:start="1893:9" pos:end="1893:25"><name pos:start="1893:9" pos:end="1893:12">user</name> <operator pos:start="1893:14" pos:end="1893:14">=</operator> <call pos:start="1893:16" pos:end="1893:25"><name pos:start="1893:16" pos:end="1893:22">IS_USER</name><argument_list pos:start="1893:23" pos:end="1893:25">(<argument pos:start="1893:24" pos:end="1893:24"><expr pos:start="1893:24" pos:end="1893:24"><name pos:start="1893:24" pos:end="1893:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1895:9" pos:end="2009:9"><if pos:start="1895:9" pos:end="1915:9">if <condition pos:start="1895:12" pos:end="1895:21">(<expr pos:start="1895:13" pos:end="1895:20"><name pos:start="1895:13" pos:end="1895:14">rn</name> <operator pos:start="1895:16" pos:end="1895:17">==</operator> <literal type="number" pos:start="1895:19" pos:end="1895:20">15</literal></expr>)</condition> <block pos:start="1895:23" pos:end="1915:9">{<block_content pos:start="1897:13" pos:end="1913:40">

            <expr_stmt pos:start="1897:13" pos:end="1897:38"><expr pos:start="1897:13" pos:end="1897:37"><name pos:start="1897:13" pos:end="1897:16">addr</name> <operator pos:start="1897:18" pos:end="1897:18">=</operator> <call pos:start="1897:20" pos:end="1897:37"><name pos:start="1897:20" pos:end="1897:35">tcg_temp_new_i32</name><argument_list pos:start="1897:36" pos:end="1897:37">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1899:13" pos:end="1899:31">/* PC relative.  */</comment>

            <comment type="block" pos:start="1901:13" pos:end="1901:59">/* s-&gt;pc has already been incremented by 4.  */</comment>

            <expr_stmt pos:start="1903:13" pos:end="1903:37"><expr pos:start="1903:13" pos:end="1903:36"><name pos:start="1903:13" pos:end="1903:15">imm</name> <operator pos:start="1903:17" pos:end="1903:17">=</operator> <name pos:start="1903:19" pos:end="1903:23"><name pos:start="1903:19" pos:end="1903:19">s</name><operator pos:start="1903:20" pos:end="1903:21">-&gt;</operator><name pos:start="1903:22" pos:end="1903:23">pc</name></name> <operator pos:start="1903:25" pos:end="1903:25">&amp;</operator> <literal type="number" pos:start="1903:27" pos:end="1903:36">0xfffffffc</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1905:13" pos:end="1911:36"><if pos:start="1905:13" pos:end="1907:36">if <condition pos:start="1905:16" pos:end="1905:33">(<expr pos:start="1905:17" pos:end="1905:32"><name pos:start="1905:17" pos:end="1905:20">insn</name> <operator pos:start="1905:22" pos:end="1905:22">&amp;</operator> <operator pos:start="1905:24" pos:end="1905:24">(</operator><literal type="number" pos:start="1905:25" pos:end="1905:25">1</literal> <operator pos:start="1905:27" pos:end="1905:28">&lt;&lt;</operator> <literal type="number" pos:start="1905:30" pos:end="1905:31">23</literal><operator pos:start="1905:32" pos:end="1905:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1907:17" pos:end="1907:36"><block_content pos:start="1907:17" pos:end="1907:36">

                <expr_stmt pos:start="1907:17" pos:end="1907:36"><expr pos:start="1907:17" pos:end="1907:35"><name pos:start="1907:17" pos:end="1907:19">imm</name> <operator pos:start="1907:21" pos:end="1907:22">+=</operator> <name pos:start="1907:24" pos:end="1907:27">insn</name> <operator pos:start="1907:29" pos:end="1907:29">&amp;</operator> <literal type="number" pos:start="1907:31" pos:end="1907:35">0xfff</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1909:13" pos:end="1911:36">else<block type="pseudo" pos:start="1911:17" pos:end="1911:36"><block_content pos:start="1911:17" pos:end="1911:36">

                <expr_stmt pos:start="1911:17" pos:end="1911:36"><expr pos:start="1911:17" pos:end="1911:35"><name pos:start="1911:17" pos:end="1911:19">imm</name> <operator pos:start="1911:21" pos:end="1911:22">-=</operator> <name pos:start="1911:24" pos:end="1911:27">insn</name> <operator pos:start="1911:29" pos:end="1911:29">&amp;</operator> <literal type="number" pos:start="1911:31" pos:end="1911:35">0xfff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1913:13" pos:end="1913:40"><expr pos:start="1913:13" pos:end="1913:39"><call pos:start="1913:13" pos:end="1913:39"><name pos:start="1913:13" pos:end="1913:28">tcg_gen_movi_i32</name><argument_list pos:start="1913:29" pos:end="1913:39">(<argument pos:start="1913:30" pos:end="1913:33"><expr pos:start="1913:30" pos:end="1913:33"><name pos:start="1913:30" pos:end="1913:33">addr</name></expr></argument>, <argument pos:start="1913:36" pos:end="1913:38"><expr pos:start="1913:36" pos:end="1913:38"><name pos:start="1913:36" pos:end="1913:38">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1915:11" pos:end="2009:9">else <block pos:start="1915:16" pos:end="2009:9">{<block_content pos:start="1917:13" pos:end="2007:13">

            <expr_stmt pos:start="1917:13" pos:end="1917:35"><expr pos:start="1917:13" pos:end="1917:34"><name pos:start="1917:13" pos:end="1917:16">addr</name> <operator pos:start="1917:18" pos:end="1917:18">=</operator> <call pos:start="1917:20" pos:end="1917:34"><name pos:start="1917:20" pos:end="1917:27">load_reg</name><argument_list pos:start="1917:28" pos:end="1917:34">(<argument pos:start="1917:29" pos:end="1917:29"><expr pos:start="1917:29" pos:end="1917:29"><name pos:start="1917:29" pos:end="1917:29">s</name></expr></argument>, <argument pos:start="1917:32" pos:end="1917:33"><expr pos:start="1917:32" pos:end="1917:33"><name pos:start="1917:32" pos:end="1917:33">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1919:13" pos:end="2007:13"><if pos:start="1919:13" pos:end="1927:13">if <condition pos:start="1919:16" pos:end="1919:33">(<expr pos:start="1919:17" pos:end="1919:32"><name pos:start="1919:17" pos:end="1919:20">insn</name> <operator pos:start="1919:22" pos:end="1919:22">&amp;</operator> <operator pos:start="1919:24" pos:end="1919:24">(</operator><literal type="number" pos:start="1919:25" pos:end="1919:25">1</literal> <operator pos:start="1919:27" pos:end="1919:28">&lt;&lt;</operator> <literal type="number" pos:start="1919:30" pos:end="1919:31">23</literal><operator pos:start="1919:32" pos:end="1919:32">)</operator></expr>)</condition> <block pos:start="1919:35" pos:end="1927:13">{<block_content pos:start="1923:17" pos:end="1925:50">

                <comment type="block" pos:start="1921:17" pos:end="1921:39">/* Positive offset.  */</comment>

                <expr_stmt pos:start="1923:17" pos:end="1923:35"><expr pos:start="1923:17" pos:end="1923:34"><name pos:start="1923:17" pos:end="1923:19">imm</name> <operator pos:start="1923:21" pos:end="1923:21">=</operator> <name pos:start="1923:23" pos:end="1923:26">insn</name> <operator pos:start="1923:28" pos:end="1923:28">&amp;</operator> <literal type="number" pos:start="1923:30" pos:end="1923:34">0xfff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1925:17" pos:end="1925:50"><expr pos:start="1925:17" pos:end="1925:49"><call pos:start="1925:17" pos:end="1925:49"><name pos:start="1925:17" pos:end="1925:32">tcg_gen_addi_i32</name><argument_list pos:start="1925:33" pos:end="1925:49">(<argument pos:start="1925:34" pos:end="1925:37"><expr pos:start="1925:34" pos:end="1925:37"><name pos:start="1925:34" pos:end="1925:37">addr</name></expr></argument>, <argument pos:start="1925:40" pos:end="1925:43"><expr pos:start="1925:40" pos:end="1925:43"><name pos:start="1925:40" pos:end="1925:43">addr</name></expr></argument>, <argument pos:start="1925:46" pos:end="1925:48"><expr pos:start="1925:46" pos:end="1925:48"><name pos:start="1925:46" pos:end="1925:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1927:15" pos:end="2007:13">else <block pos:start="1927:20" pos:end="2007:13">{<block_content pos:start="1929:17" pos:end="2005:17">

                <expr_stmt pos:start="1929:17" pos:end="1929:34"><expr pos:start="1929:17" pos:end="1929:33"><name pos:start="1929:17" pos:end="1929:19">imm</name> <operator pos:start="1929:21" pos:end="1929:21">=</operator> <name pos:start="1929:23" pos:end="1929:26">insn</name> <operator pos:start="1929:28" pos:end="1929:28">&amp;</operator> <literal type="number" pos:start="1929:30" pos:end="1929:33">0xff</literal></expr>;</expr_stmt>

                <switch pos:start="1931:17" pos:end="2005:17">switch <condition pos:start="1931:24" pos:end="1931:42">(<expr pos:start="1931:25" pos:end="1931:41"><operator pos:start="1931:25" pos:end="1931:25">(</operator><name pos:start="1931:26" pos:end="1931:29">insn</name> <operator pos:start="1931:31" pos:end="1931:32">&gt;&gt;</operator> <literal type="number" pos:start="1931:34" pos:end="1931:34">8</literal><operator pos:start="1931:35" pos:end="1931:35">)</operator> <operator pos:start="1931:37" pos:end="1931:37">&amp;</operator> <literal type="number" pos:start="1931:39" pos:end="1931:41">0xf</literal></expr>)</condition> <block pos:start="1931:44" pos:end="2005:17">{<block_content pos:start="1933:17" pos:end="2003:36">

                <case pos:start="1933:17" pos:end="1933:25">case <expr pos:start="1933:22" pos:end="1933:24"><literal type="number" pos:start="1933:22" pos:end="1933:24">0x0</literal></expr>:</case> <comment type="block" pos:start="1933:27" pos:end="1933:50">/* Shifted Register.  */</comment>

                    <expr_stmt pos:start="1935:21" pos:end="1935:46"><expr pos:start="1935:21" pos:end="1935:45"><name pos:start="1935:21" pos:end="1935:25">shift</name> <operator pos:start="1935:27" pos:end="1935:27">=</operator> <operator pos:start="1935:29" pos:end="1935:29">(</operator><name pos:start="1935:30" pos:end="1935:33">insn</name> <operator pos:start="1935:35" pos:end="1935:36">&gt;&gt;</operator> <literal type="number" pos:start="1935:38" pos:end="1935:38">4</literal><operator pos:start="1935:39" pos:end="1935:39">)</operator> <operator pos:start="1935:41" pos:end="1935:41">&amp;</operator> <literal type="number" pos:start="1935:43" pos:end="1935:45">0xf</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="1937:21" pos:end="1943:21"><if pos:start="1937:21" pos:end="1943:21">if <condition pos:start="1937:24" pos:end="1937:34">(<expr pos:start="1937:25" pos:end="1937:33"><name pos:start="1937:25" pos:end="1937:29">shift</name> <operator pos:start="1937:31" pos:end="1937:31">&gt;</operator> <literal type="number" pos:start="1937:33" pos:end="1937:33">3</literal></expr>)</condition> <block pos:start="1937:36" pos:end="1943:21">{<block_content pos:start="1939:25" pos:end="1941:40">

                        <expr_stmt pos:start="1939:25" pos:end="1939:48"><expr pos:start="1939:25" pos:end="1939:47"><call pos:start="1939:25" pos:end="1939:47"><name pos:start="1939:25" pos:end="1939:41">tcg_temp_free_i32</name><argument_list pos:start="1939:42" pos:end="1939:47">(<argument pos:start="1939:43" pos:end="1939:46"><expr pos:start="1939:43" pos:end="1939:46"><name pos:start="1939:43" pos:end="1939:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="1941:25" pos:end="1941:40">goto <name pos:start="1941:30" pos:end="1941:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1945:21" pos:end="1945:42"><expr pos:start="1945:21" pos:end="1945:41"><name pos:start="1945:21" pos:end="1945:23">tmp</name> <operator pos:start="1945:25" pos:end="1945:25">=</operator> <call pos:start="1945:27" pos:end="1945:41"><name pos:start="1945:27" pos:end="1945:34">load_reg</name><argument_list pos:start="1945:35" pos:end="1945:41">(<argument pos:start="1945:36" pos:end="1945:36"><expr pos:start="1945:36" pos:end="1945:36"><name pos:start="1945:36" pos:end="1945:36">s</name></expr></argument>, <argument pos:start="1945:39" pos:end="1945:40"><expr pos:start="1945:39" pos:end="1945:40"><name pos:start="1945:39" pos:end="1945:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1947:21" pos:end="1949:58"><if pos:start="1947:21" pos:end="1949:58">if <condition pos:start="1947:24" pos:end="1947:30">(<expr pos:start="1947:25" pos:end="1947:29"><name pos:start="1947:25" pos:end="1947:29">shift</name></expr>)</condition><block type="pseudo" pos:start="1949:25" pos:end="1949:58"><block_content pos:start="1949:25" pos:end="1949:58">

                        <expr_stmt pos:start="1949:25" pos:end="1949:58"><expr pos:start="1949:25" pos:end="1949:57"><call pos:start="1949:25" pos:end="1949:57"><name pos:start="1949:25" pos:end="1949:40">tcg_gen_shli_i32</name><argument_list pos:start="1949:41" pos:end="1949:57">(<argument pos:start="1949:42" pos:end="1949:44"><expr pos:start="1949:42" pos:end="1949:44"><name pos:start="1949:42" pos:end="1949:44">tmp</name></expr></argument>, <argument pos:start="1949:47" pos:end="1949:49"><expr pos:start="1949:47" pos:end="1949:49"><name pos:start="1949:47" pos:end="1949:49">tmp</name></expr></argument>, <argument pos:start="1949:52" pos:end="1949:56"><expr pos:start="1949:52" pos:end="1949:56"><name pos:start="1949:52" pos:end="1949:56">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="1951:21" pos:end="1951:53"><expr pos:start="1951:21" pos:end="1951:52"><call pos:start="1951:21" pos:end="1951:52"><name pos:start="1951:21" pos:end="1951:35">tcg_gen_add_i32</name><argument_list pos:start="1951:36" pos:end="1951:52">(<argument pos:start="1951:37" pos:end="1951:40"><expr pos:start="1951:37" pos:end="1951:40"><name pos:start="1951:37" pos:end="1951:40">addr</name></expr></argument>, <argument pos:start="1951:43" pos:end="1951:46"><expr pos:start="1951:43" pos:end="1951:46"><name pos:start="1951:43" pos:end="1951:46">addr</name></expr></argument>, <argument pos:start="1951:49" pos:end="1951:51"><expr pos:start="1951:49" pos:end="1951:51"><name pos:start="1951:49" pos:end="1951:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1953:21" pos:end="1953:43"><expr pos:start="1953:21" pos:end="1953:42"><call pos:start="1953:21" pos:end="1953:42"><name pos:start="1953:21" pos:end="1953:37">tcg_temp_free_i32</name><argument_list pos:start="1953:38" pos:end="1953:42">(<argument pos:start="1953:39" pos:end="1953:41"><expr pos:start="1953:39" pos:end="1953:41"><name pos:start="1953:39" pos:end="1953:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1955:21" pos:end="1955:26">break;</break>

                <case pos:start="1957:17" pos:end="1957:25">case <expr pos:start="1957:22" pos:end="1957:24"><literal type="number" pos:start="1957:22" pos:end="1957:24">0xc</literal></expr>:</case> <comment type="block" pos:start="1957:27" pos:end="1957:49">/* Negative offset.  */</comment>

                    <expr_stmt pos:start="1959:21" pos:end="1959:55"><expr pos:start="1959:21" pos:end="1959:54"><call pos:start="1959:21" pos:end="1959:54"><name pos:start="1959:21" pos:end="1959:36">tcg_gen_addi_i32</name><argument_list pos:start="1959:37" pos:end="1959:54">(<argument pos:start="1959:38" pos:end="1959:41"><expr pos:start="1959:38" pos:end="1959:41"><name pos:start="1959:38" pos:end="1959:41">addr</name></expr></argument>, <argument pos:start="1959:44" pos:end="1959:47"><expr pos:start="1959:44" pos:end="1959:47"><name pos:start="1959:44" pos:end="1959:47">addr</name></expr></argument>, <argument pos:start="1959:50" pos:end="1959:53"><expr pos:start="1959:50" pos:end="1959:53"><operator pos:start="1959:50" pos:end="1959:50">-</operator><name pos:start="1959:51" pos:end="1959:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1961:21" pos:end="1961:26">break;</break>

                <case pos:start="1963:17" pos:end="1963:25">case <expr pos:start="1963:22" pos:end="1963:24"><literal type="number" pos:start="1963:22" pos:end="1963:24">0xe</literal></expr>:</case> <comment type="block" pos:start="1963:27" pos:end="1963:48">/* User privilege.  */</comment>

                    <expr_stmt pos:start="1965:21" pos:end="1965:54"><expr pos:start="1965:21" pos:end="1965:53"><call pos:start="1965:21" pos:end="1965:53"><name pos:start="1965:21" pos:end="1965:36">tcg_gen_addi_i32</name><argument_list pos:start="1965:37" pos:end="1965:53">(<argument pos:start="1965:38" pos:end="1965:41"><expr pos:start="1965:38" pos:end="1965:41"><name pos:start="1965:38" pos:end="1965:41">addr</name></expr></argument>, <argument pos:start="1965:44" pos:end="1965:47"><expr pos:start="1965:44" pos:end="1965:47"><name pos:start="1965:44" pos:end="1965:47">addr</name></expr></argument>, <argument pos:start="1965:50" pos:end="1965:52"><expr pos:start="1965:50" pos:end="1965:52"><name pos:start="1965:50" pos:end="1965:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1967:21" pos:end="1967:29"><expr pos:start="1967:21" pos:end="1967:28"><name pos:start="1967:21" pos:end="1967:24">user</name> <operator pos:start="1967:26" pos:end="1967:26">=</operator> <literal type="number" pos:start="1967:28" pos:end="1967:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="1969:21" pos:end="1969:26">break;</break>

                <case pos:start="1971:17" pos:end="1971:25">case <expr pos:start="1971:22" pos:end="1971:24"><literal type="number" pos:start="1971:22" pos:end="1971:24">0x9</literal></expr>:</case> <comment type="block" pos:start="1971:27" pos:end="1971:48">/* Post-decrement.  */</comment>

                    <expr_stmt pos:start="1973:21" pos:end="1973:31"><expr pos:start="1973:21" pos:end="1973:30"><name pos:start="1973:21" pos:end="1973:23">imm</name> <operator pos:start="1973:25" pos:end="1973:25">=</operator> <operator pos:start="1973:27" pos:end="1973:27">-</operator><name pos:start="1973:28" pos:end="1973:30">imm</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="1975:21" pos:end="1975:40">/* Fall through.  */</comment>

                <case pos:start="1977:17" pos:end="1977:25">case <expr pos:start="1977:22" pos:end="1977:24"><literal type="number" pos:start="1977:22" pos:end="1977:24">0xb</literal></expr>:</case> <comment type="block" pos:start="1977:27" pos:end="1977:48">/* Post-increment.  */</comment>

                    <expr_stmt pos:start="1979:21" pos:end="1979:32"><expr pos:start="1979:21" pos:end="1979:31"><name pos:start="1979:21" pos:end="1979:27">postinc</name> <operator pos:start="1979:29" pos:end="1979:29">=</operator> <literal type="number" pos:start="1979:31" pos:end="1979:31">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1981:21" pos:end="1981:34"><expr pos:start="1981:21" pos:end="1981:33"><name pos:start="1981:21" pos:end="1981:29">writeback</name> <operator pos:start="1981:31" pos:end="1981:31">=</operator> <literal type="number" pos:start="1981:33" pos:end="1981:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="1983:21" pos:end="1983:26">break;</break>

                <case pos:start="1985:17" pos:end="1985:25">case <expr pos:start="1985:22" pos:end="1985:24"><literal type="number" pos:start="1985:22" pos:end="1985:24">0xd</literal></expr>:</case> <comment type="block" pos:start="1985:27" pos:end="1985:47">/* Pre-decrement.  */</comment>

                    <expr_stmt pos:start="1987:21" pos:end="1987:31"><expr pos:start="1987:21" pos:end="1987:30"><name pos:start="1987:21" pos:end="1987:23">imm</name> <operator pos:start="1987:25" pos:end="1987:25">=</operator> <operator pos:start="1987:27" pos:end="1987:27">-</operator><name pos:start="1987:28" pos:end="1987:30">imm</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="1989:21" pos:end="1989:40">/* Fall through.  */</comment>

                <case pos:start="1991:17" pos:end="1991:25">case <expr pos:start="1991:22" pos:end="1991:24"><literal type="number" pos:start="1991:22" pos:end="1991:24">0xf</literal></expr>:</case> <comment type="block" pos:start="1991:27" pos:end="1991:47">/* Pre-increment.  */</comment>

                    <expr_stmt pos:start="1993:21" pos:end="1993:54"><expr pos:start="1993:21" pos:end="1993:53"><call pos:start="1993:21" pos:end="1993:53"><name pos:start="1993:21" pos:end="1993:36">tcg_gen_addi_i32</name><argument_list pos:start="1993:37" pos:end="1993:53">(<argument pos:start="1993:38" pos:end="1993:41"><expr pos:start="1993:38" pos:end="1993:41"><name pos:start="1993:38" pos:end="1993:41">addr</name></expr></argument>, <argument pos:start="1993:44" pos:end="1993:47"><expr pos:start="1993:44" pos:end="1993:47"><name pos:start="1993:44" pos:end="1993:47">addr</name></expr></argument>, <argument pos:start="1993:50" pos:end="1993:52"><expr pos:start="1993:50" pos:end="1993:52"><name pos:start="1993:50" pos:end="1993:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1995:21" pos:end="1995:34"><expr pos:start="1995:21" pos:end="1995:33"><name pos:start="1995:21" pos:end="1995:29">writeback</name> <operator pos:start="1995:31" pos:end="1995:31">=</operator> <literal type="number" pos:start="1995:33" pos:end="1995:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="1997:21" pos:end="1997:26">break;</break>

                <default pos:start="1999:17" pos:end="1999:24">default:</default>

                    <expr_stmt pos:start="2001:21" pos:end="2001:44"><expr pos:start="2001:21" pos:end="2001:43"><call pos:start="2001:21" pos:end="2001:43"><name pos:start="2001:21" pos:end="2001:37">tcg_temp_free_i32</name><argument_list pos:start="2001:38" pos:end="2001:43">(<argument pos:start="2001:39" pos:end="2001:42"><expr pos:start="2001:39" pos:end="2001:42"><name pos:start="2001:39" pos:end="2001:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="2003:21" pos:end="2003:36">goto <name pos:start="2003:26" pos:end="2003:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2011:9" pos:end="2067:9"><if pos:start="2011:9" pos:end="2045:9">if <condition pos:start="2011:12" pos:end="2011:29">(<expr pos:start="2011:13" pos:end="2011:28"><name pos:start="2011:13" pos:end="2011:16">insn</name> <operator pos:start="2011:18" pos:end="2011:18">&amp;</operator> <operator pos:start="2011:20" pos:end="2011:20">(</operator><literal type="number" pos:start="2011:21" pos:end="2011:21">1</literal> <operator pos:start="2011:23" pos:end="2011:24">&lt;&lt;</operator> <literal type="number" pos:start="2011:26" pos:end="2011:27">20</literal><operator pos:start="2011:28" pos:end="2011:28">)</operator></expr>)</condition> <block pos:start="2011:31" pos:end="2045:9">{<block_content pos:start="2015:13" pos:end="2043:13">

            <comment type="block" pos:start="2013:13" pos:end="2013:24">/* Load.  */</comment>

            <switch pos:start="2015:13" pos:end="2033:13">switch <condition pos:start="2015:20" pos:end="2015:23">(<expr pos:start="2015:21" pos:end="2015:22"><name pos:start="2015:21" pos:end="2015:22">op</name></expr>)</condition> <block pos:start="2015:25" pos:end="2033:13">{<block_content pos:start="2017:13" pos:end="2031:32">

            <case pos:start="2017:13" pos:end="2017:19">case <expr pos:start="2017:18" pos:end="2017:18"><literal type="number" pos:start="2017:18" pos:end="2017:18">0</literal></expr>:</case> <expr_stmt pos:start="2017:21" pos:end="2017:47"><expr pos:start="2017:21" pos:end="2017:46"><name pos:start="2017:21" pos:end="2017:23">tmp</name> <operator pos:start="2017:25" pos:end="2017:25">=</operator> <call pos:start="2017:27" pos:end="2017:46"><name pos:start="2017:27" pos:end="2017:34">gen_ld8u</name><argument_list pos:start="2017:35" pos:end="2017:46">(<argument pos:start="2017:36" pos:end="2017:39"><expr pos:start="2017:36" pos:end="2017:39"><name pos:start="2017:36" pos:end="2017:39">addr</name></expr></argument>, <argument pos:start="2017:42" pos:end="2017:45"><expr pos:start="2017:42" pos:end="2017:45"><name pos:start="2017:42" pos:end="2017:45">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2017:49" pos:end="2017:54">break;</break>

            <case pos:start="2019:13" pos:end="2019:19">case <expr pos:start="2019:18" pos:end="2019:18"><literal type="number" pos:start="2019:18" pos:end="2019:18">4</literal></expr>:</case> <expr_stmt pos:start="2019:21" pos:end="2019:47"><expr pos:start="2019:21" pos:end="2019:46"><name pos:start="2019:21" pos:end="2019:23">tmp</name> <operator pos:start="2019:25" pos:end="2019:25">=</operator> <call pos:start="2019:27" pos:end="2019:46"><name pos:start="2019:27" pos:end="2019:34">gen_ld8s</name><argument_list pos:start="2019:35" pos:end="2019:46">(<argument pos:start="2019:36" pos:end="2019:39"><expr pos:start="2019:36" pos:end="2019:39"><name pos:start="2019:36" pos:end="2019:39">addr</name></expr></argument>, <argument pos:start="2019:42" pos:end="2019:45"><expr pos:start="2019:42" pos:end="2019:45"><name pos:start="2019:42" pos:end="2019:45">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2019:49" pos:end="2019:54">break;</break>

            <case pos:start="2021:13" pos:end="2021:19">case <expr pos:start="2021:18" pos:end="2021:18"><literal type="number" pos:start="2021:18" pos:end="2021:18">1</literal></expr>:</case> <expr_stmt pos:start="2021:21" pos:end="2021:48"><expr pos:start="2021:21" pos:end="2021:47"><name pos:start="2021:21" pos:end="2021:23">tmp</name> <operator pos:start="2021:25" pos:end="2021:25">=</operator> <call pos:start="2021:27" pos:end="2021:47"><name pos:start="2021:27" pos:end="2021:35">gen_ld16u</name><argument_list pos:start="2021:36" pos:end="2021:47">(<argument pos:start="2021:37" pos:end="2021:40"><expr pos:start="2021:37" pos:end="2021:40"><name pos:start="2021:37" pos:end="2021:40">addr</name></expr></argument>, <argument pos:start="2021:43" pos:end="2021:46"><expr pos:start="2021:43" pos:end="2021:46"><name pos:start="2021:43" pos:end="2021:46">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2021:50" pos:end="2021:55">break;</break>

            <case pos:start="2023:13" pos:end="2023:19">case <expr pos:start="2023:18" pos:end="2023:18"><literal type="number" pos:start="2023:18" pos:end="2023:18">5</literal></expr>:</case> <expr_stmt pos:start="2023:21" pos:end="2023:48"><expr pos:start="2023:21" pos:end="2023:47"><name pos:start="2023:21" pos:end="2023:23">tmp</name> <operator pos:start="2023:25" pos:end="2023:25">=</operator> <call pos:start="2023:27" pos:end="2023:47"><name pos:start="2023:27" pos:end="2023:35">gen_ld16s</name><argument_list pos:start="2023:36" pos:end="2023:47">(<argument pos:start="2023:37" pos:end="2023:40"><expr pos:start="2023:37" pos:end="2023:40"><name pos:start="2023:37" pos:end="2023:40">addr</name></expr></argument>, <argument pos:start="2023:43" pos:end="2023:46"><expr pos:start="2023:43" pos:end="2023:46"><name pos:start="2023:43" pos:end="2023:46">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2023:50" pos:end="2023:55">break;</break>

            <case pos:start="2025:13" pos:end="2025:19">case <expr pos:start="2025:18" pos:end="2025:18"><literal type="number" pos:start="2025:18" pos:end="2025:18">2</literal></expr>:</case> <expr_stmt pos:start="2025:21" pos:end="2025:47"><expr pos:start="2025:21" pos:end="2025:46"><name pos:start="2025:21" pos:end="2025:23">tmp</name> <operator pos:start="2025:25" pos:end="2025:25">=</operator> <call pos:start="2025:27" pos:end="2025:46"><name pos:start="2025:27" pos:end="2025:34">gen_ld32</name><argument_list pos:start="2025:35" pos:end="2025:46">(<argument pos:start="2025:36" pos:end="2025:39"><expr pos:start="2025:36" pos:end="2025:39"><name pos:start="2025:36" pos:end="2025:39">addr</name></expr></argument>, <argument pos:start="2025:42" pos:end="2025:45"><expr pos:start="2025:42" pos:end="2025:45"><name pos:start="2025:42" pos:end="2025:45">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2025:49" pos:end="2025:54">break;</break>

            <default pos:start="2027:13" pos:end="2027:20">default:</default>

                <expr_stmt pos:start="2029:17" pos:end="2029:40"><expr pos:start="2029:17" pos:end="2029:39"><call pos:start="2029:17" pos:end="2029:39"><name pos:start="2029:17" pos:end="2029:33">tcg_temp_free_i32</name><argument_list pos:start="2029:34" pos:end="2029:39">(<argument pos:start="2029:35" pos:end="2029:38"><expr pos:start="2029:35" pos:end="2029:38"><name pos:start="2029:35" pos:end="2029:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="2031:17" pos:end="2031:32">goto <name pos:start="2031:22" pos:end="2031:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <if_stmt pos:start="2035:13" pos:end="2043:13"><if pos:start="2035:13" pos:end="2039:13">if <condition pos:start="2035:16" pos:end="2035:25">(<expr pos:start="2035:17" pos:end="2035:24"><name pos:start="2035:17" pos:end="2035:18">rs</name> <operator pos:start="2035:20" pos:end="2035:21">==</operator> <literal type="number" pos:start="2035:23" pos:end="2035:24">15</literal></expr>)</condition> <block pos:start="2035:27" pos:end="2039:13">{<block_content pos:start="2037:17" pos:end="2037:31">

                <expr_stmt pos:start="2037:17" pos:end="2037:31"><expr pos:start="2037:17" pos:end="2037:30"><call pos:start="2037:17" pos:end="2037:30"><name pos:start="2037:17" pos:end="2037:22">gen_bx</name><argument_list pos:start="2037:23" pos:end="2037:30">(<argument pos:start="2037:24" pos:end="2037:24"><expr pos:start="2037:24" pos:end="2037:24"><name pos:start="2037:24" pos:end="2037:24">s</name></expr></argument>, <argument pos:start="2037:27" pos:end="2037:29"><expr pos:start="2037:27" pos:end="2037:29"><name pos:start="2037:27" pos:end="2037:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2039:15" pos:end="2043:13">else <block pos:start="2039:20" pos:end="2043:13">{<block_content pos:start="2041:17" pos:end="2041:38">

                <expr_stmt pos:start="2041:17" pos:end="2041:38"><expr pos:start="2041:17" pos:end="2041:37"><call pos:start="2041:17" pos:end="2041:37"><name pos:start="2041:17" pos:end="2041:25">store_reg</name><argument_list pos:start="2041:26" pos:end="2041:37">(<argument pos:start="2041:27" pos:end="2041:27"><expr pos:start="2041:27" pos:end="2041:27"><name pos:start="2041:27" pos:end="2041:27">s</name></expr></argument>, <argument pos:start="2041:30" pos:end="2041:31"><expr pos:start="2041:30" pos:end="2041:31"><name pos:start="2041:30" pos:end="2041:31">rs</name></expr></argument>, <argument pos:start="2041:34" pos:end="2041:36"><expr pos:start="2041:34" pos:end="2041:36"><name pos:start="2041:34" pos:end="2041:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2045:11" pos:end="2067:9">else <block pos:start="2045:16" pos:end="2067:9">{<block_content pos:start="2049:13" pos:end="2065:13">

            <comment type="block" pos:start="2047:13" pos:end="2047:25">/* Store.  */</comment>

            <expr_stmt pos:start="2049:13" pos:end="2049:34"><expr pos:start="2049:13" pos:end="2049:33"><name pos:start="2049:13" pos:end="2049:15">tmp</name> <operator pos:start="2049:17" pos:end="2049:17">=</operator> <call pos:start="2049:19" pos:end="2049:33"><name pos:start="2049:19" pos:end="2049:26">load_reg</name><argument_list pos:start="2049:27" pos:end="2049:33">(<argument pos:start="2049:28" pos:end="2049:28"><expr pos:start="2049:28" pos:end="2049:28"><name pos:start="2049:28" pos:end="2049:28">s</name></expr></argument>, <argument pos:start="2049:31" pos:end="2049:32"><expr pos:start="2049:31" pos:end="2049:32"><name pos:start="2049:31" pos:end="2049:32">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2051:13" pos:end="2065:13">switch <condition pos:start="2051:20" pos:end="2051:23">(<expr pos:start="2051:21" pos:end="2051:22"><name pos:start="2051:21" pos:end="2051:22">op</name></expr>)</condition> <block pos:start="2051:25" pos:end="2065:13">{<block_content pos:start="2053:13" pos:end="2063:32">

            <case pos:start="2053:13" pos:end="2053:19">case <expr pos:start="2053:18" pos:end="2053:18"><literal type="number" pos:start="2053:18" pos:end="2053:18">0</literal></expr>:</case> <expr_stmt pos:start="2053:21" pos:end="2053:45"><expr pos:start="2053:21" pos:end="2053:44"><call pos:start="2053:21" pos:end="2053:44"><name pos:start="2053:21" pos:end="2053:27">gen_st8</name><argument_list pos:start="2053:28" pos:end="2053:44">(<argument pos:start="2053:29" pos:end="2053:31"><expr pos:start="2053:29" pos:end="2053:31"><name pos:start="2053:29" pos:end="2053:31">tmp</name></expr></argument>, <argument pos:start="2053:34" pos:end="2053:37"><expr pos:start="2053:34" pos:end="2053:37"><name pos:start="2053:34" pos:end="2053:37">addr</name></expr></argument>, <argument pos:start="2053:40" pos:end="2053:43"><expr pos:start="2053:40" pos:end="2053:43"><name pos:start="2053:40" pos:end="2053:43">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2053:47" pos:end="2053:52">break;</break>

            <case pos:start="2055:13" pos:end="2055:19">case <expr pos:start="2055:18" pos:end="2055:18"><literal type="number" pos:start="2055:18" pos:end="2055:18">1</literal></expr>:</case> <expr_stmt pos:start="2055:21" pos:end="2055:46"><expr pos:start="2055:21" pos:end="2055:45"><call pos:start="2055:21" pos:end="2055:45"><name pos:start="2055:21" pos:end="2055:28">gen_st16</name><argument_list pos:start="2055:29" pos:end="2055:45">(<argument pos:start="2055:30" pos:end="2055:32"><expr pos:start="2055:30" pos:end="2055:32"><name pos:start="2055:30" pos:end="2055:32">tmp</name></expr></argument>, <argument pos:start="2055:35" pos:end="2055:38"><expr pos:start="2055:35" pos:end="2055:38"><name pos:start="2055:35" pos:end="2055:38">addr</name></expr></argument>, <argument pos:start="2055:41" pos:end="2055:44"><expr pos:start="2055:41" pos:end="2055:44"><name pos:start="2055:41" pos:end="2055:44">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2055:48" pos:end="2055:53">break;</break>

            <case pos:start="2057:13" pos:end="2057:19">case <expr pos:start="2057:18" pos:end="2057:18"><literal type="number" pos:start="2057:18" pos:end="2057:18">2</literal></expr>:</case> <expr_stmt pos:start="2057:21" pos:end="2057:46"><expr pos:start="2057:21" pos:end="2057:45"><call pos:start="2057:21" pos:end="2057:45"><name pos:start="2057:21" pos:end="2057:28">gen_st32</name><argument_list pos:start="2057:29" pos:end="2057:45">(<argument pos:start="2057:30" pos:end="2057:32"><expr pos:start="2057:30" pos:end="2057:32"><name pos:start="2057:30" pos:end="2057:32">tmp</name></expr></argument>, <argument pos:start="2057:35" pos:end="2057:38"><expr pos:start="2057:35" pos:end="2057:38"><name pos:start="2057:35" pos:end="2057:38">addr</name></expr></argument>, <argument pos:start="2057:41" pos:end="2057:44"><expr pos:start="2057:41" pos:end="2057:44"><name pos:start="2057:41" pos:end="2057:44">user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2057:48" pos:end="2057:53">break;</break>

            <default pos:start="2059:13" pos:end="2059:20">default:</default>

                <expr_stmt pos:start="2061:17" pos:end="2061:40"><expr pos:start="2061:17" pos:end="2061:39"><call pos:start="2061:17" pos:end="2061:39"><name pos:start="2061:17" pos:end="2061:33">tcg_temp_free_i32</name><argument_list pos:start="2061:34" pos:end="2061:39">(<argument pos:start="2061:35" pos:end="2061:38"><expr pos:start="2061:35" pos:end="2061:38"><name pos:start="2061:35" pos:end="2061:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="2063:17" pos:end="2063:32">goto <name pos:start="2063:22" pos:end="2063:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2069:9" pos:end="2071:46"><if pos:start="2069:9" pos:end="2071:46">if <condition pos:start="2069:12" pos:end="2069:20">(<expr pos:start="2069:13" pos:end="2069:19"><name pos:start="2069:13" pos:end="2069:19">postinc</name></expr>)</condition><block type="pseudo" pos:start="2071:13" pos:end="2071:46"><block_content pos:start="2071:13" pos:end="2071:46">

            <expr_stmt pos:start="2071:13" pos:end="2071:46"><expr pos:start="2071:13" pos:end="2071:45"><call pos:start="2071:13" pos:end="2071:45"><name pos:start="2071:13" pos:end="2071:28">tcg_gen_addi_i32</name><argument_list pos:start="2071:29" pos:end="2071:45">(<argument pos:start="2071:30" pos:end="2071:33"><expr pos:start="2071:30" pos:end="2071:33"><name pos:start="2071:30" pos:end="2071:33">addr</name></expr></argument>, <argument pos:start="2071:36" pos:end="2071:39"><expr pos:start="2071:36" pos:end="2071:39"><name pos:start="2071:36" pos:end="2071:39">addr</name></expr></argument>, <argument pos:start="2071:42" pos:end="2071:44"><expr pos:start="2071:42" pos:end="2071:44"><name pos:start="2071:42" pos:end="2071:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2073:9" pos:end="2081:9"><if pos:start="2073:9" pos:end="2077:9">if <condition pos:start="2073:12" pos:end="2073:22">(<expr pos:start="2073:13" pos:end="2073:21"><name pos:start="2073:13" pos:end="2073:21">writeback</name></expr>)</condition> <block pos:start="2073:24" pos:end="2077:9">{<block_content pos:start="2075:13" pos:end="2075:35">

            <expr_stmt pos:start="2075:13" pos:end="2075:35"><expr pos:start="2075:13" pos:end="2075:34"><call pos:start="2075:13" pos:end="2075:34"><name pos:start="2075:13" pos:end="2075:21">store_reg</name><argument_list pos:start="2075:22" pos:end="2075:34">(<argument pos:start="2075:23" pos:end="2075:23"><expr pos:start="2075:23" pos:end="2075:23"><name pos:start="2075:23" pos:end="2075:23">s</name></expr></argument>, <argument pos:start="2075:26" pos:end="2075:27"><expr pos:start="2075:26" pos:end="2075:27"><name pos:start="2075:26" pos:end="2075:27">rn</name></expr></argument>, <argument pos:start="2075:30" pos:end="2075:33"><expr pos:start="2075:30" pos:end="2075:33"><name pos:start="2075:30" pos:end="2075:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2077:11" pos:end="2081:9">else <block pos:start="2077:16" pos:end="2081:9">{<block_content pos:start="2079:13" pos:end="2079:36">

            <expr_stmt pos:start="2079:13" pos:end="2079:36"><expr pos:start="2079:13" pos:end="2079:35"><call pos:start="2079:13" pos:end="2079:35"><name pos:start="2079:13" pos:end="2079:29">tcg_temp_free_i32</name><argument_list pos:start="2079:30" pos:end="2079:35">(<argument pos:start="2079:31" pos:end="2079:34"><expr pos:start="2079:31" pos:end="2079:34"><name pos:start="2079:31" pos:end="2079:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2085:9" pos:end="2085:14">break;</break>

    <default pos:start="2087:5" pos:end="2087:12">default:</default>

        <goto pos:start="2089:9" pos:end="2089:24">goto <name pos:start="2089:14" pos:end="2089:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="2093:5" pos:end="2093:13">return <expr pos:start="2093:12" pos:end="2093:12"><literal type="number" pos:start="2093:12" pos:end="2093:12">0</literal></expr>;</return>

<label pos:start="2095:1" pos:end="2095:11"><name pos:start="2095:1" pos:end="2095:10">illegal_op</name>:</label>

    <return pos:start="2097:5" pos:end="2097:13">return <expr pos:start="2097:12" pos:end="2097:12"><literal type="number" pos:start="2097:12" pos:end="2097:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
