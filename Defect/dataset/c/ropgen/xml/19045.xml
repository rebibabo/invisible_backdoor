<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19045.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">SPARCCPU</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:29">sparc64_cpu_devinit</name><parameter_list pos:start="1:30" pos:end="3:80">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:51">cpu_model</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:59"><decl pos:start="3:31" pos:end="3:59"><type pos:start="3:31" pos:end="3:59"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:59">default_cpu_model</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:79"><decl pos:start="3:62" pos:end="3:79"><type pos:start="3:62" pos:end="3:79"><name pos:start="3:62" pos:end="3:69">uint64_t</name></type> <name pos:start="3:71" pos:end="3:79">prom_addr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:15">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SPARCCPU</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUSPARCState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">ResetData</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:25">reset_info</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type>   <name pos:start="15:16" pos:end="15:29">tick_frequency</name> <init pos:start="15:31" pos:end="15:45">= <expr pos:start="15:33" pos:end="15:45"><literal type="number" pos:start="15:33" pos:end="15:35">100</literal> <operator pos:start="15:37" pos:end="15:37">*</operator> <literal type="number" pos:start="15:39" pos:end="15:45">1000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type>  <name pos:start="17:15" pos:end="17:29">stick_frequency</name> <init pos:start="17:31" pos:end="17:45">= <expr pos:start="17:33" pos:end="17:45"><literal type="number" pos:start="17:33" pos:end="17:35">100</literal> <operator pos:start="17:37" pos:end="17:37">*</operator> <literal type="number" pos:start="17:39" pos:end="17:45">1000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:46"><decl pos:start="19:5" pos:end="19:45"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:29">hstick_frequency</name> <init pos:start="19:31" pos:end="19:45">= <expr pos:start="19:33" pos:end="19:45"><literal type="number" pos:start="19:33" pos:end="19:35">100</literal> <operator pos:start="19:37" pos:end="19:37">*</operator> <literal type="number" pos:start="19:39" pos:end="19:45">1000000</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:17">cpu_model</name> <operator pos:start="23:19" pos:end="23:20">==</operator> <name pos:start="23:22" pos:end="23:25">NULL</name></expr>)</condition> <block pos:start="23:28" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:38">

        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:37">default_cpu_model</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:65"><expr pos:start="29:5" pos:end="29:64"><name pos:start="29:5" pos:end="29:7">cpu</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:64"><name pos:start="29:11" pos:end="29:19">SPARC_CPU</name><argument_list pos:start="29:20" pos:end="29:64">(<argument pos:start="29:21" pos:end="29:63"><expr pos:start="29:21" pos:end="29:63"><call pos:start="29:21" pos:end="29:63"><name pos:start="29:21" pos:end="29:36">cpu_generic_init</name><argument_list pos:start="29:37" pos:end="29:63">(<argument pos:start="29:38" pos:end="29:51"><expr pos:start="29:38" pos:end="29:51"><name pos:start="29:38" pos:end="29:51">TYPE_SPARC_CPU</name></expr></argument>, <argument pos:start="29:54" pos:end="29:62"><expr pos:start="29:54" pos:end="29:62"><name pos:start="29:54" pos:end="29:62">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">cpu</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <name pos:start="31:16" pos:end="31:19">NULL</name></expr>)</condition> <block pos:start="31:22" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:16">

        <expr_stmt pos:start="33:9" pos:end="33:65"><expr pos:start="33:9" pos:end="33:64"><call pos:start="33:9" pos:end="33:64"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:64">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:63"><expr pos:start="33:25" pos:end="33:63"><literal type="string" pos:start="33:25" pos:end="33:63">"Unable to find Sparc CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:20"><expr pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:7">env</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <operator pos:start="39:11" pos:end="39:11">&amp;</operator><name pos:start="39:12" pos:end="39:19"><name pos:start="39:12" pos:end="39:14">cpu</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="47:49"><expr pos:start="43:5" pos:end="47:48"><name pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:13">tick</name></name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="47:48"><name pos:start="43:17" pos:end="43:32">cpu_timer_create</name><argument_list pos:start="43:33" pos:end="47:48">(<argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><literal type="string" pos:start="43:34" pos:end="43:39">"tick"</literal></expr></argument>, <argument pos:start="43:42" pos:end="43:44"><expr pos:start="43:42" pos:end="43:44"><name pos:start="43:42" pos:end="43:44">cpu</name></expr></argument>, <argument pos:start="43:47" pos:end="43:54"><expr pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:54">tick_irq</name></expr></argument>,

                                  <argument pos:start="45:35" pos:end="45:48"><expr pos:start="45:35" pos:end="45:48"><name pos:start="45:35" pos:end="45:48">tick_frequency</name></expr></argument>, <argument pos:start="45:51" pos:end="45:62"><expr pos:start="45:51" pos:end="45:62"><name pos:start="45:51" pos:end="45:62">TICK_INT_DIS</name></expr></argument>,

                                  <argument pos:start="47:35" pos:end="47:47"><expr pos:start="47:35" pos:end="47:47"><name pos:start="47:35" pos:end="47:47">TICK_NPT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="55:50"><expr pos:start="51:5" pos:end="55:49"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:7">env</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:14">stick</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="55:49"><name pos:start="51:18" pos:end="51:33">cpu_timer_create</name><argument_list pos:start="51:34" pos:end="55:49">(<argument pos:start="51:35" pos:end="51:41"><expr pos:start="51:35" pos:end="51:41"><literal type="string" pos:start="51:35" pos:end="51:41">"stick"</literal></expr></argument>, <argument pos:start="51:44" pos:end="51:46"><expr pos:start="51:44" pos:end="51:46"><name pos:start="51:44" pos:end="51:46">cpu</name></expr></argument>, <argument pos:start="51:49" pos:end="51:57"><expr pos:start="51:49" pos:end="51:57"><name pos:start="51:49" pos:end="51:57">stick_irq</name></expr></argument>,

                                   <argument pos:start="53:36" pos:end="53:50"><expr pos:start="53:36" pos:end="53:50"><name pos:start="53:36" pos:end="53:50">stick_frequency</name></expr></argument>, <argument pos:start="53:53" pos:end="53:64"><expr pos:start="53:53" pos:end="53:64"><name pos:start="53:53" pos:end="53:64">TICK_INT_DIS</name></expr></argument>,

                                   <argument pos:start="55:36" pos:end="55:48"><expr pos:start="55:36" pos:end="55:48"><name pos:start="55:36" pos:end="55:48">TICK_NPT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="63:51"><expr pos:start="59:5" pos:end="63:50"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:7">env</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:15">hstick</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="63:50"><name pos:start="59:19" pos:end="59:34">cpu_timer_create</name><argument_list pos:start="59:35" pos:end="63:50">(<argument pos:start="59:36" pos:end="59:43"><expr pos:start="59:36" pos:end="59:43"><literal type="string" pos:start="59:36" pos:end="59:43">"hstick"</literal></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><name pos:start="59:46" pos:end="59:48">cpu</name></expr></argument>, <argument pos:start="59:51" pos:end="59:60"><expr pos:start="59:51" pos:end="59:60"><name pos:start="59:51" pos:end="59:60">hstick_irq</name></expr></argument>,

                                    <argument pos:start="61:37" pos:end="61:52"><expr pos:start="61:37" pos:end="61:52"><name pos:start="61:37" pos:end="61:52">hstick_frequency</name></expr></argument>, <argument pos:start="61:55" pos:end="61:66"><expr pos:start="61:55" pos:end="61:66"><name pos:start="61:55" pos:end="61:66">TICK_INT_DIS</name></expr></argument>,

                                    <argument pos:start="63:37" pos:end="63:49"><expr pos:start="63:37" pos:end="63:49"><name pos:start="63:37" pos:end="63:49">TICK_NPT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:46"><expr pos:start="67:5" pos:end="67:45"><name pos:start="67:5" pos:end="67:14">reset_info</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:45"><name pos:start="67:18" pos:end="67:26">g_malloc0</name><argument_list pos:start="67:27" pos:end="67:45">(<argument pos:start="67:28" pos:end="67:44"><expr pos:start="67:28" pos:end="67:44"><sizeof pos:start="67:28" pos:end="67:44">sizeof<argument_list pos:start="67:34" pos:end="67:44">(<argument pos:start="67:35" pos:end="67:43"><expr pos:start="67:35" pos:end="67:43"><name pos:start="67:35" pos:end="67:43">ResetData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:14">reset_info</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:19">cpu</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:25">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:38"><expr pos:start="71:5" pos:end="71:37"><name pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:14">reset_info</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:25">prom_addr</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:37">prom_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:52"><expr pos:start="73:5" pos:end="73:51"><call pos:start="73:5" pos:end="73:51"><name pos:start="73:5" pos:end="73:23">qemu_register_reset</name><argument_list pos:start="73:24" pos:end="73:51">(<argument pos:start="73:25" pos:end="73:38"><expr pos:start="73:25" pos:end="73:38"><name pos:start="73:25" pos:end="73:38">main_cpu_reset</name></expr></argument>, <argument pos:start="73:41" pos:end="73:50"><expr pos:start="73:41" pos:end="73:50"><name pos:start="73:41" pos:end="73:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">cpu</name></expr>;</return>

</block_content>}</block></function>
</unit>
